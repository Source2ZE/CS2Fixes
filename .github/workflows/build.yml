name: Build and release

on:
  push:
    branches:
      - main
      - master
    tags:
      - '*'
  pull_request:
    branches:
      - main
      - master

jobs:
  build:
    name: Build
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os:
          - ubuntu-20.04
          # - windows-2019
        metamod-version:
          - f71a1d37ecdc0a663fbb763a19d7c4217e03f033
        protobuf-version:
          - v3.21.8
        protobuf-valve-version:
          - 4147ffc40b569b8b028f6bbc61c784f31e474096
        funchook-version:
          - 'v1.1.3'
        python-version:
          - '3.10'
        sdk:
          - cs2
        sdk-version:
          - 3903ac9d50c522969603af1885b83a63ef81ae06
        include:
          - os: ubuntu-20.04
            target-archs: x86_64
            platform: linux
            compiler_cc: gcc
            compiler_cxx: g++

          # - os: windows-2019
          #   target-archs: x86_64
          #   platform: windows
          #   compiler_cc: gcc
          #   compiler_cxx: g++

    steps:
      - name: Install Linux packages
        if: runner.os == 'Linux'
        run: |
          sudo apt update
          sudo apt install -yq --no-install-recommends g++-multilib ${{ matrix.compiler_cc }}

      - name: Select compiler
        if: startsWith(runner.os, 'Linux')
        run: |
          echo "CC=${{ matrix.compiler_cc }}" >> $GITHUB_ENV
          echo "CXX=${{ matrix.compiler_cxx }}" >> $GITHUB_ENV
          ${{ matrix.compiler_cc }} --version
          ${{ matrix.compiler_cxx }} --version

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
  
      - name: Checkout
        uses: actions/checkout@v4
        with:
          path: extension

      - name: Checkout Metamod
        uses: actions/checkout@v4
        with:
          repository: alliedmodders/metamod-source
          ref: ${{ matrix.metamod-version }}
          path: metamod-source
          submodules: recursive

      - name: Checkout hl2sdks
        uses: actions/checkout@v4
        with:
          repository: alliedmodders/hl2sdk
          ref: ${{ matrix.sdk-version }}
          path: hl2sdk-${{ matrix.sdk }}
          submodules: recursive

      - name: Checkout valve protobuf
        uses: actions/checkout@v4
        with:
          repository: SteamDatabase/GameTracking-CS2
          ref: ${{ matrix.protobuf-valve-version }}
          path: protobuf-valve
          submodules: recursive

      - name: Checkout protobuf
        uses: actions/checkout@v4
        with:
          repository: protocolbuffers/protobuf
          ref: ${{ matrix.protobuf-version }}
          path: protobuf
          submodules: recursive

      - name: Checkout funchook
        uses: actions/checkout@v4
        with:
          repository: kubo/funchook
          ref: ${{ matrix.funchook-version }}
          path: funchook
          submodules: recursive

      - name: Install AMBuild
        run: |
          python -m pip install wheel
          pip install git+https://github.com/alliedmodders/ambuild

      - name: Install funchook
        working-directory: funchook
        run: |
          mkdir -p build
          cd build
          cmake ../ -DCMAKE_BUILD_TYPE=Release -DCMAKE_POSITION_INDEPENDENT_CODE=ON -DCMAKE_CXX_STANDARD=17 -DCMAKE_INSTALL_PREFIX="$PWD"
          make -j 8
          make install

          # Install into project path
          rm -r ../../extension/vendor/funchook
          mkdir -p ../../extension/vendor/funchook
          cp -R lib ../../extension/vendor/funchook
          cp -R libdistorm.* ../../extension/vendor/funchook/lib
          cp -R include ../../extension/vendor/funchook

      - name: Install protobuf
        working-directory: protobuf
        run: |
          mkdir -p build
          cd build
          cmake ../ -DCMAKE_POSITION_INDEPENDENT_CODE=ON -Dprotobuf_BUILD_SHARED_LIBS=OFF -Dprotobuf_BUILD_TESTS=OFF -DCMAKE_CXX_STANDARD=17 -DCMAKE_INSTALL_PREFIX="$PWD"
          make -j 8
          make install

          # Conflict with tier0
          sed -i 's/const internal::ReflectionSchema\& schema,/const internal::ReflectionSchema\& schemaz,/g' include/google/protobuf/message.h

          # Install into project path
          rm -r ../../extension/vendor/protobuf-lib
          mkdir -p ../../extension/vendor/protobuf-lib
          rm -r ../../extension/vendor/protobuf-3.21.8
          mkdir -p ../../extension/vendor/protobuf-3.21.8/src
          cp -R lib/* ../../extension/vendor/protobuf-lib
          cp -R include/* ../../extension/vendor/protobuf-3.21.8/src

      - name: Install protobuf-valve
        working-directory: protobuf-valve
        run: |
          rm -r ../extension/protobuf
          mkdir -p ../extension/protobuf/generated
          cd Protobufs
          # Conflict of definitions
          rm enums_clientserver.proto
          rm steammessages_base.proto
          ../../protobuf/build/bin/protoc --cpp_out=$PWD/../../extension/protobuf/generated *.proto

      - name: Build
        working-directory: extension
        env:
          BREAKPAD_SYMBOL_SERVER: ${{ secrets.BREAKPAD_SYMBOL_SERVER }}
        run: |
          ls -all ../
          mkdir build && cd build
          python ../configure.py --enable-optimize --targets=${{ matrix.target-archs }} --sdks=${{ matrix.sdk }}
          ambuild

      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ github.event.repository.name }}-${{ matrix.platform }}
          path: extension/build/package


  release:
    name: Release
    if: startsWith(github.ref, 'refs/tags/')
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v3

      - name: Package
        run: |
          for folder in ./*; do
            if [ -d "$folder" ]; then
              echo "Processing folder: $folder"
              cd $folder
              tar -czf ../$folder.tar.gz -T <(\ls -1)
              cd ..
              sha256sum $folder.tar.gz > $folder.tar.gz.sha256
            fi
          done

      - name: Release
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: '*.tar.gz'
          tag: ${{ github.ref }}
          file_glob: true
