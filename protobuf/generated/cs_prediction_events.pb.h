// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cs_prediction_events.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_cs_5fprediction_5fevents_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_cs_5fprediction_5fevents_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021008 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "networkbasetypes.pb.h"
#include "prediction_events.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_cs_5fprediction_5fevents_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_cs_5fprediction_5fevents_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_cs_5fprediction_5fevents_2eproto;
class CCSPredictionEvent_AddAimPunch;
struct CCSPredictionEvent_AddAimPunchDefaultTypeInternal;
extern CCSPredictionEvent_AddAimPunchDefaultTypeInternal _CCSPredictionEvent_AddAimPunch_default_instance_;
class CCSPredictionEvent_DamageTag;
struct CCSPredictionEvent_DamageTagDefaultTypeInternal;
extern CCSPredictionEvent_DamageTagDefaultTypeInternal _CCSPredictionEvent_DamageTag_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::CCSPredictionEvent_AddAimPunch* Arena::CreateMaybeMessage<::CCSPredictionEvent_AddAimPunch>(Arena*);
template<> ::CCSPredictionEvent_DamageTag* Arena::CreateMaybeMessage<::CCSPredictionEvent_DamageTag>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

enum ECSPredictionEvents : int {
  CSPE_DamageTag = 1,
  CSPE_AddAimPunch = 3
};
bool ECSPredictionEvents_IsValid(int value);
constexpr ECSPredictionEvents ECSPredictionEvents_MIN = CSPE_DamageTag;
constexpr ECSPredictionEvents ECSPredictionEvents_MAX = CSPE_AddAimPunch;
constexpr int ECSPredictionEvents_ARRAYSIZE = ECSPredictionEvents_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ECSPredictionEvents_descriptor();
template<typename T>
inline const std::string& ECSPredictionEvents_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ECSPredictionEvents>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ECSPredictionEvents_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ECSPredictionEvents_descriptor(), enum_t_value);
}
inline bool ECSPredictionEvents_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ECSPredictionEvents* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ECSPredictionEvents>(
    ECSPredictionEvents_descriptor(), name, value);
}
// ===================================================================

class CCSPredictionEvent_DamageTag :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CCSPredictionEvent_DamageTag) */ {
 public:
  inline CCSPredictionEvent_DamageTag() : CCSPredictionEvent_DamageTag(nullptr) {}
  ~CCSPredictionEvent_DamageTag() override;
  explicit PROTOBUF_CONSTEXPR CCSPredictionEvent_DamageTag(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CCSPredictionEvent_DamageTag(const CCSPredictionEvent_DamageTag& from);
  CCSPredictionEvent_DamageTag(CCSPredictionEvent_DamageTag&& from) noexcept
    : CCSPredictionEvent_DamageTag() {
    *this = ::std::move(from);
  }

  inline CCSPredictionEvent_DamageTag& operator=(const CCSPredictionEvent_DamageTag& from) {
    CopyFrom(from);
    return *this;
  }
  inline CCSPredictionEvent_DamageTag& operator=(CCSPredictionEvent_DamageTag&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CCSPredictionEvent_DamageTag& default_instance() {
    return *internal_default_instance();
  }
  static inline const CCSPredictionEvent_DamageTag* internal_default_instance() {
    return reinterpret_cast<const CCSPredictionEvent_DamageTag*>(
               &_CCSPredictionEvent_DamageTag_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CCSPredictionEvent_DamageTag& a, CCSPredictionEvent_DamageTag& b) {
    a.Swap(&b);
  }
  inline void Swap(CCSPredictionEvent_DamageTag* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CCSPredictionEvent_DamageTag* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CCSPredictionEvent_DamageTag* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CCSPredictionEvent_DamageTag>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CCSPredictionEvent_DamageTag& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CCSPredictionEvent_DamageTag& from) {
    CCSPredictionEvent_DamageTag::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CCSPredictionEvent_DamageTag* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CCSPredictionEvent_DamageTag";
  }
  protected:
  explicit CCSPredictionEvent_DamageTag(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFlinchModSmallFieldNumber = 1,
    kFlinchModLargeFieldNumber = 2,
    kFriendlyFireDamageReductionRatioFieldNumber = 3,
  };
  // optional float flinch_mod_small = 1;
  bool has_flinch_mod_small() const;
  private:
  bool _internal_has_flinch_mod_small() const;
  public:
  void clear_flinch_mod_small();
  float flinch_mod_small() const;
  void set_flinch_mod_small(float value);
  private:
  float _internal_flinch_mod_small() const;
  void _internal_set_flinch_mod_small(float value);
  public:

  // optional float flinch_mod_large = 2;
  bool has_flinch_mod_large() const;
  private:
  bool _internal_has_flinch_mod_large() const;
  public:
  void clear_flinch_mod_large();
  float flinch_mod_large() const;
  void set_flinch_mod_large(float value);
  private:
  float _internal_flinch_mod_large() const;
  void _internal_set_flinch_mod_large(float value);
  public:

  // optional float friendly_fire_damage_reduction_ratio = 3;
  bool has_friendly_fire_damage_reduction_ratio() const;
  private:
  bool _internal_has_friendly_fire_damage_reduction_ratio() const;
  public:
  void clear_friendly_fire_damage_reduction_ratio();
  float friendly_fire_damage_reduction_ratio() const;
  void set_friendly_fire_damage_reduction_ratio(float value);
  private:
  float _internal_friendly_fire_damage_reduction_ratio() const;
  void _internal_set_friendly_fire_damage_reduction_ratio(float value);
  public:

  // @@protoc_insertion_point(class_scope:CCSPredictionEvent_DamageTag)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    float flinch_mod_small_;
    float flinch_mod_large_;
    float friendly_fire_damage_reduction_ratio_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cs_5fprediction_5fevents_2eproto;
};
// -------------------------------------------------------------------

class CCSPredictionEvent_AddAimPunch :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CCSPredictionEvent_AddAimPunch) */ {
 public:
  inline CCSPredictionEvent_AddAimPunch() : CCSPredictionEvent_AddAimPunch(nullptr) {}
  ~CCSPredictionEvent_AddAimPunch() override;
  explicit PROTOBUF_CONSTEXPR CCSPredictionEvent_AddAimPunch(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CCSPredictionEvent_AddAimPunch(const CCSPredictionEvent_AddAimPunch& from);
  CCSPredictionEvent_AddAimPunch(CCSPredictionEvent_AddAimPunch&& from) noexcept
    : CCSPredictionEvent_AddAimPunch() {
    *this = ::std::move(from);
  }

  inline CCSPredictionEvent_AddAimPunch& operator=(const CCSPredictionEvent_AddAimPunch& from) {
    CopyFrom(from);
    return *this;
  }
  inline CCSPredictionEvent_AddAimPunch& operator=(CCSPredictionEvent_AddAimPunch&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CCSPredictionEvent_AddAimPunch& default_instance() {
    return *internal_default_instance();
  }
  static inline const CCSPredictionEvent_AddAimPunch* internal_default_instance() {
    return reinterpret_cast<const CCSPredictionEvent_AddAimPunch*>(
               &_CCSPredictionEvent_AddAimPunch_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CCSPredictionEvent_AddAimPunch& a, CCSPredictionEvent_AddAimPunch& b) {
    a.Swap(&b);
  }
  inline void Swap(CCSPredictionEvent_AddAimPunch* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CCSPredictionEvent_AddAimPunch* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CCSPredictionEvent_AddAimPunch* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CCSPredictionEvent_AddAimPunch>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CCSPredictionEvent_AddAimPunch& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CCSPredictionEvent_AddAimPunch& from) {
    CCSPredictionEvent_AddAimPunch::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CCSPredictionEvent_AddAimPunch* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CCSPredictionEvent_AddAimPunch";
  }
  protected:
  explicit CCSPredictionEvent_AddAimPunch(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPunchAngleFieldNumber = 1,
    kWhenTickFieldNumber = 2,
    kWhenTickFracFieldNumber = 3,
  };
  // optional .CMsgQAngle punch_angle = 1;
  bool has_punch_angle() const;
  private:
  bool _internal_has_punch_angle() const;
  public:
  void clear_punch_angle();
  const ::CMsgQAngle& punch_angle() const;
  PROTOBUF_NODISCARD ::CMsgQAngle* release_punch_angle();
  ::CMsgQAngle* mutable_punch_angle();
  void set_allocated_punch_angle(::CMsgQAngle* punch_angle);
  private:
  const ::CMsgQAngle& _internal_punch_angle() const;
  ::CMsgQAngle* _internal_mutable_punch_angle();
  public:
  void unsafe_arena_set_allocated_punch_angle(
      ::CMsgQAngle* punch_angle);
  ::CMsgQAngle* unsafe_arena_release_punch_angle();

  // optional uint32 when_tick = 2;
  bool has_when_tick() const;
  private:
  bool _internal_has_when_tick() const;
  public:
  void clear_when_tick();
  uint32_t when_tick() const;
  void set_when_tick(uint32_t value);
  private:
  uint32_t _internal_when_tick() const;
  void _internal_set_when_tick(uint32_t value);
  public:

  // optional float when_tick_frac = 3;
  bool has_when_tick_frac() const;
  private:
  bool _internal_has_when_tick_frac() const;
  public:
  void clear_when_tick_frac();
  float when_tick_frac() const;
  void set_when_tick_frac(float value);
  private:
  float _internal_when_tick_frac() const;
  void _internal_set_when_tick_frac(float value);
  public:

  // @@protoc_insertion_point(class_scope:CCSPredictionEvent_AddAimPunch)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::CMsgQAngle* punch_angle_;
    uint32_t when_tick_;
    float when_tick_frac_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cs_5fprediction_5fevents_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CCSPredictionEvent_DamageTag

// optional float flinch_mod_small = 1;
inline bool CCSPredictionEvent_DamageTag::_internal_has_flinch_mod_small() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CCSPredictionEvent_DamageTag::has_flinch_mod_small() const {
  return _internal_has_flinch_mod_small();
}
inline void CCSPredictionEvent_DamageTag::clear_flinch_mod_small() {
  _impl_.flinch_mod_small_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline float CCSPredictionEvent_DamageTag::_internal_flinch_mod_small() const {
  return _impl_.flinch_mod_small_;
}
inline float CCSPredictionEvent_DamageTag::flinch_mod_small() const {
  // @@protoc_insertion_point(field_get:CCSPredictionEvent_DamageTag.flinch_mod_small)
  return _internal_flinch_mod_small();
}
inline void CCSPredictionEvent_DamageTag::_internal_set_flinch_mod_small(float value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.flinch_mod_small_ = value;
}
inline void CCSPredictionEvent_DamageTag::set_flinch_mod_small(float value) {
  _internal_set_flinch_mod_small(value);
  // @@protoc_insertion_point(field_set:CCSPredictionEvent_DamageTag.flinch_mod_small)
}

// optional float flinch_mod_large = 2;
inline bool CCSPredictionEvent_DamageTag::_internal_has_flinch_mod_large() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CCSPredictionEvent_DamageTag::has_flinch_mod_large() const {
  return _internal_has_flinch_mod_large();
}
inline void CCSPredictionEvent_DamageTag::clear_flinch_mod_large() {
  _impl_.flinch_mod_large_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline float CCSPredictionEvent_DamageTag::_internal_flinch_mod_large() const {
  return _impl_.flinch_mod_large_;
}
inline float CCSPredictionEvent_DamageTag::flinch_mod_large() const {
  // @@protoc_insertion_point(field_get:CCSPredictionEvent_DamageTag.flinch_mod_large)
  return _internal_flinch_mod_large();
}
inline void CCSPredictionEvent_DamageTag::_internal_set_flinch_mod_large(float value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.flinch_mod_large_ = value;
}
inline void CCSPredictionEvent_DamageTag::set_flinch_mod_large(float value) {
  _internal_set_flinch_mod_large(value);
  // @@protoc_insertion_point(field_set:CCSPredictionEvent_DamageTag.flinch_mod_large)
}

// optional float friendly_fire_damage_reduction_ratio = 3;
inline bool CCSPredictionEvent_DamageTag::_internal_has_friendly_fire_damage_reduction_ratio() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CCSPredictionEvent_DamageTag::has_friendly_fire_damage_reduction_ratio() const {
  return _internal_has_friendly_fire_damage_reduction_ratio();
}
inline void CCSPredictionEvent_DamageTag::clear_friendly_fire_damage_reduction_ratio() {
  _impl_.friendly_fire_damage_reduction_ratio_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline float CCSPredictionEvent_DamageTag::_internal_friendly_fire_damage_reduction_ratio() const {
  return _impl_.friendly_fire_damage_reduction_ratio_;
}
inline float CCSPredictionEvent_DamageTag::friendly_fire_damage_reduction_ratio() const {
  // @@protoc_insertion_point(field_get:CCSPredictionEvent_DamageTag.friendly_fire_damage_reduction_ratio)
  return _internal_friendly_fire_damage_reduction_ratio();
}
inline void CCSPredictionEvent_DamageTag::_internal_set_friendly_fire_damage_reduction_ratio(float value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.friendly_fire_damage_reduction_ratio_ = value;
}
inline void CCSPredictionEvent_DamageTag::set_friendly_fire_damage_reduction_ratio(float value) {
  _internal_set_friendly_fire_damage_reduction_ratio(value);
  // @@protoc_insertion_point(field_set:CCSPredictionEvent_DamageTag.friendly_fire_damage_reduction_ratio)
}

// -------------------------------------------------------------------

// CCSPredictionEvent_AddAimPunch

// optional .CMsgQAngle punch_angle = 1;
inline bool CCSPredictionEvent_AddAimPunch::_internal_has_punch_angle() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.punch_angle_ != nullptr);
  return value;
}
inline bool CCSPredictionEvent_AddAimPunch::has_punch_angle() const {
  return _internal_has_punch_angle();
}
inline const ::CMsgQAngle& CCSPredictionEvent_AddAimPunch::_internal_punch_angle() const {
  const ::CMsgQAngle* p = _impl_.punch_angle_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgQAngle&>(
      ::_CMsgQAngle_default_instance_);
}
inline const ::CMsgQAngle& CCSPredictionEvent_AddAimPunch::punch_angle() const {
  // @@protoc_insertion_point(field_get:CCSPredictionEvent_AddAimPunch.punch_angle)
  return _internal_punch_angle();
}
inline void CCSPredictionEvent_AddAimPunch::unsafe_arena_set_allocated_punch_angle(
    ::CMsgQAngle* punch_angle) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.punch_angle_);
  }
  _impl_.punch_angle_ = punch_angle;
  if (punch_angle) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CCSPredictionEvent_AddAimPunch.punch_angle)
}
inline ::CMsgQAngle* CCSPredictionEvent_AddAimPunch::release_punch_angle() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::CMsgQAngle* temp = _impl_.punch_angle_;
  _impl_.punch_angle_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CMsgQAngle* CCSPredictionEvent_AddAimPunch::unsafe_arena_release_punch_angle() {
  // @@protoc_insertion_point(field_release:CCSPredictionEvent_AddAimPunch.punch_angle)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::CMsgQAngle* temp = _impl_.punch_angle_;
  _impl_.punch_angle_ = nullptr;
  return temp;
}
inline ::CMsgQAngle* CCSPredictionEvent_AddAimPunch::_internal_mutable_punch_angle() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.punch_angle_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgQAngle>(GetArenaForAllocation());
    _impl_.punch_angle_ = p;
  }
  return _impl_.punch_angle_;
}
inline ::CMsgQAngle* CCSPredictionEvent_AddAimPunch::mutable_punch_angle() {
  ::CMsgQAngle* _msg = _internal_mutable_punch_angle();
  // @@protoc_insertion_point(field_mutable:CCSPredictionEvent_AddAimPunch.punch_angle)
  return _msg;
}
inline void CCSPredictionEvent_AddAimPunch::set_allocated_punch_angle(::CMsgQAngle* punch_angle) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.punch_angle_);
  }
  if (punch_angle) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(punch_angle));
    if (message_arena != submessage_arena) {
      punch_angle = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, punch_angle, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.punch_angle_ = punch_angle;
  // @@protoc_insertion_point(field_set_allocated:CCSPredictionEvent_AddAimPunch.punch_angle)
}

// optional uint32 when_tick = 2;
inline bool CCSPredictionEvent_AddAimPunch::_internal_has_when_tick() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CCSPredictionEvent_AddAimPunch::has_when_tick() const {
  return _internal_has_when_tick();
}
inline void CCSPredictionEvent_AddAimPunch::clear_when_tick() {
  _impl_.when_tick_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CCSPredictionEvent_AddAimPunch::_internal_when_tick() const {
  return _impl_.when_tick_;
}
inline uint32_t CCSPredictionEvent_AddAimPunch::when_tick() const {
  // @@protoc_insertion_point(field_get:CCSPredictionEvent_AddAimPunch.when_tick)
  return _internal_when_tick();
}
inline void CCSPredictionEvent_AddAimPunch::_internal_set_when_tick(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.when_tick_ = value;
}
inline void CCSPredictionEvent_AddAimPunch::set_when_tick(uint32_t value) {
  _internal_set_when_tick(value);
  // @@protoc_insertion_point(field_set:CCSPredictionEvent_AddAimPunch.when_tick)
}

// optional float when_tick_frac = 3;
inline bool CCSPredictionEvent_AddAimPunch::_internal_has_when_tick_frac() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CCSPredictionEvent_AddAimPunch::has_when_tick_frac() const {
  return _internal_has_when_tick_frac();
}
inline void CCSPredictionEvent_AddAimPunch::clear_when_tick_frac() {
  _impl_.when_tick_frac_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline float CCSPredictionEvent_AddAimPunch::_internal_when_tick_frac() const {
  return _impl_.when_tick_frac_;
}
inline float CCSPredictionEvent_AddAimPunch::when_tick_frac() const {
  // @@protoc_insertion_point(field_get:CCSPredictionEvent_AddAimPunch.when_tick_frac)
  return _internal_when_tick_frac();
}
inline void CCSPredictionEvent_AddAimPunch::_internal_set_when_tick_frac(float value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.when_tick_frac_ = value;
}
inline void CCSPredictionEvent_AddAimPunch::set_when_tick_frac(float value) {
  _internal_set_when_tick_frac(value);
  // @@protoc_insertion_point(field_set:CCSPredictionEvent_AddAimPunch.when_tick_frac)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::ECSPredictionEvents> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ECSPredictionEvents>() {
  return ::ECSPredictionEvents_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_cs_5fprediction_5fevents_2eproto
