// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gcsystemmsgs.proto

#include "gcsystemmsgs.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

PROTOBUF_CONSTEXPR CMsgGCHVacVerificationChange::CMsgGCHVacVerificationChange(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.steamid_)*/uint64_t{0u}
  , /*decltype(_impl_.appid_)*/0u
  , /*decltype(_impl_.is_verified_)*/false} {}
struct CMsgGCHVacVerificationChangeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgGCHVacVerificationChangeDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgGCHVacVerificationChangeDefaultTypeInternal() {}
  union {
    CMsgGCHVacVerificationChange _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgGCHVacVerificationChangeDefaultTypeInternal _CMsgGCHVacVerificationChange_default_instance_;
PROTOBUF_CONSTEXPR CMsgGCHAccountPhoneNumberChange::CMsgGCHAccountPhoneNumberChange(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.steamid_)*/uint64_t{0u}
  , /*decltype(_impl_.phone_id_)*/uint64_t{0u}
  , /*decltype(_impl_.appid_)*/0u
  , /*decltype(_impl_.is_verified_)*/false
  , /*decltype(_impl_.is_identifying_)*/false} {}
struct CMsgGCHAccountPhoneNumberChangeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgGCHAccountPhoneNumberChangeDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgGCHAccountPhoneNumberChangeDefaultTypeInternal() {}
  union {
    CMsgGCHAccountPhoneNumberChange _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgGCHAccountPhoneNumberChangeDefaultTypeInternal _CMsgGCHAccountPhoneNumberChange_default_instance_;
PROTOBUF_CONSTEXPR CMsgGCHInviteUserToLobby::CMsgGCHInviteUserToLobby(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.steamid_)*/uint64_t{0u}
  , /*decltype(_impl_.steamid_invited_)*/uint64_t{0u}
  , /*decltype(_impl_.steamid_lobby_)*/uint64_t{0u}
  , /*decltype(_impl_.appid_)*/0u} {}
struct CMsgGCHInviteUserToLobbyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgGCHInviteUserToLobbyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgGCHInviteUserToLobbyDefaultTypeInternal() {}
  union {
    CMsgGCHInviteUserToLobby _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgGCHInviteUserToLobbyDefaultTypeInternal _CMsgGCHInviteUserToLobby_default_instance_;
PROTOBUF_CONSTEXPR CMsgGCHRecurringSubscriptionStatusChange::CMsgGCHRecurringSubscriptionStatusChange(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.steamid_)*/uint64_t{0u}
  , /*decltype(_impl_.agreementid_)*/uint64_t{0u}
  , /*decltype(_impl_.appid_)*/0u
  , /*decltype(_impl_.active_)*/false} {}
struct CMsgGCHRecurringSubscriptionStatusChangeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgGCHRecurringSubscriptionStatusChangeDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgGCHRecurringSubscriptionStatusChangeDefaultTypeInternal() {}
  union {
    CMsgGCHRecurringSubscriptionStatusChange _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgGCHRecurringSubscriptionStatusChangeDefaultTypeInternal _CMsgGCHRecurringSubscriptionStatusChange_default_instance_;
PROTOBUF_CONSTEXPR CQuest_PublisherAddCommunityItemsToPlayer_Request_Attribute::CQuest_PublisherAddCommunityItemsToPlayer_Request_Attribute(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.value_)*/uint64_t{0u}
  , /*decltype(_impl_.attribute_)*/0u} {}
struct CQuest_PublisherAddCommunityItemsToPlayer_Request_AttributeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CQuest_PublisherAddCommunityItemsToPlayer_Request_AttributeDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CQuest_PublisherAddCommunityItemsToPlayer_Request_AttributeDefaultTypeInternal() {}
  union {
    CQuest_PublisherAddCommunityItemsToPlayer_Request_Attribute _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CQuest_PublisherAddCommunityItemsToPlayer_Request_AttributeDefaultTypeInternal _CQuest_PublisherAddCommunityItemsToPlayer_Request_Attribute_default_instance_;
PROTOBUF_CONSTEXPR CQuest_PublisherAddCommunityItemsToPlayer_Request::CQuest_PublisherAddCommunityItemsToPlayer_Request(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.attributes_)*/{}
  , /*decltype(_impl_.prefix_item_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.note_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.steamid_)*/uint64_t{0u}
  , /*decltype(_impl_.appid_)*/0u
  , /*decltype(_impl_.match_item_type_)*/0u
  , /*decltype(_impl_.match_item_class_)*/0u} {}
struct CQuest_PublisherAddCommunityItemsToPlayer_RequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CQuest_PublisherAddCommunityItemsToPlayer_RequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CQuest_PublisherAddCommunityItemsToPlayer_RequestDefaultTypeInternal() {}
  union {
    CQuest_PublisherAddCommunityItemsToPlayer_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CQuest_PublisherAddCommunityItemsToPlayer_RequestDefaultTypeInternal _CQuest_PublisherAddCommunityItemsToPlayer_Request_default_instance_;
PROTOBUF_CONSTEXPR CQuest_PublisherAddCommunityItemsToPlayer_Response::CQuest_PublisherAddCommunityItemsToPlayer_Response(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.items_matched_)*/0u
  , /*decltype(_impl_.items_granted_)*/0u} {}
struct CQuest_PublisherAddCommunityItemsToPlayer_ResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CQuest_PublisherAddCommunityItemsToPlayer_ResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CQuest_PublisherAddCommunityItemsToPlayer_ResponseDefaultTypeInternal() {}
  union {
    CQuest_PublisherAddCommunityItemsToPlayer_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CQuest_PublisherAddCommunityItemsToPlayer_ResponseDefaultTypeInternal _CQuest_PublisherAddCommunityItemsToPlayer_Response_default_instance_;
PROTOBUF_CONSTEXPR CCommunity_GamePersonalDataCategoryInfo::CCommunity_GamePersonalDataCategoryInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.type_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.localization_token_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.template_file_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct CCommunity_GamePersonalDataCategoryInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CCommunity_GamePersonalDataCategoryInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CCommunity_GamePersonalDataCategoryInfoDefaultTypeInternal() {}
  union {
    CCommunity_GamePersonalDataCategoryInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CCommunity_GamePersonalDataCategoryInfoDefaultTypeInternal _CCommunity_GamePersonalDataCategoryInfo_default_instance_;
PROTOBUF_CONSTEXPR CCommunity_GetGamePersonalDataCategories_Request::CCommunity_GetGamePersonalDataCategories_Request(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.appid_)*/0u} {}
struct CCommunity_GetGamePersonalDataCategories_RequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CCommunity_GetGamePersonalDataCategories_RequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CCommunity_GetGamePersonalDataCategories_RequestDefaultTypeInternal() {}
  union {
    CCommunity_GetGamePersonalDataCategories_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CCommunity_GetGamePersonalDataCategories_RequestDefaultTypeInternal _CCommunity_GetGamePersonalDataCategories_Request_default_instance_;
PROTOBUF_CONSTEXPR CCommunity_GetGamePersonalDataCategories_Response::CCommunity_GetGamePersonalDataCategories_Response(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.categories_)*/{}
  , /*decltype(_impl_.app_assets_basename_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct CCommunity_GetGamePersonalDataCategories_ResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CCommunity_GetGamePersonalDataCategories_ResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CCommunity_GetGamePersonalDataCategories_ResponseDefaultTypeInternal() {}
  union {
    CCommunity_GetGamePersonalDataCategories_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CCommunity_GetGamePersonalDataCategories_ResponseDefaultTypeInternal _CCommunity_GetGamePersonalDataCategories_Response_default_instance_;
PROTOBUF_CONSTEXPR CCommunity_GetGamePersonalDataEntries_Request::CCommunity_GetGamePersonalDataEntries_Request(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.type_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.continue_token_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.steamid_)*/uint64_t{0u}
  , /*decltype(_impl_.appid_)*/0u} {}
struct CCommunity_GetGamePersonalDataEntries_RequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CCommunity_GetGamePersonalDataEntries_RequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CCommunity_GetGamePersonalDataEntries_RequestDefaultTypeInternal() {}
  union {
    CCommunity_GetGamePersonalDataEntries_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CCommunity_GetGamePersonalDataEntries_RequestDefaultTypeInternal _CCommunity_GetGamePersonalDataEntries_Request_default_instance_;
PROTOBUF_CONSTEXPR CCommunity_GetGamePersonalDataEntries_Response::CCommunity_GetGamePersonalDataEntries_Response(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.entries_)*/{}
  , /*decltype(_impl_.continue_token_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.continue_text_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.gceresult_)*/0u} {}
struct CCommunity_GetGamePersonalDataEntries_ResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CCommunity_GetGamePersonalDataEntries_ResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CCommunity_GetGamePersonalDataEntries_ResponseDefaultTypeInternal() {}
  union {
    CCommunity_GetGamePersonalDataEntries_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CCommunity_GetGamePersonalDataEntries_ResponseDefaultTypeInternal _CCommunity_GetGamePersonalDataEntries_Response_default_instance_;
PROTOBUF_CONSTEXPR CCommunity_TerminateGamePersonalDataEntries_Request::CCommunity_TerminateGamePersonalDataEntries_Request(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.steamid_)*/uint64_t{0u}
  , /*decltype(_impl_.appid_)*/0u} {}
struct CCommunity_TerminateGamePersonalDataEntries_RequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CCommunity_TerminateGamePersonalDataEntries_RequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CCommunity_TerminateGamePersonalDataEntries_RequestDefaultTypeInternal() {}
  union {
    CCommunity_TerminateGamePersonalDataEntries_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CCommunity_TerminateGamePersonalDataEntries_RequestDefaultTypeInternal _CCommunity_TerminateGamePersonalDataEntries_Request_default_instance_;
PROTOBUF_CONSTEXPR CCommunity_TerminateGamePersonalDataEntries_Response::CCommunity_TerminateGamePersonalDataEntries_Response(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.gceresult_)*/0u} {}
struct CCommunity_TerminateGamePersonalDataEntries_ResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CCommunity_TerminateGamePersonalDataEntries_ResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CCommunity_TerminateGamePersonalDataEntries_ResponseDefaultTypeInternal() {}
  union {
    CCommunity_TerminateGamePersonalDataEntries_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CCommunity_TerminateGamePersonalDataEntries_ResponseDefaultTypeInternal _CCommunity_TerminateGamePersonalDataEntries_Response_default_instance_;
static ::_pb::Metadata file_level_metadata_gcsystemmsgs_2eproto[14];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_gcsystemmsgs_2eproto[6];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_gcsystemmsgs_2eproto = nullptr;

const uint32_t TableStruct_gcsystemmsgs_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::CMsgGCHVacVerificationChange, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCHVacVerificationChange, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgGCHVacVerificationChange, _impl_.steamid_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCHVacVerificationChange, _impl_.appid_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCHVacVerificationChange, _impl_.is_verified_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CMsgGCHAccountPhoneNumberChange, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCHAccountPhoneNumberChange, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgGCHAccountPhoneNumberChange, _impl_.steamid_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCHAccountPhoneNumberChange, _impl_.appid_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCHAccountPhoneNumberChange, _impl_.phone_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCHAccountPhoneNumberChange, _impl_.is_verified_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCHAccountPhoneNumberChange, _impl_.is_identifying_),
  0,
  2,
  1,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::CMsgGCHInviteUserToLobby, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCHInviteUserToLobby, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgGCHInviteUserToLobby, _impl_.steamid_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCHInviteUserToLobby, _impl_.appid_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCHInviteUserToLobby, _impl_.steamid_invited_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCHInviteUserToLobby, _impl_.steamid_lobby_),
  0,
  3,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CMsgGCHRecurringSubscriptionStatusChange, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCHRecurringSubscriptionStatusChange, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgGCHRecurringSubscriptionStatusChange, _impl_.steamid_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCHRecurringSubscriptionStatusChange, _impl_.appid_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCHRecurringSubscriptionStatusChange, _impl_.agreementid_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCHRecurringSubscriptionStatusChange, _impl_.active_),
  0,
  2,
  1,
  3,
  PROTOBUF_FIELD_OFFSET(::CQuest_PublisherAddCommunityItemsToPlayer_Request_Attribute, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CQuest_PublisherAddCommunityItemsToPlayer_Request_Attribute, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CQuest_PublisherAddCommunityItemsToPlayer_Request_Attribute, _impl_.attribute_),
  PROTOBUF_FIELD_OFFSET(::CQuest_PublisherAddCommunityItemsToPlayer_Request_Attribute, _impl_.value_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::CQuest_PublisherAddCommunityItemsToPlayer_Request, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CQuest_PublisherAddCommunityItemsToPlayer_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CQuest_PublisherAddCommunityItemsToPlayer_Request, _impl_.steamid_),
  PROTOBUF_FIELD_OFFSET(::CQuest_PublisherAddCommunityItemsToPlayer_Request, _impl_.appid_),
  PROTOBUF_FIELD_OFFSET(::CQuest_PublisherAddCommunityItemsToPlayer_Request, _impl_.match_item_type_),
  PROTOBUF_FIELD_OFFSET(::CQuest_PublisherAddCommunityItemsToPlayer_Request, _impl_.match_item_class_),
  PROTOBUF_FIELD_OFFSET(::CQuest_PublisherAddCommunityItemsToPlayer_Request, _impl_.prefix_item_name_),
  PROTOBUF_FIELD_OFFSET(::CQuest_PublisherAddCommunityItemsToPlayer_Request, _impl_.attributes_),
  PROTOBUF_FIELD_OFFSET(::CQuest_PublisherAddCommunityItemsToPlayer_Request, _impl_.note_),
  2,
  3,
  4,
  5,
  0,
  ~0u,
  1,
  PROTOBUF_FIELD_OFFSET(::CQuest_PublisherAddCommunityItemsToPlayer_Response, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CQuest_PublisherAddCommunityItemsToPlayer_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CQuest_PublisherAddCommunityItemsToPlayer_Response, _impl_.items_matched_),
  PROTOBUF_FIELD_OFFSET(::CQuest_PublisherAddCommunityItemsToPlayer_Response, _impl_.items_granted_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CCommunity_GamePersonalDataCategoryInfo, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CCommunity_GamePersonalDataCategoryInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CCommunity_GamePersonalDataCategoryInfo, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::CCommunity_GamePersonalDataCategoryInfo, _impl_.localization_token_),
  PROTOBUF_FIELD_OFFSET(::CCommunity_GamePersonalDataCategoryInfo, _impl_.template_file_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CCommunity_GetGamePersonalDataCategories_Request, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CCommunity_GetGamePersonalDataCategories_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CCommunity_GetGamePersonalDataCategories_Request, _impl_.appid_),
  0,
  PROTOBUF_FIELD_OFFSET(::CCommunity_GetGamePersonalDataCategories_Response, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CCommunity_GetGamePersonalDataCategories_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CCommunity_GetGamePersonalDataCategories_Response, _impl_.categories_),
  PROTOBUF_FIELD_OFFSET(::CCommunity_GetGamePersonalDataCategories_Response, _impl_.app_assets_basename_),
  ~0u,
  0,
  PROTOBUF_FIELD_OFFSET(::CCommunity_GetGamePersonalDataEntries_Request, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CCommunity_GetGamePersonalDataEntries_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CCommunity_GetGamePersonalDataEntries_Request, _impl_.appid_),
  PROTOBUF_FIELD_OFFSET(::CCommunity_GetGamePersonalDataEntries_Request, _impl_.steamid_),
  PROTOBUF_FIELD_OFFSET(::CCommunity_GetGamePersonalDataEntries_Request, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::CCommunity_GetGamePersonalDataEntries_Request, _impl_.continue_token_),
  3,
  2,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CCommunity_GetGamePersonalDataEntries_Response, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CCommunity_GetGamePersonalDataEntries_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CCommunity_GetGamePersonalDataEntries_Response, _impl_.gceresult_),
  PROTOBUF_FIELD_OFFSET(::CCommunity_GetGamePersonalDataEntries_Response, _impl_.entries_),
  PROTOBUF_FIELD_OFFSET(::CCommunity_GetGamePersonalDataEntries_Response, _impl_.continue_token_),
  PROTOBUF_FIELD_OFFSET(::CCommunity_GetGamePersonalDataEntries_Response, _impl_.continue_text_),
  2,
  ~0u,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CCommunity_TerminateGamePersonalDataEntries_Request, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CCommunity_TerminateGamePersonalDataEntries_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CCommunity_TerminateGamePersonalDataEntries_Request, _impl_.appid_),
  PROTOBUF_FIELD_OFFSET(::CCommunity_TerminateGamePersonalDataEntries_Request, _impl_.steamid_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::CCommunity_TerminateGamePersonalDataEntries_Response, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CCommunity_TerminateGamePersonalDataEntries_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CCommunity_TerminateGamePersonalDataEntries_Response, _impl_.gceresult_),
  0,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 9, -1, sizeof(::CMsgGCHVacVerificationChange)},
  { 12, 23, -1, sizeof(::CMsgGCHAccountPhoneNumberChange)},
  { 28, 38, -1, sizeof(::CMsgGCHInviteUserToLobby)},
  { 42, 52, -1, sizeof(::CMsgGCHRecurringSubscriptionStatusChange)},
  { 56, 64, -1, sizeof(::CQuest_PublisherAddCommunityItemsToPlayer_Request_Attribute)},
  { 66, 79, -1, sizeof(::CQuest_PublisherAddCommunityItemsToPlayer_Request)},
  { 86, 94, -1, sizeof(::CQuest_PublisherAddCommunityItemsToPlayer_Response)},
  { 96, 105, -1, sizeof(::CCommunity_GamePersonalDataCategoryInfo)},
  { 108, 115, -1, sizeof(::CCommunity_GetGamePersonalDataCategories_Request)},
  { 116, 124, -1, sizeof(::CCommunity_GetGamePersonalDataCategories_Response)},
  { 126, 136, -1, sizeof(::CCommunity_GetGamePersonalDataEntries_Request)},
  { 140, 150, -1, sizeof(::CCommunity_GetGamePersonalDataEntries_Response)},
  { 154, 162, -1, sizeof(::CCommunity_TerminateGamePersonalDataEntries_Request)},
  { 164, 171, -1, sizeof(::CCommunity_TerminateGamePersonalDataEntries_Response)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::_CMsgGCHVacVerificationChange_default_instance_._instance,
  &::_CMsgGCHAccountPhoneNumberChange_default_instance_._instance,
  &::_CMsgGCHInviteUserToLobby_default_instance_._instance,
  &::_CMsgGCHRecurringSubscriptionStatusChange_default_instance_._instance,
  &::_CQuest_PublisherAddCommunityItemsToPlayer_Request_Attribute_default_instance_._instance,
  &::_CQuest_PublisherAddCommunityItemsToPlayer_Request_default_instance_._instance,
  &::_CQuest_PublisherAddCommunityItemsToPlayer_Response_default_instance_._instance,
  &::_CCommunity_GamePersonalDataCategoryInfo_default_instance_._instance,
  &::_CCommunity_GetGamePersonalDataCategories_Request_default_instance_._instance,
  &::_CCommunity_GetGamePersonalDataCategories_Response_default_instance_._instance,
  &::_CCommunity_GetGamePersonalDataEntries_Request_default_instance_._instance,
  &::_CCommunity_GetGamePersonalDataEntries_Response_default_instance_._instance,
  &::_CCommunity_TerminateGamePersonalDataEntries_Request_default_instance_._instance,
  &::_CCommunity_TerminateGamePersonalDataEntries_Response_default_instance_._instance,
};

const char descriptor_table_protodef_gcsystemmsgs_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\022gcsystemmsgs.proto\"S\n\034CMsgGCHVacVerifi"
  "cationChange\022\017\n\007steamid\030\001 \001(\006\022\r\n\005appid\030\002"
  " \001(\r\022\023\n\013is_verified\030\003 \001(\010\"\200\001\n\037CMsgGCHAcc"
  "ountPhoneNumberChange\022\017\n\007steamid\030\001 \001(\006\022\r"
  "\n\005appid\030\002 \001(\r\022\020\n\010phone_id\030\003 \001(\004\022\023\n\013is_ve"
  "rified\030\004 \001(\010\022\026\n\016is_identifying\030\005 \001(\010\"j\n\030"
  "CMsgGCHInviteUserToLobby\022\017\n\007steamid\030\001 \001("
  "\006\022\r\n\005appid\030\002 \001(\r\022\027\n\017steamid_invited\030\003 \001("
  "\006\022\025\n\rsteamid_lobby\030\004 \001(\006\"o\n(CMsgGCHRecur"
  "ringSubscriptionStatusChange\022\017\n\007steamid\030"
  "\001 \001(\006\022\r\n\005appid\030\002 \001(\r\022\023\n\013agreementid\030\003 \001("
  "\006\022\016\n\006active\030\004 \001(\010\"\257\002\n1CQuest_PublisherAd"
  "dCommunityItemsToPlayer_Request\022\017\n\007steam"
  "id\030\001 \001(\004\022\r\n\005appid\030\002 \001(\r\022\027\n\017match_item_ty"
  "pe\030\003 \001(\r\022\030\n\020match_item_class\030\004 \001(\r\022\030\n\020pr"
  "efix_item_name\030\005 \001(\t\022P\n\nattributes\030\006 \003(\013"
  "2<.CQuest_PublisherAddCommunityItemsToPl"
  "ayer_Request.Attribute\022\014\n\004note\030\007 \001(\t\032-\n\t"
  "Attribute\022\021\n\tattribute\030\001 \001(\r\022\r\n\005value\030\002 "
  "\001(\004\"b\n2CQuest_PublisherAddCommunityItems"
  "ToPlayer_Response\022\025\n\ritems_matched\030\001 \001(\r"
  "\022\025\n\ritems_granted\030\002 \001(\r\"j\n\'CCommunity_Ga"
  "mePersonalDataCategoryInfo\022\014\n\004type\030\001 \001(\t"
  "\022\032\n\022localization_token\030\002 \001(\t\022\025\n\rtemplate"
  "_file\030\003 \001(\t\"A\n0CCommunity_GetGamePersona"
  "lDataCategories_Request\022\r\n\005appid\030\001 \001(\r\"\216"
  "\001\n1CCommunity_GetGamePersonalDataCategor"
  "ies_Response\022<\n\ncategories\030\001 \003(\0132(.CComm"
  "unity_GamePersonalDataCategoryInfo\022\033\n\023ap"
  "p_assets_basename\030\002 \001(\t\"u\n-CCommunity_Ge"
  "tGamePersonalDataEntries_Request\022\r\n\005appi"
  "d\030\001 \001(\r\022\017\n\007steamid\030\002 \001(\004\022\014\n\004type\030\003 \001(\t\022\026"
  "\n\016continue_token\030\004 \001(\t\"\203\001\n.CCommunity_Ge"
  "tGamePersonalDataEntries_Response\022\021\n\tgce"
  "result\030\001 \001(\r\022\017\n\007entries\030\002 \003(\t\022\026\n\016continu"
  "e_token\030\003 \001(\t\022\025\n\rcontinue_text\030\004 \001(\t\"U\n3"
  "CCommunity_TerminateGamePersonalDataEntr"
  "ies_Request\022\r\n\005appid\030\001 \001(\r\022\017\n\007steamid\030\002 "
  "\001(\004\"I\n4CCommunity_TerminateGamePersonalD"
  "ataEntries_Response\022\021\n\tgceresult\030\001 \001(\r*\302"
  "\030\n\014EGCSystemMsg\022\023\n\017k_EGCMsgInvalid\020\000\022\021\n\r"
  "k_EGCMsgMulti\020\001\022\030\n\024k_EGCMsgGenericReply\020"
  "\n\022\026\n\022k_EGCMsgSystemBase\0202\022\036\n\032k_EGCMsgAch"
  "ievementAwarded\0203\022\026\n\022k_EGCMsgConCommand\020"
  "4\022\030\n\024k_EGCMsgStartPlaying\0205\022\027\n\023k_EGCMsgS"
  "topPlaying\0206\022\033\n\027k_EGCMsgStartGameserver\020"
  "7\022\032\n\026k_EGCMsgStopGameserver\0208\022\025\n\021k_EGCMs"
  "gWGRequest\0209\022\026\n\022k_EGCMsgWGResponse\020:\022\"\n\036"
  "k_EGCMsgGetUserGameStatsSchema\020;\022*\n&k_EG"
  "CMsgGetUserGameStatsSchemaResponse\020<\022\"\n\036"
  "k_EGCMsgGetUserStatsDEPRECATED\020=\022 \n\034k_EG"
  "CMsgGetUserStatsResponse\020>\022\032\n\026k_EGCMsgAp"
  "pInfoUpdated\020\?\022\033\n\027k_EGCMsgValidateSessio"
  "n\020@\022#\n\037k_EGCMsgValidateSessionResponse\020A"
  "\022\"\n\036k_EGCMsgLookupAccountFromInput\020B\022\033\n\027"
  "k_EGCMsgSendHTTPRequest\020C\022#\n\037k_EGCMsgSen"
  "dHTTPRequestResponse\020D\022\030\n\024k_EGCMsgPreTes"
  "tSetup\020E\022\037\n\033k_EGCMsgRecordSupportAction\020"
  "F\022(\n$k_EGCMsgGetAccountDetails_DEPRECATE"
  "D\020G\022\"\n\036k_EGCMsgReceiveInterAppMessage\020I\022"
  "\030\n\024k_EGCMsgFindAccounts\020J\022\025\n\021k_EGCMsgPos"
  "tAlert\020K\022\027\n\023k_EGCMsgGetLicenses\020L\022\030\n\024k_E"
  "GCMsgGetUserStats\020M\022\027\n\023k_EGCMsgGetComman"
  "ds\020N\022\037\n\033k_EGCMsgGetCommandsResponse\020O\022\032\n"
  "\026k_EGCMsgAddFreeLicense\020P\022\"\n\036k_EGCMsgAdd"
  "FreeLicenseResponse\020Q\022\031\n\025k_EGCMsgGetIPLo"
  "cation\020R\022!\n\035k_EGCMsgGetIPLocationRespons"
  "e\020S\022\035\n\031k_EGCMsgSystemStatsSchema\020T\022\032\n\026k_"
  "EGCMsgGetSystemStats\020U\022\"\n\036k_EGCMsgGetSys"
  "temStatsResponse\020V\022\025\n\021k_EGCMsgSendEmail\020"
  "W\022\035\n\031k_EGCMsgSendEmailResponse\020X\022\034\n\030k_EG"
  "CMsgGetEmailTemplate\020Y\022$\n k_EGCMsgGetEma"
  "ilTemplateResponse\020Z\022\032\n\026k_EGCMsgGrantGue"
  "stPass\020[\022\"\n\036k_EGCMsgGrantGuestPassRespon"
  "se\020\\\022\035\n\031k_EGCMsgGetAccountDetails\020]\022%\n!k"
  "_EGCMsgGetAccountDetailsResponse\020^\022\033\n\027k_"
  "EGCMsgGetPersonaNames\020_\022#\n\037k_EGCMsgGetPe"
  "rsonaNamesResponse\020`\022\030\n\024k_EGCMsgMultiple"
  "xMsg\020a\022 \n\034k_EGCMsgMultiplexMsgResponse\020b"
  "\022$\n k_EGCMsgWebAPIRegisterInterfaces\020e\022\034"
  "\n\030k_EGCMsgWebAPIJobRequest\020f\022(\n$k_EGCMsg"
  "WebAPIJobRequestHttpResponse\020h\022+\n\'k_EGCM"
  "sgWebAPIJobRequestForwardResponse\020i\022\031\n\024k"
  "_EGCMsgMemCachedGet\020\310\001\022!\n\034k_EGCMsgMemCac"
  "hedGetResponse\020\311\001\022\031\n\024k_EGCMsgMemCachedSe"
  "t\020\312\001\022\034\n\027k_EGCMsgMemCachedDelete\020\313\001\022\033\n\026k_"
  "EGCMsgMemCachedStats\020\314\001\022#\n\036k_EGCMsgMemCa"
  "chedStatsResponse\020\315\001\022\037\n\032k_EGCMsgMasterSe"
  "tDirectory\020\334\001\022\'\n\"k_EGCMsgMasterSetDirect"
  "oryResponse\020\335\001\022#\n\036k_EGCMsgMasterSetWebAP"
  "IRouting\020\336\001\022+\n&k_EGCMsgMasterSetWebAPIRo"
  "utingResponse\020\337\001\022&\n!k_EGCMsgMasterSetCli"
  "entMsgRouting\020\340\001\022.\n)k_EGCMsgMasterSetCli"
  "entMsgRoutingResponse\020\341\001\022\027\n\022k_EGCMsgSetO"
  "ptions\020\342\001\022\037\n\032k_EGCMsgSetOptionsResponse\020"
  "\343\001\022\030\n\023k_EGCMsgSystemBase2\020\364\003\022#\n\036k_EGCMsg"
  "GetPurchaseTrustStatus\020\365\003\022+\n&k_EGCMsgGet"
  "PurchaseTrustStatusResponse\020\366\003\022\032\n\025k_EGCM"
  "sgUpdateSession\020\367\003\022%\n k_EGCMsgGCAccountV"
  "acStatusChange\020\370\003\022\034\n\027k_EGCMsgCheckFriend"
  "ship\020\371\003\022$\n\037k_EGCMsgCheckFriendshipRespon"
  "se\020\372\003\022\"\n\035k_EGCMsgGetPartnerAccountLink\020\373"
  "\003\022*\n%k_EGCMsgGetPartnerAccountLinkRespon"
  "se\020\374\003\022\037\n\032k_EGCMsgDPPartnerMicroTxns\020\200\004\022\'"
  "\n\"k_EGCMsgDPPartnerMicroTxnsResponse\020\201\004\022"
  "\"\n\035k_EGCMsgVacVerificationChange\020\206\004\022%\n k"
  "_EGCMsgAccountPhoneNumberChange\020\207\004\022\036\n\031k_"
  "EGCMsgInviteUserToLobby\020\213\004\0221\n,k_EGCMsgGe"
  "tGamePersonalDataCategoriesRequest\020\214\004\0222\n"
  "-k_EGCMsgGetGamePersonalDataCategoriesRe"
  "sponse\020\215\004\022.\n)k_EGCMsgGetGamePersonalData"
  "EntriesRequest\020\216\004\022/\n*k_EGCMsgGetGamePers"
  "onalDataEntriesResponse\020\217\004\0224\n/k_EGCMsgTe"
  "rminateGamePersonalDataEntriesRequest\020\220\004"
  "\0225\n0k_EGCMsgTerminateGamePersonalDataEnt"
  "riesResponse\020\221\004\022.\n)k_EGCMsgRecurringSubs"
  "criptionStatusChange\020\222\004\022 \n\033k_EGCMsgDirec"
  "tServiceMethod\020\223\004\022(\n#k_EGCMsgDirectServi"
  "ceMethodResponse\020\224\004*\357\001\n\006ESOMsg\022\023\n\017k_ESOM"
  "sg_Create\020\025\022\023\n\017k_ESOMsg_Update\020\026\022\024\n\020k_ES"
  "OMsg_Destroy\020\027\022\034\n\030k_ESOMsg_CacheSubscrib"
  "ed\020\030\022\036\n\032k_ESOMsg_CacheUnsubscribed\020\031\022\033\n\027"
  "k_ESOMsg_UpdateMultiple\020\032\022#\n\037k_ESOMsg_Ca"
  "cheSubscriptionCheck\020\033\022%\n!k_ESOMsg_Cache"
  "SubscriptionRefresh\020\034*\331\002\n\020EGCBaseClientM"
  "sg\022\032\n\025k_EMsgGCClientWelcome\020\244\037\022\032\n\025k_EMsg"
  "GCServerWelcome\020\245\037\022\030\n\023k_EMsgGCClientHell"
  "o\020\246\037\022\030\n\023k_EMsgGCServerHello\020\247\037\022#\n\036k_EMsg"
  "GCClientConnectionStatus\020\251\037\022#\n\036k_EMsgGCS"
  "erverConnectionStatus\020\252\037\022\037\n\032k_EMsgGCClie"
  "ntHelloPartner\020\253\037\022\032\n\025k_EMsgGCClientHello"
  "PW\020\254\037\022\032\n\025k_EMsgGCClientHelloR2\020\255\037\022\032\n\025k_E"
  "MsgGCClientHelloR3\020\256\037\022\032\n\025k_EMsgGCClientH"
  "elloR4\020\257\037*\211\002\n\nEGCToGCMsg\022\032\n\025k_EGCToGCMsg"
  "MasterAck\020\226\001\022\"\n\035k_EGCToGCMsgMasterAckRes"
  "ponse\020\227\001\022\027\n\022k_EGCToGCMsgRouted\020\230\001\022\034\n\027k_E"
  "GCToGCMsgRoutedReply\020\231\001\022\032\n\025k_EMsgUpdateS"
  "essionIP\020\232\001\022\033\n\026k_EMsgRequestSessionIP\020\233\001"
  "\022#\n\036k_EMsgRequestSessionIPResponse\020\234\001\022&\n"
  "!k_EGCToGCMsgMasterStartupComplete\020\235\001*\260\003"
  "\n\023ECommunityItemClass\022!\n\035k_ECommunityIte"
  "mClass_Invalid\020\000\022\037\n\033k_ECommunityItemClas"
  "s_Badge\020\001\022\"\n\036k_ECommunityItemClass_GameC"
  "ard\020\002\022+\n\'k_ECommunityItemClass_ProfileBa"
  "ckground\020\003\022\"\n\036k_ECommunityItemClass_Emot"
  "icon\020\004\022%\n!k_ECommunityItemClass_BoosterP"
  "ack\020\005\022$\n k_ECommunityItemClass_Consumabl"
  "e\020\006\022!\n\035k_ECommunityItemClass_GameGoo\020\007\022)"
  "\n%k_ECommunityItemClass_ProfileModifier\020"
  "\010\022\037\n\033k_ECommunityItemClass_Scene\020\t\022$\n k_"
  "ECommunityItemClass_SalienItem\020\n*\326\003\n\027ECo"
  "mmunityItemAttribute\022%\n!k_ECommunityItem"
  "Attribute_Invalid\020\000\022(\n$k_ECommunityItemA"
  "ttribute_CardBorder\020\001\022#\n\037k_ECommunityIte"
  "mAttribute_Level\020\002\022)\n%k_ECommunityItemAt"
  "tribute_IssueNumber\020\003\022*\n&k_ECommunityIte"
  "mAttribute_TradableTime\020\004\022,\n(k_ECommunit"
  "yItemAttribute_StorePackageID\020\005\0220\n,k_ECo"
  "mmunityItemAttribute_CommunityItemAppID\020"
  "\006\022/\n+k_ECommunityItemAttribute_Community"
  "ItemType\020\007\0223\n/k_ECommunityItemAttribute_"
  "ProfileModiferEnabled\020\010\022(\n$k_ECommunityI"
  "temAttribute_ExpiryTime\020\t"
  ;
static ::_pbi::once_flag descriptor_table_gcsystemmsgs_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_gcsystemmsgs_2eproto = {
    false, false, 6505, descriptor_table_protodef_gcsystemmsgs_2eproto,
    "gcsystemmsgs.proto",
    &descriptor_table_gcsystemmsgs_2eproto_once, nullptr, 0, 14,
    schemas, file_default_instances, TableStruct_gcsystemmsgs_2eproto::offsets,
    file_level_metadata_gcsystemmsgs_2eproto, file_level_enum_descriptors_gcsystemmsgs_2eproto,
    file_level_service_descriptors_gcsystemmsgs_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_gcsystemmsgs_2eproto_getter() {
  return &descriptor_table_gcsystemmsgs_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_gcsystemmsgs_2eproto(&descriptor_table_gcsystemmsgs_2eproto);
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EGCSystemMsg_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_gcsystemmsgs_2eproto);
  return file_level_enum_descriptors_gcsystemmsgs_2eproto[0];
}
bool EGCSystemMsg_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 10:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 56:
    case 57:
    case 58:
    case 59:
    case 60:
    case 61:
    case 62:
    case 63:
    case 64:
    case 65:
    case 66:
    case 67:
    case 68:
    case 69:
    case 70:
    case 71:
    case 73:
    case 74:
    case 75:
    case 76:
    case 77:
    case 78:
    case 79:
    case 80:
    case 81:
    case 82:
    case 83:
    case 84:
    case 85:
    case 86:
    case 87:
    case 88:
    case 89:
    case 90:
    case 91:
    case 92:
    case 93:
    case 94:
    case 95:
    case 96:
    case 97:
    case 98:
    case 101:
    case 102:
    case 104:
    case 105:
    case 200:
    case 201:
    case 202:
    case 203:
    case 204:
    case 205:
    case 220:
    case 221:
    case 222:
    case 223:
    case 224:
    case 225:
    case 226:
    case 227:
    case 500:
    case 501:
    case 502:
    case 503:
    case 504:
    case 505:
    case 506:
    case 507:
    case 508:
    case 512:
    case 513:
    case 518:
    case 519:
    case 523:
    case 524:
    case 525:
    case 526:
    case 527:
    case 528:
    case 529:
    case 530:
    case 531:
    case 532:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ESOMsg_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_gcsystemmsgs_2eproto);
  return file_level_enum_descriptors_gcsystemmsgs_2eproto[1];
}
bool ESOMsg_IsValid(int value) {
  switch (value) {
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EGCBaseClientMsg_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_gcsystemmsgs_2eproto);
  return file_level_enum_descriptors_gcsystemmsgs_2eproto[2];
}
bool EGCBaseClientMsg_IsValid(int value) {
  switch (value) {
    case 4004:
    case 4005:
    case 4006:
    case 4007:
    case 4009:
    case 4010:
    case 4011:
    case 4012:
    case 4013:
    case 4014:
    case 4015:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EGCToGCMsg_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_gcsystemmsgs_2eproto);
  return file_level_enum_descriptors_gcsystemmsgs_2eproto[3];
}
bool EGCToGCMsg_IsValid(int value) {
  switch (value) {
    case 150:
    case 151:
    case 152:
    case 153:
    case 154:
    case 155:
    case 156:
    case 157:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ECommunityItemClass_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_gcsystemmsgs_2eproto);
  return file_level_enum_descriptors_gcsystemmsgs_2eproto[4];
}
bool ECommunityItemClass_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ECommunityItemAttribute_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_gcsystemmsgs_2eproto);
  return file_level_enum_descriptors_gcsystemmsgs_2eproto[5];
}
bool ECommunityItemAttribute_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class CMsgGCHVacVerificationChange::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCHVacVerificationChange>()._impl_._has_bits_);
  static void set_has_steamid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_appid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_is_verified(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CMsgGCHVacVerificationChange::CMsgGCHVacVerificationChange(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgGCHVacVerificationChange)
}
CMsgGCHVacVerificationChange::CMsgGCHVacVerificationChange(const CMsgGCHVacVerificationChange& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgGCHVacVerificationChange* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.steamid_){}
    , decltype(_impl_.appid_){}
    , decltype(_impl_.is_verified_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.steamid_, &from._impl_.steamid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.is_verified_) -
    reinterpret_cast<char*>(&_impl_.steamid_)) + sizeof(_impl_.is_verified_));
  // @@protoc_insertion_point(copy_constructor:CMsgGCHVacVerificationChange)
}

inline void CMsgGCHVacVerificationChange::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.steamid_){uint64_t{0u}}
    , decltype(_impl_.appid_){0u}
    , decltype(_impl_.is_verified_){false}
  };
}

CMsgGCHVacVerificationChange::~CMsgGCHVacVerificationChange() {
  // @@protoc_insertion_point(destructor:CMsgGCHVacVerificationChange)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgGCHVacVerificationChange::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgGCHVacVerificationChange::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgGCHVacVerificationChange::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCHVacVerificationChange)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.steamid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.is_verified_) -
        reinterpret_cast<char*>(&_impl_.steamid_)) + sizeof(_impl_.is_verified_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCHVacVerificationChange::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional fixed64 steamid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_steamid(&has_bits);
          _impl_.steamid_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 appid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_appid(&has_bits);
          _impl_.appid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_verified = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_is_verified(&has_bits);
          _impl_.is_verified_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgGCHVacVerificationChange::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCHVacVerificationChange)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional fixed64 steamid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed64ToArray(1, this->_internal_steamid(), target);
  }

  // optional uint32 appid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_appid(), target);
  }

  // optional bool is_verified = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_is_verified(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCHVacVerificationChange)
  return target;
}

size_t CMsgGCHVacVerificationChange::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCHVacVerificationChange)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional fixed64 steamid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional uint32 appid = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_appid());
    }

    // optional bool is_verified = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgGCHVacVerificationChange::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgGCHVacVerificationChange::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgGCHVacVerificationChange::GetClassData() const { return &_class_data_; }


void CMsgGCHVacVerificationChange::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgGCHVacVerificationChange*>(&to_msg);
  auto& from = static_cast<const CMsgGCHVacVerificationChange&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCHVacVerificationChange)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.steamid_ = from._impl_.steamid_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.appid_ = from._impl_.appid_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.is_verified_ = from._impl_.is_verified_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgGCHVacVerificationChange::CopyFrom(const CMsgGCHVacVerificationChange& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCHVacVerificationChange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCHVacVerificationChange::IsInitialized() const {
  return true;
}

void CMsgGCHVacVerificationChange::InternalSwap(CMsgGCHVacVerificationChange* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgGCHVacVerificationChange, _impl_.is_verified_)
      + sizeof(CMsgGCHVacVerificationChange::_impl_.is_verified_)
      - PROTOBUF_FIELD_OFFSET(CMsgGCHVacVerificationChange, _impl_.steamid_)>(
          reinterpret_cast<char*>(&_impl_.steamid_),
          reinterpret_cast<char*>(&other->_impl_.steamid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCHVacVerificationChange::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gcsystemmsgs_2eproto_getter, &descriptor_table_gcsystemmsgs_2eproto_once,
      file_level_metadata_gcsystemmsgs_2eproto[0]);
}

// ===================================================================

class CMsgGCHAccountPhoneNumberChange::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCHAccountPhoneNumberChange>()._impl_._has_bits_);
  static void set_has_steamid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_appid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_phone_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_is_verified(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_is_identifying(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

CMsgGCHAccountPhoneNumberChange::CMsgGCHAccountPhoneNumberChange(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgGCHAccountPhoneNumberChange)
}
CMsgGCHAccountPhoneNumberChange::CMsgGCHAccountPhoneNumberChange(const CMsgGCHAccountPhoneNumberChange& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgGCHAccountPhoneNumberChange* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.steamid_){}
    , decltype(_impl_.phone_id_){}
    , decltype(_impl_.appid_){}
    , decltype(_impl_.is_verified_){}
    , decltype(_impl_.is_identifying_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.steamid_, &from._impl_.steamid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.is_identifying_) -
    reinterpret_cast<char*>(&_impl_.steamid_)) + sizeof(_impl_.is_identifying_));
  // @@protoc_insertion_point(copy_constructor:CMsgGCHAccountPhoneNumberChange)
}

inline void CMsgGCHAccountPhoneNumberChange::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.steamid_){uint64_t{0u}}
    , decltype(_impl_.phone_id_){uint64_t{0u}}
    , decltype(_impl_.appid_){0u}
    , decltype(_impl_.is_verified_){false}
    , decltype(_impl_.is_identifying_){false}
  };
}

CMsgGCHAccountPhoneNumberChange::~CMsgGCHAccountPhoneNumberChange() {
  // @@protoc_insertion_point(destructor:CMsgGCHAccountPhoneNumberChange)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgGCHAccountPhoneNumberChange::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgGCHAccountPhoneNumberChange::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgGCHAccountPhoneNumberChange::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCHAccountPhoneNumberChange)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&_impl_.steamid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.is_identifying_) -
        reinterpret_cast<char*>(&_impl_.steamid_)) + sizeof(_impl_.is_identifying_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCHAccountPhoneNumberChange::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional fixed64 steamid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_steamid(&has_bits);
          _impl_.steamid_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 appid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_appid(&has_bits);
          _impl_.appid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 phone_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_phone_id(&has_bits);
          _impl_.phone_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_verified = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_is_verified(&has_bits);
          _impl_.is_verified_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_identifying = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_is_identifying(&has_bits);
          _impl_.is_identifying_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgGCHAccountPhoneNumberChange::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCHAccountPhoneNumberChange)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional fixed64 steamid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed64ToArray(1, this->_internal_steamid(), target);
  }

  // optional uint32 appid = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_appid(), target);
  }

  // optional uint64 phone_id = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal_phone_id(), target);
  }

  // optional bool is_verified = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_is_verified(), target);
  }

  // optional bool is_identifying = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_is_identifying(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCHAccountPhoneNumberChange)
  return target;
}

size_t CMsgGCHAccountPhoneNumberChange::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCHAccountPhoneNumberChange)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional fixed64 steamid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional uint64 phone_id = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_phone_id());
    }

    // optional uint32 appid = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_appid());
    }

    // optional bool is_verified = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional bool is_identifying = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgGCHAccountPhoneNumberChange::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgGCHAccountPhoneNumberChange::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgGCHAccountPhoneNumberChange::GetClassData() const { return &_class_data_; }


void CMsgGCHAccountPhoneNumberChange::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgGCHAccountPhoneNumberChange*>(&to_msg);
  auto& from = static_cast<const CMsgGCHAccountPhoneNumberChange&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCHAccountPhoneNumberChange)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.steamid_ = from._impl_.steamid_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.phone_id_ = from._impl_.phone_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.appid_ = from._impl_.appid_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.is_verified_ = from._impl_.is_verified_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.is_identifying_ = from._impl_.is_identifying_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgGCHAccountPhoneNumberChange::CopyFrom(const CMsgGCHAccountPhoneNumberChange& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCHAccountPhoneNumberChange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCHAccountPhoneNumberChange::IsInitialized() const {
  return true;
}

void CMsgGCHAccountPhoneNumberChange::InternalSwap(CMsgGCHAccountPhoneNumberChange* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgGCHAccountPhoneNumberChange, _impl_.is_identifying_)
      + sizeof(CMsgGCHAccountPhoneNumberChange::_impl_.is_identifying_)
      - PROTOBUF_FIELD_OFFSET(CMsgGCHAccountPhoneNumberChange, _impl_.steamid_)>(
          reinterpret_cast<char*>(&_impl_.steamid_),
          reinterpret_cast<char*>(&other->_impl_.steamid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCHAccountPhoneNumberChange::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gcsystemmsgs_2eproto_getter, &descriptor_table_gcsystemmsgs_2eproto_once,
      file_level_metadata_gcsystemmsgs_2eproto[1]);
}

// ===================================================================

class CMsgGCHInviteUserToLobby::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCHInviteUserToLobby>()._impl_._has_bits_);
  static void set_has_steamid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_appid(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_steamid_invited(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_steamid_lobby(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CMsgGCHInviteUserToLobby::CMsgGCHInviteUserToLobby(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgGCHInviteUserToLobby)
}
CMsgGCHInviteUserToLobby::CMsgGCHInviteUserToLobby(const CMsgGCHInviteUserToLobby& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgGCHInviteUserToLobby* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.steamid_){}
    , decltype(_impl_.steamid_invited_){}
    , decltype(_impl_.steamid_lobby_){}
    , decltype(_impl_.appid_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.steamid_, &from._impl_.steamid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.appid_) -
    reinterpret_cast<char*>(&_impl_.steamid_)) + sizeof(_impl_.appid_));
  // @@protoc_insertion_point(copy_constructor:CMsgGCHInviteUserToLobby)
}

inline void CMsgGCHInviteUserToLobby::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.steamid_){uint64_t{0u}}
    , decltype(_impl_.steamid_invited_){uint64_t{0u}}
    , decltype(_impl_.steamid_lobby_){uint64_t{0u}}
    , decltype(_impl_.appid_){0u}
  };
}

CMsgGCHInviteUserToLobby::~CMsgGCHInviteUserToLobby() {
  // @@protoc_insertion_point(destructor:CMsgGCHInviteUserToLobby)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgGCHInviteUserToLobby::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgGCHInviteUserToLobby::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgGCHInviteUserToLobby::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCHInviteUserToLobby)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&_impl_.steamid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.appid_) -
        reinterpret_cast<char*>(&_impl_.steamid_)) + sizeof(_impl_.appid_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCHInviteUserToLobby::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional fixed64 steamid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_steamid(&has_bits);
          _impl_.steamid_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 appid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_appid(&has_bits);
          _impl_.appid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional fixed64 steamid_invited = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _Internal::set_has_steamid_invited(&has_bits);
          _impl_.steamid_invited_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional fixed64 steamid_lobby = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33)) {
          _Internal::set_has_steamid_lobby(&has_bits);
          _impl_.steamid_lobby_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgGCHInviteUserToLobby::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCHInviteUserToLobby)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional fixed64 steamid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed64ToArray(1, this->_internal_steamid(), target);
  }

  // optional uint32 appid = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_appid(), target);
  }

  // optional fixed64 steamid_invited = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed64ToArray(3, this->_internal_steamid_invited(), target);
  }

  // optional fixed64 steamid_lobby = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed64ToArray(4, this->_internal_steamid_lobby(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCHInviteUserToLobby)
  return target;
}

size_t CMsgGCHInviteUserToLobby::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCHInviteUserToLobby)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional fixed64 steamid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional fixed64 steamid_invited = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional fixed64 steamid_lobby = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional uint32 appid = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_appid());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgGCHInviteUserToLobby::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgGCHInviteUserToLobby::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgGCHInviteUserToLobby::GetClassData() const { return &_class_data_; }


void CMsgGCHInviteUserToLobby::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgGCHInviteUserToLobby*>(&to_msg);
  auto& from = static_cast<const CMsgGCHInviteUserToLobby&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCHInviteUserToLobby)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.steamid_ = from._impl_.steamid_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.steamid_invited_ = from._impl_.steamid_invited_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.steamid_lobby_ = from._impl_.steamid_lobby_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.appid_ = from._impl_.appid_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgGCHInviteUserToLobby::CopyFrom(const CMsgGCHInviteUserToLobby& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCHInviteUserToLobby)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCHInviteUserToLobby::IsInitialized() const {
  return true;
}

void CMsgGCHInviteUserToLobby::InternalSwap(CMsgGCHInviteUserToLobby* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgGCHInviteUserToLobby, _impl_.appid_)
      + sizeof(CMsgGCHInviteUserToLobby::_impl_.appid_)
      - PROTOBUF_FIELD_OFFSET(CMsgGCHInviteUserToLobby, _impl_.steamid_)>(
          reinterpret_cast<char*>(&_impl_.steamid_),
          reinterpret_cast<char*>(&other->_impl_.steamid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCHInviteUserToLobby::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gcsystemmsgs_2eproto_getter, &descriptor_table_gcsystemmsgs_2eproto_once,
      file_level_metadata_gcsystemmsgs_2eproto[2]);
}

// ===================================================================

class CMsgGCHRecurringSubscriptionStatusChange::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCHRecurringSubscriptionStatusChange>()._impl_._has_bits_);
  static void set_has_steamid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_appid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_agreementid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_active(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

CMsgGCHRecurringSubscriptionStatusChange::CMsgGCHRecurringSubscriptionStatusChange(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgGCHRecurringSubscriptionStatusChange)
}
CMsgGCHRecurringSubscriptionStatusChange::CMsgGCHRecurringSubscriptionStatusChange(const CMsgGCHRecurringSubscriptionStatusChange& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgGCHRecurringSubscriptionStatusChange* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.steamid_){}
    , decltype(_impl_.agreementid_){}
    , decltype(_impl_.appid_){}
    , decltype(_impl_.active_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.steamid_, &from._impl_.steamid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.active_) -
    reinterpret_cast<char*>(&_impl_.steamid_)) + sizeof(_impl_.active_));
  // @@protoc_insertion_point(copy_constructor:CMsgGCHRecurringSubscriptionStatusChange)
}

inline void CMsgGCHRecurringSubscriptionStatusChange::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.steamid_){uint64_t{0u}}
    , decltype(_impl_.agreementid_){uint64_t{0u}}
    , decltype(_impl_.appid_){0u}
    , decltype(_impl_.active_){false}
  };
}

CMsgGCHRecurringSubscriptionStatusChange::~CMsgGCHRecurringSubscriptionStatusChange() {
  // @@protoc_insertion_point(destructor:CMsgGCHRecurringSubscriptionStatusChange)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgGCHRecurringSubscriptionStatusChange::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgGCHRecurringSubscriptionStatusChange::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgGCHRecurringSubscriptionStatusChange::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCHRecurringSubscriptionStatusChange)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&_impl_.steamid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.active_) -
        reinterpret_cast<char*>(&_impl_.steamid_)) + sizeof(_impl_.active_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCHRecurringSubscriptionStatusChange::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional fixed64 steamid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_steamid(&has_bits);
          _impl_.steamid_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 appid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_appid(&has_bits);
          _impl_.appid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional fixed64 agreementid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _Internal::set_has_agreementid(&has_bits);
          _impl_.agreementid_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional bool active = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_active(&has_bits);
          _impl_.active_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgGCHRecurringSubscriptionStatusChange::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCHRecurringSubscriptionStatusChange)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional fixed64 steamid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed64ToArray(1, this->_internal_steamid(), target);
  }

  // optional uint32 appid = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_appid(), target);
  }

  // optional fixed64 agreementid = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed64ToArray(3, this->_internal_agreementid(), target);
  }

  // optional bool active = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_active(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCHRecurringSubscriptionStatusChange)
  return target;
}

size_t CMsgGCHRecurringSubscriptionStatusChange::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCHRecurringSubscriptionStatusChange)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional fixed64 steamid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional fixed64 agreementid = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional uint32 appid = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_appid());
    }

    // optional bool active = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgGCHRecurringSubscriptionStatusChange::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgGCHRecurringSubscriptionStatusChange::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgGCHRecurringSubscriptionStatusChange::GetClassData() const { return &_class_data_; }


void CMsgGCHRecurringSubscriptionStatusChange::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgGCHRecurringSubscriptionStatusChange*>(&to_msg);
  auto& from = static_cast<const CMsgGCHRecurringSubscriptionStatusChange&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCHRecurringSubscriptionStatusChange)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.steamid_ = from._impl_.steamid_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.agreementid_ = from._impl_.agreementid_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.appid_ = from._impl_.appid_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.active_ = from._impl_.active_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgGCHRecurringSubscriptionStatusChange::CopyFrom(const CMsgGCHRecurringSubscriptionStatusChange& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCHRecurringSubscriptionStatusChange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCHRecurringSubscriptionStatusChange::IsInitialized() const {
  return true;
}

void CMsgGCHRecurringSubscriptionStatusChange::InternalSwap(CMsgGCHRecurringSubscriptionStatusChange* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgGCHRecurringSubscriptionStatusChange, _impl_.active_)
      + sizeof(CMsgGCHRecurringSubscriptionStatusChange::_impl_.active_)
      - PROTOBUF_FIELD_OFFSET(CMsgGCHRecurringSubscriptionStatusChange, _impl_.steamid_)>(
          reinterpret_cast<char*>(&_impl_.steamid_),
          reinterpret_cast<char*>(&other->_impl_.steamid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCHRecurringSubscriptionStatusChange::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gcsystemmsgs_2eproto_getter, &descriptor_table_gcsystemmsgs_2eproto_once,
      file_level_metadata_gcsystemmsgs_2eproto[3]);
}

// ===================================================================

class CQuest_PublisherAddCommunityItemsToPlayer_Request_Attribute::_Internal {
 public:
  using HasBits = decltype(std::declval<CQuest_PublisherAddCommunityItemsToPlayer_Request_Attribute>()._impl_._has_bits_);
  static void set_has_attribute(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CQuest_PublisherAddCommunityItemsToPlayer_Request_Attribute::CQuest_PublisherAddCommunityItemsToPlayer_Request_Attribute(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CQuest_PublisherAddCommunityItemsToPlayer_Request.Attribute)
}
CQuest_PublisherAddCommunityItemsToPlayer_Request_Attribute::CQuest_PublisherAddCommunityItemsToPlayer_Request_Attribute(const CQuest_PublisherAddCommunityItemsToPlayer_Request_Attribute& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CQuest_PublisherAddCommunityItemsToPlayer_Request_Attribute* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.value_){}
    , decltype(_impl_.attribute_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.value_, &from._impl_.value_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.attribute_) -
    reinterpret_cast<char*>(&_impl_.value_)) + sizeof(_impl_.attribute_));
  // @@protoc_insertion_point(copy_constructor:CQuest_PublisherAddCommunityItemsToPlayer_Request.Attribute)
}

inline void CQuest_PublisherAddCommunityItemsToPlayer_Request_Attribute::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.value_){uint64_t{0u}}
    , decltype(_impl_.attribute_){0u}
  };
}

CQuest_PublisherAddCommunityItemsToPlayer_Request_Attribute::~CQuest_PublisherAddCommunityItemsToPlayer_Request_Attribute() {
  // @@protoc_insertion_point(destructor:CQuest_PublisherAddCommunityItemsToPlayer_Request.Attribute)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CQuest_PublisherAddCommunityItemsToPlayer_Request_Attribute::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CQuest_PublisherAddCommunityItemsToPlayer_Request_Attribute::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CQuest_PublisherAddCommunityItemsToPlayer_Request_Attribute::Clear() {
// @@protoc_insertion_point(message_clear_start:CQuest_PublisherAddCommunityItemsToPlayer_Request.Attribute)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.value_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.attribute_) -
        reinterpret_cast<char*>(&_impl_.value_)) + sizeof(_impl_.attribute_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CQuest_PublisherAddCommunityItemsToPlayer_Request_Attribute::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 attribute = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_attribute(&has_bits);
          _impl_.attribute_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_value(&has_bits);
          _impl_.value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CQuest_PublisherAddCommunityItemsToPlayer_Request_Attribute::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CQuest_PublisherAddCommunityItemsToPlayer_Request.Attribute)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 attribute = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_attribute(), target);
  }

  // optional uint64 value = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CQuest_PublisherAddCommunityItemsToPlayer_Request.Attribute)
  return target;
}

size_t CQuest_PublisherAddCommunityItemsToPlayer_Request_Attribute::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CQuest_PublisherAddCommunityItemsToPlayer_Request.Attribute)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint64 value = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_value());
    }

    // optional uint32 attribute = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_attribute());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CQuest_PublisherAddCommunityItemsToPlayer_Request_Attribute::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CQuest_PublisherAddCommunityItemsToPlayer_Request_Attribute::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CQuest_PublisherAddCommunityItemsToPlayer_Request_Attribute::GetClassData() const { return &_class_data_; }


void CQuest_PublisherAddCommunityItemsToPlayer_Request_Attribute::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CQuest_PublisherAddCommunityItemsToPlayer_Request_Attribute*>(&to_msg);
  auto& from = static_cast<const CQuest_PublisherAddCommunityItemsToPlayer_Request_Attribute&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CQuest_PublisherAddCommunityItemsToPlayer_Request.Attribute)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.value_ = from._impl_.value_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.attribute_ = from._impl_.attribute_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CQuest_PublisherAddCommunityItemsToPlayer_Request_Attribute::CopyFrom(const CQuest_PublisherAddCommunityItemsToPlayer_Request_Attribute& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CQuest_PublisherAddCommunityItemsToPlayer_Request.Attribute)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CQuest_PublisherAddCommunityItemsToPlayer_Request_Attribute::IsInitialized() const {
  return true;
}

void CQuest_PublisherAddCommunityItemsToPlayer_Request_Attribute::InternalSwap(CQuest_PublisherAddCommunityItemsToPlayer_Request_Attribute* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CQuest_PublisherAddCommunityItemsToPlayer_Request_Attribute, _impl_.attribute_)
      + sizeof(CQuest_PublisherAddCommunityItemsToPlayer_Request_Attribute::_impl_.attribute_)
      - PROTOBUF_FIELD_OFFSET(CQuest_PublisherAddCommunityItemsToPlayer_Request_Attribute, _impl_.value_)>(
          reinterpret_cast<char*>(&_impl_.value_),
          reinterpret_cast<char*>(&other->_impl_.value_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CQuest_PublisherAddCommunityItemsToPlayer_Request_Attribute::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gcsystemmsgs_2eproto_getter, &descriptor_table_gcsystemmsgs_2eproto_once,
      file_level_metadata_gcsystemmsgs_2eproto[4]);
}

// ===================================================================

class CQuest_PublisherAddCommunityItemsToPlayer_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CQuest_PublisherAddCommunityItemsToPlayer_Request>()._impl_._has_bits_);
  static void set_has_steamid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_appid(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_match_item_type(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_match_item_class(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_prefix_item_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_note(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CQuest_PublisherAddCommunityItemsToPlayer_Request::CQuest_PublisherAddCommunityItemsToPlayer_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CQuest_PublisherAddCommunityItemsToPlayer_Request)
}
CQuest_PublisherAddCommunityItemsToPlayer_Request::CQuest_PublisherAddCommunityItemsToPlayer_Request(const CQuest_PublisherAddCommunityItemsToPlayer_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CQuest_PublisherAddCommunityItemsToPlayer_Request* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.attributes_){from._impl_.attributes_}
    , decltype(_impl_.prefix_item_name_){}
    , decltype(_impl_.note_){}
    , decltype(_impl_.steamid_){}
    , decltype(_impl_.appid_){}
    , decltype(_impl_.match_item_type_){}
    , decltype(_impl_.match_item_class_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.prefix_item_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.prefix_item_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_prefix_item_name()) {
    _this->_impl_.prefix_item_name_.Set(from._internal_prefix_item_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.note_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.note_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_note()) {
    _this->_impl_.note_.Set(from._internal_note(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.steamid_, &from._impl_.steamid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.match_item_class_) -
    reinterpret_cast<char*>(&_impl_.steamid_)) + sizeof(_impl_.match_item_class_));
  // @@protoc_insertion_point(copy_constructor:CQuest_PublisherAddCommunityItemsToPlayer_Request)
}

inline void CQuest_PublisherAddCommunityItemsToPlayer_Request::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.attributes_){arena}
    , decltype(_impl_.prefix_item_name_){}
    , decltype(_impl_.note_){}
    , decltype(_impl_.steamid_){uint64_t{0u}}
    , decltype(_impl_.appid_){0u}
    , decltype(_impl_.match_item_type_){0u}
    , decltype(_impl_.match_item_class_){0u}
  };
  _impl_.prefix_item_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.prefix_item_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.note_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.note_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CQuest_PublisherAddCommunityItemsToPlayer_Request::~CQuest_PublisherAddCommunityItemsToPlayer_Request() {
  // @@protoc_insertion_point(destructor:CQuest_PublisherAddCommunityItemsToPlayer_Request)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CQuest_PublisherAddCommunityItemsToPlayer_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.attributes_.~RepeatedPtrField();
  _impl_.prefix_item_name_.Destroy();
  _impl_.note_.Destroy();
}

void CQuest_PublisherAddCommunityItemsToPlayer_Request::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CQuest_PublisherAddCommunityItemsToPlayer_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CQuest_PublisherAddCommunityItemsToPlayer_Request)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.attributes_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.prefix_item_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.note_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000003cu) {
    ::memset(&_impl_.steamid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.match_item_class_) -
        reinterpret_cast<char*>(&_impl_.steamid_)) + sizeof(_impl_.match_item_class_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CQuest_PublisherAddCommunityItemsToPlayer_Request::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 steamid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_steamid(&has_bits);
          _impl_.steamid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 appid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_appid(&has_bits);
          _impl_.appid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 match_item_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_match_item_type(&has_bits);
          _impl_.match_item_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 match_item_class = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_match_item_class(&has_bits);
          _impl_.match_item_class_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string prefix_item_name = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_prefix_item_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CQuest_PublisherAddCommunityItemsToPlayer_Request.prefix_item_name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // repeated .CQuest_PublisherAddCommunityItemsToPlayer_Request.Attribute attributes = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_attributes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional string note = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_note();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CQuest_PublisherAddCommunityItemsToPlayer_Request.note");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CQuest_PublisherAddCommunityItemsToPlayer_Request::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CQuest_PublisherAddCommunityItemsToPlayer_Request)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint64 steamid = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_steamid(), target);
  }

  // optional uint32 appid = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_appid(), target);
  }

  // optional uint32 match_item_type = 3;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_match_item_type(), target);
  }

  // optional uint32 match_item_class = 4;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_match_item_class(), target);
  }

  // optional string prefix_item_name = 5;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_prefix_item_name().data(), static_cast<int>(this->_internal_prefix_item_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CQuest_PublisherAddCommunityItemsToPlayer_Request.prefix_item_name");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_prefix_item_name(), target);
  }

  // repeated .CQuest_PublisherAddCommunityItemsToPlayer_Request.Attribute attributes = 6;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_attributes_size()); i < n; i++) {
    const auto& repfield = this->_internal_attributes(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(6, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional string note = 7;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_note().data(), static_cast<int>(this->_internal_note().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CQuest_PublisherAddCommunityItemsToPlayer_Request.note");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_note(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CQuest_PublisherAddCommunityItemsToPlayer_Request)
  return target;
}

size_t CQuest_PublisherAddCommunityItemsToPlayer_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CQuest_PublisherAddCommunityItemsToPlayer_Request)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CQuest_PublisherAddCommunityItemsToPlayer_Request.Attribute attributes = 6;
  total_size += 1UL * this->_internal_attributes_size();
  for (const auto& msg : this->_impl_.attributes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional string prefix_item_name = 5;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_prefix_item_name());
    }

    // optional string note = 7;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_note());
    }

    // optional uint64 steamid = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_steamid());
    }

    // optional uint32 appid = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_appid());
    }

    // optional uint32 match_item_type = 3;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_match_item_type());
    }

    // optional uint32 match_item_class = 4;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_match_item_class());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CQuest_PublisherAddCommunityItemsToPlayer_Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CQuest_PublisherAddCommunityItemsToPlayer_Request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CQuest_PublisherAddCommunityItemsToPlayer_Request::GetClassData() const { return &_class_data_; }


void CQuest_PublisherAddCommunityItemsToPlayer_Request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CQuest_PublisherAddCommunityItemsToPlayer_Request*>(&to_msg);
  auto& from = static_cast<const CQuest_PublisherAddCommunityItemsToPlayer_Request&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CQuest_PublisherAddCommunityItemsToPlayer_Request)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.attributes_.MergeFrom(from._impl_.attributes_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_prefix_item_name(from._internal_prefix_item_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_note(from._internal_note());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.steamid_ = from._impl_.steamid_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.appid_ = from._impl_.appid_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.match_item_type_ = from._impl_.match_item_type_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.match_item_class_ = from._impl_.match_item_class_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CQuest_PublisherAddCommunityItemsToPlayer_Request::CopyFrom(const CQuest_PublisherAddCommunityItemsToPlayer_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CQuest_PublisherAddCommunityItemsToPlayer_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CQuest_PublisherAddCommunityItemsToPlayer_Request::IsInitialized() const {
  return true;
}

void CQuest_PublisherAddCommunityItemsToPlayer_Request::InternalSwap(CQuest_PublisherAddCommunityItemsToPlayer_Request* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.attributes_.InternalSwap(&other->_impl_.attributes_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.prefix_item_name_, lhs_arena,
      &other->_impl_.prefix_item_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.note_, lhs_arena,
      &other->_impl_.note_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CQuest_PublisherAddCommunityItemsToPlayer_Request, _impl_.match_item_class_)
      + sizeof(CQuest_PublisherAddCommunityItemsToPlayer_Request::_impl_.match_item_class_)
      - PROTOBUF_FIELD_OFFSET(CQuest_PublisherAddCommunityItemsToPlayer_Request, _impl_.steamid_)>(
          reinterpret_cast<char*>(&_impl_.steamid_),
          reinterpret_cast<char*>(&other->_impl_.steamid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CQuest_PublisherAddCommunityItemsToPlayer_Request::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gcsystemmsgs_2eproto_getter, &descriptor_table_gcsystemmsgs_2eproto_once,
      file_level_metadata_gcsystemmsgs_2eproto[5]);
}

// ===================================================================

class CQuest_PublisherAddCommunityItemsToPlayer_Response::_Internal {
 public:
  using HasBits = decltype(std::declval<CQuest_PublisherAddCommunityItemsToPlayer_Response>()._impl_._has_bits_);
  static void set_has_items_matched(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_items_granted(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CQuest_PublisherAddCommunityItemsToPlayer_Response::CQuest_PublisherAddCommunityItemsToPlayer_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CQuest_PublisherAddCommunityItemsToPlayer_Response)
}
CQuest_PublisherAddCommunityItemsToPlayer_Response::CQuest_PublisherAddCommunityItemsToPlayer_Response(const CQuest_PublisherAddCommunityItemsToPlayer_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CQuest_PublisherAddCommunityItemsToPlayer_Response* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.items_matched_){}
    , decltype(_impl_.items_granted_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.items_matched_, &from._impl_.items_matched_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.items_granted_) -
    reinterpret_cast<char*>(&_impl_.items_matched_)) + sizeof(_impl_.items_granted_));
  // @@protoc_insertion_point(copy_constructor:CQuest_PublisherAddCommunityItemsToPlayer_Response)
}

inline void CQuest_PublisherAddCommunityItemsToPlayer_Response::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.items_matched_){0u}
    , decltype(_impl_.items_granted_){0u}
  };
}

CQuest_PublisherAddCommunityItemsToPlayer_Response::~CQuest_PublisherAddCommunityItemsToPlayer_Response() {
  // @@protoc_insertion_point(destructor:CQuest_PublisherAddCommunityItemsToPlayer_Response)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CQuest_PublisherAddCommunityItemsToPlayer_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CQuest_PublisherAddCommunityItemsToPlayer_Response::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CQuest_PublisherAddCommunityItemsToPlayer_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CQuest_PublisherAddCommunityItemsToPlayer_Response)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.items_matched_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.items_granted_) -
        reinterpret_cast<char*>(&_impl_.items_matched_)) + sizeof(_impl_.items_granted_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CQuest_PublisherAddCommunityItemsToPlayer_Response::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 items_matched = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_items_matched(&has_bits);
          _impl_.items_matched_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 items_granted = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_items_granted(&has_bits);
          _impl_.items_granted_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CQuest_PublisherAddCommunityItemsToPlayer_Response::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CQuest_PublisherAddCommunityItemsToPlayer_Response)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 items_matched = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_items_matched(), target);
  }

  // optional uint32 items_granted = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_items_granted(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CQuest_PublisherAddCommunityItemsToPlayer_Response)
  return target;
}

size_t CQuest_PublisherAddCommunityItemsToPlayer_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CQuest_PublisherAddCommunityItemsToPlayer_Response)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 items_matched = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_items_matched());
    }

    // optional uint32 items_granted = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_items_granted());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CQuest_PublisherAddCommunityItemsToPlayer_Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CQuest_PublisherAddCommunityItemsToPlayer_Response::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CQuest_PublisherAddCommunityItemsToPlayer_Response::GetClassData() const { return &_class_data_; }


void CQuest_PublisherAddCommunityItemsToPlayer_Response::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CQuest_PublisherAddCommunityItemsToPlayer_Response*>(&to_msg);
  auto& from = static_cast<const CQuest_PublisherAddCommunityItemsToPlayer_Response&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CQuest_PublisherAddCommunityItemsToPlayer_Response)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.items_matched_ = from._impl_.items_matched_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.items_granted_ = from._impl_.items_granted_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CQuest_PublisherAddCommunityItemsToPlayer_Response::CopyFrom(const CQuest_PublisherAddCommunityItemsToPlayer_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CQuest_PublisherAddCommunityItemsToPlayer_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CQuest_PublisherAddCommunityItemsToPlayer_Response::IsInitialized() const {
  return true;
}

void CQuest_PublisherAddCommunityItemsToPlayer_Response::InternalSwap(CQuest_PublisherAddCommunityItemsToPlayer_Response* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CQuest_PublisherAddCommunityItemsToPlayer_Response, _impl_.items_granted_)
      + sizeof(CQuest_PublisherAddCommunityItemsToPlayer_Response::_impl_.items_granted_)
      - PROTOBUF_FIELD_OFFSET(CQuest_PublisherAddCommunityItemsToPlayer_Response, _impl_.items_matched_)>(
          reinterpret_cast<char*>(&_impl_.items_matched_),
          reinterpret_cast<char*>(&other->_impl_.items_matched_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CQuest_PublisherAddCommunityItemsToPlayer_Response::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gcsystemmsgs_2eproto_getter, &descriptor_table_gcsystemmsgs_2eproto_once,
      file_level_metadata_gcsystemmsgs_2eproto[6]);
}

// ===================================================================

class CCommunity_GamePersonalDataCategoryInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<CCommunity_GamePersonalDataCategoryInfo>()._impl_._has_bits_);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_localization_token(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_template_file(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CCommunity_GamePersonalDataCategoryInfo::CCommunity_GamePersonalDataCategoryInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CCommunity_GamePersonalDataCategoryInfo)
}
CCommunity_GamePersonalDataCategoryInfo::CCommunity_GamePersonalDataCategoryInfo(const CCommunity_GamePersonalDataCategoryInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CCommunity_GamePersonalDataCategoryInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.type_){}
    , decltype(_impl_.localization_token_){}
    , decltype(_impl_.template_file_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_type()) {
    _this->_impl_.type_.Set(from._internal_type(), 
      _this->GetArenaForAllocation());
  }
  _impl_.localization_token_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.localization_token_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_localization_token()) {
    _this->_impl_.localization_token_.Set(from._internal_localization_token(), 
      _this->GetArenaForAllocation());
  }
  _impl_.template_file_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.template_file_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_template_file()) {
    _this->_impl_.template_file_.Set(from._internal_template_file(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:CCommunity_GamePersonalDataCategoryInfo)
}

inline void CCommunity_GamePersonalDataCategoryInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.type_){}
    , decltype(_impl_.localization_token_){}
    , decltype(_impl_.template_file_){}
  };
  _impl_.type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.localization_token_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.localization_token_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.template_file_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.template_file_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CCommunity_GamePersonalDataCategoryInfo::~CCommunity_GamePersonalDataCategoryInfo() {
  // @@protoc_insertion_point(destructor:CCommunity_GamePersonalDataCategoryInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CCommunity_GamePersonalDataCategoryInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.type_.Destroy();
  _impl_.localization_token_.Destroy();
  _impl_.template_file_.Destroy();
}

void CCommunity_GamePersonalDataCategoryInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CCommunity_GamePersonalDataCategoryInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:CCommunity_GamePersonalDataCategoryInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.type_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.localization_token_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.template_file_.ClearNonDefaultToEmpty();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CCommunity_GamePersonalDataCategoryInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_type();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CCommunity_GamePersonalDataCategoryInfo.type");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string localization_token = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_localization_token();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CCommunity_GamePersonalDataCategoryInfo.localization_token");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string template_file = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_template_file();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CCommunity_GamePersonalDataCategoryInfo.template_file");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CCommunity_GamePersonalDataCategoryInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCommunity_GamePersonalDataCategoryInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string type = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_type().data(), static_cast<int>(this->_internal_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CCommunity_GamePersonalDataCategoryInfo.type");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_type(), target);
  }

  // optional string localization_token = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_localization_token().data(), static_cast<int>(this->_internal_localization_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CCommunity_GamePersonalDataCategoryInfo.localization_token");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_localization_token(), target);
  }

  // optional string template_file = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_template_file().data(), static_cast<int>(this->_internal_template_file().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CCommunity_GamePersonalDataCategoryInfo.template_file");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_template_file(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCommunity_GamePersonalDataCategoryInfo)
  return target;
}

size_t CCommunity_GamePersonalDataCategoryInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCommunity_GamePersonalDataCategoryInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string type = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_type());
    }

    // optional string localization_token = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_localization_token());
    }

    // optional string template_file = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_template_file());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CCommunity_GamePersonalDataCategoryInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CCommunity_GamePersonalDataCategoryInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CCommunity_GamePersonalDataCategoryInfo::GetClassData() const { return &_class_data_; }


void CCommunity_GamePersonalDataCategoryInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CCommunity_GamePersonalDataCategoryInfo*>(&to_msg);
  auto& from = static_cast<const CCommunity_GamePersonalDataCategoryInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CCommunity_GamePersonalDataCategoryInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_type(from._internal_type());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_localization_token(from._internal_localization_token());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_template_file(from._internal_template_file());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CCommunity_GamePersonalDataCategoryInfo::CopyFrom(const CCommunity_GamePersonalDataCategoryInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCommunity_GamePersonalDataCategoryInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCommunity_GamePersonalDataCategoryInfo::IsInitialized() const {
  return true;
}

void CCommunity_GamePersonalDataCategoryInfo::InternalSwap(CCommunity_GamePersonalDataCategoryInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.type_, lhs_arena,
      &other->_impl_.type_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.localization_token_, lhs_arena,
      &other->_impl_.localization_token_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.template_file_, lhs_arena,
      &other->_impl_.template_file_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata CCommunity_GamePersonalDataCategoryInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gcsystemmsgs_2eproto_getter, &descriptor_table_gcsystemmsgs_2eproto_once,
      file_level_metadata_gcsystemmsgs_2eproto[7]);
}

// ===================================================================

class CCommunity_GetGamePersonalDataCategories_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CCommunity_GetGamePersonalDataCategories_Request>()._impl_._has_bits_);
  static void set_has_appid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CCommunity_GetGamePersonalDataCategories_Request::CCommunity_GetGamePersonalDataCategories_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CCommunity_GetGamePersonalDataCategories_Request)
}
CCommunity_GetGamePersonalDataCategories_Request::CCommunity_GetGamePersonalDataCategories_Request(const CCommunity_GetGamePersonalDataCategories_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CCommunity_GetGamePersonalDataCategories_Request* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.appid_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.appid_ = from._impl_.appid_;
  // @@protoc_insertion_point(copy_constructor:CCommunity_GetGamePersonalDataCategories_Request)
}

inline void CCommunity_GetGamePersonalDataCategories_Request::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.appid_){0u}
  };
}

CCommunity_GetGamePersonalDataCategories_Request::~CCommunity_GetGamePersonalDataCategories_Request() {
  // @@protoc_insertion_point(destructor:CCommunity_GetGamePersonalDataCategories_Request)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CCommunity_GetGamePersonalDataCategories_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CCommunity_GetGamePersonalDataCategories_Request::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CCommunity_GetGamePersonalDataCategories_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CCommunity_GetGamePersonalDataCategories_Request)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.appid_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CCommunity_GetGamePersonalDataCategories_Request::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 appid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_appid(&has_bits);
          _impl_.appid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CCommunity_GetGamePersonalDataCategories_Request::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCommunity_GetGamePersonalDataCategories_Request)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 appid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_appid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCommunity_GetGamePersonalDataCategories_Request)
  return target;
}

size_t CCommunity_GetGamePersonalDataCategories_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCommunity_GetGamePersonalDataCategories_Request)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 appid = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_appid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CCommunity_GetGamePersonalDataCategories_Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CCommunity_GetGamePersonalDataCategories_Request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CCommunity_GetGamePersonalDataCategories_Request::GetClassData() const { return &_class_data_; }


void CCommunity_GetGamePersonalDataCategories_Request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CCommunity_GetGamePersonalDataCategories_Request*>(&to_msg);
  auto& from = static_cast<const CCommunity_GetGamePersonalDataCategories_Request&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CCommunity_GetGamePersonalDataCategories_Request)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_appid()) {
    _this->_internal_set_appid(from._internal_appid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CCommunity_GetGamePersonalDataCategories_Request::CopyFrom(const CCommunity_GetGamePersonalDataCategories_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCommunity_GetGamePersonalDataCategories_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCommunity_GetGamePersonalDataCategories_Request::IsInitialized() const {
  return true;
}

void CCommunity_GetGamePersonalDataCategories_Request::InternalSwap(CCommunity_GetGamePersonalDataCategories_Request* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.appid_, other->_impl_.appid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CCommunity_GetGamePersonalDataCategories_Request::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gcsystemmsgs_2eproto_getter, &descriptor_table_gcsystemmsgs_2eproto_once,
      file_level_metadata_gcsystemmsgs_2eproto[8]);
}

// ===================================================================

class CCommunity_GetGamePersonalDataCategories_Response::_Internal {
 public:
  using HasBits = decltype(std::declval<CCommunity_GetGamePersonalDataCategories_Response>()._impl_._has_bits_);
  static void set_has_app_assets_basename(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CCommunity_GetGamePersonalDataCategories_Response::CCommunity_GetGamePersonalDataCategories_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CCommunity_GetGamePersonalDataCategories_Response)
}
CCommunity_GetGamePersonalDataCategories_Response::CCommunity_GetGamePersonalDataCategories_Response(const CCommunity_GetGamePersonalDataCategories_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CCommunity_GetGamePersonalDataCategories_Response* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.categories_){from._impl_.categories_}
    , decltype(_impl_.app_assets_basename_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.app_assets_basename_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.app_assets_basename_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_app_assets_basename()) {
    _this->_impl_.app_assets_basename_.Set(from._internal_app_assets_basename(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:CCommunity_GetGamePersonalDataCategories_Response)
}

inline void CCommunity_GetGamePersonalDataCategories_Response::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.categories_){arena}
    , decltype(_impl_.app_assets_basename_){}
  };
  _impl_.app_assets_basename_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.app_assets_basename_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CCommunity_GetGamePersonalDataCategories_Response::~CCommunity_GetGamePersonalDataCategories_Response() {
  // @@protoc_insertion_point(destructor:CCommunity_GetGamePersonalDataCategories_Response)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CCommunity_GetGamePersonalDataCategories_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.categories_.~RepeatedPtrField();
  _impl_.app_assets_basename_.Destroy();
}

void CCommunity_GetGamePersonalDataCategories_Response::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CCommunity_GetGamePersonalDataCategories_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CCommunity_GetGamePersonalDataCategories_Response)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.categories_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.app_assets_basename_.ClearNonDefaultToEmpty();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CCommunity_GetGamePersonalDataCategories_Response::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .CCommunity_GamePersonalDataCategoryInfo categories = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_categories(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional string app_assets_basename = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_app_assets_basename();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CCommunity_GetGamePersonalDataCategories_Response.app_assets_basename");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CCommunity_GetGamePersonalDataCategories_Response::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCommunity_GetGamePersonalDataCategories_Response)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CCommunity_GamePersonalDataCategoryInfo categories = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_categories_size()); i < n; i++) {
    const auto& repfield = this->_internal_categories(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional string app_assets_basename = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_app_assets_basename().data(), static_cast<int>(this->_internal_app_assets_basename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CCommunity_GetGamePersonalDataCategories_Response.app_assets_basename");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_app_assets_basename(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCommunity_GetGamePersonalDataCategories_Response)
  return target;
}

size_t CCommunity_GetGamePersonalDataCategories_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCommunity_GetGamePersonalDataCategories_Response)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CCommunity_GamePersonalDataCategoryInfo categories = 1;
  total_size += 1UL * this->_internal_categories_size();
  for (const auto& msg : this->_impl_.categories_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional string app_assets_basename = 2;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_app_assets_basename());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CCommunity_GetGamePersonalDataCategories_Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CCommunity_GetGamePersonalDataCategories_Response::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CCommunity_GetGamePersonalDataCategories_Response::GetClassData() const { return &_class_data_; }


void CCommunity_GetGamePersonalDataCategories_Response::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CCommunity_GetGamePersonalDataCategories_Response*>(&to_msg);
  auto& from = static_cast<const CCommunity_GetGamePersonalDataCategories_Response&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CCommunity_GetGamePersonalDataCategories_Response)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.categories_.MergeFrom(from._impl_.categories_);
  if (from._internal_has_app_assets_basename()) {
    _this->_internal_set_app_assets_basename(from._internal_app_assets_basename());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CCommunity_GetGamePersonalDataCategories_Response::CopyFrom(const CCommunity_GetGamePersonalDataCategories_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCommunity_GetGamePersonalDataCategories_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCommunity_GetGamePersonalDataCategories_Response::IsInitialized() const {
  return true;
}

void CCommunity_GetGamePersonalDataCategories_Response::InternalSwap(CCommunity_GetGamePersonalDataCategories_Response* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.categories_.InternalSwap(&other->_impl_.categories_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.app_assets_basename_, lhs_arena,
      &other->_impl_.app_assets_basename_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata CCommunity_GetGamePersonalDataCategories_Response::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gcsystemmsgs_2eproto_getter, &descriptor_table_gcsystemmsgs_2eproto_once,
      file_level_metadata_gcsystemmsgs_2eproto[9]);
}

// ===================================================================

class CCommunity_GetGamePersonalDataEntries_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CCommunity_GetGamePersonalDataEntries_Request>()._impl_._has_bits_);
  static void set_has_appid(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_steamid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_continue_token(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CCommunity_GetGamePersonalDataEntries_Request::CCommunity_GetGamePersonalDataEntries_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CCommunity_GetGamePersonalDataEntries_Request)
}
CCommunity_GetGamePersonalDataEntries_Request::CCommunity_GetGamePersonalDataEntries_Request(const CCommunity_GetGamePersonalDataEntries_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CCommunity_GetGamePersonalDataEntries_Request* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.type_){}
    , decltype(_impl_.continue_token_){}
    , decltype(_impl_.steamid_){}
    , decltype(_impl_.appid_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_type()) {
    _this->_impl_.type_.Set(from._internal_type(), 
      _this->GetArenaForAllocation());
  }
  _impl_.continue_token_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.continue_token_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_continue_token()) {
    _this->_impl_.continue_token_.Set(from._internal_continue_token(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.steamid_, &from._impl_.steamid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.appid_) -
    reinterpret_cast<char*>(&_impl_.steamid_)) + sizeof(_impl_.appid_));
  // @@protoc_insertion_point(copy_constructor:CCommunity_GetGamePersonalDataEntries_Request)
}

inline void CCommunity_GetGamePersonalDataEntries_Request::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.type_){}
    , decltype(_impl_.continue_token_){}
    , decltype(_impl_.steamid_){uint64_t{0u}}
    , decltype(_impl_.appid_){0u}
  };
  _impl_.type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.continue_token_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.continue_token_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CCommunity_GetGamePersonalDataEntries_Request::~CCommunity_GetGamePersonalDataEntries_Request() {
  // @@protoc_insertion_point(destructor:CCommunity_GetGamePersonalDataEntries_Request)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CCommunity_GetGamePersonalDataEntries_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.type_.Destroy();
  _impl_.continue_token_.Destroy();
}

void CCommunity_GetGamePersonalDataEntries_Request::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CCommunity_GetGamePersonalDataEntries_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CCommunity_GetGamePersonalDataEntries_Request)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.type_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.continue_token_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000000cu) {
    ::memset(&_impl_.steamid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.appid_) -
        reinterpret_cast<char*>(&_impl_.steamid_)) + sizeof(_impl_.appid_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CCommunity_GetGamePersonalDataEntries_Request::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 appid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_appid(&has_bits);
          _impl_.appid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 steamid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_steamid(&has_bits);
          _impl_.steamid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_type();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CCommunity_GetGamePersonalDataEntries_Request.type");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string continue_token = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_continue_token();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CCommunity_GetGamePersonalDataEntries_Request.continue_token");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CCommunity_GetGamePersonalDataEntries_Request::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCommunity_GetGamePersonalDataEntries_Request)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 appid = 1;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_appid(), target);
  }

  // optional uint64 steamid = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_steamid(), target);
  }

  // optional string type = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_type().data(), static_cast<int>(this->_internal_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CCommunity_GetGamePersonalDataEntries_Request.type");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_type(), target);
  }

  // optional string continue_token = 4;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_continue_token().data(), static_cast<int>(this->_internal_continue_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CCommunity_GetGamePersonalDataEntries_Request.continue_token");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_continue_token(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCommunity_GetGamePersonalDataEntries_Request)
  return target;
}

size_t CCommunity_GetGamePersonalDataEntries_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCommunity_GetGamePersonalDataEntries_Request)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string type = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_type());
    }

    // optional string continue_token = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_continue_token());
    }

    // optional uint64 steamid = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_steamid());
    }

    // optional uint32 appid = 1;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_appid());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CCommunity_GetGamePersonalDataEntries_Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CCommunity_GetGamePersonalDataEntries_Request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CCommunity_GetGamePersonalDataEntries_Request::GetClassData() const { return &_class_data_; }


void CCommunity_GetGamePersonalDataEntries_Request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CCommunity_GetGamePersonalDataEntries_Request*>(&to_msg);
  auto& from = static_cast<const CCommunity_GetGamePersonalDataEntries_Request&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CCommunity_GetGamePersonalDataEntries_Request)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_type(from._internal_type());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_continue_token(from._internal_continue_token());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.steamid_ = from._impl_.steamid_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.appid_ = from._impl_.appid_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CCommunity_GetGamePersonalDataEntries_Request::CopyFrom(const CCommunity_GetGamePersonalDataEntries_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCommunity_GetGamePersonalDataEntries_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCommunity_GetGamePersonalDataEntries_Request::IsInitialized() const {
  return true;
}

void CCommunity_GetGamePersonalDataEntries_Request::InternalSwap(CCommunity_GetGamePersonalDataEntries_Request* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.type_, lhs_arena,
      &other->_impl_.type_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.continue_token_, lhs_arena,
      &other->_impl_.continue_token_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CCommunity_GetGamePersonalDataEntries_Request, _impl_.appid_)
      + sizeof(CCommunity_GetGamePersonalDataEntries_Request::_impl_.appid_)
      - PROTOBUF_FIELD_OFFSET(CCommunity_GetGamePersonalDataEntries_Request, _impl_.steamid_)>(
          reinterpret_cast<char*>(&_impl_.steamid_),
          reinterpret_cast<char*>(&other->_impl_.steamid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CCommunity_GetGamePersonalDataEntries_Request::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gcsystemmsgs_2eproto_getter, &descriptor_table_gcsystemmsgs_2eproto_once,
      file_level_metadata_gcsystemmsgs_2eproto[10]);
}

// ===================================================================

class CCommunity_GetGamePersonalDataEntries_Response::_Internal {
 public:
  using HasBits = decltype(std::declval<CCommunity_GetGamePersonalDataEntries_Response>()._impl_._has_bits_);
  static void set_has_gceresult(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_continue_token(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_continue_text(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CCommunity_GetGamePersonalDataEntries_Response::CCommunity_GetGamePersonalDataEntries_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CCommunity_GetGamePersonalDataEntries_Response)
}
CCommunity_GetGamePersonalDataEntries_Response::CCommunity_GetGamePersonalDataEntries_Response(const CCommunity_GetGamePersonalDataEntries_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CCommunity_GetGamePersonalDataEntries_Response* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.entries_){from._impl_.entries_}
    , decltype(_impl_.continue_token_){}
    , decltype(_impl_.continue_text_){}
    , decltype(_impl_.gceresult_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.continue_token_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.continue_token_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_continue_token()) {
    _this->_impl_.continue_token_.Set(from._internal_continue_token(), 
      _this->GetArenaForAllocation());
  }
  _impl_.continue_text_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.continue_text_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_continue_text()) {
    _this->_impl_.continue_text_.Set(from._internal_continue_text(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.gceresult_ = from._impl_.gceresult_;
  // @@protoc_insertion_point(copy_constructor:CCommunity_GetGamePersonalDataEntries_Response)
}

inline void CCommunity_GetGamePersonalDataEntries_Response::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.entries_){arena}
    , decltype(_impl_.continue_token_){}
    , decltype(_impl_.continue_text_){}
    , decltype(_impl_.gceresult_){0u}
  };
  _impl_.continue_token_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.continue_token_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.continue_text_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.continue_text_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CCommunity_GetGamePersonalDataEntries_Response::~CCommunity_GetGamePersonalDataEntries_Response() {
  // @@protoc_insertion_point(destructor:CCommunity_GetGamePersonalDataEntries_Response)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CCommunity_GetGamePersonalDataEntries_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.entries_.~RepeatedPtrField();
  _impl_.continue_token_.Destroy();
  _impl_.continue_text_.Destroy();
}

void CCommunity_GetGamePersonalDataEntries_Response::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CCommunity_GetGamePersonalDataEntries_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CCommunity_GetGamePersonalDataEntries_Response)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.entries_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.continue_token_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.continue_text_.ClearNonDefaultToEmpty();
    }
  }
  _impl_.gceresult_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CCommunity_GetGamePersonalDataEntries_Response::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 gceresult = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_gceresult(&has_bits);
          _impl_.gceresult_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string entries = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_entries();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            #ifndef NDEBUG
            ::_pbi::VerifyUTF8(str, "CCommunity_GetGamePersonalDataEntries_Response.entries");
            #endif  // !NDEBUG
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional string continue_token = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_continue_token();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CCommunity_GetGamePersonalDataEntries_Response.continue_token");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string continue_text = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_continue_text();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CCommunity_GetGamePersonalDataEntries_Response.continue_text");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CCommunity_GetGamePersonalDataEntries_Response::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCommunity_GetGamePersonalDataEntries_Response)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 gceresult = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_gceresult(), target);
  }

  // repeated string entries = 2;
  for (int i = 0, n = this->_internal_entries_size(); i < n; i++) {
    const auto& s = this->_internal_entries(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CCommunity_GetGamePersonalDataEntries_Response.entries");
    target = stream->WriteString(2, s, target);
  }

  // optional string continue_token = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_continue_token().data(), static_cast<int>(this->_internal_continue_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CCommunity_GetGamePersonalDataEntries_Response.continue_token");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_continue_token(), target);
  }

  // optional string continue_text = 4;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_continue_text().data(), static_cast<int>(this->_internal_continue_text().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CCommunity_GetGamePersonalDataEntries_Response.continue_text");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_continue_text(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCommunity_GetGamePersonalDataEntries_Response)
  return target;
}

size_t CCommunity_GetGamePersonalDataEntries_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCommunity_GetGamePersonalDataEntries_Response)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string entries = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.entries_.size());
  for (int i = 0, n = _impl_.entries_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.entries_.Get(i));
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string continue_token = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_continue_token());
    }

    // optional string continue_text = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_continue_text());
    }

    // optional uint32 gceresult = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_gceresult());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CCommunity_GetGamePersonalDataEntries_Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CCommunity_GetGamePersonalDataEntries_Response::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CCommunity_GetGamePersonalDataEntries_Response::GetClassData() const { return &_class_data_; }


void CCommunity_GetGamePersonalDataEntries_Response::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CCommunity_GetGamePersonalDataEntries_Response*>(&to_msg);
  auto& from = static_cast<const CCommunity_GetGamePersonalDataEntries_Response&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CCommunity_GetGamePersonalDataEntries_Response)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.entries_.MergeFrom(from._impl_.entries_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_continue_token(from._internal_continue_token());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_continue_text(from._internal_continue_text());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.gceresult_ = from._impl_.gceresult_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CCommunity_GetGamePersonalDataEntries_Response::CopyFrom(const CCommunity_GetGamePersonalDataEntries_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCommunity_GetGamePersonalDataEntries_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCommunity_GetGamePersonalDataEntries_Response::IsInitialized() const {
  return true;
}

void CCommunity_GetGamePersonalDataEntries_Response::InternalSwap(CCommunity_GetGamePersonalDataEntries_Response* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.entries_.InternalSwap(&other->_impl_.entries_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.continue_token_, lhs_arena,
      &other->_impl_.continue_token_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.continue_text_, lhs_arena,
      &other->_impl_.continue_text_, rhs_arena
  );
  swap(_impl_.gceresult_, other->_impl_.gceresult_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CCommunity_GetGamePersonalDataEntries_Response::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gcsystemmsgs_2eproto_getter, &descriptor_table_gcsystemmsgs_2eproto_once,
      file_level_metadata_gcsystemmsgs_2eproto[11]);
}

// ===================================================================

class CCommunity_TerminateGamePersonalDataEntries_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CCommunity_TerminateGamePersonalDataEntries_Request>()._impl_._has_bits_);
  static void set_has_appid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_steamid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CCommunity_TerminateGamePersonalDataEntries_Request::CCommunity_TerminateGamePersonalDataEntries_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CCommunity_TerminateGamePersonalDataEntries_Request)
}
CCommunity_TerminateGamePersonalDataEntries_Request::CCommunity_TerminateGamePersonalDataEntries_Request(const CCommunity_TerminateGamePersonalDataEntries_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CCommunity_TerminateGamePersonalDataEntries_Request* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.steamid_){}
    , decltype(_impl_.appid_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.steamid_, &from._impl_.steamid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.appid_) -
    reinterpret_cast<char*>(&_impl_.steamid_)) + sizeof(_impl_.appid_));
  // @@protoc_insertion_point(copy_constructor:CCommunity_TerminateGamePersonalDataEntries_Request)
}

inline void CCommunity_TerminateGamePersonalDataEntries_Request::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.steamid_){uint64_t{0u}}
    , decltype(_impl_.appid_){0u}
  };
}

CCommunity_TerminateGamePersonalDataEntries_Request::~CCommunity_TerminateGamePersonalDataEntries_Request() {
  // @@protoc_insertion_point(destructor:CCommunity_TerminateGamePersonalDataEntries_Request)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CCommunity_TerminateGamePersonalDataEntries_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CCommunity_TerminateGamePersonalDataEntries_Request::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CCommunity_TerminateGamePersonalDataEntries_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CCommunity_TerminateGamePersonalDataEntries_Request)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.steamid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.appid_) -
        reinterpret_cast<char*>(&_impl_.steamid_)) + sizeof(_impl_.appid_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CCommunity_TerminateGamePersonalDataEntries_Request::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 appid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_appid(&has_bits);
          _impl_.appid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 steamid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_steamid(&has_bits);
          _impl_.steamid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CCommunity_TerminateGamePersonalDataEntries_Request::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCommunity_TerminateGamePersonalDataEntries_Request)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 appid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_appid(), target);
  }

  // optional uint64 steamid = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_steamid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCommunity_TerminateGamePersonalDataEntries_Request)
  return target;
}

size_t CCommunity_TerminateGamePersonalDataEntries_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCommunity_TerminateGamePersonalDataEntries_Request)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint64 steamid = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_steamid());
    }

    // optional uint32 appid = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_appid());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CCommunity_TerminateGamePersonalDataEntries_Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CCommunity_TerminateGamePersonalDataEntries_Request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CCommunity_TerminateGamePersonalDataEntries_Request::GetClassData() const { return &_class_data_; }


void CCommunity_TerminateGamePersonalDataEntries_Request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CCommunity_TerminateGamePersonalDataEntries_Request*>(&to_msg);
  auto& from = static_cast<const CCommunity_TerminateGamePersonalDataEntries_Request&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CCommunity_TerminateGamePersonalDataEntries_Request)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.steamid_ = from._impl_.steamid_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.appid_ = from._impl_.appid_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CCommunity_TerminateGamePersonalDataEntries_Request::CopyFrom(const CCommunity_TerminateGamePersonalDataEntries_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCommunity_TerminateGamePersonalDataEntries_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCommunity_TerminateGamePersonalDataEntries_Request::IsInitialized() const {
  return true;
}

void CCommunity_TerminateGamePersonalDataEntries_Request::InternalSwap(CCommunity_TerminateGamePersonalDataEntries_Request* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CCommunity_TerminateGamePersonalDataEntries_Request, _impl_.appid_)
      + sizeof(CCommunity_TerminateGamePersonalDataEntries_Request::_impl_.appid_)
      - PROTOBUF_FIELD_OFFSET(CCommunity_TerminateGamePersonalDataEntries_Request, _impl_.steamid_)>(
          reinterpret_cast<char*>(&_impl_.steamid_),
          reinterpret_cast<char*>(&other->_impl_.steamid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CCommunity_TerminateGamePersonalDataEntries_Request::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gcsystemmsgs_2eproto_getter, &descriptor_table_gcsystemmsgs_2eproto_once,
      file_level_metadata_gcsystemmsgs_2eproto[12]);
}

// ===================================================================

class CCommunity_TerminateGamePersonalDataEntries_Response::_Internal {
 public:
  using HasBits = decltype(std::declval<CCommunity_TerminateGamePersonalDataEntries_Response>()._impl_._has_bits_);
  static void set_has_gceresult(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CCommunity_TerminateGamePersonalDataEntries_Response::CCommunity_TerminateGamePersonalDataEntries_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CCommunity_TerminateGamePersonalDataEntries_Response)
}
CCommunity_TerminateGamePersonalDataEntries_Response::CCommunity_TerminateGamePersonalDataEntries_Response(const CCommunity_TerminateGamePersonalDataEntries_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CCommunity_TerminateGamePersonalDataEntries_Response* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.gceresult_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.gceresult_ = from._impl_.gceresult_;
  // @@protoc_insertion_point(copy_constructor:CCommunity_TerminateGamePersonalDataEntries_Response)
}

inline void CCommunity_TerminateGamePersonalDataEntries_Response::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.gceresult_){0u}
  };
}

CCommunity_TerminateGamePersonalDataEntries_Response::~CCommunity_TerminateGamePersonalDataEntries_Response() {
  // @@protoc_insertion_point(destructor:CCommunity_TerminateGamePersonalDataEntries_Response)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CCommunity_TerminateGamePersonalDataEntries_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CCommunity_TerminateGamePersonalDataEntries_Response::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CCommunity_TerminateGamePersonalDataEntries_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CCommunity_TerminateGamePersonalDataEntries_Response)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.gceresult_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CCommunity_TerminateGamePersonalDataEntries_Response::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 gceresult = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_gceresult(&has_bits);
          _impl_.gceresult_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CCommunity_TerminateGamePersonalDataEntries_Response::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCommunity_TerminateGamePersonalDataEntries_Response)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 gceresult = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_gceresult(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCommunity_TerminateGamePersonalDataEntries_Response)
  return target;
}

size_t CCommunity_TerminateGamePersonalDataEntries_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCommunity_TerminateGamePersonalDataEntries_Response)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 gceresult = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_gceresult());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CCommunity_TerminateGamePersonalDataEntries_Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CCommunity_TerminateGamePersonalDataEntries_Response::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CCommunity_TerminateGamePersonalDataEntries_Response::GetClassData() const { return &_class_data_; }


void CCommunity_TerminateGamePersonalDataEntries_Response::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CCommunity_TerminateGamePersonalDataEntries_Response*>(&to_msg);
  auto& from = static_cast<const CCommunity_TerminateGamePersonalDataEntries_Response&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CCommunity_TerminateGamePersonalDataEntries_Response)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_gceresult()) {
    _this->_internal_set_gceresult(from._internal_gceresult());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CCommunity_TerminateGamePersonalDataEntries_Response::CopyFrom(const CCommunity_TerminateGamePersonalDataEntries_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCommunity_TerminateGamePersonalDataEntries_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCommunity_TerminateGamePersonalDataEntries_Response::IsInitialized() const {
  return true;
}

void CCommunity_TerminateGamePersonalDataEntries_Response::InternalSwap(CCommunity_TerminateGamePersonalDataEntries_Response* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.gceresult_, other->_impl_.gceresult_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CCommunity_TerminateGamePersonalDataEntries_Response::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gcsystemmsgs_2eproto_getter, &descriptor_table_gcsystemmsgs_2eproto_once,
      file_level_metadata_gcsystemmsgs_2eproto[13]);
}

// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::CMsgGCHVacVerificationChange*
Arena::CreateMaybeMessage< ::CMsgGCHVacVerificationChange >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCHVacVerificationChange >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCHAccountPhoneNumberChange*
Arena::CreateMaybeMessage< ::CMsgGCHAccountPhoneNumberChange >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCHAccountPhoneNumberChange >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCHInviteUserToLobby*
Arena::CreateMaybeMessage< ::CMsgGCHInviteUserToLobby >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCHInviteUserToLobby >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCHRecurringSubscriptionStatusChange*
Arena::CreateMaybeMessage< ::CMsgGCHRecurringSubscriptionStatusChange >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCHRecurringSubscriptionStatusChange >(arena);
}
template<> PROTOBUF_NOINLINE ::CQuest_PublisherAddCommunityItemsToPlayer_Request_Attribute*
Arena::CreateMaybeMessage< ::CQuest_PublisherAddCommunityItemsToPlayer_Request_Attribute >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CQuest_PublisherAddCommunityItemsToPlayer_Request_Attribute >(arena);
}
template<> PROTOBUF_NOINLINE ::CQuest_PublisherAddCommunityItemsToPlayer_Request*
Arena::CreateMaybeMessage< ::CQuest_PublisherAddCommunityItemsToPlayer_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CQuest_PublisherAddCommunityItemsToPlayer_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CQuest_PublisherAddCommunityItemsToPlayer_Response*
Arena::CreateMaybeMessage< ::CQuest_PublisherAddCommunityItemsToPlayer_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CQuest_PublisherAddCommunityItemsToPlayer_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CCommunity_GamePersonalDataCategoryInfo*
Arena::CreateMaybeMessage< ::CCommunity_GamePersonalDataCategoryInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CCommunity_GamePersonalDataCategoryInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::CCommunity_GetGamePersonalDataCategories_Request*
Arena::CreateMaybeMessage< ::CCommunity_GetGamePersonalDataCategories_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CCommunity_GetGamePersonalDataCategories_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CCommunity_GetGamePersonalDataCategories_Response*
Arena::CreateMaybeMessage< ::CCommunity_GetGamePersonalDataCategories_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CCommunity_GetGamePersonalDataCategories_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CCommunity_GetGamePersonalDataEntries_Request*
Arena::CreateMaybeMessage< ::CCommunity_GetGamePersonalDataEntries_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CCommunity_GetGamePersonalDataEntries_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CCommunity_GetGamePersonalDataEntries_Response*
Arena::CreateMaybeMessage< ::CCommunity_GetGamePersonalDataEntries_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CCommunity_GetGamePersonalDataEntries_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CCommunity_TerminateGamePersonalDataEntries_Request*
Arena::CreateMaybeMessage< ::CCommunity_TerminateGamePersonalDataEntries_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CCommunity_TerminateGamePersonalDataEntries_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CCommunity_TerminateGamePersonalDataEntries_Response*
Arena::CreateMaybeMessage< ::CCommunity_TerminateGamePersonalDataEntries_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CCommunity_TerminateGamePersonalDataEntries_Response >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
