// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gameevents.proto

#include "gameevents.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

PROTOBUF_CONSTEXPR CMsgVDebugGameSessionIDEvent::CMsgVDebugGameSessionIDEvent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.gamesessionid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.clientid_)*/0} {}
struct CMsgVDebugGameSessionIDEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgVDebugGameSessionIDEventDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgVDebugGameSessionIDEventDefaultTypeInternal() {}
  union {
    CMsgVDebugGameSessionIDEvent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgVDebugGameSessionIDEventDefaultTypeInternal _CMsgVDebugGameSessionIDEvent_default_instance_;
PROTOBUF_CONSTEXPR CMsgPlaceDecalEvent::CMsgPlaceDecalEvent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.position_)*/nullptr
  , /*decltype(_impl_.normal_)*/nullptr
  , /*decltype(_impl_.saxis_)*/nullptr
  , /*decltype(_impl_.boneindex_)*/0
  , /*decltype(_impl_.flags_)*/0u
  , /*decltype(_impl_.color_)*/0u
  , /*decltype(_impl_.random_seed_)*/0
  , /*decltype(_impl_.decal_group_name_)*/0u
  , /*decltype(_impl_.size_override_)*/0
  , /*decltype(_impl_.material_id_)*/uint64_t{0u}
  , /*decltype(_impl_.sequence_name_)*/0u
  , /*decltype(_impl_.entityhandle_)*/16777215u} {}
struct CMsgPlaceDecalEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgPlaceDecalEventDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgPlaceDecalEventDefaultTypeInternal() {}
  union {
    CMsgPlaceDecalEvent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgPlaceDecalEventDefaultTypeInternal _CMsgPlaceDecalEvent_default_instance_;
PROTOBUF_CONSTEXPR CMsgClearWorldDecalsEvent::CMsgClearWorldDecalsEvent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.flagstoclear_)*/0u} {}
struct CMsgClearWorldDecalsEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgClearWorldDecalsEventDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgClearWorldDecalsEventDefaultTypeInternal() {}
  union {
    CMsgClearWorldDecalsEvent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgClearWorldDecalsEventDefaultTypeInternal _CMsgClearWorldDecalsEvent_default_instance_;
PROTOBUF_CONSTEXPR CMsgClearEntityDecalsEvent::CMsgClearEntityDecalsEvent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.flagstoclear_)*/0u} {}
struct CMsgClearEntityDecalsEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgClearEntityDecalsEventDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgClearEntityDecalsEventDefaultTypeInternal() {}
  union {
    CMsgClearEntityDecalsEvent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgClearEntityDecalsEventDefaultTypeInternal _CMsgClearEntityDecalsEvent_default_instance_;
PROTOBUF_CONSTEXPR CMsgClearDecalsForEntityEvent::CMsgClearDecalsForEntityEvent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.flagstoclear_)*/0u
  , /*decltype(_impl_.entityhandle_)*/16777215u} {}
struct CMsgClearDecalsForEntityEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgClearDecalsForEntityEventDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgClearDecalsForEntityEventDefaultTypeInternal() {}
  union {
    CMsgClearDecalsForEntityEvent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgClearDecalsForEntityEventDefaultTypeInternal _CMsgClearDecalsForEntityEvent_default_instance_;
PROTOBUF_CONSTEXPR CMsgSource1LegacyGameEventList_key_t::CMsgSource1LegacyGameEventList_key_t(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.type_)*/0} {}
struct CMsgSource1LegacyGameEventList_key_tDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgSource1LegacyGameEventList_key_tDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgSource1LegacyGameEventList_key_tDefaultTypeInternal() {}
  union {
    CMsgSource1LegacyGameEventList_key_t _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgSource1LegacyGameEventList_key_tDefaultTypeInternal _CMsgSource1LegacyGameEventList_key_t_default_instance_;
PROTOBUF_CONSTEXPR CMsgSource1LegacyGameEventList_descriptor_t::CMsgSource1LegacyGameEventList_descriptor_t(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.keys_)*/{}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.eventid_)*/0} {}
struct CMsgSource1LegacyGameEventList_descriptor_tDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgSource1LegacyGameEventList_descriptor_tDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgSource1LegacyGameEventList_descriptor_tDefaultTypeInternal() {}
  union {
    CMsgSource1LegacyGameEventList_descriptor_t _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgSource1LegacyGameEventList_descriptor_tDefaultTypeInternal _CMsgSource1LegacyGameEventList_descriptor_t_default_instance_;
PROTOBUF_CONSTEXPR CMsgSource1LegacyGameEventList::CMsgSource1LegacyGameEventList(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.descriptors_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CMsgSource1LegacyGameEventListDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgSource1LegacyGameEventListDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgSource1LegacyGameEventListDefaultTypeInternal() {}
  union {
    CMsgSource1LegacyGameEventList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgSource1LegacyGameEventListDefaultTypeInternal _CMsgSource1LegacyGameEventList_default_instance_;
PROTOBUF_CONSTEXPR CMsgSource1LegacyListenEvents::CMsgSource1LegacyListenEvents(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.eventarraybits_)*/{}
  , /*decltype(_impl_.playerslot_)*/0} {}
struct CMsgSource1LegacyListenEventsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgSource1LegacyListenEventsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgSource1LegacyListenEventsDefaultTypeInternal() {}
  union {
    CMsgSource1LegacyListenEvents _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgSource1LegacyListenEventsDefaultTypeInternal _CMsgSource1LegacyListenEvents_default_instance_;
PROTOBUF_CONSTEXPR CMsgSource1LegacyGameEvent_key_t::CMsgSource1LegacyGameEvent_key_t(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.val_string_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.type_)*/0
  , /*decltype(_impl_.val_float_)*/0
  , /*decltype(_impl_.val_long_)*/0
  , /*decltype(_impl_.val_short_)*/0
  , /*decltype(_impl_.val_byte_)*/0
  , /*decltype(_impl_.val_bool_)*/false
  , /*decltype(_impl_.val_uint64_)*/uint64_t{0u}} {}
struct CMsgSource1LegacyGameEvent_key_tDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgSource1LegacyGameEvent_key_tDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgSource1LegacyGameEvent_key_tDefaultTypeInternal() {}
  union {
    CMsgSource1LegacyGameEvent_key_t _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgSource1LegacyGameEvent_key_tDefaultTypeInternal _CMsgSource1LegacyGameEvent_key_t_default_instance_;
PROTOBUF_CONSTEXPR CMsgSource1LegacyGameEvent::CMsgSource1LegacyGameEvent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.keys_)*/{}
  , /*decltype(_impl_.event_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.eventid_)*/0
  , /*decltype(_impl_.server_tick_)*/0
  , /*decltype(_impl_.passthrough_)*/0} {}
struct CMsgSource1LegacyGameEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgSource1LegacyGameEventDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgSource1LegacyGameEventDefaultTypeInternal() {}
  union {
    CMsgSource1LegacyGameEvent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgSource1LegacyGameEventDefaultTypeInternal _CMsgSource1LegacyGameEvent_default_instance_;
PROTOBUF_CONSTEXPR CMsgSosStartSoundEvent::CMsgSosStartSoundEvent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.packed_params_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.soundevent_guid_)*/0
  , /*decltype(_impl_.soundevent_hash_)*/0u
  , /*decltype(_impl_.seed_)*/0
  , /*decltype(_impl_.start_time_)*/0
  , /*decltype(_impl_.source_entity_index_)*/-1} {}
struct CMsgSosStartSoundEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgSosStartSoundEventDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgSosStartSoundEventDefaultTypeInternal() {}
  union {
    CMsgSosStartSoundEvent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgSosStartSoundEventDefaultTypeInternal _CMsgSosStartSoundEvent_default_instance_;
PROTOBUF_CONSTEXPR CMsgSosStopSoundEvent::CMsgSosStopSoundEvent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.soundevent_guid_)*/0} {}
struct CMsgSosStopSoundEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgSosStopSoundEventDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgSosStopSoundEventDefaultTypeInternal() {}
  union {
    CMsgSosStopSoundEvent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgSosStopSoundEventDefaultTypeInternal _CMsgSosStopSoundEvent_default_instance_;
PROTOBUF_CONSTEXPR CMsgSosStopSoundEventHash::CMsgSosStopSoundEventHash(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.soundevent_hash_)*/0u
  , /*decltype(_impl_.source_entity_index_)*/-1} {}
struct CMsgSosStopSoundEventHashDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgSosStopSoundEventHashDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgSosStopSoundEventHashDefaultTypeInternal() {}
  union {
    CMsgSosStopSoundEventHash _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgSosStopSoundEventHashDefaultTypeInternal _CMsgSosStopSoundEventHash_default_instance_;
PROTOBUF_CONSTEXPR CMsgSosSetSoundEventParams::CMsgSosSetSoundEventParams(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.packed_params_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.soundevent_guid_)*/0} {}
struct CMsgSosSetSoundEventParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgSosSetSoundEventParamsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgSosSetSoundEventParamsDefaultTypeInternal() {}
  union {
    CMsgSosSetSoundEventParams _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgSosSetSoundEventParamsDefaultTypeInternal _CMsgSosSetSoundEventParams_default_instance_;
PROTOBUF_CONSTEXPR CMsgSosSetLibraryStackFields::CMsgSosSetLibraryStackFields(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.packed_fields_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.stack_hash_)*/0u} {}
struct CMsgSosSetLibraryStackFieldsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgSosSetLibraryStackFieldsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgSosSetLibraryStackFieldsDefaultTypeInternal() {}
  union {
    CMsgSosSetLibraryStackFields _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgSosSetLibraryStackFieldsDefaultTypeInternal _CMsgSosSetLibraryStackFields_default_instance_;
static ::_pb::Metadata file_level_metadata_gameevents_2eproto[16];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_gameevents_2eproto[1];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_gameevents_2eproto = nullptr;

const uint32_t TableStruct_gameevents_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::CMsgVDebugGameSessionIDEvent, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgVDebugGameSessionIDEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgVDebugGameSessionIDEvent, _impl_.clientid_),
  PROTOBUF_FIELD_OFFSET(::CMsgVDebugGameSessionIDEvent, _impl_.gamesessionid_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgPlaceDecalEvent, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgPlaceDecalEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgPlaceDecalEvent, _impl_.position_),
  PROTOBUF_FIELD_OFFSET(::CMsgPlaceDecalEvent, _impl_.normal_),
  PROTOBUF_FIELD_OFFSET(::CMsgPlaceDecalEvent, _impl_.saxis_),
  PROTOBUF_FIELD_OFFSET(::CMsgPlaceDecalEvent, _impl_.boneindex_),
  PROTOBUF_FIELD_OFFSET(::CMsgPlaceDecalEvent, _impl_.flags_),
  PROTOBUF_FIELD_OFFSET(::CMsgPlaceDecalEvent, _impl_.color_),
  PROTOBUF_FIELD_OFFSET(::CMsgPlaceDecalEvent, _impl_.random_seed_),
  PROTOBUF_FIELD_OFFSET(::CMsgPlaceDecalEvent, _impl_.decal_group_name_),
  PROTOBUF_FIELD_OFFSET(::CMsgPlaceDecalEvent, _impl_.size_override_),
  PROTOBUF_FIELD_OFFSET(::CMsgPlaceDecalEvent, _impl_.entityhandle_),
  PROTOBUF_FIELD_OFFSET(::CMsgPlaceDecalEvent, _impl_.material_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgPlaceDecalEvent, _impl_.sequence_name_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  11,
  9,
  10,
  PROTOBUF_FIELD_OFFSET(::CMsgClearWorldDecalsEvent, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClearWorldDecalsEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgClearWorldDecalsEvent, _impl_.flagstoclear_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgClearEntityDecalsEvent, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClearEntityDecalsEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgClearEntityDecalsEvent, _impl_.flagstoclear_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgClearDecalsForEntityEvent, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClearDecalsForEntityEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgClearDecalsForEntityEvent, _impl_.flagstoclear_),
  PROTOBUF_FIELD_OFFSET(::CMsgClearDecalsForEntityEvent, _impl_.entityhandle_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgSource1LegacyGameEventList_key_t, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgSource1LegacyGameEventList_key_t, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgSource1LegacyGameEventList_key_t, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::CMsgSource1LegacyGameEventList_key_t, _impl_.name_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgSource1LegacyGameEventList_descriptor_t, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgSource1LegacyGameEventList_descriptor_t, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgSource1LegacyGameEventList_descriptor_t, _impl_.eventid_),
  PROTOBUF_FIELD_OFFSET(::CMsgSource1LegacyGameEventList_descriptor_t, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::CMsgSource1LegacyGameEventList_descriptor_t, _impl_.keys_),
  1,
  0,
  ~0u,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsgSource1LegacyGameEventList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgSource1LegacyGameEventList, _impl_.descriptors_),
  PROTOBUF_FIELD_OFFSET(::CMsgSource1LegacyListenEvents, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgSource1LegacyListenEvents, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgSource1LegacyListenEvents, _impl_.playerslot_),
  PROTOBUF_FIELD_OFFSET(::CMsgSource1LegacyListenEvents, _impl_.eventarraybits_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CMsgSource1LegacyGameEvent_key_t, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgSource1LegacyGameEvent_key_t, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgSource1LegacyGameEvent_key_t, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::CMsgSource1LegacyGameEvent_key_t, _impl_.val_string_),
  PROTOBUF_FIELD_OFFSET(::CMsgSource1LegacyGameEvent_key_t, _impl_.val_float_),
  PROTOBUF_FIELD_OFFSET(::CMsgSource1LegacyGameEvent_key_t, _impl_.val_long_),
  PROTOBUF_FIELD_OFFSET(::CMsgSource1LegacyGameEvent_key_t, _impl_.val_short_),
  PROTOBUF_FIELD_OFFSET(::CMsgSource1LegacyGameEvent_key_t, _impl_.val_byte_),
  PROTOBUF_FIELD_OFFSET(::CMsgSource1LegacyGameEvent_key_t, _impl_.val_bool_),
  PROTOBUF_FIELD_OFFSET(::CMsgSource1LegacyGameEvent_key_t, _impl_.val_uint64_),
  1,
  0,
  2,
  3,
  4,
  5,
  6,
  7,
  PROTOBUF_FIELD_OFFSET(::CMsgSource1LegacyGameEvent, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgSource1LegacyGameEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgSource1LegacyGameEvent, _impl_.event_name_),
  PROTOBUF_FIELD_OFFSET(::CMsgSource1LegacyGameEvent, _impl_.eventid_),
  PROTOBUF_FIELD_OFFSET(::CMsgSource1LegacyGameEvent, _impl_.keys_),
  PROTOBUF_FIELD_OFFSET(::CMsgSource1LegacyGameEvent, _impl_.server_tick_),
  PROTOBUF_FIELD_OFFSET(::CMsgSource1LegacyGameEvent, _impl_.passthrough_),
  0,
  1,
  ~0u,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::CMsgSosStartSoundEvent, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgSosStartSoundEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgSosStartSoundEvent, _impl_.soundevent_guid_),
  PROTOBUF_FIELD_OFFSET(::CMsgSosStartSoundEvent, _impl_.soundevent_hash_),
  PROTOBUF_FIELD_OFFSET(::CMsgSosStartSoundEvent, _impl_.source_entity_index_),
  PROTOBUF_FIELD_OFFSET(::CMsgSosStartSoundEvent, _impl_.seed_),
  PROTOBUF_FIELD_OFFSET(::CMsgSosStartSoundEvent, _impl_.packed_params_),
  PROTOBUF_FIELD_OFFSET(::CMsgSosStartSoundEvent, _impl_.start_time_),
  1,
  2,
  5,
  3,
  0,
  4,
  PROTOBUF_FIELD_OFFSET(::CMsgSosStopSoundEvent, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgSosStopSoundEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgSosStopSoundEvent, _impl_.soundevent_guid_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgSosStopSoundEventHash, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgSosStopSoundEventHash, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgSosStopSoundEventHash, _impl_.soundevent_hash_),
  PROTOBUF_FIELD_OFFSET(::CMsgSosStopSoundEventHash, _impl_.source_entity_index_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgSosSetSoundEventParams, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgSosSetSoundEventParams, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgSosSetSoundEventParams, _impl_.soundevent_guid_),
  PROTOBUF_FIELD_OFFSET(::CMsgSosSetSoundEventParams, _impl_.packed_params_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgSosSetLibraryStackFields, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgSosSetLibraryStackFields, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgSosSetLibraryStackFields, _impl_.stack_hash_),
  PROTOBUF_FIELD_OFFSET(::CMsgSosSetLibraryStackFields, _impl_.packed_fields_),
  1,
  0,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, -1, sizeof(::CMsgVDebugGameSessionIDEvent)},
  { 10, 28, -1, sizeof(::CMsgPlaceDecalEvent)},
  { 40, 47, -1, sizeof(::CMsgClearWorldDecalsEvent)},
  { 48, 55, -1, sizeof(::CMsgClearEntityDecalsEvent)},
  { 56, 64, -1, sizeof(::CMsgClearDecalsForEntityEvent)},
  { 66, 74, -1, sizeof(::CMsgSource1LegacyGameEventList_key_t)},
  { 76, 85, -1, sizeof(::CMsgSource1LegacyGameEventList_descriptor_t)},
  { 88, -1, -1, sizeof(::CMsgSource1LegacyGameEventList)},
  { 95, 103, -1, sizeof(::CMsgSource1LegacyListenEvents)},
  { 105, 119, -1, sizeof(::CMsgSource1LegacyGameEvent_key_t)},
  { 127, 138, -1, sizeof(::CMsgSource1LegacyGameEvent)},
  { 143, 155, -1, sizeof(::CMsgSosStartSoundEvent)},
  { 161, 168, -1, sizeof(::CMsgSosStopSoundEvent)},
  { 169, 177, -1, sizeof(::CMsgSosStopSoundEventHash)},
  { 179, 187, -1, sizeof(::CMsgSosSetSoundEventParams)},
  { 189, 197, -1, sizeof(::CMsgSosSetLibraryStackFields)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::_CMsgVDebugGameSessionIDEvent_default_instance_._instance,
  &::_CMsgPlaceDecalEvent_default_instance_._instance,
  &::_CMsgClearWorldDecalsEvent_default_instance_._instance,
  &::_CMsgClearEntityDecalsEvent_default_instance_._instance,
  &::_CMsgClearDecalsForEntityEvent_default_instance_._instance,
  &::_CMsgSource1LegacyGameEventList_key_t_default_instance_._instance,
  &::_CMsgSource1LegacyGameEventList_descriptor_t_default_instance_._instance,
  &::_CMsgSource1LegacyGameEventList_default_instance_._instance,
  &::_CMsgSource1LegacyListenEvents_default_instance_._instance,
  &::_CMsgSource1LegacyGameEvent_key_t_default_instance_._instance,
  &::_CMsgSource1LegacyGameEvent_default_instance_._instance,
  &::_CMsgSosStartSoundEvent_default_instance_._instance,
  &::_CMsgSosStopSoundEvent_default_instance_._instance,
  &::_CMsgSosStopSoundEventHash_default_instance_._instance,
  &::_CMsgSosSetSoundEventParams_default_instance_._instance,
  &::_CMsgSosSetLibraryStackFields_default_instance_._instance,
};

const char descriptor_table_protodef_gameevents_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\020gameevents.proto\032\026networkbasetypes.pro"
  "to\"G\n\034CMsgVDebugGameSessionIDEvent\022\020\n\010cl"
  "ientid\030\001 \001(\005\022\025\n\rgamesessionid\030\002 \001(\t\"\260\002\n\023"
  "CMsgPlaceDecalEvent\022\035\n\010position\030\001 \001(\0132\013."
  "CMsgVector\022\033\n\006normal\030\002 \001(\0132\013.CMsgVector\022"
  "\032\n\005saxis\030\003 \001(\0132\013.CMsgVector\022\021\n\tboneindex"
  "\030\004 \001(\005\022\r\n\005flags\030\005 \001(\r\022\r\n\005color\030\006 \001(\007\022\023\n\013"
  "random_seed\030\007 \001(\005\022\030\n\020decal_group_name\030\010 "
  "\001(\r\022\025\n\rsize_override\030\t \001(\002\022\036\n\014entityhand"
  "le\030\n \001(\r:\01016777215\022\023\n\013material_id\030\013 \001(\004\022"
  "\025\n\rsequence_name\030\014 \001(\r\"1\n\031CMsgClearWorld"
  "DecalsEvent\022\024\n\014flagstoclear\030\001 \001(\r\"2\n\032CMs"
  "gClearEntityDecalsEvent\022\024\n\014flagstoclear\030"
  "\001 \001(\r\"U\n\035CMsgClearDecalsForEntityEvent\022\024"
  "\n\014flagstoclear\030\001 \001(\r\022\036\n\014entityhandle\030\002 \001"
  "(\r:\01016777215\"\354\001\n\036CMsgSource1LegacyGameEv"
  "entList\022A\n\013descriptors\030\001 \003(\0132,.CMsgSourc"
  "e1LegacyGameEventList.descriptor_t\032#\n\005ke"
  "y_t\022\014\n\004type\030\001 \001(\005\022\014\n\004name\030\002 \001(\t\032b\n\014descr"
  "iptor_t\022\017\n\007eventid\030\001 \001(\005\022\014\n\004name\030\002 \001(\t\0223"
  "\n\004keys\030\003 \003(\0132%.CMsgSource1LegacyGameEven"
  "tList.key_t\"K\n\035CMsgSource1LegacyListenEv"
  "ents\022\022\n\nplayerslot\030\001 \001(\005\022\026\n\016eventarraybi"
  "ts\030\002 \003(\r\"\270\002\n\032CMsgSource1LegacyGameEvent\022"
  "\022\n\nevent_name\030\001 \001(\t\022\017\n\007eventid\030\002 \001(\005\022/\n\004"
  "keys\030\003 \003(\0132!.CMsgSource1LegacyGameEvent."
  "key_t\022\023\n\013server_tick\030\004 \001(\005\022\023\n\013passthroug"
  "h\030\005 \001(\005\032\231\001\n\005key_t\022\014\n\004type\030\001 \001(\005\022\022\n\nval_s"
  "tring\030\002 \001(\t\022\021\n\tval_float\030\003 \001(\002\022\020\n\010val_lo"
  "ng\030\004 \001(\005\022\021\n\tval_short\030\005 \001(\005\022\020\n\010val_byte\030"
  "\006 \001(\005\022\020\n\010val_bool\030\007 \001(\010\022\022\n\nval_uint64\030\010 "
  "\001(\004\"\244\001\n\026CMsgSosStartSoundEvent\022\027\n\017sounde"
  "vent_guid\030\001 \001(\005\022\027\n\017soundevent_hash\030\002 \001(\007"
  "\022\037\n\023source_entity_index\030\003 \001(\005:\002-1\022\014\n\004see"
  "d\030\004 \001(\005\022\025\n\rpacked_params\030\005 \001(\014\022\022\n\nstart_"
  "time\030\006 \001(\002\"0\n\025CMsgSosStopSoundEvent\022\027\n\017s"
  "oundevent_guid\030\001 \001(\005\"U\n\031CMsgSosStopSound"
  "EventHash\022\027\n\017soundevent_hash\030\001 \001(\007\022\037\n\023so"
  "urce_entity_index\030\002 \001(\005:\002-1\"L\n\032CMsgSosSe"
  "tSoundEventParams\022\027\n\017soundevent_guid\030\001 \001"
  "(\005\022\025\n\rpacked_params\030\005 \001(\014\"I\n\034CMsgSosSetL"
  "ibraryStackFields\022\022\n\nstack_hash\030\001 \001(\007\022\025\n"
  "\rpacked_fields\030\005 \001(\014*\255\003\n\017EBaseGameEvents"
  "\022 \n\033GE_VDebugGameSessionIDEvent\020\310\001\022\027\n\022GE"
  "_PlaceDecalEvent\020\311\001\022\035\n\030GE_ClearWorldDeca"
  "lsEvent\020\312\001\022\036\n\031GE_ClearEntityDecalsEvent\020"
  "\313\001\022!\n\034GE_ClearDecalsForEntityEvent\020\314\001\022\"\n"
  "\035GE_Source1LegacyGameEventList\020\315\001\022!\n\034GE_"
  "Source1LegacyListenEvents\020\316\001\022\036\n\031GE_Sourc"
  "e1LegacyGameEvent\020\317\001\022\032\n\025GE_SosStartSound"
  "Event\020\320\001\022\031\n\024GE_SosStopSoundEvent\020\321\001\022\036\n\031G"
  "E_SosSetSoundEventParams\020\322\001\022 \n\033GE_SosSet"
  "LibraryStackFields\020\323\001\022\035\n\030GE_SosStopSound"
  "EventHash\020\324\001"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_gameevents_2eproto_deps[1] = {
  &::descriptor_table_networkbasetypes_2eproto,
};
static ::_pbi::once_flag descriptor_table_gameevents_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_gameevents_2eproto = {
    false, false, 2132, descriptor_table_protodef_gameevents_2eproto,
    "gameevents.proto",
    &descriptor_table_gameevents_2eproto_once, descriptor_table_gameevents_2eproto_deps, 1, 16,
    schemas, file_default_instances, TableStruct_gameevents_2eproto::offsets,
    file_level_metadata_gameevents_2eproto, file_level_enum_descriptors_gameevents_2eproto,
    file_level_service_descriptors_gameevents_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_gameevents_2eproto_getter() {
  return &descriptor_table_gameevents_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_gameevents_2eproto(&descriptor_table_gameevents_2eproto);
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EBaseGameEvents_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_gameevents_2eproto);
  return file_level_enum_descriptors_gameevents_2eproto[0];
}
bool EBaseGameEvents_IsValid(int value) {
  switch (value) {
    case 200:
    case 201:
    case 202:
    case 203:
    case 204:
    case 205:
    case 206:
    case 207:
    case 208:
    case 209:
    case 210:
    case 211:
    case 212:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class CMsgVDebugGameSessionIDEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgVDebugGameSessionIDEvent>()._impl_._has_bits_);
  static void set_has_clientid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_gamesessionid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgVDebugGameSessionIDEvent::CMsgVDebugGameSessionIDEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgVDebugGameSessionIDEvent)
}
CMsgVDebugGameSessionIDEvent::CMsgVDebugGameSessionIDEvent(const CMsgVDebugGameSessionIDEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgVDebugGameSessionIDEvent* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.gamesessionid_){}
    , decltype(_impl_.clientid_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.gamesessionid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.gamesessionid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_gamesessionid()) {
    _this->_impl_.gamesessionid_.Set(from._internal_gamesessionid(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.clientid_ = from._impl_.clientid_;
  // @@protoc_insertion_point(copy_constructor:CMsgVDebugGameSessionIDEvent)
}

inline void CMsgVDebugGameSessionIDEvent::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.gamesessionid_){}
    , decltype(_impl_.clientid_){0}
  };
  _impl_.gamesessionid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.gamesessionid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CMsgVDebugGameSessionIDEvent::~CMsgVDebugGameSessionIDEvent() {
  // @@protoc_insertion_point(destructor:CMsgVDebugGameSessionIDEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgVDebugGameSessionIDEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.gamesessionid_.Destroy();
}

void CMsgVDebugGameSessionIDEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgVDebugGameSessionIDEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgVDebugGameSessionIDEvent)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.gamesessionid_.ClearNonDefaultToEmpty();
  }
  _impl_.clientid_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgVDebugGameSessionIDEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 clientid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_clientid(&has_bits);
          _impl_.clientid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string gamesessionid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_gamesessionid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CMsgVDebugGameSessionIDEvent.gamesessionid");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgVDebugGameSessionIDEvent::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgVDebugGameSessionIDEvent)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 clientid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_clientid(), target);
  }

  // optional string gamesessionid = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_gamesessionid().data(), static_cast<int>(this->_internal_gamesessionid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgVDebugGameSessionIDEvent.gamesessionid");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_gamesessionid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgVDebugGameSessionIDEvent)
  return target;
}

size_t CMsgVDebugGameSessionIDEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgVDebugGameSessionIDEvent)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string gamesessionid = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_gamesessionid());
    }

    // optional int32 clientid = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_clientid());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgVDebugGameSessionIDEvent::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgVDebugGameSessionIDEvent::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgVDebugGameSessionIDEvent::GetClassData() const { return &_class_data_; }


void CMsgVDebugGameSessionIDEvent::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgVDebugGameSessionIDEvent*>(&to_msg);
  auto& from = static_cast<const CMsgVDebugGameSessionIDEvent&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgVDebugGameSessionIDEvent)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_gamesessionid(from._internal_gamesessionid());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.clientid_ = from._impl_.clientid_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgVDebugGameSessionIDEvent::CopyFrom(const CMsgVDebugGameSessionIDEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgVDebugGameSessionIDEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgVDebugGameSessionIDEvent::IsInitialized() const {
  return true;
}

void CMsgVDebugGameSessionIDEvent::InternalSwap(CMsgVDebugGameSessionIDEvent* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.gamesessionid_, lhs_arena,
      &other->_impl_.gamesessionid_, rhs_arena
  );
  swap(_impl_.clientid_, other->_impl_.clientid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgVDebugGameSessionIDEvent::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gameevents_2eproto_getter, &descriptor_table_gameevents_2eproto_once,
      file_level_metadata_gameevents_2eproto[0]);
}

// ===================================================================

class CMsgPlaceDecalEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgPlaceDecalEvent>()._impl_._has_bits_);
  static const ::CMsgVector& position(const CMsgPlaceDecalEvent* msg);
  static void set_has_position(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::CMsgVector& normal(const CMsgPlaceDecalEvent* msg);
  static void set_has_normal(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::CMsgVector& saxis(const CMsgPlaceDecalEvent* msg);
  static void set_has_saxis(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_boneindex(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_flags(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_color(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_random_seed(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_decal_group_name(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_size_override(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_entityhandle(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_material_id(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_sequence_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
};

const ::CMsgVector&
CMsgPlaceDecalEvent::_Internal::position(const CMsgPlaceDecalEvent* msg) {
  return *msg->_impl_.position_;
}
const ::CMsgVector&
CMsgPlaceDecalEvent::_Internal::normal(const CMsgPlaceDecalEvent* msg) {
  return *msg->_impl_.normal_;
}
const ::CMsgVector&
CMsgPlaceDecalEvent::_Internal::saxis(const CMsgPlaceDecalEvent* msg) {
  return *msg->_impl_.saxis_;
}
void CMsgPlaceDecalEvent::clear_position() {
  if (_impl_.position_ != nullptr) _impl_.position_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void CMsgPlaceDecalEvent::clear_normal() {
  if (_impl_.normal_ != nullptr) _impl_.normal_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void CMsgPlaceDecalEvent::clear_saxis() {
  if (_impl_.saxis_ != nullptr) _impl_.saxis_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
CMsgPlaceDecalEvent::CMsgPlaceDecalEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgPlaceDecalEvent)
}
CMsgPlaceDecalEvent::CMsgPlaceDecalEvent(const CMsgPlaceDecalEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgPlaceDecalEvent* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.position_){nullptr}
    , decltype(_impl_.normal_){nullptr}
    , decltype(_impl_.saxis_){nullptr}
    , decltype(_impl_.boneindex_){}
    , decltype(_impl_.flags_){}
    , decltype(_impl_.color_){}
    , decltype(_impl_.random_seed_){}
    , decltype(_impl_.decal_group_name_){}
    , decltype(_impl_.size_override_){}
    , decltype(_impl_.material_id_){}
    , decltype(_impl_.sequence_name_){}
    , decltype(_impl_.entityhandle_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_position()) {
    _this->_impl_.position_ = new ::CMsgVector(*from._impl_.position_);
  }
  if (from._internal_has_normal()) {
    _this->_impl_.normal_ = new ::CMsgVector(*from._impl_.normal_);
  }
  if (from._internal_has_saxis()) {
    _this->_impl_.saxis_ = new ::CMsgVector(*from._impl_.saxis_);
  }
  ::memcpy(&_impl_.boneindex_, &from._impl_.boneindex_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.entityhandle_) -
    reinterpret_cast<char*>(&_impl_.boneindex_)) + sizeof(_impl_.entityhandle_));
  // @@protoc_insertion_point(copy_constructor:CMsgPlaceDecalEvent)
}

inline void CMsgPlaceDecalEvent::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.position_){nullptr}
    , decltype(_impl_.normal_){nullptr}
    , decltype(_impl_.saxis_){nullptr}
    , decltype(_impl_.boneindex_){0}
    , decltype(_impl_.flags_){0u}
    , decltype(_impl_.color_){0u}
    , decltype(_impl_.random_seed_){0}
    , decltype(_impl_.decal_group_name_){0u}
    , decltype(_impl_.size_override_){0}
    , decltype(_impl_.material_id_){uint64_t{0u}}
    , decltype(_impl_.sequence_name_){0u}
    , decltype(_impl_.entityhandle_){16777215u}
  };
}

CMsgPlaceDecalEvent::~CMsgPlaceDecalEvent() {
  // @@protoc_insertion_point(destructor:CMsgPlaceDecalEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgPlaceDecalEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.position_;
  if (this != internal_default_instance()) delete _impl_.normal_;
  if (this != internal_default_instance()) delete _impl_.saxis_;
}

void CMsgPlaceDecalEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgPlaceDecalEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgPlaceDecalEvent)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.position_ != nullptr);
      _impl_.position_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.normal_ != nullptr);
      _impl_.normal_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.saxis_ != nullptr);
      _impl_.saxis_->Clear();
    }
  }
  if (cached_has_bits & 0x000000f8u) {
    ::memset(&_impl_.boneindex_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.decal_group_name_) -
        reinterpret_cast<char*>(&_impl_.boneindex_)) + sizeof(_impl_.decal_group_name_));
  }
  if (cached_has_bits & 0x00000f00u) {
    ::memset(&_impl_.size_override_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.sequence_name_) -
        reinterpret_cast<char*>(&_impl_.size_override_)) + sizeof(_impl_.sequence_name_));
    _impl_.entityhandle_ = 16777215u;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgPlaceDecalEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .CMsgVector position = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_position(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .CMsgVector normal = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_normal(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .CMsgVector saxis = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_saxis(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 boneindex = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_boneindex(&has_bits);
          _impl_.boneindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 flags = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_flags(&has_bits);
          _impl_.flags_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional fixed32 color = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 53)) {
          _Internal::set_has_color(&has_bits);
          _impl_.color_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint32_t>(ptr);
          ptr += sizeof(uint32_t);
        } else
          goto handle_unusual;
        continue;
      // optional int32 random_seed = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_random_seed(&has_bits);
          _impl_.random_seed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 decal_group_name = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_decal_group_name(&has_bits);
          _impl_.decal_group_name_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float size_override = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 77)) {
          _Internal::set_has_size_override(&has_bits);
          _impl_.size_override_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 entityhandle = 10 [default = 16777215];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_entityhandle(&has_bits);
          _impl_.entityhandle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 material_id = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _Internal::set_has_material_id(&has_bits);
          _impl_.material_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 sequence_name = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _Internal::set_has_sequence_name(&has_bits);
          _impl_.sequence_name_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgPlaceDecalEvent::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgPlaceDecalEvent)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .CMsgVector position = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::position(this),
        _Internal::position(this).GetCachedSize(), target, stream);
  }

  // optional .CMsgVector normal = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::normal(this),
        _Internal::normal(this).GetCachedSize(), target, stream);
  }

  // optional .CMsgVector saxis = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::saxis(this),
        _Internal::saxis(this).GetCachedSize(), target, stream);
  }

  // optional int32 boneindex = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_boneindex(), target);
  }

  // optional uint32 flags = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_flags(), target);
  }

  // optional fixed32 color = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed32ToArray(6, this->_internal_color(), target);
  }

  // optional int32 random_seed = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(7, this->_internal_random_seed(), target);
  }

  // optional uint32 decal_group_name = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(8, this->_internal_decal_group_name(), target);
  }

  // optional float size_override = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(9, this->_internal_size_override(), target);
  }

  // optional uint32 entityhandle = 10 [default = 16777215];
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(10, this->_internal_entityhandle(), target);
  }

  // optional uint64 material_id = 11;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(11, this->_internal_material_id(), target);
  }

  // optional uint32 sequence_name = 12;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(12, this->_internal_sequence_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgPlaceDecalEvent)
  return target;
}

size_t CMsgPlaceDecalEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgPlaceDecalEvent)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .CMsgVector position = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.position_);
    }

    // optional .CMsgVector normal = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.normal_);
    }

    // optional .CMsgVector saxis = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.saxis_);
    }

    // optional int32 boneindex = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_boneindex());
    }

    // optional uint32 flags = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_flags());
    }

    // optional fixed32 color = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 4;
    }

    // optional int32 random_seed = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_random_seed());
    }

    // optional uint32 decal_group_name = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_decal_group_name());
    }

  }
  if (cached_has_bits & 0x00000f00u) {
    // optional float size_override = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 4;
    }

    // optional uint64 material_id = 11;
    if (cached_has_bits & 0x00000200u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_material_id());
    }

    // optional uint32 sequence_name = 12;
    if (cached_has_bits & 0x00000400u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_sequence_name());
    }

    // optional uint32 entityhandle = 10 [default = 16777215];
    if (cached_has_bits & 0x00000800u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_entityhandle());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgPlaceDecalEvent::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgPlaceDecalEvent::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgPlaceDecalEvent::GetClassData() const { return &_class_data_; }


void CMsgPlaceDecalEvent::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgPlaceDecalEvent*>(&to_msg);
  auto& from = static_cast<const CMsgPlaceDecalEvent&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgPlaceDecalEvent)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_position()->::CMsgVector::MergeFrom(
          from._internal_position());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_normal()->::CMsgVector::MergeFrom(
          from._internal_normal());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_saxis()->::CMsgVector::MergeFrom(
          from._internal_saxis());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.boneindex_ = from._impl_.boneindex_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.flags_ = from._impl_.flags_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.color_ = from._impl_.color_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.random_seed_ = from._impl_.random_seed_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.decal_group_name_ = from._impl_.decal_group_name_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000f00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.size_override_ = from._impl_.size_override_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.material_id_ = from._impl_.material_id_;
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_impl_.sequence_name_ = from._impl_.sequence_name_;
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_impl_.entityhandle_ = from._impl_.entityhandle_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgPlaceDecalEvent::CopyFrom(const CMsgPlaceDecalEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgPlaceDecalEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgPlaceDecalEvent::IsInitialized() const {
  return true;
}

void CMsgPlaceDecalEvent::InternalSwap(CMsgPlaceDecalEvent* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgPlaceDecalEvent, _impl_.sequence_name_)
      + sizeof(CMsgPlaceDecalEvent::_impl_.sequence_name_)
      - PROTOBUF_FIELD_OFFSET(CMsgPlaceDecalEvent, _impl_.position_)>(
          reinterpret_cast<char*>(&_impl_.position_),
          reinterpret_cast<char*>(&other->_impl_.position_));
  swap(_impl_.entityhandle_, other->_impl_.entityhandle_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgPlaceDecalEvent::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gameevents_2eproto_getter, &descriptor_table_gameevents_2eproto_once,
      file_level_metadata_gameevents_2eproto[1]);
}

// ===================================================================

class CMsgClearWorldDecalsEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClearWorldDecalsEvent>()._impl_._has_bits_);
  static void set_has_flagstoclear(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgClearWorldDecalsEvent::CMsgClearWorldDecalsEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgClearWorldDecalsEvent)
}
CMsgClearWorldDecalsEvent::CMsgClearWorldDecalsEvent(const CMsgClearWorldDecalsEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgClearWorldDecalsEvent* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.flagstoclear_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.flagstoclear_ = from._impl_.flagstoclear_;
  // @@protoc_insertion_point(copy_constructor:CMsgClearWorldDecalsEvent)
}

inline void CMsgClearWorldDecalsEvent::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.flagstoclear_){0u}
  };
}

CMsgClearWorldDecalsEvent::~CMsgClearWorldDecalsEvent() {
  // @@protoc_insertion_point(destructor:CMsgClearWorldDecalsEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgClearWorldDecalsEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgClearWorldDecalsEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgClearWorldDecalsEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClearWorldDecalsEvent)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.flagstoclear_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClearWorldDecalsEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 flagstoclear = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_flagstoclear(&has_bits);
          _impl_.flagstoclear_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgClearWorldDecalsEvent::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClearWorldDecalsEvent)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 flagstoclear = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_flagstoclear(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClearWorldDecalsEvent)
  return target;
}

size_t CMsgClearWorldDecalsEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClearWorldDecalsEvent)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 flagstoclear = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_flagstoclear());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgClearWorldDecalsEvent::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgClearWorldDecalsEvent::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgClearWorldDecalsEvent::GetClassData() const { return &_class_data_; }


void CMsgClearWorldDecalsEvent::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgClearWorldDecalsEvent*>(&to_msg);
  auto& from = static_cast<const CMsgClearWorldDecalsEvent&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgClearWorldDecalsEvent)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_flagstoclear()) {
    _this->_internal_set_flagstoclear(from._internal_flagstoclear());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgClearWorldDecalsEvent::CopyFrom(const CMsgClearWorldDecalsEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClearWorldDecalsEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClearWorldDecalsEvent::IsInitialized() const {
  return true;
}

void CMsgClearWorldDecalsEvent::InternalSwap(CMsgClearWorldDecalsEvent* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.flagstoclear_, other->_impl_.flagstoclear_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClearWorldDecalsEvent::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gameevents_2eproto_getter, &descriptor_table_gameevents_2eproto_once,
      file_level_metadata_gameevents_2eproto[2]);
}

// ===================================================================

class CMsgClearEntityDecalsEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClearEntityDecalsEvent>()._impl_._has_bits_);
  static void set_has_flagstoclear(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgClearEntityDecalsEvent::CMsgClearEntityDecalsEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgClearEntityDecalsEvent)
}
CMsgClearEntityDecalsEvent::CMsgClearEntityDecalsEvent(const CMsgClearEntityDecalsEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgClearEntityDecalsEvent* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.flagstoclear_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.flagstoclear_ = from._impl_.flagstoclear_;
  // @@protoc_insertion_point(copy_constructor:CMsgClearEntityDecalsEvent)
}

inline void CMsgClearEntityDecalsEvent::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.flagstoclear_){0u}
  };
}

CMsgClearEntityDecalsEvent::~CMsgClearEntityDecalsEvent() {
  // @@protoc_insertion_point(destructor:CMsgClearEntityDecalsEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgClearEntityDecalsEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgClearEntityDecalsEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgClearEntityDecalsEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClearEntityDecalsEvent)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.flagstoclear_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClearEntityDecalsEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 flagstoclear = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_flagstoclear(&has_bits);
          _impl_.flagstoclear_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgClearEntityDecalsEvent::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClearEntityDecalsEvent)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 flagstoclear = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_flagstoclear(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClearEntityDecalsEvent)
  return target;
}

size_t CMsgClearEntityDecalsEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClearEntityDecalsEvent)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 flagstoclear = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_flagstoclear());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgClearEntityDecalsEvent::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgClearEntityDecalsEvent::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgClearEntityDecalsEvent::GetClassData() const { return &_class_data_; }


void CMsgClearEntityDecalsEvent::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgClearEntityDecalsEvent*>(&to_msg);
  auto& from = static_cast<const CMsgClearEntityDecalsEvent&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgClearEntityDecalsEvent)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_flagstoclear()) {
    _this->_internal_set_flagstoclear(from._internal_flagstoclear());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgClearEntityDecalsEvent::CopyFrom(const CMsgClearEntityDecalsEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClearEntityDecalsEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClearEntityDecalsEvent::IsInitialized() const {
  return true;
}

void CMsgClearEntityDecalsEvent::InternalSwap(CMsgClearEntityDecalsEvent* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.flagstoclear_, other->_impl_.flagstoclear_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClearEntityDecalsEvent::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gameevents_2eproto_getter, &descriptor_table_gameevents_2eproto_once,
      file_level_metadata_gameevents_2eproto[3]);
}

// ===================================================================

class CMsgClearDecalsForEntityEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClearDecalsForEntityEvent>()._impl_._has_bits_);
  static void set_has_flagstoclear(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_entityhandle(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgClearDecalsForEntityEvent::CMsgClearDecalsForEntityEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgClearDecalsForEntityEvent)
}
CMsgClearDecalsForEntityEvent::CMsgClearDecalsForEntityEvent(const CMsgClearDecalsForEntityEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgClearDecalsForEntityEvent* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.flagstoclear_){}
    , decltype(_impl_.entityhandle_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.flagstoclear_, &from._impl_.flagstoclear_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.entityhandle_) -
    reinterpret_cast<char*>(&_impl_.flagstoclear_)) + sizeof(_impl_.entityhandle_));
  // @@protoc_insertion_point(copy_constructor:CMsgClearDecalsForEntityEvent)
}

inline void CMsgClearDecalsForEntityEvent::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.flagstoclear_){0u}
    , decltype(_impl_.entityhandle_){16777215u}
  };
}

CMsgClearDecalsForEntityEvent::~CMsgClearDecalsForEntityEvent() {
  // @@protoc_insertion_point(destructor:CMsgClearDecalsForEntityEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgClearDecalsForEntityEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgClearDecalsForEntityEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgClearDecalsForEntityEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClearDecalsForEntityEvent)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    _impl_.flagstoclear_ = 0u;
    _impl_.entityhandle_ = 16777215u;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClearDecalsForEntityEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 flagstoclear = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_flagstoclear(&has_bits);
          _impl_.flagstoclear_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 entityhandle = 2 [default = 16777215];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_entityhandle(&has_bits);
          _impl_.entityhandle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgClearDecalsForEntityEvent::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClearDecalsForEntityEvent)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 flagstoclear = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_flagstoclear(), target);
  }

  // optional uint32 entityhandle = 2 [default = 16777215];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_entityhandle(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClearDecalsForEntityEvent)
  return target;
}

size_t CMsgClearDecalsForEntityEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClearDecalsForEntityEvent)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 flagstoclear = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_flagstoclear());
    }

    // optional uint32 entityhandle = 2 [default = 16777215];
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_entityhandle());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgClearDecalsForEntityEvent::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgClearDecalsForEntityEvent::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgClearDecalsForEntityEvent::GetClassData() const { return &_class_data_; }


void CMsgClearDecalsForEntityEvent::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgClearDecalsForEntityEvent*>(&to_msg);
  auto& from = static_cast<const CMsgClearDecalsForEntityEvent&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgClearDecalsForEntityEvent)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.flagstoclear_ = from._impl_.flagstoclear_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.entityhandle_ = from._impl_.entityhandle_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgClearDecalsForEntityEvent::CopyFrom(const CMsgClearDecalsForEntityEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClearDecalsForEntityEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClearDecalsForEntityEvent::IsInitialized() const {
  return true;
}

void CMsgClearDecalsForEntityEvent::InternalSwap(CMsgClearDecalsForEntityEvent* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.flagstoclear_, other->_impl_.flagstoclear_);
  swap(_impl_.entityhandle_, other->_impl_.entityhandle_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClearDecalsForEntityEvent::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gameevents_2eproto_getter, &descriptor_table_gameevents_2eproto_once,
      file_level_metadata_gameevents_2eproto[4]);
}

// ===================================================================

class CMsgSource1LegacyGameEventList_key_t::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgSource1LegacyGameEventList_key_t>()._impl_._has_bits_);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgSource1LegacyGameEventList_key_t::CMsgSource1LegacyGameEventList_key_t(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgSource1LegacyGameEventList.key_t)
}
CMsgSource1LegacyGameEventList_key_t::CMsgSource1LegacyGameEventList_key_t(const CMsgSource1LegacyGameEventList_key_t& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgSource1LegacyGameEventList_key_t* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_){}
    , decltype(_impl_.type_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.type_ = from._impl_.type_;
  // @@protoc_insertion_point(copy_constructor:CMsgSource1LegacyGameEventList.key_t)
}

inline void CMsgSource1LegacyGameEventList_key_t::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_){}
    , decltype(_impl_.type_){0}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CMsgSource1LegacyGameEventList_key_t::~CMsgSource1LegacyGameEventList_key_t() {
  // @@protoc_insertion_point(destructor:CMsgSource1LegacyGameEventList.key_t)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgSource1LegacyGameEventList_key_t::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
}

void CMsgSource1LegacyGameEventList_key_t::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgSource1LegacyGameEventList_key_t::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSource1LegacyGameEventList.key_t)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.name_.ClearNonDefaultToEmpty();
  }
  _impl_.type_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgSource1LegacyGameEventList_key_t::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_type(&has_bits);
          _impl_.type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CMsgSource1LegacyGameEventList.key_t.name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgSource1LegacyGameEventList_key_t::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSource1LegacyGameEventList.key_t)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 type = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_type(), target);
  }

  // optional string name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgSource1LegacyGameEventList.key_t.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSource1LegacyGameEventList.key_t)
  return target;
}

size_t CMsgSource1LegacyGameEventList_key_t::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgSource1LegacyGameEventList.key_t)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional int32 type = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_type());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgSource1LegacyGameEventList_key_t::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgSource1LegacyGameEventList_key_t::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgSource1LegacyGameEventList_key_t::GetClassData() const { return &_class_data_; }


void CMsgSource1LegacyGameEventList_key_t::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgSource1LegacyGameEventList_key_t*>(&to_msg);
  auto& from = static_cast<const CMsgSource1LegacyGameEventList_key_t&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgSource1LegacyGameEventList.key_t)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.type_ = from._impl_.type_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgSource1LegacyGameEventList_key_t::CopyFrom(const CMsgSource1LegacyGameEventList_key_t& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSource1LegacyGameEventList.key_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSource1LegacyGameEventList_key_t::IsInitialized() const {
  return true;
}

void CMsgSource1LegacyGameEventList_key_t::InternalSwap(CMsgSource1LegacyGameEventList_key_t* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  swap(_impl_.type_, other->_impl_.type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgSource1LegacyGameEventList_key_t::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gameevents_2eproto_getter, &descriptor_table_gameevents_2eproto_once,
      file_level_metadata_gameevents_2eproto[5]);
}

// ===================================================================

class CMsgSource1LegacyGameEventList_descriptor_t::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgSource1LegacyGameEventList_descriptor_t>()._impl_._has_bits_);
  static void set_has_eventid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgSource1LegacyGameEventList_descriptor_t::CMsgSource1LegacyGameEventList_descriptor_t(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgSource1LegacyGameEventList.descriptor_t)
}
CMsgSource1LegacyGameEventList_descriptor_t::CMsgSource1LegacyGameEventList_descriptor_t(const CMsgSource1LegacyGameEventList_descriptor_t& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgSource1LegacyGameEventList_descriptor_t* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.keys_){from._impl_.keys_}
    , decltype(_impl_.name_){}
    , decltype(_impl_.eventid_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.eventid_ = from._impl_.eventid_;
  // @@protoc_insertion_point(copy_constructor:CMsgSource1LegacyGameEventList.descriptor_t)
}

inline void CMsgSource1LegacyGameEventList_descriptor_t::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.keys_){arena}
    , decltype(_impl_.name_){}
    , decltype(_impl_.eventid_){0}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CMsgSource1LegacyGameEventList_descriptor_t::~CMsgSource1LegacyGameEventList_descriptor_t() {
  // @@protoc_insertion_point(destructor:CMsgSource1LegacyGameEventList.descriptor_t)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgSource1LegacyGameEventList_descriptor_t::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.keys_.~RepeatedPtrField();
  _impl_.name_.Destroy();
}

void CMsgSource1LegacyGameEventList_descriptor_t::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgSource1LegacyGameEventList_descriptor_t::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSource1LegacyGameEventList.descriptor_t)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.keys_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.name_.ClearNonDefaultToEmpty();
  }
  _impl_.eventid_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgSource1LegacyGameEventList_descriptor_t::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 eventid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_eventid(&has_bits);
          _impl_.eventid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CMsgSource1LegacyGameEventList.descriptor_t.name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // repeated .CMsgSource1LegacyGameEventList.key_t keys = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_keys(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgSource1LegacyGameEventList_descriptor_t::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSource1LegacyGameEventList.descriptor_t)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 eventid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_eventid(), target);
  }

  // optional string name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgSource1LegacyGameEventList.descriptor_t.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // repeated .CMsgSource1LegacyGameEventList.key_t keys = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_keys_size()); i < n; i++) {
    const auto& repfield = this->_internal_keys(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSource1LegacyGameEventList.descriptor_t)
  return target;
}

size_t CMsgSource1LegacyGameEventList_descriptor_t::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgSource1LegacyGameEventList.descriptor_t)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgSource1LegacyGameEventList.key_t keys = 3;
  total_size += 1UL * this->_internal_keys_size();
  for (const auto& msg : this->_impl_.keys_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional int32 eventid = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_eventid());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgSource1LegacyGameEventList_descriptor_t::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgSource1LegacyGameEventList_descriptor_t::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgSource1LegacyGameEventList_descriptor_t::GetClassData() const { return &_class_data_; }


void CMsgSource1LegacyGameEventList_descriptor_t::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgSource1LegacyGameEventList_descriptor_t*>(&to_msg);
  auto& from = static_cast<const CMsgSource1LegacyGameEventList_descriptor_t&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgSource1LegacyGameEventList.descriptor_t)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.keys_.MergeFrom(from._impl_.keys_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.eventid_ = from._impl_.eventid_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgSource1LegacyGameEventList_descriptor_t::CopyFrom(const CMsgSource1LegacyGameEventList_descriptor_t& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSource1LegacyGameEventList.descriptor_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSource1LegacyGameEventList_descriptor_t::IsInitialized() const {
  return true;
}

void CMsgSource1LegacyGameEventList_descriptor_t::InternalSwap(CMsgSource1LegacyGameEventList_descriptor_t* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.keys_.InternalSwap(&other->_impl_.keys_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  swap(_impl_.eventid_, other->_impl_.eventid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgSource1LegacyGameEventList_descriptor_t::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gameevents_2eproto_getter, &descriptor_table_gameevents_2eproto_once,
      file_level_metadata_gameevents_2eproto[6]);
}

// ===================================================================

class CMsgSource1LegacyGameEventList::_Internal {
 public:
};

CMsgSource1LegacyGameEventList::CMsgSource1LegacyGameEventList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgSource1LegacyGameEventList)
}
CMsgSource1LegacyGameEventList::CMsgSource1LegacyGameEventList(const CMsgSource1LegacyGameEventList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgSource1LegacyGameEventList* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.descriptors_){from._impl_.descriptors_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgSource1LegacyGameEventList)
}

inline void CMsgSource1LegacyGameEventList::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.descriptors_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CMsgSource1LegacyGameEventList::~CMsgSource1LegacyGameEventList() {
  // @@protoc_insertion_point(destructor:CMsgSource1LegacyGameEventList)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgSource1LegacyGameEventList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.descriptors_.~RepeatedPtrField();
}

void CMsgSource1LegacyGameEventList::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgSource1LegacyGameEventList::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSource1LegacyGameEventList)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.descriptors_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgSource1LegacyGameEventList::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .CMsgSource1LegacyGameEventList.descriptor_t descriptors = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_descriptors(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgSource1LegacyGameEventList::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSource1LegacyGameEventList)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CMsgSource1LegacyGameEventList.descriptor_t descriptors = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_descriptors_size()); i < n; i++) {
    const auto& repfield = this->_internal_descriptors(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSource1LegacyGameEventList)
  return target;
}

size_t CMsgSource1LegacyGameEventList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgSource1LegacyGameEventList)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgSource1LegacyGameEventList.descriptor_t descriptors = 1;
  total_size += 1UL * this->_internal_descriptors_size();
  for (const auto& msg : this->_impl_.descriptors_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgSource1LegacyGameEventList::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgSource1LegacyGameEventList::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgSource1LegacyGameEventList::GetClassData() const { return &_class_data_; }


void CMsgSource1LegacyGameEventList::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgSource1LegacyGameEventList*>(&to_msg);
  auto& from = static_cast<const CMsgSource1LegacyGameEventList&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgSource1LegacyGameEventList)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.descriptors_.MergeFrom(from._impl_.descriptors_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgSource1LegacyGameEventList::CopyFrom(const CMsgSource1LegacyGameEventList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSource1LegacyGameEventList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSource1LegacyGameEventList::IsInitialized() const {
  return true;
}

void CMsgSource1LegacyGameEventList::InternalSwap(CMsgSource1LegacyGameEventList* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.descriptors_.InternalSwap(&other->_impl_.descriptors_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgSource1LegacyGameEventList::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gameevents_2eproto_getter, &descriptor_table_gameevents_2eproto_once,
      file_level_metadata_gameevents_2eproto[7]);
}

// ===================================================================

class CMsgSource1LegacyListenEvents::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgSource1LegacyListenEvents>()._impl_._has_bits_);
  static void set_has_playerslot(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgSource1LegacyListenEvents::CMsgSource1LegacyListenEvents(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgSource1LegacyListenEvents)
}
CMsgSource1LegacyListenEvents::CMsgSource1LegacyListenEvents(const CMsgSource1LegacyListenEvents& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgSource1LegacyListenEvents* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.eventarraybits_){from._impl_.eventarraybits_}
    , decltype(_impl_.playerslot_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.playerslot_ = from._impl_.playerslot_;
  // @@protoc_insertion_point(copy_constructor:CMsgSource1LegacyListenEvents)
}

inline void CMsgSource1LegacyListenEvents::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.eventarraybits_){arena}
    , decltype(_impl_.playerslot_){0}
  };
}

CMsgSource1LegacyListenEvents::~CMsgSource1LegacyListenEvents() {
  // @@protoc_insertion_point(destructor:CMsgSource1LegacyListenEvents)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgSource1LegacyListenEvents::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.eventarraybits_.~RepeatedField();
}

void CMsgSource1LegacyListenEvents::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgSource1LegacyListenEvents::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSource1LegacyListenEvents)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.eventarraybits_.Clear();
  _impl_.playerslot_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgSource1LegacyListenEvents::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 playerslot = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_playerslot(&has_bits);
          _impl_.playerslot_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 eventarraybits = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_eventarraybits(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<16>(ptr));
        } else if (static_cast<uint8_t>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_eventarraybits(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgSource1LegacyListenEvents::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSource1LegacyListenEvents)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 playerslot = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_playerslot(), target);
  }

  // repeated uint32 eventarraybits = 2;
  for (int i = 0, n = this->_internal_eventarraybits_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_eventarraybits(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSource1LegacyListenEvents)
  return target;
}

size_t CMsgSource1LegacyListenEvents::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgSource1LegacyListenEvents)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 eventarraybits = 2;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.eventarraybits_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_eventarraybits_size());
    total_size += data_size;
  }

  // optional int32 playerslot = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_playerslot());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgSource1LegacyListenEvents::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgSource1LegacyListenEvents::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgSource1LegacyListenEvents::GetClassData() const { return &_class_data_; }


void CMsgSource1LegacyListenEvents::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgSource1LegacyListenEvents*>(&to_msg);
  auto& from = static_cast<const CMsgSource1LegacyListenEvents&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgSource1LegacyListenEvents)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.eventarraybits_.MergeFrom(from._impl_.eventarraybits_);
  if (from._internal_has_playerslot()) {
    _this->_internal_set_playerslot(from._internal_playerslot());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgSource1LegacyListenEvents::CopyFrom(const CMsgSource1LegacyListenEvents& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSource1LegacyListenEvents)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSource1LegacyListenEvents::IsInitialized() const {
  return true;
}

void CMsgSource1LegacyListenEvents::InternalSwap(CMsgSource1LegacyListenEvents* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.eventarraybits_.InternalSwap(&other->_impl_.eventarraybits_);
  swap(_impl_.playerslot_, other->_impl_.playerslot_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgSource1LegacyListenEvents::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gameevents_2eproto_getter, &descriptor_table_gameevents_2eproto_once,
      file_level_metadata_gameevents_2eproto[8]);
}

// ===================================================================

class CMsgSource1LegacyGameEvent_key_t::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgSource1LegacyGameEvent_key_t>()._impl_._has_bits_);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_val_string(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_val_float(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_val_long(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_val_short(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_val_byte(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_val_bool(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_val_uint64(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
};

CMsgSource1LegacyGameEvent_key_t::CMsgSource1LegacyGameEvent_key_t(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgSource1LegacyGameEvent.key_t)
}
CMsgSource1LegacyGameEvent_key_t::CMsgSource1LegacyGameEvent_key_t(const CMsgSource1LegacyGameEvent_key_t& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgSource1LegacyGameEvent_key_t* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.val_string_){}
    , decltype(_impl_.type_){}
    , decltype(_impl_.val_float_){}
    , decltype(_impl_.val_long_){}
    , decltype(_impl_.val_short_){}
    , decltype(_impl_.val_byte_){}
    , decltype(_impl_.val_bool_){}
    , decltype(_impl_.val_uint64_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.val_string_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.val_string_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_val_string()) {
    _this->_impl_.val_string_.Set(from._internal_val_string(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.type_, &from._impl_.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.val_uint64_) -
    reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.val_uint64_));
  // @@protoc_insertion_point(copy_constructor:CMsgSource1LegacyGameEvent.key_t)
}

inline void CMsgSource1LegacyGameEvent_key_t::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.val_string_){}
    , decltype(_impl_.type_){0}
    , decltype(_impl_.val_float_){0}
    , decltype(_impl_.val_long_){0}
    , decltype(_impl_.val_short_){0}
    , decltype(_impl_.val_byte_){0}
    , decltype(_impl_.val_bool_){false}
    , decltype(_impl_.val_uint64_){uint64_t{0u}}
  };
  _impl_.val_string_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.val_string_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CMsgSource1LegacyGameEvent_key_t::~CMsgSource1LegacyGameEvent_key_t() {
  // @@protoc_insertion_point(destructor:CMsgSource1LegacyGameEvent.key_t)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgSource1LegacyGameEvent_key_t::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.val_string_.Destroy();
}

void CMsgSource1LegacyGameEvent_key_t::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgSource1LegacyGameEvent_key_t::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSource1LegacyGameEvent.key_t)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.val_string_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&_impl_.type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.val_uint64_) -
        reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.val_uint64_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgSource1LegacyGameEvent_key_t::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_type(&has_bits);
          _impl_.type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string val_string = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_val_string();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CMsgSource1LegacyGameEvent.key_t.val_string");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional float val_float = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _Internal::set_has_val_float(&has_bits);
          _impl_.val_float_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional int32 val_long = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_val_long(&has_bits);
          _impl_.val_long_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 val_short = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_val_short(&has_bits);
          _impl_.val_short_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 val_byte = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_val_byte(&has_bits);
          _impl_.val_byte_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool val_bool = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_val_bool(&has_bits);
          _impl_.val_bool_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 val_uint64 = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_val_uint64(&has_bits);
          _impl_.val_uint64_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgSource1LegacyGameEvent_key_t::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSource1LegacyGameEvent.key_t)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 type = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_type(), target);
  }

  // optional string val_string = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_val_string().data(), static_cast<int>(this->_internal_val_string().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgSource1LegacyGameEvent.key_t.val_string");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_val_string(), target);
  }

  // optional float val_float = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_val_float(), target);
  }

  // optional int32 val_long = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_val_long(), target);
  }

  // optional int32 val_short = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_val_short(), target);
  }

  // optional int32 val_byte = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(6, this->_internal_val_byte(), target);
  }

  // optional bool val_bool = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(7, this->_internal_val_bool(), target);
  }

  // optional uint64 val_uint64 = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(8, this->_internal_val_uint64(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSource1LegacyGameEvent.key_t)
  return target;
}

size_t CMsgSource1LegacyGameEvent_key_t::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgSource1LegacyGameEvent.key_t)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string val_string = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_val_string());
    }

    // optional int32 type = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_type());
    }

    // optional float val_float = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

    // optional int32 val_long = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_val_long());
    }

    // optional int32 val_short = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_val_short());
    }

    // optional int32 val_byte = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_val_byte());
    }

    // optional bool val_bool = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

    // optional uint64 val_uint64 = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_val_uint64());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgSource1LegacyGameEvent_key_t::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgSource1LegacyGameEvent_key_t::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgSource1LegacyGameEvent_key_t::GetClassData() const { return &_class_data_; }


void CMsgSource1LegacyGameEvent_key_t::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgSource1LegacyGameEvent_key_t*>(&to_msg);
  auto& from = static_cast<const CMsgSource1LegacyGameEvent_key_t&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgSource1LegacyGameEvent.key_t)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_val_string(from._internal_val_string());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.type_ = from._impl_.type_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.val_float_ = from._impl_.val_float_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.val_long_ = from._impl_.val_long_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.val_short_ = from._impl_.val_short_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.val_byte_ = from._impl_.val_byte_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.val_bool_ = from._impl_.val_bool_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.val_uint64_ = from._impl_.val_uint64_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgSource1LegacyGameEvent_key_t::CopyFrom(const CMsgSource1LegacyGameEvent_key_t& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSource1LegacyGameEvent.key_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSource1LegacyGameEvent_key_t::IsInitialized() const {
  return true;
}

void CMsgSource1LegacyGameEvent_key_t::InternalSwap(CMsgSource1LegacyGameEvent_key_t* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.val_string_, lhs_arena,
      &other->_impl_.val_string_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgSource1LegacyGameEvent_key_t, _impl_.val_uint64_)
      + sizeof(CMsgSource1LegacyGameEvent_key_t::_impl_.val_uint64_)
      - PROTOBUF_FIELD_OFFSET(CMsgSource1LegacyGameEvent_key_t, _impl_.type_)>(
          reinterpret_cast<char*>(&_impl_.type_),
          reinterpret_cast<char*>(&other->_impl_.type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgSource1LegacyGameEvent_key_t::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gameevents_2eproto_getter, &descriptor_table_gameevents_2eproto_once,
      file_level_metadata_gameevents_2eproto[9]);
}

// ===================================================================

class CMsgSource1LegacyGameEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgSource1LegacyGameEvent>()._impl_._has_bits_);
  static void set_has_event_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_eventid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_server_tick(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_passthrough(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

CMsgSource1LegacyGameEvent::CMsgSource1LegacyGameEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgSource1LegacyGameEvent)
}
CMsgSource1LegacyGameEvent::CMsgSource1LegacyGameEvent(const CMsgSource1LegacyGameEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgSource1LegacyGameEvent* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.keys_){from._impl_.keys_}
    , decltype(_impl_.event_name_){}
    , decltype(_impl_.eventid_){}
    , decltype(_impl_.server_tick_){}
    , decltype(_impl_.passthrough_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.event_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.event_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_event_name()) {
    _this->_impl_.event_name_.Set(from._internal_event_name(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.eventid_, &from._impl_.eventid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.passthrough_) -
    reinterpret_cast<char*>(&_impl_.eventid_)) + sizeof(_impl_.passthrough_));
  // @@protoc_insertion_point(copy_constructor:CMsgSource1LegacyGameEvent)
}

inline void CMsgSource1LegacyGameEvent::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.keys_){arena}
    , decltype(_impl_.event_name_){}
    , decltype(_impl_.eventid_){0}
    , decltype(_impl_.server_tick_){0}
    , decltype(_impl_.passthrough_){0}
  };
  _impl_.event_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.event_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CMsgSource1LegacyGameEvent::~CMsgSource1LegacyGameEvent() {
  // @@protoc_insertion_point(destructor:CMsgSource1LegacyGameEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgSource1LegacyGameEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.keys_.~RepeatedPtrField();
  _impl_.event_name_.Destroy();
}

void CMsgSource1LegacyGameEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgSource1LegacyGameEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSource1LegacyGameEvent)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.keys_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.event_name_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&_impl_.eventid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.passthrough_) -
        reinterpret_cast<char*>(&_impl_.eventid_)) + sizeof(_impl_.passthrough_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgSource1LegacyGameEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string event_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_event_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CMsgSource1LegacyGameEvent.event_name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional int32 eventid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_eventid(&has_bits);
          _impl_.eventid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .CMsgSource1LegacyGameEvent.key_t keys = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_keys(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional int32 server_tick = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_server_tick(&has_bits);
          _impl_.server_tick_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 passthrough = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_passthrough(&has_bits);
          _impl_.passthrough_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgSource1LegacyGameEvent::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSource1LegacyGameEvent)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string event_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_event_name().data(), static_cast<int>(this->_internal_event_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgSource1LegacyGameEvent.event_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_event_name(), target);
  }

  // optional int32 eventid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_eventid(), target);
  }

  // repeated .CMsgSource1LegacyGameEvent.key_t keys = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_keys_size()); i < n; i++) {
    const auto& repfield = this->_internal_keys(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional int32 server_tick = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_server_tick(), target);
  }

  // optional int32 passthrough = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_passthrough(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSource1LegacyGameEvent)
  return target;
}

size_t CMsgSource1LegacyGameEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgSource1LegacyGameEvent)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgSource1LegacyGameEvent.key_t keys = 3;
  total_size += 1UL * this->_internal_keys_size();
  for (const auto& msg : this->_impl_.keys_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string event_name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_event_name());
    }

    // optional int32 eventid = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_eventid());
    }

    // optional int32 server_tick = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_server_tick());
    }

    // optional int32 passthrough = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_passthrough());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgSource1LegacyGameEvent::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgSource1LegacyGameEvent::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgSource1LegacyGameEvent::GetClassData() const { return &_class_data_; }


void CMsgSource1LegacyGameEvent::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgSource1LegacyGameEvent*>(&to_msg);
  auto& from = static_cast<const CMsgSource1LegacyGameEvent&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgSource1LegacyGameEvent)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.keys_.MergeFrom(from._impl_.keys_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_event_name(from._internal_event_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.eventid_ = from._impl_.eventid_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.server_tick_ = from._impl_.server_tick_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.passthrough_ = from._impl_.passthrough_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgSource1LegacyGameEvent::CopyFrom(const CMsgSource1LegacyGameEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSource1LegacyGameEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSource1LegacyGameEvent::IsInitialized() const {
  return true;
}

void CMsgSource1LegacyGameEvent::InternalSwap(CMsgSource1LegacyGameEvent* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.keys_.InternalSwap(&other->_impl_.keys_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.event_name_, lhs_arena,
      &other->_impl_.event_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgSource1LegacyGameEvent, _impl_.passthrough_)
      + sizeof(CMsgSource1LegacyGameEvent::_impl_.passthrough_)
      - PROTOBUF_FIELD_OFFSET(CMsgSource1LegacyGameEvent, _impl_.eventid_)>(
          reinterpret_cast<char*>(&_impl_.eventid_),
          reinterpret_cast<char*>(&other->_impl_.eventid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgSource1LegacyGameEvent::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gameevents_2eproto_getter, &descriptor_table_gameevents_2eproto_once,
      file_level_metadata_gameevents_2eproto[10]);
}

// ===================================================================

class CMsgSosStartSoundEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgSosStartSoundEvent>()._impl_._has_bits_);
  static void set_has_soundevent_guid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_soundevent_hash(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_source_entity_index(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_seed(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_packed_params(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_start_time(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

CMsgSosStartSoundEvent::CMsgSosStartSoundEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgSosStartSoundEvent)
}
CMsgSosStartSoundEvent::CMsgSosStartSoundEvent(const CMsgSosStartSoundEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgSosStartSoundEvent* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.packed_params_){}
    , decltype(_impl_.soundevent_guid_){}
    , decltype(_impl_.soundevent_hash_){}
    , decltype(_impl_.seed_){}
    , decltype(_impl_.start_time_){}
    , decltype(_impl_.source_entity_index_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.packed_params_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.packed_params_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_packed_params()) {
    _this->_impl_.packed_params_.Set(from._internal_packed_params(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.soundevent_guid_, &from._impl_.soundevent_guid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.source_entity_index_) -
    reinterpret_cast<char*>(&_impl_.soundevent_guid_)) + sizeof(_impl_.source_entity_index_));
  // @@protoc_insertion_point(copy_constructor:CMsgSosStartSoundEvent)
}

inline void CMsgSosStartSoundEvent::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.packed_params_){}
    , decltype(_impl_.soundevent_guid_){0}
    , decltype(_impl_.soundevent_hash_){0u}
    , decltype(_impl_.seed_){0}
    , decltype(_impl_.start_time_){0}
    , decltype(_impl_.source_entity_index_){-1}
  };
  _impl_.packed_params_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.packed_params_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CMsgSosStartSoundEvent::~CMsgSosStartSoundEvent() {
  // @@protoc_insertion_point(destructor:CMsgSosStartSoundEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgSosStartSoundEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.packed_params_.Destroy();
}

void CMsgSosStartSoundEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgSosStartSoundEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSosStartSoundEvent)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.packed_params_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000003eu) {
    ::memset(&_impl_.soundevent_guid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.start_time_) -
        reinterpret_cast<char*>(&_impl_.soundevent_guid_)) + sizeof(_impl_.start_time_));
    _impl_.source_entity_index_ = -1;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgSosStartSoundEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 soundevent_guid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_soundevent_guid(&has_bits);
          _impl_.soundevent_guid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional fixed32 soundevent_hash = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _Internal::set_has_soundevent_hash(&has_bits);
          _impl_.soundevent_hash_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint32_t>(ptr);
          ptr += sizeof(uint32_t);
        } else
          goto handle_unusual;
        continue;
      // optional int32 source_entity_index = 3 [default = -1];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_source_entity_index(&has_bits);
          _impl_.source_entity_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 seed = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_seed(&has_bits);
          _impl_.seed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes packed_params = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_packed_params();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float start_time = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 53)) {
          _Internal::set_has_start_time(&has_bits);
          _impl_.start_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgSosStartSoundEvent::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSosStartSoundEvent)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 soundevent_guid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_soundevent_guid(), target);
  }

  // optional fixed32 soundevent_hash = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed32ToArray(2, this->_internal_soundevent_hash(), target);
  }

  // optional int32 source_entity_index = 3 [default = -1];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_source_entity_index(), target);
  }

  // optional int32 seed = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_seed(), target);
  }

  // optional bytes packed_params = 5;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_packed_params(), target);
  }

  // optional float start_time = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(6, this->_internal_start_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSosStartSoundEvent)
  return target;
}

size_t CMsgSosStartSoundEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgSosStartSoundEvent)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional bytes packed_params = 5;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_packed_params());
    }

    // optional int32 soundevent_guid = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_soundevent_guid());
    }

    // optional fixed32 soundevent_hash = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

    // optional int32 seed = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_seed());
    }

    // optional float start_time = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 4;
    }

    // optional int32 source_entity_index = 3 [default = -1];
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_source_entity_index());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgSosStartSoundEvent::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgSosStartSoundEvent::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgSosStartSoundEvent::GetClassData() const { return &_class_data_; }


void CMsgSosStartSoundEvent::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgSosStartSoundEvent*>(&to_msg);
  auto& from = static_cast<const CMsgSosStartSoundEvent&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgSosStartSoundEvent)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_packed_params(from._internal_packed_params());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.soundevent_guid_ = from._impl_.soundevent_guid_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.soundevent_hash_ = from._impl_.soundevent_hash_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.seed_ = from._impl_.seed_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.start_time_ = from._impl_.start_time_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.source_entity_index_ = from._impl_.source_entity_index_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgSosStartSoundEvent::CopyFrom(const CMsgSosStartSoundEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSosStartSoundEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSosStartSoundEvent::IsInitialized() const {
  return true;
}

void CMsgSosStartSoundEvent::InternalSwap(CMsgSosStartSoundEvent* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.packed_params_, lhs_arena,
      &other->_impl_.packed_params_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgSosStartSoundEvent, _impl_.start_time_)
      + sizeof(CMsgSosStartSoundEvent::_impl_.start_time_)
      - PROTOBUF_FIELD_OFFSET(CMsgSosStartSoundEvent, _impl_.soundevent_guid_)>(
          reinterpret_cast<char*>(&_impl_.soundevent_guid_),
          reinterpret_cast<char*>(&other->_impl_.soundevent_guid_));
  swap(_impl_.source_entity_index_, other->_impl_.source_entity_index_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgSosStartSoundEvent::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gameevents_2eproto_getter, &descriptor_table_gameevents_2eproto_once,
      file_level_metadata_gameevents_2eproto[11]);
}

// ===================================================================

class CMsgSosStopSoundEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgSosStopSoundEvent>()._impl_._has_bits_);
  static void set_has_soundevent_guid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgSosStopSoundEvent::CMsgSosStopSoundEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgSosStopSoundEvent)
}
CMsgSosStopSoundEvent::CMsgSosStopSoundEvent(const CMsgSosStopSoundEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgSosStopSoundEvent* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.soundevent_guid_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.soundevent_guid_ = from._impl_.soundevent_guid_;
  // @@protoc_insertion_point(copy_constructor:CMsgSosStopSoundEvent)
}

inline void CMsgSosStopSoundEvent::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.soundevent_guid_){0}
  };
}

CMsgSosStopSoundEvent::~CMsgSosStopSoundEvent() {
  // @@protoc_insertion_point(destructor:CMsgSosStopSoundEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgSosStopSoundEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgSosStopSoundEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgSosStopSoundEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSosStopSoundEvent)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.soundevent_guid_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgSosStopSoundEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 soundevent_guid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_soundevent_guid(&has_bits);
          _impl_.soundevent_guid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgSosStopSoundEvent::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSosStopSoundEvent)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 soundevent_guid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_soundevent_guid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSosStopSoundEvent)
  return target;
}

size_t CMsgSosStopSoundEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgSosStopSoundEvent)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int32 soundevent_guid = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_soundevent_guid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgSosStopSoundEvent::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgSosStopSoundEvent::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgSosStopSoundEvent::GetClassData() const { return &_class_data_; }


void CMsgSosStopSoundEvent::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgSosStopSoundEvent*>(&to_msg);
  auto& from = static_cast<const CMsgSosStopSoundEvent&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgSosStopSoundEvent)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_soundevent_guid()) {
    _this->_internal_set_soundevent_guid(from._internal_soundevent_guid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgSosStopSoundEvent::CopyFrom(const CMsgSosStopSoundEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSosStopSoundEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSosStopSoundEvent::IsInitialized() const {
  return true;
}

void CMsgSosStopSoundEvent::InternalSwap(CMsgSosStopSoundEvent* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.soundevent_guid_, other->_impl_.soundevent_guid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgSosStopSoundEvent::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gameevents_2eproto_getter, &descriptor_table_gameevents_2eproto_once,
      file_level_metadata_gameevents_2eproto[12]);
}

// ===================================================================

class CMsgSosStopSoundEventHash::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgSosStopSoundEventHash>()._impl_._has_bits_);
  static void set_has_soundevent_hash(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_source_entity_index(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgSosStopSoundEventHash::CMsgSosStopSoundEventHash(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgSosStopSoundEventHash)
}
CMsgSosStopSoundEventHash::CMsgSosStopSoundEventHash(const CMsgSosStopSoundEventHash& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgSosStopSoundEventHash* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.soundevent_hash_){}
    , decltype(_impl_.source_entity_index_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.soundevent_hash_, &from._impl_.soundevent_hash_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.source_entity_index_) -
    reinterpret_cast<char*>(&_impl_.soundevent_hash_)) + sizeof(_impl_.source_entity_index_));
  // @@protoc_insertion_point(copy_constructor:CMsgSosStopSoundEventHash)
}

inline void CMsgSosStopSoundEventHash::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.soundevent_hash_){0u}
    , decltype(_impl_.source_entity_index_){-1}
  };
}

CMsgSosStopSoundEventHash::~CMsgSosStopSoundEventHash() {
  // @@protoc_insertion_point(destructor:CMsgSosStopSoundEventHash)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgSosStopSoundEventHash::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgSosStopSoundEventHash::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgSosStopSoundEventHash::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSosStopSoundEventHash)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    _impl_.soundevent_hash_ = 0u;
    _impl_.source_entity_index_ = -1;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgSosStopSoundEventHash::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional fixed32 soundevent_hash = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          _Internal::set_has_soundevent_hash(&has_bits);
          _impl_.soundevent_hash_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint32_t>(ptr);
          ptr += sizeof(uint32_t);
        } else
          goto handle_unusual;
        continue;
      // optional int32 source_entity_index = 2 [default = -1];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_source_entity_index(&has_bits);
          _impl_.source_entity_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgSosStopSoundEventHash::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSosStopSoundEventHash)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional fixed32 soundevent_hash = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed32ToArray(1, this->_internal_soundevent_hash(), target);
  }

  // optional int32 source_entity_index = 2 [default = -1];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_source_entity_index(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSosStopSoundEventHash)
  return target;
}

size_t CMsgSosStopSoundEventHash::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgSosStopSoundEventHash)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional fixed32 soundevent_hash = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 4;
    }

    // optional int32 source_entity_index = 2 [default = -1];
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_source_entity_index());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgSosStopSoundEventHash::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgSosStopSoundEventHash::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgSosStopSoundEventHash::GetClassData() const { return &_class_data_; }


void CMsgSosStopSoundEventHash::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgSosStopSoundEventHash*>(&to_msg);
  auto& from = static_cast<const CMsgSosStopSoundEventHash&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgSosStopSoundEventHash)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.soundevent_hash_ = from._impl_.soundevent_hash_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.source_entity_index_ = from._impl_.source_entity_index_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgSosStopSoundEventHash::CopyFrom(const CMsgSosStopSoundEventHash& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSosStopSoundEventHash)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSosStopSoundEventHash::IsInitialized() const {
  return true;
}

void CMsgSosStopSoundEventHash::InternalSwap(CMsgSosStopSoundEventHash* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.soundevent_hash_, other->_impl_.soundevent_hash_);
  swap(_impl_.source_entity_index_, other->_impl_.source_entity_index_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgSosStopSoundEventHash::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gameevents_2eproto_getter, &descriptor_table_gameevents_2eproto_once,
      file_level_metadata_gameevents_2eproto[13]);
}

// ===================================================================

class CMsgSosSetSoundEventParams::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgSosSetSoundEventParams>()._impl_._has_bits_);
  static void set_has_soundevent_guid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_packed_params(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgSosSetSoundEventParams::CMsgSosSetSoundEventParams(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgSosSetSoundEventParams)
}
CMsgSosSetSoundEventParams::CMsgSosSetSoundEventParams(const CMsgSosSetSoundEventParams& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgSosSetSoundEventParams* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.packed_params_){}
    , decltype(_impl_.soundevent_guid_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.packed_params_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.packed_params_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_packed_params()) {
    _this->_impl_.packed_params_.Set(from._internal_packed_params(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.soundevent_guid_ = from._impl_.soundevent_guid_;
  // @@protoc_insertion_point(copy_constructor:CMsgSosSetSoundEventParams)
}

inline void CMsgSosSetSoundEventParams::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.packed_params_){}
    , decltype(_impl_.soundevent_guid_){0}
  };
  _impl_.packed_params_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.packed_params_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CMsgSosSetSoundEventParams::~CMsgSosSetSoundEventParams() {
  // @@protoc_insertion_point(destructor:CMsgSosSetSoundEventParams)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgSosSetSoundEventParams::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.packed_params_.Destroy();
}

void CMsgSosSetSoundEventParams::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgSosSetSoundEventParams::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSosSetSoundEventParams)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.packed_params_.ClearNonDefaultToEmpty();
  }
  _impl_.soundevent_guid_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgSosSetSoundEventParams::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 soundevent_guid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_soundevent_guid(&has_bits);
          _impl_.soundevent_guid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes packed_params = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_packed_params();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgSosSetSoundEventParams::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSosSetSoundEventParams)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 soundevent_guid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_soundevent_guid(), target);
  }

  // optional bytes packed_params = 5;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_packed_params(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSosSetSoundEventParams)
  return target;
}

size_t CMsgSosSetSoundEventParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgSosSetSoundEventParams)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional bytes packed_params = 5;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_packed_params());
    }

    // optional int32 soundevent_guid = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_soundevent_guid());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgSosSetSoundEventParams::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgSosSetSoundEventParams::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgSosSetSoundEventParams::GetClassData() const { return &_class_data_; }


void CMsgSosSetSoundEventParams::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgSosSetSoundEventParams*>(&to_msg);
  auto& from = static_cast<const CMsgSosSetSoundEventParams&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgSosSetSoundEventParams)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_packed_params(from._internal_packed_params());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.soundevent_guid_ = from._impl_.soundevent_guid_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgSosSetSoundEventParams::CopyFrom(const CMsgSosSetSoundEventParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSosSetSoundEventParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSosSetSoundEventParams::IsInitialized() const {
  return true;
}

void CMsgSosSetSoundEventParams::InternalSwap(CMsgSosSetSoundEventParams* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.packed_params_, lhs_arena,
      &other->_impl_.packed_params_, rhs_arena
  );
  swap(_impl_.soundevent_guid_, other->_impl_.soundevent_guid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgSosSetSoundEventParams::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gameevents_2eproto_getter, &descriptor_table_gameevents_2eproto_once,
      file_level_metadata_gameevents_2eproto[14]);
}

// ===================================================================

class CMsgSosSetLibraryStackFields::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgSosSetLibraryStackFields>()._impl_._has_bits_);
  static void set_has_stack_hash(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_packed_fields(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgSosSetLibraryStackFields::CMsgSosSetLibraryStackFields(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgSosSetLibraryStackFields)
}
CMsgSosSetLibraryStackFields::CMsgSosSetLibraryStackFields(const CMsgSosSetLibraryStackFields& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgSosSetLibraryStackFields* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.packed_fields_){}
    , decltype(_impl_.stack_hash_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.packed_fields_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.packed_fields_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_packed_fields()) {
    _this->_impl_.packed_fields_.Set(from._internal_packed_fields(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.stack_hash_ = from._impl_.stack_hash_;
  // @@protoc_insertion_point(copy_constructor:CMsgSosSetLibraryStackFields)
}

inline void CMsgSosSetLibraryStackFields::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.packed_fields_){}
    , decltype(_impl_.stack_hash_){0u}
  };
  _impl_.packed_fields_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.packed_fields_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CMsgSosSetLibraryStackFields::~CMsgSosSetLibraryStackFields() {
  // @@protoc_insertion_point(destructor:CMsgSosSetLibraryStackFields)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgSosSetLibraryStackFields::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.packed_fields_.Destroy();
}

void CMsgSosSetLibraryStackFields::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgSosSetLibraryStackFields::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSosSetLibraryStackFields)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.packed_fields_.ClearNonDefaultToEmpty();
  }
  _impl_.stack_hash_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgSosSetLibraryStackFields::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional fixed32 stack_hash = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          _Internal::set_has_stack_hash(&has_bits);
          _impl_.stack_hash_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint32_t>(ptr);
          ptr += sizeof(uint32_t);
        } else
          goto handle_unusual;
        continue;
      // optional bytes packed_fields = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_packed_fields();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgSosSetLibraryStackFields::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSosSetLibraryStackFields)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional fixed32 stack_hash = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed32ToArray(1, this->_internal_stack_hash(), target);
  }

  // optional bytes packed_fields = 5;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_packed_fields(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSosSetLibraryStackFields)
  return target;
}

size_t CMsgSosSetLibraryStackFields::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgSosSetLibraryStackFields)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional bytes packed_fields = 5;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_packed_fields());
    }

    // optional fixed32 stack_hash = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgSosSetLibraryStackFields::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgSosSetLibraryStackFields::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgSosSetLibraryStackFields::GetClassData() const { return &_class_data_; }


void CMsgSosSetLibraryStackFields::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgSosSetLibraryStackFields*>(&to_msg);
  auto& from = static_cast<const CMsgSosSetLibraryStackFields&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgSosSetLibraryStackFields)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_packed_fields(from._internal_packed_fields());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.stack_hash_ = from._impl_.stack_hash_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgSosSetLibraryStackFields::CopyFrom(const CMsgSosSetLibraryStackFields& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSosSetLibraryStackFields)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSosSetLibraryStackFields::IsInitialized() const {
  return true;
}

void CMsgSosSetLibraryStackFields::InternalSwap(CMsgSosSetLibraryStackFields* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.packed_fields_, lhs_arena,
      &other->_impl_.packed_fields_, rhs_arena
  );
  swap(_impl_.stack_hash_, other->_impl_.stack_hash_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgSosSetLibraryStackFields::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gameevents_2eproto_getter, &descriptor_table_gameevents_2eproto_once,
      file_level_metadata_gameevents_2eproto[15]);
}

// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::CMsgVDebugGameSessionIDEvent*
Arena::CreateMaybeMessage< ::CMsgVDebugGameSessionIDEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgVDebugGameSessionIDEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgPlaceDecalEvent*
Arena::CreateMaybeMessage< ::CMsgPlaceDecalEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgPlaceDecalEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClearWorldDecalsEvent*
Arena::CreateMaybeMessage< ::CMsgClearWorldDecalsEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClearWorldDecalsEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClearEntityDecalsEvent*
Arena::CreateMaybeMessage< ::CMsgClearEntityDecalsEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClearEntityDecalsEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClearDecalsForEntityEvent*
Arena::CreateMaybeMessage< ::CMsgClearDecalsForEntityEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClearDecalsForEntityEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgSource1LegacyGameEventList_key_t*
Arena::CreateMaybeMessage< ::CMsgSource1LegacyGameEventList_key_t >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgSource1LegacyGameEventList_key_t >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgSource1LegacyGameEventList_descriptor_t*
Arena::CreateMaybeMessage< ::CMsgSource1LegacyGameEventList_descriptor_t >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgSource1LegacyGameEventList_descriptor_t >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgSource1LegacyGameEventList*
Arena::CreateMaybeMessage< ::CMsgSource1LegacyGameEventList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgSource1LegacyGameEventList >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgSource1LegacyListenEvents*
Arena::CreateMaybeMessage< ::CMsgSource1LegacyListenEvents >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgSource1LegacyListenEvents >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgSource1LegacyGameEvent_key_t*
Arena::CreateMaybeMessage< ::CMsgSource1LegacyGameEvent_key_t >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgSource1LegacyGameEvent_key_t >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgSource1LegacyGameEvent*
Arena::CreateMaybeMessage< ::CMsgSource1LegacyGameEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgSource1LegacyGameEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgSosStartSoundEvent*
Arena::CreateMaybeMessage< ::CMsgSosStartSoundEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgSosStartSoundEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgSosStopSoundEvent*
Arena::CreateMaybeMessage< ::CMsgSosStopSoundEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgSosStopSoundEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgSosStopSoundEventHash*
Arena::CreateMaybeMessage< ::CMsgSosStopSoundEventHash >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgSosStopSoundEventHash >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgSosSetSoundEventParams*
Arena::CreateMaybeMessage< ::CMsgSosSetSoundEventParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgSosSetSoundEventParams >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgSosSetLibraryStackFields*
Arena::CreateMaybeMessage< ::CMsgSosSetLibraryStackFields >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgSosSetLibraryStackFields >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
