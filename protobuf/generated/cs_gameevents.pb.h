// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cs_gameevents.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_cs_5fgameevents_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_cs_5fgameevents_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021008 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "networkbasetypes.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_cs_5fgameevents_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_cs_5fgameevents_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_cs_5fgameevents_2eproto;
class CMsgTEFireBullets;
struct CMsgTEFireBulletsDefaultTypeInternal;
extern CMsgTEFireBulletsDefaultTypeInternal _CMsgTEFireBullets_default_instance_;
class CMsgTEPlayerAnimEvent;
struct CMsgTEPlayerAnimEventDefaultTypeInternal;
extern CMsgTEPlayerAnimEventDefaultTypeInternal _CMsgTEPlayerAnimEvent_default_instance_;
class CMsgTERadioIcon;
struct CMsgTERadioIconDefaultTypeInternal;
extern CMsgTERadioIconDefaultTypeInternal _CMsgTERadioIcon_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::CMsgTEFireBullets* Arena::CreateMaybeMessage<::CMsgTEFireBullets>(Arena*);
template<> ::CMsgTEPlayerAnimEvent* Arena::CreateMaybeMessage<::CMsgTEPlayerAnimEvent>(Arena*);
template<> ::CMsgTERadioIcon* Arena::CreateMaybeMessage<::CMsgTERadioIcon>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

enum ECsgoGameEvents : int {
  GE_PlayerAnimEventId = 450,
  GE_RadioIconEventId = 451,
  GE_FireBulletsId = 452
};
bool ECsgoGameEvents_IsValid(int value);
constexpr ECsgoGameEvents ECsgoGameEvents_MIN = GE_PlayerAnimEventId;
constexpr ECsgoGameEvents ECsgoGameEvents_MAX = GE_FireBulletsId;
constexpr int ECsgoGameEvents_ARRAYSIZE = ECsgoGameEvents_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ECsgoGameEvents_descriptor();
template<typename T>
inline const std::string& ECsgoGameEvents_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ECsgoGameEvents>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ECsgoGameEvents_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ECsgoGameEvents_descriptor(), enum_t_value);
}
inline bool ECsgoGameEvents_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ECsgoGameEvents* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ECsgoGameEvents>(
    ECsgoGameEvents_descriptor(), name, value);
}
// ===================================================================

class CMsgTEPlayerAnimEvent :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgTEPlayerAnimEvent) */ {
 public:
  inline CMsgTEPlayerAnimEvent() : CMsgTEPlayerAnimEvent(nullptr) {}
  ~CMsgTEPlayerAnimEvent() override;
  explicit PROTOBUF_CONSTEXPR CMsgTEPlayerAnimEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgTEPlayerAnimEvent(const CMsgTEPlayerAnimEvent& from);
  CMsgTEPlayerAnimEvent(CMsgTEPlayerAnimEvent&& from) noexcept
    : CMsgTEPlayerAnimEvent() {
    *this = ::std::move(from);
  }

  inline CMsgTEPlayerAnimEvent& operator=(const CMsgTEPlayerAnimEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgTEPlayerAnimEvent& operator=(CMsgTEPlayerAnimEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgTEPlayerAnimEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgTEPlayerAnimEvent* internal_default_instance() {
    return reinterpret_cast<const CMsgTEPlayerAnimEvent*>(
               &_CMsgTEPlayerAnimEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CMsgTEPlayerAnimEvent& a, CMsgTEPlayerAnimEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgTEPlayerAnimEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgTEPlayerAnimEvent* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgTEPlayerAnimEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgTEPlayerAnimEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgTEPlayerAnimEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgTEPlayerAnimEvent& from) {
    CMsgTEPlayerAnimEvent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgTEPlayerAnimEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgTEPlayerAnimEvent";
  }
  protected:
  explicit CMsgTEPlayerAnimEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEventFieldNumber = 2,
    kDataFieldNumber = 3,
    kPlayerFieldNumber = 1,
  };
  // optional uint32 event = 2;
  bool has_event() const;
  private:
  bool _internal_has_event() const;
  public:
  void clear_event();
  uint32_t event() const;
  void set_event(uint32_t value);
  private:
  uint32_t _internal_event() const;
  void _internal_set_event(uint32_t value);
  public:

  // optional int32 data = 3;
  bool has_data() const;
  private:
  bool _internal_has_data() const;
  public:
  void clear_data();
  int32_t data() const;
  void set_data(int32_t value);
  private:
  int32_t _internal_data() const;
  void _internal_set_data(int32_t value);
  public:

  // optional fixed32 player = 1 [default = 16777215];
  bool has_player() const;
  private:
  bool _internal_has_player() const;
  public:
  void clear_player();
  uint32_t player() const;
  void set_player(uint32_t value);
  private:
  uint32_t _internal_player() const;
  void _internal_set_player(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgTEPlayerAnimEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t event_;
    int32_t data_;
    uint32_t player_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cs_5fgameevents_2eproto;
};
// -------------------------------------------------------------------

class CMsgTERadioIcon :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgTERadioIcon) */ {
 public:
  inline CMsgTERadioIcon() : CMsgTERadioIcon(nullptr) {}
  ~CMsgTERadioIcon() override;
  explicit PROTOBUF_CONSTEXPR CMsgTERadioIcon(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgTERadioIcon(const CMsgTERadioIcon& from);
  CMsgTERadioIcon(CMsgTERadioIcon&& from) noexcept
    : CMsgTERadioIcon() {
    *this = ::std::move(from);
  }

  inline CMsgTERadioIcon& operator=(const CMsgTERadioIcon& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgTERadioIcon& operator=(CMsgTERadioIcon&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgTERadioIcon& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgTERadioIcon* internal_default_instance() {
    return reinterpret_cast<const CMsgTERadioIcon*>(
               &_CMsgTERadioIcon_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CMsgTERadioIcon& a, CMsgTERadioIcon& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgTERadioIcon* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgTERadioIcon* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgTERadioIcon* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgTERadioIcon>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgTERadioIcon& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgTERadioIcon& from) {
    CMsgTERadioIcon::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgTERadioIcon* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgTERadioIcon";
  }
  protected:
  explicit CMsgTERadioIcon(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerFieldNumber = 1,
  };
  // optional fixed32 player = 1 [default = 16777215];
  bool has_player() const;
  private:
  bool _internal_has_player() const;
  public:
  void clear_player();
  uint32_t player() const;
  void set_player(uint32_t value);
  private:
  uint32_t _internal_player() const;
  void _internal_set_player(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgTERadioIcon)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t player_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cs_5fgameevents_2eproto;
};
// -------------------------------------------------------------------

class CMsgTEFireBullets :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgTEFireBullets) */ {
 public:
  inline CMsgTEFireBullets() : CMsgTEFireBullets(nullptr) {}
  ~CMsgTEFireBullets() override;
  explicit PROTOBUF_CONSTEXPR CMsgTEFireBullets(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgTEFireBullets(const CMsgTEFireBullets& from);
  CMsgTEFireBullets(CMsgTEFireBullets&& from) noexcept
    : CMsgTEFireBullets() {
    *this = ::std::move(from);
  }

  inline CMsgTEFireBullets& operator=(const CMsgTEFireBullets& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgTEFireBullets& operator=(CMsgTEFireBullets&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgTEFireBullets& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgTEFireBullets* internal_default_instance() {
    return reinterpret_cast<const CMsgTEFireBullets*>(
               &_CMsgTEFireBullets_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(CMsgTEFireBullets& a, CMsgTEFireBullets& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgTEFireBullets* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgTEFireBullets* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgTEFireBullets* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgTEFireBullets>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgTEFireBullets& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgTEFireBullets& from) {
    CMsgTEFireBullets::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgTEFireBullets* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgTEFireBullets";
  }
  protected:
  explicit CMsgTEFireBullets(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOriginFieldNumber = 1,
    kAnglesFieldNumber = 2,
    kEntOriginFieldNumber = 13,
    kModeFieldNumber = 4,
    kSeedFieldNumber = 5,
    kInaccuracyFieldNumber = 7,
    kRecoilIndexFieldNumber = 8,
    kSpreadFieldNumber = 9,
    kSoundTypeFieldNumber = 10,
    kItemDefIndexFieldNumber = 11,
    kSoundDspEffectFieldNumber = 12,
    kNumBulletsRemainingFieldNumber = 14,
    kAttackTypeFieldNumber = 15,
    kWeaponIdFieldNumber = 3,
    kPlayerFieldNumber = 6,
  };
  // optional .CMsgVector origin = 1;
  bool has_origin() const;
  private:
  bool _internal_has_origin() const;
  public:
  void clear_origin();
  const ::CMsgVector& origin() const;
  PROTOBUF_NODISCARD ::CMsgVector* release_origin();
  ::CMsgVector* mutable_origin();
  void set_allocated_origin(::CMsgVector* origin);
  private:
  const ::CMsgVector& _internal_origin() const;
  ::CMsgVector* _internal_mutable_origin();
  public:
  void unsafe_arena_set_allocated_origin(
      ::CMsgVector* origin);
  ::CMsgVector* unsafe_arena_release_origin();

  // optional .CMsgQAngle angles = 2;
  bool has_angles() const;
  private:
  bool _internal_has_angles() const;
  public:
  void clear_angles();
  const ::CMsgQAngle& angles() const;
  PROTOBUF_NODISCARD ::CMsgQAngle* release_angles();
  ::CMsgQAngle* mutable_angles();
  void set_allocated_angles(::CMsgQAngle* angles);
  private:
  const ::CMsgQAngle& _internal_angles() const;
  ::CMsgQAngle* _internal_mutable_angles();
  public:
  void unsafe_arena_set_allocated_angles(
      ::CMsgQAngle* angles);
  ::CMsgQAngle* unsafe_arena_release_angles();

  // optional .CMsgVector ent_origin = 13;
  bool has_ent_origin() const;
  private:
  bool _internal_has_ent_origin() const;
  public:
  void clear_ent_origin();
  const ::CMsgVector& ent_origin() const;
  PROTOBUF_NODISCARD ::CMsgVector* release_ent_origin();
  ::CMsgVector* mutable_ent_origin();
  void set_allocated_ent_origin(::CMsgVector* ent_origin);
  private:
  const ::CMsgVector& _internal_ent_origin() const;
  ::CMsgVector* _internal_mutable_ent_origin();
  public:
  void unsafe_arena_set_allocated_ent_origin(
      ::CMsgVector* ent_origin);
  ::CMsgVector* unsafe_arena_release_ent_origin();

  // optional uint32 mode = 4;
  bool has_mode() const;
  private:
  bool _internal_has_mode() const;
  public:
  void clear_mode();
  uint32_t mode() const;
  void set_mode(uint32_t value);
  private:
  uint32_t _internal_mode() const;
  void _internal_set_mode(uint32_t value);
  public:

  // optional uint32 seed = 5;
  bool has_seed() const;
  private:
  bool _internal_has_seed() const;
  public:
  void clear_seed();
  uint32_t seed() const;
  void set_seed(uint32_t value);
  private:
  uint32_t _internal_seed() const;
  void _internal_set_seed(uint32_t value);
  public:

  // optional float inaccuracy = 7;
  bool has_inaccuracy() const;
  private:
  bool _internal_has_inaccuracy() const;
  public:
  void clear_inaccuracy();
  float inaccuracy() const;
  void set_inaccuracy(float value);
  private:
  float _internal_inaccuracy() const;
  void _internal_set_inaccuracy(float value);
  public:

  // optional float recoil_index = 8;
  bool has_recoil_index() const;
  private:
  bool _internal_has_recoil_index() const;
  public:
  void clear_recoil_index();
  float recoil_index() const;
  void set_recoil_index(float value);
  private:
  float _internal_recoil_index() const;
  void _internal_set_recoil_index(float value);
  public:

  // optional float spread = 9;
  bool has_spread() const;
  private:
  bool _internal_has_spread() const;
  public:
  void clear_spread();
  float spread() const;
  void set_spread(float value);
  private:
  float _internal_spread() const;
  void _internal_set_spread(float value);
  public:

  // optional int32 sound_type = 10;
  bool has_sound_type() const;
  private:
  bool _internal_has_sound_type() const;
  public:
  void clear_sound_type();
  int32_t sound_type() const;
  void set_sound_type(int32_t value);
  private:
  int32_t _internal_sound_type() const;
  void _internal_set_sound_type(int32_t value);
  public:

  // optional uint32 item_def_index = 11;
  bool has_item_def_index() const;
  private:
  bool _internal_has_item_def_index() const;
  public:
  void clear_item_def_index();
  uint32_t item_def_index() const;
  void set_item_def_index(uint32_t value);
  private:
  uint32_t _internal_item_def_index() const;
  void _internal_set_item_def_index(uint32_t value);
  public:

  // optional fixed32 sound_dsp_effect = 12;
  bool has_sound_dsp_effect() const;
  private:
  bool _internal_has_sound_dsp_effect() const;
  public:
  void clear_sound_dsp_effect();
  uint32_t sound_dsp_effect() const;
  void set_sound_dsp_effect(uint32_t value);
  private:
  uint32_t _internal_sound_dsp_effect() const;
  void _internal_set_sound_dsp_effect(uint32_t value);
  public:

  // optional uint32 num_bullets_remaining = 14;
  bool has_num_bullets_remaining() const;
  private:
  bool _internal_has_num_bullets_remaining() const;
  public:
  void clear_num_bullets_remaining();
  uint32_t num_bullets_remaining() const;
  void set_num_bullets_remaining(uint32_t value);
  private:
  uint32_t _internal_num_bullets_remaining() const;
  void _internal_set_num_bullets_remaining(uint32_t value);
  public:

  // optional uint32 attack_type = 15;
  bool has_attack_type() const;
  private:
  bool _internal_has_attack_type() const;
  public:
  void clear_attack_type();
  uint32_t attack_type() const;
  void set_attack_type(uint32_t value);
  private:
  uint32_t _internal_attack_type() const;
  void _internal_set_attack_type(uint32_t value);
  public:

  // optional uint32 weapon_id = 3 [default = 16777215];
  bool has_weapon_id() const;
  private:
  bool _internal_has_weapon_id() const;
  public:
  void clear_weapon_id();
  uint32_t weapon_id() const;
  void set_weapon_id(uint32_t value);
  private:
  uint32_t _internal_weapon_id() const;
  void _internal_set_weapon_id(uint32_t value);
  public:

  // optional fixed32 player = 6 [default = 16777215];
  bool has_player() const;
  private:
  bool _internal_has_player() const;
  public:
  void clear_player();
  uint32_t player() const;
  void set_player(uint32_t value);
  private:
  uint32_t _internal_player() const;
  void _internal_set_player(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgTEFireBullets)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::CMsgVector* origin_;
    ::CMsgQAngle* angles_;
    ::CMsgVector* ent_origin_;
    uint32_t mode_;
    uint32_t seed_;
    float inaccuracy_;
    float recoil_index_;
    float spread_;
    int32_t sound_type_;
    uint32_t item_def_index_;
    uint32_t sound_dsp_effect_;
    uint32_t num_bullets_remaining_;
    uint32_t attack_type_;
    uint32_t weapon_id_;
    uint32_t player_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cs_5fgameevents_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CMsgTEPlayerAnimEvent

// optional fixed32 player = 1 [default = 16777215];
inline bool CMsgTEPlayerAnimEvent::_internal_has_player() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgTEPlayerAnimEvent::has_player() const {
  return _internal_has_player();
}
inline void CMsgTEPlayerAnimEvent::clear_player() {
  _impl_.player_ = 16777215u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CMsgTEPlayerAnimEvent::_internal_player() const {
  return _impl_.player_;
}
inline uint32_t CMsgTEPlayerAnimEvent::player() const {
  // @@protoc_insertion_point(field_get:CMsgTEPlayerAnimEvent.player)
  return _internal_player();
}
inline void CMsgTEPlayerAnimEvent::_internal_set_player(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.player_ = value;
}
inline void CMsgTEPlayerAnimEvent::set_player(uint32_t value) {
  _internal_set_player(value);
  // @@protoc_insertion_point(field_set:CMsgTEPlayerAnimEvent.player)
}

// optional uint32 event = 2;
inline bool CMsgTEPlayerAnimEvent::_internal_has_event() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgTEPlayerAnimEvent::has_event() const {
  return _internal_has_event();
}
inline void CMsgTEPlayerAnimEvent::clear_event() {
  _impl_.event_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CMsgTEPlayerAnimEvent::_internal_event() const {
  return _impl_.event_;
}
inline uint32_t CMsgTEPlayerAnimEvent::event() const {
  // @@protoc_insertion_point(field_get:CMsgTEPlayerAnimEvent.event)
  return _internal_event();
}
inline void CMsgTEPlayerAnimEvent::_internal_set_event(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.event_ = value;
}
inline void CMsgTEPlayerAnimEvent::set_event(uint32_t value) {
  _internal_set_event(value);
  // @@protoc_insertion_point(field_set:CMsgTEPlayerAnimEvent.event)
}

// optional int32 data = 3;
inline bool CMsgTEPlayerAnimEvent::_internal_has_data() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgTEPlayerAnimEvent::has_data() const {
  return _internal_has_data();
}
inline void CMsgTEPlayerAnimEvent::clear_data() {
  _impl_.data_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline int32_t CMsgTEPlayerAnimEvent::_internal_data() const {
  return _impl_.data_;
}
inline int32_t CMsgTEPlayerAnimEvent::data() const {
  // @@protoc_insertion_point(field_get:CMsgTEPlayerAnimEvent.data)
  return _internal_data();
}
inline void CMsgTEPlayerAnimEvent::_internal_set_data(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.data_ = value;
}
inline void CMsgTEPlayerAnimEvent::set_data(int32_t value) {
  _internal_set_data(value);
  // @@protoc_insertion_point(field_set:CMsgTEPlayerAnimEvent.data)
}

// -------------------------------------------------------------------

// CMsgTERadioIcon

// optional fixed32 player = 1 [default = 16777215];
inline bool CMsgTERadioIcon::_internal_has_player() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgTERadioIcon::has_player() const {
  return _internal_has_player();
}
inline void CMsgTERadioIcon::clear_player() {
  _impl_.player_ = 16777215u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CMsgTERadioIcon::_internal_player() const {
  return _impl_.player_;
}
inline uint32_t CMsgTERadioIcon::player() const {
  // @@protoc_insertion_point(field_get:CMsgTERadioIcon.player)
  return _internal_player();
}
inline void CMsgTERadioIcon::_internal_set_player(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.player_ = value;
}
inline void CMsgTERadioIcon::set_player(uint32_t value) {
  _internal_set_player(value);
  // @@protoc_insertion_point(field_set:CMsgTERadioIcon.player)
}

// -------------------------------------------------------------------

// CMsgTEFireBullets

// optional .CMsgVector origin = 1;
inline bool CMsgTEFireBullets::_internal_has_origin() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.origin_ != nullptr);
  return value;
}
inline bool CMsgTEFireBullets::has_origin() const {
  return _internal_has_origin();
}
inline const ::CMsgVector& CMsgTEFireBullets::_internal_origin() const {
  const ::CMsgVector* p = _impl_.origin_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgVector&>(
      ::_CMsgVector_default_instance_);
}
inline const ::CMsgVector& CMsgTEFireBullets::origin() const {
  // @@protoc_insertion_point(field_get:CMsgTEFireBullets.origin)
  return _internal_origin();
}
inline void CMsgTEFireBullets::unsafe_arena_set_allocated_origin(
    ::CMsgVector* origin) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.origin_);
  }
  _impl_.origin_ = origin;
  if (origin) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgTEFireBullets.origin)
}
inline ::CMsgVector* CMsgTEFireBullets::release_origin() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::CMsgVector* temp = _impl_.origin_;
  _impl_.origin_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CMsgVector* CMsgTEFireBullets::unsafe_arena_release_origin() {
  // @@protoc_insertion_point(field_release:CMsgTEFireBullets.origin)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::CMsgVector* temp = _impl_.origin_;
  _impl_.origin_ = nullptr;
  return temp;
}
inline ::CMsgVector* CMsgTEFireBullets::_internal_mutable_origin() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.origin_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgVector>(GetArenaForAllocation());
    _impl_.origin_ = p;
  }
  return _impl_.origin_;
}
inline ::CMsgVector* CMsgTEFireBullets::mutable_origin() {
  ::CMsgVector* _msg = _internal_mutable_origin();
  // @@protoc_insertion_point(field_mutable:CMsgTEFireBullets.origin)
  return _msg;
}
inline void CMsgTEFireBullets::set_allocated_origin(::CMsgVector* origin) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.origin_);
  }
  if (origin) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(origin));
    if (message_arena != submessage_arena) {
      origin = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, origin, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.origin_ = origin;
  // @@protoc_insertion_point(field_set_allocated:CMsgTEFireBullets.origin)
}

// optional .CMsgQAngle angles = 2;
inline bool CMsgTEFireBullets::_internal_has_angles() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.angles_ != nullptr);
  return value;
}
inline bool CMsgTEFireBullets::has_angles() const {
  return _internal_has_angles();
}
inline const ::CMsgQAngle& CMsgTEFireBullets::_internal_angles() const {
  const ::CMsgQAngle* p = _impl_.angles_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgQAngle&>(
      ::_CMsgQAngle_default_instance_);
}
inline const ::CMsgQAngle& CMsgTEFireBullets::angles() const {
  // @@protoc_insertion_point(field_get:CMsgTEFireBullets.angles)
  return _internal_angles();
}
inline void CMsgTEFireBullets::unsafe_arena_set_allocated_angles(
    ::CMsgQAngle* angles) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.angles_);
  }
  _impl_.angles_ = angles;
  if (angles) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgTEFireBullets.angles)
}
inline ::CMsgQAngle* CMsgTEFireBullets::release_angles() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::CMsgQAngle* temp = _impl_.angles_;
  _impl_.angles_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CMsgQAngle* CMsgTEFireBullets::unsafe_arena_release_angles() {
  // @@protoc_insertion_point(field_release:CMsgTEFireBullets.angles)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::CMsgQAngle* temp = _impl_.angles_;
  _impl_.angles_ = nullptr;
  return temp;
}
inline ::CMsgQAngle* CMsgTEFireBullets::_internal_mutable_angles() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.angles_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgQAngle>(GetArenaForAllocation());
    _impl_.angles_ = p;
  }
  return _impl_.angles_;
}
inline ::CMsgQAngle* CMsgTEFireBullets::mutable_angles() {
  ::CMsgQAngle* _msg = _internal_mutable_angles();
  // @@protoc_insertion_point(field_mutable:CMsgTEFireBullets.angles)
  return _msg;
}
inline void CMsgTEFireBullets::set_allocated_angles(::CMsgQAngle* angles) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.angles_);
  }
  if (angles) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(angles));
    if (message_arena != submessage_arena) {
      angles = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, angles, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.angles_ = angles;
  // @@protoc_insertion_point(field_set_allocated:CMsgTEFireBullets.angles)
}

// optional uint32 weapon_id = 3 [default = 16777215];
inline bool CMsgTEFireBullets::_internal_has_weapon_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool CMsgTEFireBullets::has_weapon_id() const {
  return _internal_has_weapon_id();
}
inline void CMsgTEFireBullets::clear_weapon_id() {
  _impl_.weapon_id_ = 16777215u;
  _impl_._has_bits_[0] &= ~0x00002000u;
}
inline uint32_t CMsgTEFireBullets::_internal_weapon_id() const {
  return _impl_.weapon_id_;
}
inline uint32_t CMsgTEFireBullets::weapon_id() const {
  // @@protoc_insertion_point(field_get:CMsgTEFireBullets.weapon_id)
  return _internal_weapon_id();
}
inline void CMsgTEFireBullets::_internal_set_weapon_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00002000u;
  _impl_.weapon_id_ = value;
}
inline void CMsgTEFireBullets::set_weapon_id(uint32_t value) {
  _internal_set_weapon_id(value);
  // @@protoc_insertion_point(field_set:CMsgTEFireBullets.weapon_id)
}

// optional uint32 mode = 4;
inline bool CMsgTEFireBullets::_internal_has_mode() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgTEFireBullets::has_mode() const {
  return _internal_has_mode();
}
inline void CMsgTEFireBullets::clear_mode() {
  _impl_.mode_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline uint32_t CMsgTEFireBullets::_internal_mode() const {
  return _impl_.mode_;
}
inline uint32_t CMsgTEFireBullets::mode() const {
  // @@protoc_insertion_point(field_get:CMsgTEFireBullets.mode)
  return _internal_mode();
}
inline void CMsgTEFireBullets::_internal_set_mode(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.mode_ = value;
}
inline void CMsgTEFireBullets::set_mode(uint32_t value) {
  _internal_set_mode(value);
  // @@protoc_insertion_point(field_set:CMsgTEFireBullets.mode)
}

// optional uint32 seed = 5;
inline bool CMsgTEFireBullets::_internal_has_seed() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CMsgTEFireBullets::has_seed() const {
  return _internal_has_seed();
}
inline void CMsgTEFireBullets::clear_seed() {
  _impl_.seed_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline uint32_t CMsgTEFireBullets::_internal_seed() const {
  return _impl_.seed_;
}
inline uint32_t CMsgTEFireBullets::seed() const {
  // @@protoc_insertion_point(field_get:CMsgTEFireBullets.seed)
  return _internal_seed();
}
inline void CMsgTEFireBullets::_internal_set_seed(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.seed_ = value;
}
inline void CMsgTEFireBullets::set_seed(uint32_t value) {
  _internal_set_seed(value);
  // @@protoc_insertion_point(field_set:CMsgTEFireBullets.seed)
}

// optional fixed32 player = 6 [default = 16777215];
inline bool CMsgTEFireBullets::_internal_has_player() const {
  bool value = (_impl_._has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool CMsgTEFireBullets::has_player() const {
  return _internal_has_player();
}
inline void CMsgTEFireBullets::clear_player() {
  _impl_.player_ = 16777215u;
  _impl_._has_bits_[0] &= ~0x00004000u;
}
inline uint32_t CMsgTEFireBullets::_internal_player() const {
  return _impl_.player_;
}
inline uint32_t CMsgTEFireBullets::player() const {
  // @@protoc_insertion_point(field_get:CMsgTEFireBullets.player)
  return _internal_player();
}
inline void CMsgTEFireBullets::_internal_set_player(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00004000u;
  _impl_.player_ = value;
}
inline void CMsgTEFireBullets::set_player(uint32_t value) {
  _internal_set_player(value);
  // @@protoc_insertion_point(field_set:CMsgTEFireBullets.player)
}

// optional float inaccuracy = 7;
inline bool CMsgTEFireBullets::_internal_has_inaccuracy() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CMsgTEFireBullets::has_inaccuracy() const {
  return _internal_has_inaccuracy();
}
inline void CMsgTEFireBullets::clear_inaccuracy() {
  _impl_.inaccuracy_ = 0;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline float CMsgTEFireBullets::_internal_inaccuracy() const {
  return _impl_.inaccuracy_;
}
inline float CMsgTEFireBullets::inaccuracy() const {
  // @@protoc_insertion_point(field_get:CMsgTEFireBullets.inaccuracy)
  return _internal_inaccuracy();
}
inline void CMsgTEFireBullets::_internal_set_inaccuracy(float value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.inaccuracy_ = value;
}
inline void CMsgTEFireBullets::set_inaccuracy(float value) {
  _internal_set_inaccuracy(value);
  // @@protoc_insertion_point(field_set:CMsgTEFireBullets.inaccuracy)
}

// optional float recoil_index = 8;
inline bool CMsgTEFireBullets::_internal_has_recoil_index() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CMsgTEFireBullets::has_recoil_index() const {
  return _internal_has_recoil_index();
}
inline void CMsgTEFireBullets::clear_recoil_index() {
  _impl_.recoil_index_ = 0;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline float CMsgTEFireBullets::_internal_recoil_index() const {
  return _impl_.recoil_index_;
}
inline float CMsgTEFireBullets::recoil_index() const {
  // @@protoc_insertion_point(field_get:CMsgTEFireBullets.recoil_index)
  return _internal_recoil_index();
}
inline void CMsgTEFireBullets::_internal_set_recoil_index(float value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.recoil_index_ = value;
}
inline void CMsgTEFireBullets::set_recoil_index(float value) {
  _internal_set_recoil_index(value);
  // @@protoc_insertion_point(field_set:CMsgTEFireBullets.recoil_index)
}

// optional float spread = 9;
inline bool CMsgTEFireBullets::_internal_has_spread() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool CMsgTEFireBullets::has_spread() const {
  return _internal_has_spread();
}
inline void CMsgTEFireBullets::clear_spread() {
  _impl_.spread_ = 0;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline float CMsgTEFireBullets::_internal_spread() const {
  return _impl_.spread_;
}
inline float CMsgTEFireBullets::spread() const {
  // @@protoc_insertion_point(field_get:CMsgTEFireBullets.spread)
  return _internal_spread();
}
inline void CMsgTEFireBullets::_internal_set_spread(float value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.spread_ = value;
}
inline void CMsgTEFireBullets::set_spread(float value) {
  _internal_set_spread(value);
  // @@protoc_insertion_point(field_set:CMsgTEFireBullets.spread)
}

// optional int32 sound_type = 10;
inline bool CMsgTEFireBullets::_internal_has_sound_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool CMsgTEFireBullets::has_sound_type() const {
  return _internal_has_sound_type();
}
inline void CMsgTEFireBullets::clear_sound_type() {
  _impl_.sound_type_ = 0;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline int32_t CMsgTEFireBullets::_internal_sound_type() const {
  return _impl_.sound_type_;
}
inline int32_t CMsgTEFireBullets::sound_type() const {
  // @@protoc_insertion_point(field_get:CMsgTEFireBullets.sound_type)
  return _internal_sound_type();
}
inline void CMsgTEFireBullets::_internal_set_sound_type(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.sound_type_ = value;
}
inline void CMsgTEFireBullets::set_sound_type(int32_t value) {
  _internal_set_sound_type(value);
  // @@protoc_insertion_point(field_set:CMsgTEFireBullets.sound_type)
}

// optional uint32 item_def_index = 11;
inline bool CMsgTEFireBullets::_internal_has_item_def_index() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool CMsgTEFireBullets::has_item_def_index() const {
  return _internal_has_item_def_index();
}
inline void CMsgTEFireBullets::clear_item_def_index() {
  _impl_.item_def_index_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline uint32_t CMsgTEFireBullets::_internal_item_def_index() const {
  return _impl_.item_def_index_;
}
inline uint32_t CMsgTEFireBullets::item_def_index() const {
  // @@protoc_insertion_point(field_get:CMsgTEFireBullets.item_def_index)
  return _internal_item_def_index();
}
inline void CMsgTEFireBullets::_internal_set_item_def_index(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000200u;
  _impl_.item_def_index_ = value;
}
inline void CMsgTEFireBullets::set_item_def_index(uint32_t value) {
  _internal_set_item_def_index(value);
  // @@protoc_insertion_point(field_set:CMsgTEFireBullets.item_def_index)
}

// optional fixed32 sound_dsp_effect = 12;
inline bool CMsgTEFireBullets::_internal_has_sound_dsp_effect() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool CMsgTEFireBullets::has_sound_dsp_effect() const {
  return _internal_has_sound_dsp_effect();
}
inline void CMsgTEFireBullets::clear_sound_dsp_effect() {
  _impl_.sound_dsp_effect_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline uint32_t CMsgTEFireBullets::_internal_sound_dsp_effect() const {
  return _impl_.sound_dsp_effect_;
}
inline uint32_t CMsgTEFireBullets::sound_dsp_effect() const {
  // @@protoc_insertion_point(field_get:CMsgTEFireBullets.sound_dsp_effect)
  return _internal_sound_dsp_effect();
}
inline void CMsgTEFireBullets::_internal_set_sound_dsp_effect(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000400u;
  _impl_.sound_dsp_effect_ = value;
}
inline void CMsgTEFireBullets::set_sound_dsp_effect(uint32_t value) {
  _internal_set_sound_dsp_effect(value);
  // @@protoc_insertion_point(field_set:CMsgTEFireBullets.sound_dsp_effect)
}

// optional .CMsgVector ent_origin = 13;
inline bool CMsgTEFireBullets::_internal_has_ent_origin() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.ent_origin_ != nullptr);
  return value;
}
inline bool CMsgTEFireBullets::has_ent_origin() const {
  return _internal_has_ent_origin();
}
inline const ::CMsgVector& CMsgTEFireBullets::_internal_ent_origin() const {
  const ::CMsgVector* p = _impl_.ent_origin_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgVector&>(
      ::_CMsgVector_default_instance_);
}
inline const ::CMsgVector& CMsgTEFireBullets::ent_origin() const {
  // @@protoc_insertion_point(field_get:CMsgTEFireBullets.ent_origin)
  return _internal_ent_origin();
}
inline void CMsgTEFireBullets::unsafe_arena_set_allocated_ent_origin(
    ::CMsgVector* ent_origin) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.ent_origin_);
  }
  _impl_.ent_origin_ = ent_origin;
  if (ent_origin) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgTEFireBullets.ent_origin)
}
inline ::CMsgVector* CMsgTEFireBullets::release_ent_origin() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::CMsgVector* temp = _impl_.ent_origin_;
  _impl_.ent_origin_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CMsgVector* CMsgTEFireBullets::unsafe_arena_release_ent_origin() {
  // @@protoc_insertion_point(field_release:CMsgTEFireBullets.ent_origin)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::CMsgVector* temp = _impl_.ent_origin_;
  _impl_.ent_origin_ = nullptr;
  return temp;
}
inline ::CMsgVector* CMsgTEFireBullets::_internal_mutable_ent_origin() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.ent_origin_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgVector>(GetArenaForAllocation());
    _impl_.ent_origin_ = p;
  }
  return _impl_.ent_origin_;
}
inline ::CMsgVector* CMsgTEFireBullets::mutable_ent_origin() {
  ::CMsgVector* _msg = _internal_mutable_ent_origin();
  // @@protoc_insertion_point(field_mutable:CMsgTEFireBullets.ent_origin)
  return _msg;
}
inline void CMsgTEFireBullets::set_allocated_ent_origin(::CMsgVector* ent_origin) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.ent_origin_);
  }
  if (ent_origin) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ent_origin));
    if (message_arena != submessage_arena) {
      ent_origin = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ent_origin, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.ent_origin_ = ent_origin;
  // @@protoc_insertion_point(field_set_allocated:CMsgTEFireBullets.ent_origin)
}

// optional uint32 num_bullets_remaining = 14;
inline bool CMsgTEFireBullets::_internal_has_num_bullets_remaining() const {
  bool value = (_impl_._has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool CMsgTEFireBullets::has_num_bullets_remaining() const {
  return _internal_has_num_bullets_remaining();
}
inline void CMsgTEFireBullets::clear_num_bullets_remaining() {
  _impl_.num_bullets_remaining_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000800u;
}
inline uint32_t CMsgTEFireBullets::_internal_num_bullets_remaining() const {
  return _impl_.num_bullets_remaining_;
}
inline uint32_t CMsgTEFireBullets::num_bullets_remaining() const {
  // @@protoc_insertion_point(field_get:CMsgTEFireBullets.num_bullets_remaining)
  return _internal_num_bullets_remaining();
}
inline void CMsgTEFireBullets::_internal_set_num_bullets_remaining(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000800u;
  _impl_.num_bullets_remaining_ = value;
}
inline void CMsgTEFireBullets::set_num_bullets_remaining(uint32_t value) {
  _internal_set_num_bullets_remaining(value);
  // @@protoc_insertion_point(field_set:CMsgTEFireBullets.num_bullets_remaining)
}

// optional uint32 attack_type = 15;
inline bool CMsgTEFireBullets::_internal_has_attack_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool CMsgTEFireBullets::has_attack_type() const {
  return _internal_has_attack_type();
}
inline void CMsgTEFireBullets::clear_attack_type() {
  _impl_.attack_type_ = 0u;
  _impl_._has_bits_[0] &= ~0x00001000u;
}
inline uint32_t CMsgTEFireBullets::_internal_attack_type() const {
  return _impl_.attack_type_;
}
inline uint32_t CMsgTEFireBullets::attack_type() const {
  // @@protoc_insertion_point(field_get:CMsgTEFireBullets.attack_type)
  return _internal_attack_type();
}
inline void CMsgTEFireBullets::_internal_set_attack_type(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00001000u;
  _impl_.attack_type_ = value;
}
inline void CMsgTEFireBullets::set_attack_type(uint32_t value) {
  _internal_set_attack_type(value);
  // @@protoc_insertion_point(field_set:CMsgTEFireBullets.attack_type)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::ECsgoGameEvents> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ECsgoGameEvents>() {
  return ::ECsgoGameEvents_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_cs_5fgameevents_2eproto
