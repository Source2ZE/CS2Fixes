// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gcsystemmsgs.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_gcsystemmsgs_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_gcsystemmsgs_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021008 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_gcsystemmsgs_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_gcsystemmsgs_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_gcsystemmsgs_2eproto;
class CCommunity_GamePersonalDataCategoryInfo;
struct CCommunity_GamePersonalDataCategoryInfoDefaultTypeInternal;
extern CCommunity_GamePersonalDataCategoryInfoDefaultTypeInternal _CCommunity_GamePersonalDataCategoryInfo_default_instance_;
class CCommunity_GetGamePersonalDataCategories_Request;
struct CCommunity_GetGamePersonalDataCategories_RequestDefaultTypeInternal;
extern CCommunity_GetGamePersonalDataCategories_RequestDefaultTypeInternal _CCommunity_GetGamePersonalDataCategories_Request_default_instance_;
class CCommunity_GetGamePersonalDataCategories_Response;
struct CCommunity_GetGamePersonalDataCategories_ResponseDefaultTypeInternal;
extern CCommunity_GetGamePersonalDataCategories_ResponseDefaultTypeInternal _CCommunity_GetGamePersonalDataCategories_Response_default_instance_;
class CCommunity_GetGamePersonalDataEntries_Request;
struct CCommunity_GetGamePersonalDataEntries_RequestDefaultTypeInternal;
extern CCommunity_GetGamePersonalDataEntries_RequestDefaultTypeInternal _CCommunity_GetGamePersonalDataEntries_Request_default_instance_;
class CCommunity_GetGamePersonalDataEntries_Response;
struct CCommunity_GetGamePersonalDataEntries_ResponseDefaultTypeInternal;
extern CCommunity_GetGamePersonalDataEntries_ResponseDefaultTypeInternal _CCommunity_GetGamePersonalDataEntries_Response_default_instance_;
class CCommunity_TerminateGamePersonalDataEntries_Request;
struct CCommunity_TerminateGamePersonalDataEntries_RequestDefaultTypeInternal;
extern CCommunity_TerminateGamePersonalDataEntries_RequestDefaultTypeInternal _CCommunity_TerminateGamePersonalDataEntries_Request_default_instance_;
class CCommunity_TerminateGamePersonalDataEntries_Response;
struct CCommunity_TerminateGamePersonalDataEntries_ResponseDefaultTypeInternal;
extern CCommunity_TerminateGamePersonalDataEntries_ResponseDefaultTypeInternal _CCommunity_TerminateGamePersonalDataEntries_Response_default_instance_;
class CMsgGCHAccountPhoneNumberChange;
struct CMsgGCHAccountPhoneNumberChangeDefaultTypeInternal;
extern CMsgGCHAccountPhoneNumberChangeDefaultTypeInternal _CMsgGCHAccountPhoneNumberChange_default_instance_;
class CMsgGCHInviteUserToLobby;
struct CMsgGCHInviteUserToLobbyDefaultTypeInternal;
extern CMsgGCHInviteUserToLobbyDefaultTypeInternal _CMsgGCHInviteUserToLobby_default_instance_;
class CMsgGCHRecurringSubscriptionStatusChange;
struct CMsgGCHRecurringSubscriptionStatusChangeDefaultTypeInternal;
extern CMsgGCHRecurringSubscriptionStatusChangeDefaultTypeInternal _CMsgGCHRecurringSubscriptionStatusChange_default_instance_;
class CMsgGCHVacVerificationChange;
struct CMsgGCHVacVerificationChangeDefaultTypeInternal;
extern CMsgGCHVacVerificationChangeDefaultTypeInternal _CMsgGCHVacVerificationChange_default_instance_;
class CQuest_PublisherAddCommunityItemsToPlayer_Request;
struct CQuest_PublisherAddCommunityItemsToPlayer_RequestDefaultTypeInternal;
extern CQuest_PublisherAddCommunityItemsToPlayer_RequestDefaultTypeInternal _CQuest_PublisherAddCommunityItemsToPlayer_Request_default_instance_;
class CQuest_PublisherAddCommunityItemsToPlayer_Request_Attribute;
struct CQuest_PublisherAddCommunityItemsToPlayer_Request_AttributeDefaultTypeInternal;
extern CQuest_PublisherAddCommunityItemsToPlayer_Request_AttributeDefaultTypeInternal _CQuest_PublisherAddCommunityItemsToPlayer_Request_Attribute_default_instance_;
class CQuest_PublisherAddCommunityItemsToPlayer_Response;
struct CQuest_PublisherAddCommunityItemsToPlayer_ResponseDefaultTypeInternal;
extern CQuest_PublisherAddCommunityItemsToPlayer_ResponseDefaultTypeInternal _CQuest_PublisherAddCommunityItemsToPlayer_Response_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::CCommunity_GamePersonalDataCategoryInfo* Arena::CreateMaybeMessage<::CCommunity_GamePersonalDataCategoryInfo>(Arena*);
template<> ::CCommunity_GetGamePersonalDataCategories_Request* Arena::CreateMaybeMessage<::CCommunity_GetGamePersonalDataCategories_Request>(Arena*);
template<> ::CCommunity_GetGamePersonalDataCategories_Response* Arena::CreateMaybeMessage<::CCommunity_GetGamePersonalDataCategories_Response>(Arena*);
template<> ::CCommunity_GetGamePersonalDataEntries_Request* Arena::CreateMaybeMessage<::CCommunity_GetGamePersonalDataEntries_Request>(Arena*);
template<> ::CCommunity_GetGamePersonalDataEntries_Response* Arena::CreateMaybeMessage<::CCommunity_GetGamePersonalDataEntries_Response>(Arena*);
template<> ::CCommunity_TerminateGamePersonalDataEntries_Request* Arena::CreateMaybeMessage<::CCommunity_TerminateGamePersonalDataEntries_Request>(Arena*);
template<> ::CCommunity_TerminateGamePersonalDataEntries_Response* Arena::CreateMaybeMessage<::CCommunity_TerminateGamePersonalDataEntries_Response>(Arena*);
template<> ::CMsgGCHAccountPhoneNumberChange* Arena::CreateMaybeMessage<::CMsgGCHAccountPhoneNumberChange>(Arena*);
template<> ::CMsgGCHInviteUserToLobby* Arena::CreateMaybeMessage<::CMsgGCHInviteUserToLobby>(Arena*);
template<> ::CMsgGCHRecurringSubscriptionStatusChange* Arena::CreateMaybeMessage<::CMsgGCHRecurringSubscriptionStatusChange>(Arena*);
template<> ::CMsgGCHVacVerificationChange* Arena::CreateMaybeMessage<::CMsgGCHVacVerificationChange>(Arena*);
template<> ::CQuest_PublisherAddCommunityItemsToPlayer_Request* Arena::CreateMaybeMessage<::CQuest_PublisherAddCommunityItemsToPlayer_Request>(Arena*);
template<> ::CQuest_PublisherAddCommunityItemsToPlayer_Request_Attribute* Arena::CreateMaybeMessage<::CQuest_PublisherAddCommunityItemsToPlayer_Request_Attribute>(Arena*);
template<> ::CQuest_PublisherAddCommunityItemsToPlayer_Response* Arena::CreateMaybeMessage<::CQuest_PublisherAddCommunityItemsToPlayer_Response>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

enum EGCSystemMsg : int {
  k_EGCMsgInvalid = 0,
  k_EGCMsgMulti = 1,
  k_EGCMsgGenericReply = 10,
  k_EGCMsgSystemBase = 50,
  k_EGCMsgAchievementAwarded = 51,
  k_EGCMsgConCommand = 52,
  k_EGCMsgStartPlaying = 53,
  k_EGCMsgStopPlaying = 54,
  k_EGCMsgStartGameserver = 55,
  k_EGCMsgStopGameserver = 56,
  k_EGCMsgWGRequest = 57,
  k_EGCMsgWGResponse = 58,
  k_EGCMsgGetUserGameStatsSchema = 59,
  k_EGCMsgGetUserGameStatsSchemaResponse = 60,
  k_EGCMsgGetUserStatsDEPRECATED = 61,
  k_EGCMsgGetUserStatsResponse = 62,
  k_EGCMsgAppInfoUpdated = 63,
  k_EGCMsgValidateSession = 64,
  k_EGCMsgValidateSessionResponse = 65,
  k_EGCMsgLookupAccountFromInput = 66,
  k_EGCMsgSendHTTPRequest = 67,
  k_EGCMsgSendHTTPRequestResponse = 68,
  k_EGCMsgPreTestSetup = 69,
  k_EGCMsgRecordSupportAction = 70,
  k_EGCMsgGetAccountDetails_DEPRECATED = 71,
  k_EGCMsgReceiveInterAppMessage = 73,
  k_EGCMsgFindAccounts = 74,
  k_EGCMsgPostAlert = 75,
  k_EGCMsgGetLicenses = 76,
  k_EGCMsgGetUserStats = 77,
  k_EGCMsgGetCommands = 78,
  k_EGCMsgGetCommandsResponse = 79,
  k_EGCMsgAddFreeLicense = 80,
  k_EGCMsgAddFreeLicenseResponse = 81,
  k_EGCMsgGetIPLocation = 82,
  k_EGCMsgGetIPLocationResponse = 83,
  k_EGCMsgSystemStatsSchema = 84,
  k_EGCMsgGetSystemStats = 85,
  k_EGCMsgGetSystemStatsResponse = 86,
  k_EGCMsgSendEmail = 87,
  k_EGCMsgSendEmailResponse = 88,
  k_EGCMsgGetEmailTemplate = 89,
  k_EGCMsgGetEmailTemplateResponse = 90,
  k_EGCMsgGrantGuestPass = 91,
  k_EGCMsgGrantGuestPassResponse = 92,
  k_EGCMsgGetAccountDetails = 93,
  k_EGCMsgGetAccountDetailsResponse = 94,
  k_EGCMsgGetPersonaNames = 95,
  k_EGCMsgGetPersonaNamesResponse = 96,
  k_EGCMsgMultiplexMsg = 97,
  k_EGCMsgMultiplexMsgResponse = 98,
  k_EGCMsgWebAPIRegisterInterfaces = 101,
  k_EGCMsgWebAPIJobRequest = 102,
  k_EGCMsgWebAPIJobRequestHttpResponse = 104,
  k_EGCMsgWebAPIJobRequestForwardResponse = 105,
  k_EGCMsgMemCachedGet = 200,
  k_EGCMsgMemCachedGetResponse = 201,
  k_EGCMsgMemCachedSet = 202,
  k_EGCMsgMemCachedDelete = 203,
  k_EGCMsgMemCachedStats = 204,
  k_EGCMsgMemCachedStatsResponse = 205,
  k_EGCMsgMasterSetDirectory = 220,
  k_EGCMsgMasterSetDirectoryResponse = 221,
  k_EGCMsgMasterSetWebAPIRouting = 222,
  k_EGCMsgMasterSetWebAPIRoutingResponse = 223,
  k_EGCMsgMasterSetClientMsgRouting = 224,
  k_EGCMsgMasterSetClientMsgRoutingResponse = 225,
  k_EGCMsgSetOptions = 226,
  k_EGCMsgSetOptionsResponse = 227,
  k_EGCMsgSystemBase2 = 500,
  k_EGCMsgGetPurchaseTrustStatus = 501,
  k_EGCMsgGetPurchaseTrustStatusResponse = 502,
  k_EGCMsgUpdateSession = 503,
  k_EGCMsgGCAccountVacStatusChange = 504,
  k_EGCMsgCheckFriendship = 505,
  k_EGCMsgCheckFriendshipResponse = 506,
  k_EGCMsgGetPartnerAccountLink = 507,
  k_EGCMsgGetPartnerAccountLinkResponse = 508,
  k_EGCMsgDPPartnerMicroTxns = 512,
  k_EGCMsgDPPartnerMicroTxnsResponse = 513,
  k_EGCMsgVacVerificationChange = 518,
  k_EGCMsgAccountPhoneNumberChange = 519,
  k_EGCMsgInviteUserToLobby = 523,
  k_EGCMsgGetGamePersonalDataCategoriesRequest = 524,
  k_EGCMsgGetGamePersonalDataCategoriesResponse = 525,
  k_EGCMsgGetGamePersonalDataEntriesRequest = 526,
  k_EGCMsgGetGamePersonalDataEntriesResponse = 527,
  k_EGCMsgTerminateGamePersonalDataEntriesRequest = 528,
  k_EGCMsgTerminateGamePersonalDataEntriesResponse = 529,
  k_EGCMsgRecurringSubscriptionStatusChange = 530,
  k_EGCMsgDirectServiceMethod = 531,
  k_EGCMsgDirectServiceMethodResponse = 532
};
bool EGCSystemMsg_IsValid(int value);
constexpr EGCSystemMsg EGCSystemMsg_MIN = k_EGCMsgInvalid;
constexpr EGCSystemMsg EGCSystemMsg_MAX = k_EGCMsgDirectServiceMethodResponse;
constexpr int EGCSystemMsg_ARRAYSIZE = EGCSystemMsg_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EGCSystemMsg_descriptor();
template<typename T>
inline const std::string& EGCSystemMsg_Name(T enum_t_value) {
  static_assert(::std::is_same<T, EGCSystemMsg>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function EGCSystemMsg_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    EGCSystemMsg_descriptor(), enum_t_value);
}
inline bool EGCSystemMsg_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, EGCSystemMsg* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<EGCSystemMsg>(
    EGCSystemMsg_descriptor(), name, value);
}
enum ESOMsg : int {
  k_ESOMsg_Create = 21,
  k_ESOMsg_Update = 22,
  k_ESOMsg_Destroy = 23,
  k_ESOMsg_CacheSubscribed = 24,
  k_ESOMsg_CacheUnsubscribed = 25,
  k_ESOMsg_UpdateMultiple = 26,
  k_ESOMsg_CacheSubscriptionCheck = 27,
  k_ESOMsg_CacheSubscriptionRefresh = 28
};
bool ESOMsg_IsValid(int value);
constexpr ESOMsg ESOMsg_MIN = k_ESOMsg_Create;
constexpr ESOMsg ESOMsg_MAX = k_ESOMsg_CacheSubscriptionRefresh;
constexpr int ESOMsg_ARRAYSIZE = ESOMsg_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ESOMsg_descriptor();
template<typename T>
inline const std::string& ESOMsg_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ESOMsg>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ESOMsg_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ESOMsg_descriptor(), enum_t_value);
}
inline bool ESOMsg_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ESOMsg* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ESOMsg>(
    ESOMsg_descriptor(), name, value);
}
enum EGCBaseClientMsg : int {
  k_EMsgGCClientWelcome = 4004,
  k_EMsgGCServerWelcome = 4005,
  k_EMsgGCClientHello = 4006,
  k_EMsgGCServerHello = 4007,
  k_EMsgGCClientConnectionStatus = 4009,
  k_EMsgGCServerConnectionStatus = 4010,
  k_EMsgGCClientHelloPartner = 4011,
  k_EMsgGCClientHelloPW = 4012,
  k_EMsgGCClientHelloR2 = 4013,
  k_EMsgGCClientHelloR3 = 4014,
  k_EMsgGCClientHelloR4 = 4015
};
bool EGCBaseClientMsg_IsValid(int value);
constexpr EGCBaseClientMsg EGCBaseClientMsg_MIN = k_EMsgGCClientWelcome;
constexpr EGCBaseClientMsg EGCBaseClientMsg_MAX = k_EMsgGCClientHelloR4;
constexpr int EGCBaseClientMsg_ARRAYSIZE = EGCBaseClientMsg_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EGCBaseClientMsg_descriptor();
template<typename T>
inline const std::string& EGCBaseClientMsg_Name(T enum_t_value) {
  static_assert(::std::is_same<T, EGCBaseClientMsg>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function EGCBaseClientMsg_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    EGCBaseClientMsg_descriptor(), enum_t_value);
}
inline bool EGCBaseClientMsg_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, EGCBaseClientMsg* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<EGCBaseClientMsg>(
    EGCBaseClientMsg_descriptor(), name, value);
}
enum EGCToGCMsg : int {
  k_EGCToGCMsgMasterAck = 150,
  k_EGCToGCMsgMasterAckResponse = 151,
  k_EGCToGCMsgRouted = 152,
  k_EGCToGCMsgRoutedReply = 153,
  k_EMsgUpdateSessionIP = 154,
  k_EMsgRequestSessionIP = 155,
  k_EMsgRequestSessionIPResponse = 156,
  k_EGCToGCMsgMasterStartupComplete = 157
};
bool EGCToGCMsg_IsValid(int value);
constexpr EGCToGCMsg EGCToGCMsg_MIN = k_EGCToGCMsgMasterAck;
constexpr EGCToGCMsg EGCToGCMsg_MAX = k_EGCToGCMsgMasterStartupComplete;
constexpr int EGCToGCMsg_ARRAYSIZE = EGCToGCMsg_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EGCToGCMsg_descriptor();
template<typename T>
inline const std::string& EGCToGCMsg_Name(T enum_t_value) {
  static_assert(::std::is_same<T, EGCToGCMsg>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function EGCToGCMsg_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    EGCToGCMsg_descriptor(), enum_t_value);
}
inline bool EGCToGCMsg_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, EGCToGCMsg* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<EGCToGCMsg>(
    EGCToGCMsg_descriptor(), name, value);
}
enum ECommunityItemClass : int {
  k_ECommunityItemClass_Invalid = 0,
  k_ECommunityItemClass_Badge = 1,
  k_ECommunityItemClass_GameCard = 2,
  k_ECommunityItemClass_ProfileBackground = 3,
  k_ECommunityItemClass_Emoticon = 4,
  k_ECommunityItemClass_BoosterPack = 5,
  k_ECommunityItemClass_Consumable = 6,
  k_ECommunityItemClass_GameGoo = 7,
  k_ECommunityItemClass_ProfileModifier = 8,
  k_ECommunityItemClass_Scene = 9,
  k_ECommunityItemClass_SalienItem = 10
};
bool ECommunityItemClass_IsValid(int value);
constexpr ECommunityItemClass ECommunityItemClass_MIN = k_ECommunityItemClass_Invalid;
constexpr ECommunityItemClass ECommunityItemClass_MAX = k_ECommunityItemClass_SalienItem;
constexpr int ECommunityItemClass_ARRAYSIZE = ECommunityItemClass_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ECommunityItemClass_descriptor();
template<typename T>
inline const std::string& ECommunityItemClass_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ECommunityItemClass>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ECommunityItemClass_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ECommunityItemClass_descriptor(), enum_t_value);
}
inline bool ECommunityItemClass_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ECommunityItemClass* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ECommunityItemClass>(
    ECommunityItemClass_descriptor(), name, value);
}
enum ECommunityItemAttribute : int {
  k_ECommunityItemAttribute_Invalid = 0,
  k_ECommunityItemAttribute_CardBorder = 1,
  k_ECommunityItemAttribute_Level = 2,
  k_ECommunityItemAttribute_IssueNumber = 3,
  k_ECommunityItemAttribute_TradableTime = 4,
  k_ECommunityItemAttribute_StorePackageID = 5,
  k_ECommunityItemAttribute_CommunityItemAppID = 6,
  k_ECommunityItemAttribute_CommunityItemType = 7,
  k_ECommunityItemAttribute_ProfileModiferEnabled = 8,
  k_ECommunityItemAttribute_ExpiryTime = 9
};
bool ECommunityItemAttribute_IsValid(int value);
constexpr ECommunityItemAttribute ECommunityItemAttribute_MIN = k_ECommunityItemAttribute_Invalid;
constexpr ECommunityItemAttribute ECommunityItemAttribute_MAX = k_ECommunityItemAttribute_ExpiryTime;
constexpr int ECommunityItemAttribute_ARRAYSIZE = ECommunityItemAttribute_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ECommunityItemAttribute_descriptor();
template<typename T>
inline const std::string& ECommunityItemAttribute_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ECommunityItemAttribute>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ECommunityItemAttribute_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ECommunityItemAttribute_descriptor(), enum_t_value);
}
inline bool ECommunityItemAttribute_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ECommunityItemAttribute* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ECommunityItemAttribute>(
    ECommunityItemAttribute_descriptor(), name, value);
}
// ===================================================================

class CMsgGCHVacVerificationChange :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgGCHVacVerificationChange) */ {
 public:
  inline CMsgGCHVacVerificationChange() : CMsgGCHVacVerificationChange(nullptr) {}
  ~CMsgGCHVacVerificationChange() override;
  explicit PROTOBUF_CONSTEXPR CMsgGCHVacVerificationChange(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgGCHVacVerificationChange(const CMsgGCHVacVerificationChange& from);
  CMsgGCHVacVerificationChange(CMsgGCHVacVerificationChange&& from) noexcept
    : CMsgGCHVacVerificationChange() {
    *this = ::std::move(from);
  }

  inline CMsgGCHVacVerificationChange& operator=(const CMsgGCHVacVerificationChange& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgGCHVacVerificationChange& operator=(CMsgGCHVacVerificationChange&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgGCHVacVerificationChange& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgGCHVacVerificationChange* internal_default_instance() {
    return reinterpret_cast<const CMsgGCHVacVerificationChange*>(
               &_CMsgGCHVacVerificationChange_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CMsgGCHVacVerificationChange& a, CMsgGCHVacVerificationChange& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgGCHVacVerificationChange* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgGCHVacVerificationChange* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgGCHVacVerificationChange* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgGCHVacVerificationChange>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgGCHVacVerificationChange& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgGCHVacVerificationChange& from) {
    CMsgGCHVacVerificationChange::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgGCHVacVerificationChange* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgGCHVacVerificationChange";
  }
  protected:
  explicit CMsgGCHVacVerificationChange(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSteamidFieldNumber = 1,
    kAppidFieldNumber = 2,
    kIsVerifiedFieldNumber = 3,
  };
  // optional fixed64 steamid = 1;
  bool has_steamid() const;
  private:
  bool _internal_has_steamid() const;
  public:
  void clear_steamid();
  uint64_t steamid() const;
  void set_steamid(uint64_t value);
  private:
  uint64_t _internal_steamid() const;
  void _internal_set_steamid(uint64_t value);
  public:

  // optional uint32 appid = 2;
  bool has_appid() const;
  private:
  bool _internal_has_appid() const;
  public:
  void clear_appid();
  uint32_t appid() const;
  void set_appid(uint32_t value);
  private:
  uint32_t _internal_appid() const;
  void _internal_set_appid(uint32_t value);
  public:

  // optional bool is_verified = 3;
  bool has_is_verified() const;
  private:
  bool _internal_has_is_verified() const;
  public:
  void clear_is_verified();
  bool is_verified() const;
  void set_is_verified(bool value);
  private:
  bool _internal_is_verified() const;
  void _internal_set_is_verified(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgGCHVacVerificationChange)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint64_t steamid_;
    uint32_t appid_;
    bool is_verified_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gcsystemmsgs_2eproto;
};
// -------------------------------------------------------------------

class CMsgGCHAccountPhoneNumberChange :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgGCHAccountPhoneNumberChange) */ {
 public:
  inline CMsgGCHAccountPhoneNumberChange() : CMsgGCHAccountPhoneNumberChange(nullptr) {}
  ~CMsgGCHAccountPhoneNumberChange() override;
  explicit PROTOBUF_CONSTEXPR CMsgGCHAccountPhoneNumberChange(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgGCHAccountPhoneNumberChange(const CMsgGCHAccountPhoneNumberChange& from);
  CMsgGCHAccountPhoneNumberChange(CMsgGCHAccountPhoneNumberChange&& from) noexcept
    : CMsgGCHAccountPhoneNumberChange() {
    *this = ::std::move(from);
  }

  inline CMsgGCHAccountPhoneNumberChange& operator=(const CMsgGCHAccountPhoneNumberChange& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgGCHAccountPhoneNumberChange& operator=(CMsgGCHAccountPhoneNumberChange&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgGCHAccountPhoneNumberChange& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgGCHAccountPhoneNumberChange* internal_default_instance() {
    return reinterpret_cast<const CMsgGCHAccountPhoneNumberChange*>(
               &_CMsgGCHAccountPhoneNumberChange_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CMsgGCHAccountPhoneNumberChange& a, CMsgGCHAccountPhoneNumberChange& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgGCHAccountPhoneNumberChange* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgGCHAccountPhoneNumberChange* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgGCHAccountPhoneNumberChange* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgGCHAccountPhoneNumberChange>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgGCHAccountPhoneNumberChange& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgGCHAccountPhoneNumberChange& from) {
    CMsgGCHAccountPhoneNumberChange::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgGCHAccountPhoneNumberChange* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgGCHAccountPhoneNumberChange";
  }
  protected:
  explicit CMsgGCHAccountPhoneNumberChange(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSteamidFieldNumber = 1,
    kPhoneIdFieldNumber = 3,
    kAppidFieldNumber = 2,
    kIsVerifiedFieldNumber = 4,
    kIsIdentifyingFieldNumber = 5,
  };
  // optional fixed64 steamid = 1;
  bool has_steamid() const;
  private:
  bool _internal_has_steamid() const;
  public:
  void clear_steamid();
  uint64_t steamid() const;
  void set_steamid(uint64_t value);
  private:
  uint64_t _internal_steamid() const;
  void _internal_set_steamid(uint64_t value);
  public:

  // optional uint64 phone_id = 3;
  bool has_phone_id() const;
  private:
  bool _internal_has_phone_id() const;
  public:
  void clear_phone_id();
  uint64_t phone_id() const;
  void set_phone_id(uint64_t value);
  private:
  uint64_t _internal_phone_id() const;
  void _internal_set_phone_id(uint64_t value);
  public:

  // optional uint32 appid = 2;
  bool has_appid() const;
  private:
  bool _internal_has_appid() const;
  public:
  void clear_appid();
  uint32_t appid() const;
  void set_appid(uint32_t value);
  private:
  uint32_t _internal_appid() const;
  void _internal_set_appid(uint32_t value);
  public:

  // optional bool is_verified = 4;
  bool has_is_verified() const;
  private:
  bool _internal_has_is_verified() const;
  public:
  void clear_is_verified();
  bool is_verified() const;
  void set_is_verified(bool value);
  private:
  bool _internal_is_verified() const;
  void _internal_set_is_verified(bool value);
  public:

  // optional bool is_identifying = 5;
  bool has_is_identifying() const;
  private:
  bool _internal_has_is_identifying() const;
  public:
  void clear_is_identifying();
  bool is_identifying() const;
  void set_is_identifying(bool value);
  private:
  bool _internal_is_identifying() const;
  void _internal_set_is_identifying(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgGCHAccountPhoneNumberChange)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint64_t steamid_;
    uint64_t phone_id_;
    uint32_t appid_;
    bool is_verified_;
    bool is_identifying_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gcsystemmsgs_2eproto;
};
// -------------------------------------------------------------------

class CMsgGCHInviteUserToLobby :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgGCHInviteUserToLobby) */ {
 public:
  inline CMsgGCHInviteUserToLobby() : CMsgGCHInviteUserToLobby(nullptr) {}
  ~CMsgGCHInviteUserToLobby() override;
  explicit PROTOBUF_CONSTEXPR CMsgGCHInviteUserToLobby(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgGCHInviteUserToLobby(const CMsgGCHInviteUserToLobby& from);
  CMsgGCHInviteUserToLobby(CMsgGCHInviteUserToLobby&& from) noexcept
    : CMsgGCHInviteUserToLobby() {
    *this = ::std::move(from);
  }

  inline CMsgGCHInviteUserToLobby& operator=(const CMsgGCHInviteUserToLobby& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgGCHInviteUserToLobby& operator=(CMsgGCHInviteUserToLobby&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgGCHInviteUserToLobby& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgGCHInviteUserToLobby* internal_default_instance() {
    return reinterpret_cast<const CMsgGCHInviteUserToLobby*>(
               &_CMsgGCHInviteUserToLobby_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(CMsgGCHInviteUserToLobby& a, CMsgGCHInviteUserToLobby& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgGCHInviteUserToLobby* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgGCHInviteUserToLobby* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgGCHInviteUserToLobby* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgGCHInviteUserToLobby>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgGCHInviteUserToLobby& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgGCHInviteUserToLobby& from) {
    CMsgGCHInviteUserToLobby::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgGCHInviteUserToLobby* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgGCHInviteUserToLobby";
  }
  protected:
  explicit CMsgGCHInviteUserToLobby(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSteamidFieldNumber = 1,
    kSteamidInvitedFieldNumber = 3,
    kSteamidLobbyFieldNumber = 4,
    kAppidFieldNumber = 2,
  };
  // optional fixed64 steamid = 1;
  bool has_steamid() const;
  private:
  bool _internal_has_steamid() const;
  public:
  void clear_steamid();
  uint64_t steamid() const;
  void set_steamid(uint64_t value);
  private:
  uint64_t _internal_steamid() const;
  void _internal_set_steamid(uint64_t value);
  public:

  // optional fixed64 steamid_invited = 3;
  bool has_steamid_invited() const;
  private:
  bool _internal_has_steamid_invited() const;
  public:
  void clear_steamid_invited();
  uint64_t steamid_invited() const;
  void set_steamid_invited(uint64_t value);
  private:
  uint64_t _internal_steamid_invited() const;
  void _internal_set_steamid_invited(uint64_t value);
  public:

  // optional fixed64 steamid_lobby = 4;
  bool has_steamid_lobby() const;
  private:
  bool _internal_has_steamid_lobby() const;
  public:
  void clear_steamid_lobby();
  uint64_t steamid_lobby() const;
  void set_steamid_lobby(uint64_t value);
  private:
  uint64_t _internal_steamid_lobby() const;
  void _internal_set_steamid_lobby(uint64_t value);
  public:

  // optional uint32 appid = 2;
  bool has_appid() const;
  private:
  bool _internal_has_appid() const;
  public:
  void clear_appid();
  uint32_t appid() const;
  void set_appid(uint32_t value);
  private:
  uint32_t _internal_appid() const;
  void _internal_set_appid(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgGCHInviteUserToLobby)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint64_t steamid_;
    uint64_t steamid_invited_;
    uint64_t steamid_lobby_;
    uint32_t appid_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gcsystemmsgs_2eproto;
};
// -------------------------------------------------------------------

class CMsgGCHRecurringSubscriptionStatusChange :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgGCHRecurringSubscriptionStatusChange) */ {
 public:
  inline CMsgGCHRecurringSubscriptionStatusChange() : CMsgGCHRecurringSubscriptionStatusChange(nullptr) {}
  ~CMsgGCHRecurringSubscriptionStatusChange() override;
  explicit PROTOBUF_CONSTEXPR CMsgGCHRecurringSubscriptionStatusChange(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgGCHRecurringSubscriptionStatusChange(const CMsgGCHRecurringSubscriptionStatusChange& from);
  CMsgGCHRecurringSubscriptionStatusChange(CMsgGCHRecurringSubscriptionStatusChange&& from) noexcept
    : CMsgGCHRecurringSubscriptionStatusChange() {
    *this = ::std::move(from);
  }

  inline CMsgGCHRecurringSubscriptionStatusChange& operator=(const CMsgGCHRecurringSubscriptionStatusChange& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgGCHRecurringSubscriptionStatusChange& operator=(CMsgGCHRecurringSubscriptionStatusChange&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgGCHRecurringSubscriptionStatusChange& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgGCHRecurringSubscriptionStatusChange* internal_default_instance() {
    return reinterpret_cast<const CMsgGCHRecurringSubscriptionStatusChange*>(
               &_CMsgGCHRecurringSubscriptionStatusChange_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(CMsgGCHRecurringSubscriptionStatusChange& a, CMsgGCHRecurringSubscriptionStatusChange& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgGCHRecurringSubscriptionStatusChange* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgGCHRecurringSubscriptionStatusChange* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgGCHRecurringSubscriptionStatusChange* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgGCHRecurringSubscriptionStatusChange>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgGCHRecurringSubscriptionStatusChange& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgGCHRecurringSubscriptionStatusChange& from) {
    CMsgGCHRecurringSubscriptionStatusChange::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgGCHRecurringSubscriptionStatusChange* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgGCHRecurringSubscriptionStatusChange";
  }
  protected:
  explicit CMsgGCHRecurringSubscriptionStatusChange(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSteamidFieldNumber = 1,
    kAgreementidFieldNumber = 3,
    kAppidFieldNumber = 2,
    kActiveFieldNumber = 4,
  };
  // optional fixed64 steamid = 1;
  bool has_steamid() const;
  private:
  bool _internal_has_steamid() const;
  public:
  void clear_steamid();
  uint64_t steamid() const;
  void set_steamid(uint64_t value);
  private:
  uint64_t _internal_steamid() const;
  void _internal_set_steamid(uint64_t value);
  public:

  // optional fixed64 agreementid = 3;
  bool has_agreementid() const;
  private:
  bool _internal_has_agreementid() const;
  public:
  void clear_agreementid();
  uint64_t agreementid() const;
  void set_agreementid(uint64_t value);
  private:
  uint64_t _internal_agreementid() const;
  void _internal_set_agreementid(uint64_t value);
  public:

  // optional uint32 appid = 2;
  bool has_appid() const;
  private:
  bool _internal_has_appid() const;
  public:
  void clear_appid();
  uint32_t appid() const;
  void set_appid(uint32_t value);
  private:
  uint32_t _internal_appid() const;
  void _internal_set_appid(uint32_t value);
  public:

  // optional bool active = 4;
  bool has_active() const;
  private:
  bool _internal_has_active() const;
  public:
  void clear_active();
  bool active() const;
  void set_active(bool value);
  private:
  bool _internal_active() const;
  void _internal_set_active(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgGCHRecurringSubscriptionStatusChange)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint64_t steamid_;
    uint64_t agreementid_;
    uint32_t appid_;
    bool active_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gcsystemmsgs_2eproto;
};
// -------------------------------------------------------------------

class CQuest_PublisherAddCommunityItemsToPlayer_Request_Attribute :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CQuest_PublisherAddCommunityItemsToPlayer_Request.Attribute) */ {
 public:
  inline CQuest_PublisherAddCommunityItemsToPlayer_Request_Attribute() : CQuest_PublisherAddCommunityItemsToPlayer_Request_Attribute(nullptr) {}
  ~CQuest_PublisherAddCommunityItemsToPlayer_Request_Attribute() override;
  explicit PROTOBUF_CONSTEXPR CQuest_PublisherAddCommunityItemsToPlayer_Request_Attribute(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CQuest_PublisherAddCommunityItemsToPlayer_Request_Attribute(const CQuest_PublisherAddCommunityItemsToPlayer_Request_Attribute& from);
  CQuest_PublisherAddCommunityItemsToPlayer_Request_Attribute(CQuest_PublisherAddCommunityItemsToPlayer_Request_Attribute&& from) noexcept
    : CQuest_PublisherAddCommunityItemsToPlayer_Request_Attribute() {
    *this = ::std::move(from);
  }

  inline CQuest_PublisherAddCommunityItemsToPlayer_Request_Attribute& operator=(const CQuest_PublisherAddCommunityItemsToPlayer_Request_Attribute& from) {
    CopyFrom(from);
    return *this;
  }
  inline CQuest_PublisherAddCommunityItemsToPlayer_Request_Attribute& operator=(CQuest_PublisherAddCommunityItemsToPlayer_Request_Attribute&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CQuest_PublisherAddCommunityItemsToPlayer_Request_Attribute& default_instance() {
    return *internal_default_instance();
  }
  static inline const CQuest_PublisherAddCommunityItemsToPlayer_Request_Attribute* internal_default_instance() {
    return reinterpret_cast<const CQuest_PublisherAddCommunityItemsToPlayer_Request_Attribute*>(
               &_CQuest_PublisherAddCommunityItemsToPlayer_Request_Attribute_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(CQuest_PublisherAddCommunityItemsToPlayer_Request_Attribute& a, CQuest_PublisherAddCommunityItemsToPlayer_Request_Attribute& b) {
    a.Swap(&b);
  }
  inline void Swap(CQuest_PublisherAddCommunityItemsToPlayer_Request_Attribute* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CQuest_PublisherAddCommunityItemsToPlayer_Request_Attribute* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CQuest_PublisherAddCommunityItemsToPlayer_Request_Attribute* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CQuest_PublisherAddCommunityItemsToPlayer_Request_Attribute>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CQuest_PublisherAddCommunityItemsToPlayer_Request_Attribute& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CQuest_PublisherAddCommunityItemsToPlayer_Request_Attribute& from) {
    CQuest_PublisherAddCommunityItemsToPlayer_Request_Attribute::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CQuest_PublisherAddCommunityItemsToPlayer_Request_Attribute* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CQuest_PublisherAddCommunityItemsToPlayer_Request.Attribute";
  }
  protected:
  explicit CQuest_PublisherAddCommunityItemsToPlayer_Request_Attribute(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 2,
    kAttributeFieldNumber = 1,
  };
  // optional uint64 value = 2;
  bool has_value() const;
  private:
  bool _internal_has_value() const;
  public:
  void clear_value();
  uint64_t value() const;
  void set_value(uint64_t value);
  private:
  uint64_t _internal_value() const;
  void _internal_set_value(uint64_t value);
  public:

  // optional uint32 attribute = 1;
  bool has_attribute() const;
  private:
  bool _internal_has_attribute() const;
  public:
  void clear_attribute();
  uint32_t attribute() const;
  void set_attribute(uint32_t value);
  private:
  uint32_t _internal_attribute() const;
  void _internal_set_attribute(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CQuest_PublisherAddCommunityItemsToPlayer_Request.Attribute)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint64_t value_;
    uint32_t attribute_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gcsystemmsgs_2eproto;
};
// -------------------------------------------------------------------

class CQuest_PublisherAddCommunityItemsToPlayer_Request :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CQuest_PublisherAddCommunityItemsToPlayer_Request) */ {
 public:
  inline CQuest_PublisherAddCommunityItemsToPlayer_Request() : CQuest_PublisherAddCommunityItemsToPlayer_Request(nullptr) {}
  ~CQuest_PublisherAddCommunityItemsToPlayer_Request() override;
  explicit PROTOBUF_CONSTEXPR CQuest_PublisherAddCommunityItemsToPlayer_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CQuest_PublisherAddCommunityItemsToPlayer_Request(const CQuest_PublisherAddCommunityItemsToPlayer_Request& from);
  CQuest_PublisherAddCommunityItemsToPlayer_Request(CQuest_PublisherAddCommunityItemsToPlayer_Request&& from) noexcept
    : CQuest_PublisherAddCommunityItemsToPlayer_Request() {
    *this = ::std::move(from);
  }

  inline CQuest_PublisherAddCommunityItemsToPlayer_Request& operator=(const CQuest_PublisherAddCommunityItemsToPlayer_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CQuest_PublisherAddCommunityItemsToPlayer_Request& operator=(CQuest_PublisherAddCommunityItemsToPlayer_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CQuest_PublisherAddCommunityItemsToPlayer_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CQuest_PublisherAddCommunityItemsToPlayer_Request* internal_default_instance() {
    return reinterpret_cast<const CQuest_PublisherAddCommunityItemsToPlayer_Request*>(
               &_CQuest_PublisherAddCommunityItemsToPlayer_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(CQuest_PublisherAddCommunityItemsToPlayer_Request& a, CQuest_PublisherAddCommunityItemsToPlayer_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CQuest_PublisherAddCommunityItemsToPlayer_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CQuest_PublisherAddCommunityItemsToPlayer_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CQuest_PublisherAddCommunityItemsToPlayer_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CQuest_PublisherAddCommunityItemsToPlayer_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CQuest_PublisherAddCommunityItemsToPlayer_Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CQuest_PublisherAddCommunityItemsToPlayer_Request& from) {
    CQuest_PublisherAddCommunityItemsToPlayer_Request::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CQuest_PublisherAddCommunityItemsToPlayer_Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CQuest_PublisherAddCommunityItemsToPlayer_Request";
  }
  protected:
  explicit CQuest_PublisherAddCommunityItemsToPlayer_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CQuest_PublisherAddCommunityItemsToPlayer_Request_Attribute Attribute;

  // accessors -------------------------------------------------------

  enum : int {
    kAttributesFieldNumber = 6,
    kPrefixItemNameFieldNumber = 5,
    kNoteFieldNumber = 7,
    kSteamidFieldNumber = 1,
    kAppidFieldNumber = 2,
    kMatchItemTypeFieldNumber = 3,
    kMatchItemClassFieldNumber = 4,
  };
  // repeated .CQuest_PublisherAddCommunityItemsToPlayer_Request.Attribute attributes = 6;
  int attributes_size() const;
  private:
  int _internal_attributes_size() const;
  public:
  void clear_attributes();
  ::CQuest_PublisherAddCommunityItemsToPlayer_Request_Attribute* mutable_attributes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CQuest_PublisherAddCommunityItemsToPlayer_Request_Attribute >*
      mutable_attributes();
  private:
  const ::CQuest_PublisherAddCommunityItemsToPlayer_Request_Attribute& _internal_attributes(int index) const;
  ::CQuest_PublisherAddCommunityItemsToPlayer_Request_Attribute* _internal_add_attributes();
  public:
  const ::CQuest_PublisherAddCommunityItemsToPlayer_Request_Attribute& attributes(int index) const;
  ::CQuest_PublisherAddCommunityItemsToPlayer_Request_Attribute* add_attributes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CQuest_PublisherAddCommunityItemsToPlayer_Request_Attribute >&
      attributes() const;

  // optional string prefix_item_name = 5;
  bool has_prefix_item_name() const;
  private:
  bool _internal_has_prefix_item_name() const;
  public:
  void clear_prefix_item_name();
  const std::string& prefix_item_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_prefix_item_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_prefix_item_name();
  PROTOBUF_NODISCARD std::string* release_prefix_item_name();
  void set_allocated_prefix_item_name(std::string* prefix_item_name);
  private:
  const std::string& _internal_prefix_item_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_prefix_item_name(const std::string& value);
  std::string* _internal_mutable_prefix_item_name();
  public:

  // optional string note = 7;
  bool has_note() const;
  private:
  bool _internal_has_note() const;
  public:
  void clear_note();
  const std::string& note() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_note(ArgT0&& arg0, ArgT... args);
  std::string* mutable_note();
  PROTOBUF_NODISCARD std::string* release_note();
  void set_allocated_note(std::string* note);
  private:
  const std::string& _internal_note() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_note(const std::string& value);
  std::string* _internal_mutable_note();
  public:

  // optional uint64 steamid = 1;
  bool has_steamid() const;
  private:
  bool _internal_has_steamid() const;
  public:
  void clear_steamid();
  uint64_t steamid() const;
  void set_steamid(uint64_t value);
  private:
  uint64_t _internal_steamid() const;
  void _internal_set_steamid(uint64_t value);
  public:

  // optional uint32 appid = 2;
  bool has_appid() const;
  private:
  bool _internal_has_appid() const;
  public:
  void clear_appid();
  uint32_t appid() const;
  void set_appid(uint32_t value);
  private:
  uint32_t _internal_appid() const;
  void _internal_set_appid(uint32_t value);
  public:

  // optional uint32 match_item_type = 3;
  bool has_match_item_type() const;
  private:
  bool _internal_has_match_item_type() const;
  public:
  void clear_match_item_type();
  uint32_t match_item_type() const;
  void set_match_item_type(uint32_t value);
  private:
  uint32_t _internal_match_item_type() const;
  void _internal_set_match_item_type(uint32_t value);
  public:

  // optional uint32 match_item_class = 4;
  bool has_match_item_class() const;
  private:
  bool _internal_has_match_item_class() const;
  public:
  void clear_match_item_class();
  uint32_t match_item_class() const;
  void set_match_item_class(uint32_t value);
  private:
  uint32_t _internal_match_item_class() const;
  void _internal_set_match_item_class(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CQuest_PublisherAddCommunityItemsToPlayer_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CQuest_PublisherAddCommunityItemsToPlayer_Request_Attribute > attributes_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr prefix_item_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr note_;
    uint64_t steamid_;
    uint32_t appid_;
    uint32_t match_item_type_;
    uint32_t match_item_class_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gcsystemmsgs_2eproto;
};
// -------------------------------------------------------------------

class CQuest_PublisherAddCommunityItemsToPlayer_Response :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CQuest_PublisherAddCommunityItemsToPlayer_Response) */ {
 public:
  inline CQuest_PublisherAddCommunityItemsToPlayer_Response() : CQuest_PublisherAddCommunityItemsToPlayer_Response(nullptr) {}
  ~CQuest_PublisherAddCommunityItemsToPlayer_Response() override;
  explicit PROTOBUF_CONSTEXPR CQuest_PublisherAddCommunityItemsToPlayer_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CQuest_PublisherAddCommunityItemsToPlayer_Response(const CQuest_PublisherAddCommunityItemsToPlayer_Response& from);
  CQuest_PublisherAddCommunityItemsToPlayer_Response(CQuest_PublisherAddCommunityItemsToPlayer_Response&& from) noexcept
    : CQuest_PublisherAddCommunityItemsToPlayer_Response() {
    *this = ::std::move(from);
  }

  inline CQuest_PublisherAddCommunityItemsToPlayer_Response& operator=(const CQuest_PublisherAddCommunityItemsToPlayer_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CQuest_PublisherAddCommunityItemsToPlayer_Response& operator=(CQuest_PublisherAddCommunityItemsToPlayer_Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CQuest_PublisherAddCommunityItemsToPlayer_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CQuest_PublisherAddCommunityItemsToPlayer_Response* internal_default_instance() {
    return reinterpret_cast<const CQuest_PublisherAddCommunityItemsToPlayer_Response*>(
               &_CQuest_PublisherAddCommunityItemsToPlayer_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(CQuest_PublisherAddCommunityItemsToPlayer_Response& a, CQuest_PublisherAddCommunityItemsToPlayer_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CQuest_PublisherAddCommunityItemsToPlayer_Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CQuest_PublisherAddCommunityItemsToPlayer_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CQuest_PublisherAddCommunityItemsToPlayer_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CQuest_PublisherAddCommunityItemsToPlayer_Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CQuest_PublisherAddCommunityItemsToPlayer_Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CQuest_PublisherAddCommunityItemsToPlayer_Response& from) {
    CQuest_PublisherAddCommunityItemsToPlayer_Response::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CQuest_PublisherAddCommunityItemsToPlayer_Response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CQuest_PublisherAddCommunityItemsToPlayer_Response";
  }
  protected:
  explicit CQuest_PublisherAddCommunityItemsToPlayer_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kItemsMatchedFieldNumber = 1,
    kItemsGrantedFieldNumber = 2,
  };
  // optional uint32 items_matched = 1;
  bool has_items_matched() const;
  private:
  bool _internal_has_items_matched() const;
  public:
  void clear_items_matched();
  uint32_t items_matched() const;
  void set_items_matched(uint32_t value);
  private:
  uint32_t _internal_items_matched() const;
  void _internal_set_items_matched(uint32_t value);
  public:

  // optional uint32 items_granted = 2;
  bool has_items_granted() const;
  private:
  bool _internal_has_items_granted() const;
  public:
  void clear_items_granted();
  uint32_t items_granted() const;
  void set_items_granted(uint32_t value);
  private:
  uint32_t _internal_items_granted() const;
  void _internal_set_items_granted(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CQuest_PublisherAddCommunityItemsToPlayer_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t items_matched_;
    uint32_t items_granted_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gcsystemmsgs_2eproto;
};
// -------------------------------------------------------------------

class CCommunity_GamePersonalDataCategoryInfo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CCommunity_GamePersonalDataCategoryInfo) */ {
 public:
  inline CCommunity_GamePersonalDataCategoryInfo() : CCommunity_GamePersonalDataCategoryInfo(nullptr) {}
  ~CCommunity_GamePersonalDataCategoryInfo() override;
  explicit PROTOBUF_CONSTEXPR CCommunity_GamePersonalDataCategoryInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CCommunity_GamePersonalDataCategoryInfo(const CCommunity_GamePersonalDataCategoryInfo& from);
  CCommunity_GamePersonalDataCategoryInfo(CCommunity_GamePersonalDataCategoryInfo&& from) noexcept
    : CCommunity_GamePersonalDataCategoryInfo() {
    *this = ::std::move(from);
  }

  inline CCommunity_GamePersonalDataCategoryInfo& operator=(const CCommunity_GamePersonalDataCategoryInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline CCommunity_GamePersonalDataCategoryInfo& operator=(CCommunity_GamePersonalDataCategoryInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CCommunity_GamePersonalDataCategoryInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const CCommunity_GamePersonalDataCategoryInfo* internal_default_instance() {
    return reinterpret_cast<const CCommunity_GamePersonalDataCategoryInfo*>(
               &_CCommunity_GamePersonalDataCategoryInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(CCommunity_GamePersonalDataCategoryInfo& a, CCommunity_GamePersonalDataCategoryInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(CCommunity_GamePersonalDataCategoryInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CCommunity_GamePersonalDataCategoryInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CCommunity_GamePersonalDataCategoryInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CCommunity_GamePersonalDataCategoryInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CCommunity_GamePersonalDataCategoryInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CCommunity_GamePersonalDataCategoryInfo& from) {
    CCommunity_GamePersonalDataCategoryInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CCommunity_GamePersonalDataCategoryInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CCommunity_GamePersonalDataCategoryInfo";
  }
  protected:
  explicit CCommunity_GamePersonalDataCategoryInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 1,
    kLocalizationTokenFieldNumber = 2,
    kTemplateFileFieldNumber = 3,
  };
  // optional string type = 1;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  const std::string& type() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_type(ArgT0&& arg0, ArgT... args);
  std::string* mutable_type();
  PROTOBUF_NODISCARD std::string* release_type();
  void set_allocated_type(std::string* type);
  private:
  const std::string& _internal_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_type(const std::string& value);
  std::string* _internal_mutable_type();
  public:

  // optional string localization_token = 2;
  bool has_localization_token() const;
  private:
  bool _internal_has_localization_token() const;
  public:
  void clear_localization_token();
  const std::string& localization_token() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_localization_token(ArgT0&& arg0, ArgT... args);
  std::string* mutable_localization_token();
  PROTOBUF_NODISCARD std::string* release_localization_token();
  void set_allocated_localization_token(std::string* localization_token);
  private:
  const std::string& _internal_localization_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_localization_token(const std::string& value);
  std::string* _internal_mutable_localization_token();
  public:

  // optional string template_file = 3;
  bool has_template_file() const;
  private:
  bool _internal_has_template_file() const;
  public:
  void clear_template_file();
  const std::string& template_file() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_template_file(ArgT0&& arg0, ArgT... args);
  std::string* mutable_template_file();
  PROTOBUF_NODISCARD std::string* release_template_file();
  void set_allocated_template_file(std::string* template_file);
  private:
  const std::string& _internal_template_file() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_template_file(const std::string& value);
  std::string* _internal_mutable_template_file();
  public:

  // @@protoc_insertion_point(class_scope:CCommunity_GamePersonalDataCategoryInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr localization_token_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr template_file_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gcsystemmsgs_2eproto;
};
// -------------------------------------------------------------------

class CCommunity_GetGamePersonalDataCategories_Request :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CCommunity_GetGamePersonalDataCategories_Request) */ {
 public:
  inline CCommunity_GetGamePersonalDataCategories_Request() : CCommunity_GetGamePersonalDataCategories_Request(nullptr) {}
  ~CCommunity_GetGamePersonalDataCategories_Request() override;
  explicit PROTOBUF_CONSTEXPR CCommunity_GetGamePersonalDataCategories_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CCommunity_GetGamePersonalDataCategories_Request(const CCommunity_GetGamePersonalDataCategories_Request& from);
  CCommunity_GetGamePersonalDataCategories_Request(CCommunity_GetGamePersonalDataCategories_Request&& from) noexcept
    : CCommunity_GetGamePersonalDataCategories_Request() {
    *this = ::std::move(from);
  }

  inline CCommunity_GetGamePersonalDataCategories_Request& operator=(const CCommunity_GetGamePersonalDataCategories_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CCommunity_GetGamePersonalDataCategories_Request& operator=(CCommunity_GetGamePersonalDataCategories_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CCommunity_GetGamePersonalDataCategories_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CCommunity_GetGamePersonalDataCategories_Request* internal_default_instance() {
    return reinterpret_cast<const CCommunity_GetGamePersonalDataCategories_Request*>(
               &_CCommunity_GetGamePersonalDataCategories_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(CCommunity_GetGamePersonalDataCategories_Request& a, CCommunity_GetGamePersonalDataCategories_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CCommunity_GetGamePersonalDataCategories_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CCommunity_GetGamePersonalDataCategories_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CCommunity_GetGamePersonalDataCategories_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CCommunity_GetGamePersonalDataCategories_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CCommunity_GetGamePersonalDataCategories_Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CCommunity_GetGamePersonalDataCategories_Request& from) {
    CCommunity_GetGamePersonalDataCategories_Request::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CCommunity_GetGamePersonalDataCategories_Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CCommunity_GetGamePersonalDataCategories_Request";
  }
  protected:
  explicit CCommunity_GetGamePersonalDataCategories_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAppidFieldNumber = 1,
  };
  // optional uint32 appid = 1;
  bool has_appid() const;
  private:
  bool _internal_has_appid() const;
  public:
  void clear_appid();
  uint32_t appid() const;
  void set_appid(uint32_t value);
  private:
  uint32_t _internal_appid() const;
  void _internal_set_appid(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CCommunity_GetGamePersonalDataCategories_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t appid_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gcsystemmsgs_2eproto;
};
// -------------------------------------------------------------------

class CCommunity_GetGamePersonalDataCategories_Response :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CCommunity_GetGamePersonalDataCategories_Response) */ {
 public:
  inline CCommunity_GetGamePersonalDataCategories_Response() : CCommunity_GetGamePersonalDataCategories_Response(nullptr) {}
  ~CCommunity_GetGamePersonalDataCategories_Response() override;
  explicit PROTOBUF_CONSTEXPR CCommunity_GetGamePersonalDataCategories_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CCommunity_GetGamePersonalDataCategories_Response(const CCommunity_GetGamePersonalDataCategories_Response& from);
  CCommunity_GetGamePersonalDataCategories_Response(CCommunity_GetGamePersonalDataCategories_Response&& from) noexcept
    : CCommunity_GetGamePersonalDataCategories_Response() {
    *this = ::std::move(from);
  }

  inline CCommunity_GetGamePersonalDataCategories_Response& operator=(const CCommunity_GetGamePersonalDataCategories_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CCommunity_GetGamePersonalDataCategories_Response& operator=(CCommunity_GetGamePersonalDataCategories_Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CCommunity_GetGamePersonalDataCategories_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CCommunity_GetGamePersonalDataCategories_Response* internal_default_instance() {
    return reinterpret_cast<const CCommunity_GetGamePersonalDataCategories_Response*>(
               &_CCommunity_GetGamePersonalDataCategories_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(CCommunity_GetGamePersonalDataCategories_Response& a, CCommunity_GetGamePersonalDataCategories_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CCommunity_GetGamePersonalDataCategories_Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CCommunity_GetGamePersonalDataCategories_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CCommunity_GetGamePersonalDataCategories_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CCommunity_GetGamePersonalDataCategories_Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CCommunity_GetGamePersonalDataCategories_Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CCommunity_GetGamePersonalDataCategories_Response& from) {
    CCommunity_GetGamePersonalDataCategories_Response::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CCommunity_GetGamePersonalDataCategories_Response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CCommunity_GetGamePersonalDataCategories_Response";
  }
  protected:
  explicit CCommunity_GetGamePersonalDataCategories_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCategoriesFieldNumber = 1,
    kAppAssetsBasenameFieldNumber = 2,
  };
  // repeated .CCommunity_GamePersonalDataCategoryInfo categories = 1;
  int categories_size() const;
  private:
  int _internal_categories_size() const;
  public:
  void clear_categories();
  ::CCommunity_GamePersonalDataCategoryInfo* mutable_categories(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CCommunity_GamePersonalDataCategoryInfo >*
      mutable_categories();
  private:
  const ::CCommunity_GamePersonalDataCategoryInfo& _internal_categories(int index) const;
  ::CCommunity_GamePersonalDataCategoryInfo* _internal_add_categories();
  public:
  const ::CCommunity_GamePersonalDataCategoryInfo& categories(int index) const;
  ::CCommunity_GamePersonalDataCategoryInfo* add_categories();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CCommunity_GamePersonalDataCategoryInfo >&
      categories() const;

  // optional string app_assets_basename = 2;
  bool has_app_assets_basename() const;
  private:
  bool _internal_has_app_assets_basename() const;
  public:
  void clear_app_assets_basename();
  const std::string& app_assets_basename() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_app_assets_basename(ArgT0&& arg0, ArgT... args);
  std::string* mutable_app_assets_basename();
  PROTOBUF_NODISCARD std::string* release_app_assets_basename();
  void set_allocated_app_assets_basename(std::string* app_assets_basename);
  private:
  const std::string& _internal_app_assets_basename() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_app_assets_basename(const std::string& value);
  std::string* _internal_mutable_app_assets_basename();
  public:

  // @@protoc_insertion_point(class_scope:CCommunity_GetGamePersonalDataCategories_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CCommunity_GamePersonalDataCategoryInfo > categories_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr app_assets_basename_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gcsystemmsgs_2eproto;
};
// -------------------------------------------------------------------

class CCommunity_GetGamePersonalDataEntries_Request :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CCommunity_GetGamePersonalDataEntries_Request) */ {
 public:
  inline CCommunity_GetGamePersonalDataEntries_Request() : CCommunity_GetGamePersonalDataEntries_Request(nullptr) {}
  ~CCommunity_GetGamePersonalDataEntries_Request() override;
  explicit PROTOBUF_CONSTEXPR CCommunity_GetGamePersonalDataEntries_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CCommunity_GetGamePersonalDataEntries_Request(const CCommunity_GetGamePersonalDataEntries_Request& from);
  CCommunity_GetGamePersonalDataEntries_Request(CCommunity_GetGamePersonalDataEntries_Request&& from) noexcept
    : CCommunity_GetGamePersonalDataEntries_Request() {
    *this = ::std::move(from);
  }

  inline CCommunity_GetGamePersonalDataEntries_Request& operator=(const CCommunity_GetGamePersonalDataEntries_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CCommunity_GetGamePersonalDataEntries_Request& operator=(CCommunity_GetGamePersonalDataEntries_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CCommunity_GetGamePersonalDataEntries_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CCommunity_GetGamePersonalDataEntries_Request* internal_default_instance() {
    return reinterpret_cast<const CCommunity_GetGamePersonalDataEntries_Request*>(
               &_CCommunity_GetGamePersonalDataEntries_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(CCommunity_GetGamePersonalDataEntries_Request& a, CCommunity_GetGamePersonalDataEntries_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CCommunity_GetGamePersonalDataEntries_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CCommunity_GetGamePersonalDataEntries_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CCommunity_GetGamePersonalDataEntries_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CCommunity_GetGamePersonalDataEntries_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CCommunity_GetGamePersonalDataEntries_Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CCommunity_GetGamePersonalDataEntries_Request& from) {
    CCommunity_GetGamePersonalDataEntries_Request::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CCommunity_GetGamePersonalDataEntries_Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CCommunity_GetGamePersonalDataEntries_Request";
  }
  protected:
  explicit CCommunity_GetGamePersonalDataEntries_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 3,
    kContinueTokenFieldNumber = 4,
    kSteamidFieldNumber = 2,
    kAppidFieldNumber = 1,
  };
  // optional string type = 3;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  const std::string& type() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_type(ArgT0&& arg0, ArgT... args);
  std::string* mutable_type();
  PROTOBUF_NODISCARD std::string* release_type();
  void set_allocated_type(std::string* type);
  private:
  const std::string& _internal_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_type(const std::string& value);
  std::string* _internal_mutable_type();
  public:

  // optional string continue_token = 4;
  bool has_continue_token() const;
  private:
  bool _internal_has_continue_token() const;
  public:
  void clear_continue_token();
  const std::string& continue_token() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_continue_token(ArgT0&& arg0, ArgT... args);
  std::string* mutable_continue_token();
  PROTOBUF_NODISCARD std::string* release_continue_token();
  void set_allocated_continue_token(std::string* continue_token);
  private:
  const std::string& _internal_continue_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_continue_token(const std::string& value);
  std::string* _internal_mutable_continue_token();
  public:

  // optional uint64 steamid = 2;
  bool has_steamid() const;
  private:
  bool _internal_has_steamid() const;
  public:
  void clear_steamid();
  uint64_t steamid() const;
  void set_steamid(uint64_t value);
  private:
  uint64_t _internal_steamid() const;
  void _internal_set_steamid(uint64_t value);
  public:

  // optional uint32 appid = 1;
  bool has_appid() const;
  private:
  bool _internal_has_appid() const;
  public:
  void clear_appid();
  uint32_t appid() const;
  void set_appid(uint32_t value);
  private:
  uint32_t _internal_appid() const;
  void _internal_set_appid(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CCommunity_GetGamePersonalDataEntries_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr continue_token_;
    uint64_t steamid_;
    uint32_t appid_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gcsystemmsgs_2eproto;
};
// -------------------------------------------------------------------

class CCommunity_GetGamePersonalDataEntries_Response :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CCommunity_GetGamePersonalDataEntries_Response) */ {
 public:
  inline CCommunity_GetGamePersonalDataEntries_Response() : CCommunity_GetGamePersonalDataEntries_Response(nullptr) {}
  ~CCommunity_GetGamePersonalDataEntries_Response() override;
  explicit PROTOBUF_CONSTEXPR CCommunity_GetGamePersonalDataEntries_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CCommunity_GetGamePersonalDataEntries_Response(const CCommunity_GetGamePersonalDataEntries_Response& from);
  CCommunity_GetGamePersonalDataEntries_Response(CCommunity_GetGamePersonalDataEntries_Response&& from) noexcept
    : CCommunity_GetGamePersonalDataEntries_Response() {
    *this = ::std::move(from);
  }

  inline CCommunity_GetGamePersonalDataEntries_Response& operator=(const CCommunity_GetGamePersonalDataEntries_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CCommunity_GetGamePersonalDataEntries_Response& operator=(CCommunity_GetGamePersonalDataEntries_Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CCommunity_GetGamePersonalDataEntries_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CCommunity_GetGamePersonalDataEntries_Response* internal_default_instance() {
    return reinterpret_cast<const CCommunity_GetGamePersonalDataEntries_Response*>(
               &_CCommunity_GetGamePersonalDataEntries_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(CCommunity_GetGamePersonalDataEntries_Response& a, CCommunity_GetGamePersonalDataEntries_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CCommunity_GetGamePersonalDataEntries_Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CCommunity_GetGamePersonalDataEntries_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CCommunity_GetGamePersonalDataEntries_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CCommunity_GetGamePersonalDataEntries_Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CCommunity_GetGamePersonalDataEntries_Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CCommunity_GetGamePersonalDataEntries_Response& from) {
    CCommunity_GetGamePersonalDataEntries_Response::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CCommunity_GetGamePersonalDataEntries_Response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CCommunity_GetGamePersonalDataEntries_Response";
  }
  protected:
  explicit CCommunity_GetGamePersonalDataEntries_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEntriesFieldNumber = 2,
    kContinueTokenFieldNumber = 3,
    kContinueTextFieldNumber = 4,
    kGceresultFieldNumber = 1,
  };
  // repeated string entries = 2;
  int entries_size() const;
  private:
  int _internal_entries_size() const;
  public:
  void clear_entries();
  const std::string& entries(int index) const;
  std::string* mutable_entries(int index);
  void set_entries(int index, const std::string& value);
  void set_entries(int index, std::string&& value);
  void set_entries(int index, const char* value);
  void set_entries(int index, const char* value, size_t size);
  std::string* add_entries();
  void add_entries(const std::string& value);
  void add_entries(std::string&& value);
  void add_entries(const char* value);
  void add_entries(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& entries() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_entries();
  private:
  const std::string& _internal_entries(int index) const;
  std::string* _internal_add_entries();
  public:

  // optional string continue_token = 3;
  bool has_continue_token() const;
  private:
  bool _internal_has_continue_token() const;
  public:
  void clear_continue_token();
  const std::string& continue_token() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_continue_token(ArgT0&& arg0, ArgT... args);
  std::string* mutable_continue_token();
  PROTOBUF_NODISCARD std::string* release_continue_token();
  void set_allocated_continue_token(std::string* continue_token);
  private:
  const std::string& _internal_continue_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_continue_token(const std::string& value);
  std::string* _internal_mutable_continue_token();
  public:

  // optional string continue_text = 4;
  bool has_continue_text() const;
  private:
  bool _internal_has_continue_text() const;
  public:
  void clear_continue_text();
  const std::string& continue_text() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_continue_text(ArgT0&& arg0, ArgT... args);
  std::string* mutable_continue_text();
  PROTOBUF_NODISCARD std::string* release_continue_text();
  void set_allocated_continue_text(std::string* continue_text);
  private:
  const std::string& _internal_continue_text() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_continue_text(const std::string& value);
  std::string* _internal_mutable_continue_text();
  public:

  // optional uint32 gceresult = 1;
  bool has_gceresult() const;
  private:
  bool _internal_has_gceresult() const;
  public:
  void clear_gceresult();
  uint32_t gceresult() const;
  void set_gceresult(uint32_t value);
  private:
  uint32_t _internal_gceresult() const;
  void _internal_set_gceresult(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CCommunity_GetGamePersonalDataEntries_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> entries_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr continue_token_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr continue_text_;
    uint32_t gceresult_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gcsystemmsgs_2eproto;
};
// -------------------------------------------------------------------

class CCommunity_TerminateGamePersonalDataEntries_Request :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CCommunity_TerminateGamePersonalDataEntries_Request) */ {
 public:
  inline CCommunity_TerminateGamePersonalDataEntries_Request() : CCommunity_TerminateGamePersonalDataEntries_Request(nullptr) {}
  ~CCommunity_TerminateGamePersonalDataEntries_Request() override;
  explicit PROTOBUF_CONSTEXPR CCommunity_TerminateGamePersonalDataEntries_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CCommunity_TerminateGamePersonalDataEntries_Request(const CCommunity_TerminateGamePersonalDataEntries_Request& from);
  CCommunity_TerminateGamePersonalDataEntries_Request(CCommunity_TerminateGamePersonalDataEntries_Request&& from) noexcept
    : CCommunity_TerminateGamePersonalDataEntries_Request() {
    *this = ::std::move(from);
  }

  inline CCommunity_TerminateGamePersonalDataEntries_Request& operator=(const CCommunity_TerminateGamePersonalDataEntries_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CCommunity_TerminateGamePersonalDataEntries_Request& operator=(CCommunity_TerminateGamePersonalDataEntries_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CCommunity_TerminateGamePersonalDataEntries_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CCommunity_TerminateGamePersonalDataEntries_Request* internal_default_instance() {
    return reinterpret_cast<const CCommunity_TerminateGamePersonalDataEntries_Request*>(
               &_CCommunity_TerminateGamePersonalDataEntries_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(CCommunity_TerminateGamePersonalDataEntries_Request& a, CCommunity_TerminateGamePersonalDataEntries_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CCommunity_TerminateGamePersonalDataEntries_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CCommunity_TerminateGamePersonalDataEntries_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CCommunity_TerminateGamePersonalDataEntries_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CCommunity_TerminateGamePersonalDataEntries_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CCommunity_TerminateGamePersonalDataEntries_Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CCommunity_TerminateGamePersonalDataEntries_Request& from) {
    CCommunity_TerminateGamePersonalDataEntries_Request::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CCommunity_TerminateGamePersonalDataEntries_Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CCommunity_TerminateGamePersonalDataEntries_Request";
  }
  protected:
  explicit CCommunity_TerminateGamePersonalDataEntries_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSteamidFieldNumber = 2,
    kAppidFieldNumber = 1,
  };
  // optional uint64 steamid = 2;
  bool has_steamid() const;
  private:
  bool _internal_has_steamid() const;
  public:
  void clear_steamid();
  uint64_t steamid() const;
  void set_steamid(uint64_t value);
  private:
  uint64_t _internal_steamid() const;
  void _internal_set_steamid(uint64_t value);
  public:

  // optional uint32 appid = 1;
  bool has_appid() const;
  private:
  bool _internal_has_appid() const;
  public:
  void clear_appid();
  uint32_t appid() const;
  void set_appid(uint32_t value);
  private:
  uint32_t _internal_appid() const;
  void _internal_set_appid(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CCommunity_TerminateGamePersonalDataEntries_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint64_t steamid_;
    uint32_t appid_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gcsystemmsgs_2eproto;
};
// -------------------------------------------------------------------

class CCommunity_TerminateGamePersonalDataEntries_Response :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CCommunity_TerminateGamePersonalDataEntries_Response) */ {
 public:
  inline CCommunity_TerminateGamePersonalDataEntries_Response() : CCommunity_TerminateGamePersonalDataEntries_Response(nullptr) {}
  ~CCommunity_TerminateGamePersonalDataEntries_Response() override;
  explicit PROTOBUF_CONSTEXPR CCommunity_TerminateGamePersonalDataEntries_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CCommunity_TerminateGamePersonalDataEntries_Response(const CCommunity_TerminateGamePersonalDataEntries_Response& from);
  CCommunity_TerminateGamePersonalDataEntries_Response(CCommunity_TerminateGamePersonalDataEntries_Response&& from) noexcept
    : CCommunity_TerminateGamePersonalDataEntries_Response() {
    *this = ::std::move(from);
  }

  inline CCommunity_TerminateGamePersonalDataEntries_Response& operator=(const CCommunity_TerminateGamePersonalDataEntries_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CCommunity_TerminateGamePersonalDataEntries_Response& operator=(CCommunity_TerminateGamePersonalDataEntries_Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CCommunity_TerminateGamePersonalDataEntries_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CCommunity_TerminateGamePersonalDataEntries_Response* internal_default_instance() {
    return reinterpret_cast<const CCommunity_TerminateGamePersonalDataEntries_Response*>(
               &_CCommunity_TerminateGamePersonalDataEntries_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(CCommunity_TerminateGamePersonalDataEntries_Response& a, CCommunity_TerminateGamePersonalDataEntries_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CCommunity_TerminateGamePersonalDataEntries_Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CCommunity_TerminateGamePersonalDataEntries_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CCommunity_TerminateGamePersonalDataEntries_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CCommunity_TerminateGamePersonalDataEntries_Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CCommunity_TerminateGamePersonalDataEntries_Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CCommunity_TerminateGamePersonalDataEntries_Response& from) {
    CCommunity_TerminateGamePersonalDataEntries_Response::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CCommunity_TerminateGamePersonalDataEntries_Response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CCommunity_TerminateGamePersonalDataEntries_Response";
  }
  protected:
  explicit CCommunity_TerminateGamePersonalDataEntries_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGceresultFieldNumber = 1,
  };
  // optional uint32 gceresult = 1;
  bool has_gceresult() const;
  private:
  bool _internal_has_gceresult() const;
  public:
  void clear_gceresult();
  uint32_t gceresult() const;
  void set_gceresult(uint32_t value);
  private:
  uint32_t _internal_gceresult() const;
  void _internal_set_gceresult(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CCommunity_TerminateGamePersonalDataEntries_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t gceresult_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gcsystemmsgs_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CMsgGCHVacVerificationChange

// optional fixed64 steamid = 1;
inline bool CMsgGCHVacVerificationChange::_internal_has_steamid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgGCHVacVerificationChange::has_steamid() const {
  return _internal_has_steamid();
}
inline void CMsgGCHVacVerificationChange::clear_steamid() {
  _impl_.steamid_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint64_t CMsgGCHVacVerificationChange::_internal_steamid() const {
  return _impl_.steamid_;
}
inline uint64_t CMsgGCHVacVerificationChange::steamid() const {
  // @@protoc_insertion_point(field_get:CMsgGCHVacVerificationChange.steamid)
  return _internal_steamid();
}
inline void CMsgGCHVacVerificationChange::_internal_set_steamid(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.steamid_ = value;
}
inline void CMsgGCHVacVerificationChange::set_steamid(uint64_t value) {
  _internal_set_steamid(value);
  // @@protoc_insertion_point(field_set:CMsgGCHVacVerificationChange.steamid)
}

// optional uint32 appid = 2;
inline bool CMsgGCHVacVerificationChange::_internal_has_appid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgGCHVacVerificationChange::has_appid() const {
  return _internal_has_appid();
}
inline void CMsgGCHVacVerificationChange::clear_appid() {
  _impl_.appid_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CMsgGCHVacVerificationChange::_internal_appid() const {
  return _impl_.appid_;
}
inline uint32_t CMsgGCHVacVerificationChange::appid() const {
  // @@protoc_insertion_point(field_get:CMsgGCHVacVerificationChange.appid)
  return _internal_appid();
}
inline void CMsgGCHVacVerificationChange::_internal_set_appid(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.appid_ = value;
}
inline void CMsgGCHVacVerificationChange::set_appid(uint32_t value) {
  _internal_set_appid(value);
  // @@protoc_insertion_point(field_set:CMsgGCHVacVerificationChange.appid)
}

// optional bool is_verified = 3;
inline bool CMsgGCHVacVerificationChange::_internal_has_is_verified() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgGCHVacVerificationChange::has_is_verified() const {
  return _internal_has_is_verified();
}
inline void CMsgGCHVacVerificationChange::clear_is_verified() {
  _impl_.is_verified_ = false;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline bool CMsgGCHVacVerificationChange::_internal_is_verified() const {
  return _impl_.is_verified_;
}
inline bool CMsgGCHVacVerificationChange::is_verified() const {
  // @@protoc_insertion_point(field_get:CMsgGCHVacVerificationChange.is_verified)
  return _internal_is_verified();
}
inline void CMsgGCHVacVerificationChange::_internal_set_is_verified(bool value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.is_verified_ = value;
}
inline void CMsgGCHVacVerificationChange::set_is_verified(bool value) {
  _internal_set_is_verified(value);
  // @@protoc_insertion_point(field_set:CMsgGCHVacVerificationChange.is_verified)
}

// -------------------------------------------------------------------

// CMsgGCHAccountPhoneNumberChange

// optional fixed64 steamid = 1;
inline bool CMsgGCHAccountPhoneNumberChange::_internal_has_steamid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgGCHAccountPhoneNumberChange::has_steamid() const {
  return _internal_has_steamid();
}
inline void CMsgGCHAccountPhoneNumberChange::clear_steamid() {
  _impl_.steamid_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint64_t CMsgGCHAccountPhoneNumberChange::_internal_steamid() const {
  return _impl_.steamid_;
}
inline uint64_t CMsgGCHAccountPhoneNumberChange::steamid() const {
  // @@protoc_insertion_point(field_get:CMsgGCHAccountPhoneNumberChange.steamid)
  return _internal_steamid();
}
inline void CMsgGCHAccountPhoneNumberChange::_internal_set_steamid(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.steamid_ = value;
}
inline void CMsgGCHAccountPhoneNumberChange::set_steamid(uint64_t value) {
  _internal_set_steamid(value);
  // @@protoc_insertion_point(field_set:CMsgGCHAccountPhoneNumberChange.steamid)
}

// optional uint32 appid = 2;
inline bool CMsgGCHAccountPhoneNumberChange::_internal_has_appid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgGCHAccountPhoneNumberChange::has_appid() const {
  return _internal_has_appid();
}
inline void CMsgGCHAccountPhoneNumberChange::clear_appid() {
  _impl_.appid_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CMsgGCHAccountPhoneNumberChange::_internal_appid() const {
  return _impl_.appid_;
}
inline uint32_t CMsgGCHAccountPhoneNumberChange::appid() const {
  // @@protoc_insertion_point(field_get:CMsgGCHAccountPhoneNumberChange.appid)
  return _internal_appid();
}
inline void CMsgGCHAccountPhoneNumberChange::_internal_set_appid(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.appid_ = value;
}
inline void CMsgGCHAccountPhoneNumberChange::set_appid(uint32_t value) {
  _internal_set_appid(value);
  // @@protoc_insertion_point(field_set:CMsgGCHAccountPhoneNumberChange.appid)
}

// optional uint64 phone_id = 3;
inline bool CMsgGCHAccountPhoneNumberChange::_internal_has_phone_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgGCHAccountPhoneNumberChange::has_phone_id() const {
  return _internal_has_phone_id();
}
inline void CMsgGCHAccountPhoneNumberChange::clear_phone_id() {
  _impl_.phone_id_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint64_t CMsgGCHAccountPhoneNumberChange::_internal_phone_id() const {
  return _impl_.phone_id_;
}
inline uint64_t CMsgGCHAccountPhoneNumberChange::phone_id() const {
  // @@protoc_insertion_point(field_get:CMsgGCHAccountPhoneNumberChange.phone_id)
  return _internal_phone_id();
}
inline void CMsgGCHAccountPhoneNumberChange::_internal_set_phone_id(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.phone_id_ = value;
}
inline void CMsgGCHAccountPhoneNumberChange::set_phone_id(uint64_t value) {
  _internal_set_phone_id(value);
  // @@protoc_insertion_point(field_set:CMsgGCHAccountPhoneNumberChange.phone_id)
}

// optional bool is_verified = 4;
inline bool CMsgGCHAccountPhoneNumberChange::_internal_has_is_verified() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgGCHAccountPhoneNumberChange::has_is_verified() const {
  return _internal_has_is_verified();
}
inline void CMsgGCHAccountPhoneNumberChange::clear_is_verified() {
  _impl_.is_verified_ = false;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline bool CMsgGCHAccountPhoneNumberChange::_internal_is_verified() const {
  return _impl_.is_verified_;
}
inline bool CMsgGCHAccountPhoneNumberChange::is_verified() const {
  // @@protoc_insertion_point(field_get:CMsgGCHAccountPhoneNumberChange.is_verified)
  return _internal_is_verified();
}
inline void CMsgGCHAccountPhoneNumberChange::_internal_set_is_verified(bool value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.is_verified_ = value;
}
inline void CMsgGCHAccountPhoneNumberChange::set_is_verified(bool value) {
  _internal_set_is_verified(value);
  // @@protoc_insertion_point(field_set:CMsgGCHAccountPhoneNumberChange.is_verified)
}

// optional bool is_identifying = 5;
inline bool CMsgGCHAccountPhoneNumberChange::_internal_has_is_identifying() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CMsgGCHAccountPhoneNumberChange::has_is_identifying() const {
  return _internal_has_is_identifying();
}
inline void CMsgGCHAccountPhoneNumberChange::clear_is_identifying() {
  _impl_.is_identifying_ = false;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline bool CMsgGCHAccountPhoneNumberChange::_internal_is_identifying() const {
  return _impl_.is_identifying_;
}
inline bool CMsgGCHAccountPhoneNumberChange::is_identifying() const {
  // @@protoc_insertion_point(field_get:CMsgGCHAccountPhoneNumberChange.is_identifying)
  return _internal_is_identifying();
}
inline void CMsgGCHAccountPhoneNumberChange::_internal_set_is_identifying(bool value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.is_identifying_ = value;
}
inline void CMsgGCHAccountPhoneNumberChange::set_is_identifying(bool value) {
  _internal_set_is_identifying(value);
  // @@protoc_insertion_point(field_set:CMsgGCHAccountPhoneNumberChange.is_identifying)
}

// -------------------------------------------------------------------

// CMsgGCHInviteUserToLobby

// optional fixed64 steamid = 1;
inline bool CMsgGCHInviteUserToLobby::_internal_has_steamid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgGCHInviteUserToLobby::has_steamid() const {
  return _internal_has_steamid();
}
inline void CMsgGCHInviteUserToLobby::clear_steamid() {
  _impl_.steamid_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint64_t CMsgGCHInviteUserToLobby::_internal_steamid() const {
  return _impl_.steamid_;
}
inline uint64_t CMsgGCHInviteUserToLobby::steamid() const {
  // @@protoc_insertion_point(field_get:CMsgGCHInviteUserToLobby.steamid)
  return _internal_steamid();
}
inline void CMsgGCHInviteUserToLobby::_internal_set_steamid(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.steamid_ = value;
}
inline void CMsgGCHInviteUserToLobby::set_steamid(uint64_t value) {
  _internal_set_steamid(value);
  // @@protoc_insertion_point(field_set:CMsgGCHInviteUserToLobby.steamid)
}

// optional uint32 appid = 2;
inline bool CMsgGCHInviteUserToLobby::_internal_has_appid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgGCHInviteUserToLobby::has_appid() const {
  return _internal_has_appid();
}
inline void CMsgGCHInviteUserToLobby::clear_appid() {
  _impl_.appid_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline uint32_t CMsgGCHInviteUserToLobby::_internal_appid() const {
  return _impl_.appid_;
}
inline uint32_t CMsgGCHInviteUserToLobby::appid() const {
  // @@protoc_insertion_point(field_get:CMsgGCHInviteUserToLobby.appid)
  return _internal_appid();
}
inline void CMsgGCHInviteUserToLobby::_internal_set_appid(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.appid_ = value;
}
inline void CMsgGCHInviteUserToLobby::set_appid(uint32_t value) {
  _internal_set_appid(value);
  // @@protoc_insertion_point(field_set:CMsgGCHInviteUserToLobby.appid)
}

// optional fixed64 steamid_invited = 3;
inline bool CMsgGCHInviteUserToLobby::_internal_has_steamid_invited() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgGCHInviteUserToLobby::has_steamid_invited() const {
  return _internal_has_steamid_invited();
}
inline void CMsgGCHInviteUserToLobby::clear_steamid_invited() {
  _impl_.steamid_invited_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint64_t CMsgGCHInviteUserToLobby::_internal_steamid_invited() const {
  return _impl_.steamid_invited_;
}
inline uint64_t CMsgGCHInviteUserToLobby::steamid_invited() const {
  // @@protoc_insertion_point(field_get:CMsgGCHInviteUserToLobby.steamid_invited)
  return _internal_steamid_invited();
}
inline void CMsgGCHInviteUserToLobby::_internal_set_steamid_invited(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.steamid_invited_ = value;
}
inline void CMsgGCHInviteUserToLobby::set_steamid_invited(uint64_t value) {
  _internal_set_steamid_invited(value);
  // @@protoc_insertion_point(field_set:CMsgGCHInviteUserToLobby.steamid_invited)
}

// optional fixed64 steamid_lobby = 4;
inline bool CMsgGCHInviteUserToLobby::_internal_has_steamid_lobby() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgGCHInviteUserToLobby::has_steamid_lobby() const {
  return _internal_has_steamid_lobby();
}
inline void CMsgGCHInviteUserToLobby::clear_steamid_lobby() {
  _impl_.steamid_lobby_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint64_t CMsgGCHInviteUserToLobby::_internal_steamid_lobby() const {
  return _impl_.steamid_lobby_;
}
inline uint64_t CMsgGCHInviteUserToLobby::steamid_lobby() const {
  // @@protoc_insertion_point(field_get:CMsgGCHInviteUserToLobby.steamid_lobby)
  return _internal_steamid_lobby();
}
inline void CMsgGCHInviteUserToLobby::_internal_set_steamid_lobby(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.steamid_lobby_ = value;
}
inline void CMsgGCHInviteUserToLobby::set_steamid_lobby(uint64_t value) {
  _internal_set_steamid_lobby(value);
  // @@protoc_insertion_point(field_set:CMsgGCHInviteUserToLobby.steamid_lobby)
}

// -------------------------------------------------------------------

// CMsgGCHRecurringSubscriptionStatusChange

// optional fixed64 steamid = 1;
inline bool CMsgGCHRecurringSubscriptionStatusChange::_internal_has_steamid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgGCHRecurringSubscriptionStatusChange::has_steamid() const {
  return _internal_has_steamid();
}
inline void CMsgGCHRecurringSubscriptionStatusChange::clear_steamid() {
  _impl_.steamid_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint64_t CMsgGCHRecurringSubscriptionStatusChange::_internal_steamid() const {
  return _impl_.steamid_;
}
inline uint64_t CMsgGCHRecurringSubscriptionStatusChange::steamid() const {
  // @@protoc_insertion_point(field_get:CMsgGCHRecurringSubscriptionStatusChange.steamid)
  return _internal_steamid();
}
inline void CMsgGCHRecurringSubscriptionStatusChange::_internal_set_steamid(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.steamid_ = value;
}
inline void CMsgGCHRecurringSubscriptionStatusChange::set_steamid(uint64_t value) {
  _internal_set_steamid(value);
  // @@protoc_insertion_point(field_set:CMsgGCHRecurringSubscriptionStatusChange.steamid)
}

// optional uint32 appid = 2;
inline bool CMsgGCHRecurringSubscriptionStatusChange::_internal_has_appid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgGCHRecurringSubscriptionStatusChange::has_appid() const {
  return _internal_has_appid();
}
inline void CMsgGCHRecurringSubscriptionStatusChange::clear_appid() {
  _impl_.appid_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CMsgGCHRecurringSubscriptionStatusChange::_internal_appid() const {
  return _impl_.appid_;
}
inline uint32_t CMsgGCHRecurringSubscriptionStatusChange::appid() const {
  // @@protoc_insertion_point(field_get:CMsgGCHRecurringSubscriptionStatusChange.appid)
  return _internal_appid();
}
inline void CMsgGCHRecurringSubscriptionStatusChange::_internal_set_appid(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.appid_ = value;
}
inline void CMsgGCHRecurringSubscriptionStatusChange::set_appid(uint32_t value) {
  _internal_set_appid(value);
  // @@protoc_insertion_point(field_set:CMsgGCHRecurringSubscriptionStatusChange.appid)
}

// optional fixed64 agreementid = 3;
inline bool CMsgGCHRecurringSubscriptionStatusChange::_internal_has_agreementid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgGCHRecurringSubscriptionStatusChange::has_agreementid() const {
  return _internal_has_agreementid();
}
inline void CMsgGCHRecurringSubscriptionStatusChange::clear_agreementid() {
  _impl_.agreementid_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint64_t CMsgGCHRecurringSubscriptionStatusChange::_internal_agreementid() const {
  return _impl_.agreementid_;
}
inline uint64_t CMsgGCHRecurringSubscriptionStatusChange::agreementid() const {
  // @@protoc_insertion_point(field_get:CMsgGCHRecurringSubscriptionStatusChange.agreementid)
  return _internal_agreementid();
}
inline void CMsgGCHRecurringSubscriptionStatusChange::_internal_set_agreementid(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.agreementid_ = value;
}
inline void CMsgGCHRecurringSubscriptionStatusChange::set_agreementid(uint64_t value) {
  _internal_set_agreementid(value);
  // @@protoc_insertion_point(field_set:CMsgGCHRecurringSubscriptionStatusChange.agreementid)
}

// optional bool active = 4;
inline bool CMsgGCHRecurringSubscriptionStatusChange::_internal_has_active() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgGCHRecurringSubscriptionStatusChange::has_active() const {
  return _internal_has_active();
}
inline void CMsgGCHRecurringSubscriptionStatusChange::clear_active() {
  _impl_.active_ = false;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline bool CMsgGCHRecurringSubscriptionStatusChange::_internal_active() const {
  return _impl_.active_;
}
inline bool CMsgGCHRecurringSubscriptionStatusChange::active() const {
  // @@protoc_insertion_point(field_get:CMsgGCHRecurringSubscriptionStatusChange.active)
  return _internal_active();
}
inline void CMsgGCHRecurringSubscriptionStatusChange::_internal_set_active(bool value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.active_ = value;
}
inline void CMsgGCHRecurringSubscriptionStatusChange::set_active(bool value) {
  _internal_set_active(value);
  // @@protoc_insertion_point(field_set:CMsgGCHRecurringSubscriptionStatusChange.active)
}

// -------------------------------------------------------------------

// CQuest_PublisherAddCommunityItemsToPlayer_Request_Attribute

// optional uint32 attribute = 1;
inline bool CQuest_PublisherAddCommunityItemsToPlayer_Request_Attribute::_internal_has_attribute() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CQuest_PublisherAddCommunityItemsToPlayer_Request_Attribute::has_attribute() const {
  return _internal_has_attribute();
}
inline void CQuest_PublisherAddCommunityItemsToPlayer_Request_Attribute::clear_attribute() {
  _impl_.attribute_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CQuest_PublisherAddCommunityItemsToPlayer_Request_Attribute::_internal_attribute() const {
  return _impl_.attribute_;
}
inline uint32_t CQuest_PublisherAddCommunityItemsToPlayer_Request_Attribute::attribute() const {
  // @@protoc_insertion_point(field_get:CQuest_PublisherAddCommunityItemsToPlayer_Request.Attribute.attribute)
  return _internal_attribute();
}
inline void CQuest_PublisherAddCommunityItemsToPlayer_Request_Attribute::_internal_set_attribute(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.attribute_ = value;
}
inline void CQuest_PublisherAddCommunityItemsToPlayer_Request_Attribute::set_attribute(uint32_t value) {
  _internal_set_attribute(value);
  // @@protoc_insertion_point(field_set:CQuest_PublisherAddCommunityItemsToPlayer_Request.Attribute.attribute)
}

// optional uint64 value = 2;
inline bool CQuest_PublisherAddCommunityItemsToPlayer_Request_Attribute::_internal_has_value() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CQuest_PublisherAddCommunityItemsToPlayer_Request_Attribute::has_value() const {
  return _internal_has_value();
}
inline void CQuest_PublisherAddCommunityItemsToPlayer_Request_Attribute::clear_value() {
  _impl_.value_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint64_t CQuest_PublisherAddCommunityItemsToPlayer_Request_Attribute::_internal_value() const {
  return _impl_.value_;
}
inline uint64_t CQuest_PublisherAddCommunityItemsToPlayer_Request_Attribute::value() const {
  // @@protoc_insertion_point(field_get:CQuest_PublisherAddCommunityItemsToPlayer_Request.Attribute.value)
  return _internal_value();
}
inline void CQuest_PublisherAddCommunityItemsToPlayer_Request_Attribute::_internal_set_value(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.value_ = value;
}
inline void CQuest_PublisherAddCommunityItemsToPlayer_Request_Attribute::set_value(uint64_t value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:CQuest_PublisherAddCommunityItemsToPlayer_Request.Attribute.value)
}

// -------------------------------------------------------------------

// CQuest_PublisherAddCommunityItemsToPlayer_Request

// optional uint64 steamid = 1;
inline bool CQuest_PublisherAddCommunityItemsToPlayer_Request::_internal_has_steamid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CQuest_PublisherAddCommunityItemsToPlayer_Request::has_steamid() const {
  return _internal_has_steamid();
}
inline void CQuest_PublisherAddCommunityItemsToPlayer_Request::clear_steamid() {
  _impl_.steamid_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint64_t CQuest_PublisherAddCommunityItemsToPlayer_Request::_internal_steamid() const {
  return _impl_.steamid_;
}
inline uint64_t CQuest_PublisherAddCommunityItemsToPlayer_Request::steamid() const {
  // @@protoc_insertion_point(field_get:CQuest_PublisherAddCommunityItemsToPlayer_Request.steamid)
  return _internal_steamid();
}
inline void CQuest_PublisherAddCommunityItemsToPlayer_Request::_internal_set_steamid(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.steamid_ = value;
}
inline void CQuest_PublisherAddCommunityItemsToPlayer_Request::set_steamid(uint64_t value) {
  _internal_set_steamid(value);
  // @@protoc_insertion_point(field_set:CQuest_PublisherAddCommunityItemsToPlayer_Request.steamid)
}

// optional uint32 appid = 2;
inline bool CQuest_PublisherAddCommunityItemsToPlayer_Request::_internal_has_appid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CQuest_PublisherAddCommunityItemsToPlayer_Request::has_appid() const {
  return _internal_has_appid();
}
inline void CQuest_PublisherAddCommunityItemsToPlayer_Request::clear_appid() {
  _impl_.appid_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline uint32_t CQuest_PublisherAddCommunityItemsToPlayer_Request::_internal_appid() const {
  return _impl_.appid_;
}
inline uint32_t CQuest_PublisherAddCommunityItemsToPlayer_Request::appid() const {
  // @@protoc_insertion_point(field_get:CQuest_PublisherAddCommunityItemsToPlayer_Request.appid)
  return _internal_appid();
}
inline void CQuest_PublisherAddCommunityItemsToPlayer_Request::_internal_set_appid(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.appid_ = value;
}
inline void CQuest_PublisherAddCommunityItemsToPlayer_Request::set_appid(uint32_t value) {
  _internal_set_appid(value);
  // @@protoc_insertion_point(field_set:CQuest_PublisherAddCommunityItemsToPlayer_Request.appid)
}

// optional uint32 match_item_type = 3;
inline bool CQuest_PublisherAddCommunityItemsToPlayer_Request::_internal_has_match_item_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CQuest_PublisherAddCommunityItemsToPlayer_Request::has_match_item_type() const {
  return _internal_has_match_item_type();
}
inline void CQuest_PublisherAddCommunityItemsToPlayer_Request::clear_match_item_type() {
  _impl_.match_item_type_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline uint32_t CQuest_PublisherAddCommunityItemsToPlayer_Request::_internal_match_item_type() const {
  return _impl_.match_item_type_;
}
inline uint32_t CQuest_PublisherAddCommunityItemsToPlayer_Request::match_item_type() const {
  // @@protoc_insertion_point(field_get:CQuest_PublisherAddCommunityItemsToPlayer_Request.match_item_type)
  return _internal_match_item_type();
}
inline void CQuest_PublisherAddCommunityItemsToPlayer_Request::_internal_set_match_item_type(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.match_item_type_ = value;
}
inline void CQuest_PublisherAddCommunityItemsToPlayer_Request::set_match_item_type(uint32_t value) {
  _internal_set_match_item_type(value);
  // @@protoc_insertion_point(field_set:CQuest_PublisherAddCommunityItemsToPlayer_Request.match_item_type)
}

// optional uint32 match_item_class = 4;
inline bool CQuest_PublisherAddCommunityItemsToPlayer_Request::_internal_has_match_item_class() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CQuest_PublisherAddCommunityItemsToPlayer_Request::has_match_item_class() const {
  return _internal_has_match_item_class();
}
inline void CQuest_PublisherAddCommunityItemsToPlayer_Request::clear_match_item_class() {
  _impl_.match_item_class_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline uint32_t CQuest_PublisherAddCommunityItemsToPlayer_Request::_internal_match_item_class() const {
  return _impl_.match_item_class_;
}
inline uint32_t CQuest_PublisherAddCommunityItemsToPlayer_Request::match_item_class() const {
  // @@protoc_insertion_point(field_get:CQuest_PublisherAddCommunityItemsToPlayer_Request.match_item_class)
  return _internal_match_item_class();
}
inline void CQuest_PublisherAddCommunityItemsToPlayer_Request::_internal_set_match_item_class(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.match_item_class_ = value;
}
inline void CQuest_PublisherAddCommunityItemsToPlayer_Request::set_match_item_class(uint32_t value) {
  _internal_set_match_item_class(value);
  // @@protoc_insertion_point(field_set:CQuest_PublisherAddCommunityItemsToPlayer_Request.match_item_class)
}

// optional string prefix_item_name = 5;
inline bool CQuest_PublisherAddCommunityItemsToPlayer_Request::_internal_has_prefix_item_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CQuest_PublisherAddCommunityItemsToPlayer_Request::has_prefix_item_name() const {
  return _internal_has_prefix_item_name();
}
inline void CQuest_PublisherAddCommunityItemsToPlayer_Request::clear_prefix_item_name() {
  _impl_.prefix_item_name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CQuest_PublisherAddCommunityItemsToPlayer_Request::prefix_item_name() const {
  // @@protoc_insertion_point(field_get:CQuest_PublisherAddCommunityItemsToPlayer_Request.prefix_item_name)
  return _internal_prefix_item_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CQuest_PublisherAddCommunityItemsToPlayer_Request::set_prefix_item_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.prefix_item_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CQuest_PublisherAddCommunityItemsToPlayer_Request.prefix_item_name)
}
inline std::string* CQuest_PublisherAddCommunityItemsToPlayer_Request::mutable_prefix_item_name() {
  std::string* _s = _internal_mutable_prefix_item_name();
  // @@protoc_insertion_point(field_mutable:CQuest_PublisherAddCommunityItemsToPlayer_Request.prefix_item_name)
  return _s;
}
inline const std::string& CQuest_PublisherAddCommunityItemsToPlayer_Request::_internal_prefix_item_name() const {
  return _impl_.prefix_item_name_.Get();
}
inline void CQuest_PublisherAddCommunityItemsToPlayer_Request::_internal_set_prefix_item_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.prefix_item_name_.Set(value, GetArenaForAllocation());
}
inline std::string* CQuest_PublisherAddCommunityItemsToPlayer_Request::_internal_mutable_prefix_item_name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.prefix_item_name_.Mutable(GetArenaForAllocation());
}
inline std::string* CQuest_PublisherAddCommunityItemsToPlayer_Request::release_prefix_item_name() {
  // @@protoc_insertion_point(field_release:CQuest_PublisherAddCommunityItemsToPlayer_Request.prefix_item_name)
  if (!_internal_has_prefix_item_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.prefix_item_name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.prefix_item_name_.IsDefault()) {
    _impl_.prefix_item_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CQuest_PublisherAddCommunityItemsToPlayer_Request::set_allocated_prefix_item_name(std::string* prefix_item_name) {
  if (prefix_item_name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.prefix_item_name_.SetAllocated(prefix_item_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.prefix_item_name_.IsDefault()) {
    _impl_.prefix_item_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CQuest_PublisherAddCommunityItemsToPlayer_Request.prefix_item_name)
}

// repeated .CQuest_PublisherAddCommunityItemsToPlayer_Request.Attribute attributes = 6;
inline int CQuest_PublisherAddCommunityItemsToPlayer_Request::_internal_attributes_size() const {
  return _impl_.attributes_.size();
}
inline int CQuest_PublisherAddCommunityItemsToPlayer_Request::attributes_size() const {
  return _internal_attributes_size();
}
inline void CQuest_PublisherAddCommunityItemsToPlayer_Request::clear_attributes() {
  _impl_.attributes_.Clear();
}
inline ::CQuest_PublisherAddCommunityItemsToPlayer_Request_Attribute* CQuest_PublisherAddCommunityItemsToPlayer_Request::mutable_attributes(int index) {
  // @@protoc_insertion_point(field_mutable:CQuest_PublisherAddCommunityItemsToPlayer_Request.attributes)
  return _impl_.attributes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CQuest_PublisherAddCommunityItemsToPlayer_Request_Attribute >*
CQuest_PublisherAddCommunityItemsToPlayer_Request::mutable_attributes() {
  // @@protoc_insertion_point(field_mutable_list:CQuest_PublisherAddCommunityItemsToPlayer_Request.attributes)
  return &_impl_.attributes_;
}
inline const ::CQuest_PublisherAddCommunityItemsToPlayer_Request_Attribute& CQuest_PublisherAddCommunityItemsToPlayer_Request::_internal_attributes(int index) const {
  return _impl_.attributes_.Get(index);
}
inline const ::CQuest_PublisherAddCommunityItemsToPlayer_Request_Attribute& CQuest_PublisherAddCommunityItemsToPlayer_Request::attributes(int index) const {
  // @@protoc_insertion_point(field_get:CQuest_PublisherAddCommunityItemsToPlayer_Request.attributes)
  return _internal_attributes(index);
}
inline ::CQuest_PublisherAddCommunityItemsToPlayer_Request_Attribute* CQuest_PublisherAddCommunityItemsToPlayer_Request::_internal_add_attributes() {
  return _impl_.attributes_.Add();
}
inline ::CQuest_PublisherAddCommunityItemsToPlayer_Request_Attribute* CQuest_PublisherAddCommunityItemsToPlayer_Request::add_attributes() {
  ::CQuest_PublisherAddCommunityItemsToPlayer_Request_Attribute* _add = _internal_add_attributes();
  // @@protoc_insertion_point(field_add:CQuest_PublisherAddCommunityItemsToPlayer_Request.attributes)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CQuest_PublisherAddCommunityItemsToPlayer_Request_Attribute >&
CQuest_PublisherAddCommunityItemsToPlayer_Request::attributes() const {
  // @@protoc_insertion_point(field_list:CQuest_PublisherAddCommunityItemsToPlayer_Request.attributes)
  return _impl_.attributes_;
}

// optional string note = 7;
inline bool CQuest_PublisherAddCommunityItemsToPlayer_Request::_internal_has_note() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CQuest_PublisherAddCommunityItemsToPlayer_Request::has_note() const {
  return _internal_has_note();
}
inline void CQuest_PublisherAddCommunityItemsToPlayer_Request::clear_note() {
  _impl_.note_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CQuest_PublisherAddCommunityItemsToPlayer_Request::note() const {
  // @@protoc_insertion_point(field_get:CQuest_PublisherAddCommunityItemsToPlayer_Request.note)
  return _internal_note();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CQuest_PublisherAddCommunityItemsToPlayer_Request::set_note(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.note_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CQuest_PublisherAddCommunityItemsToPlayer_Request.note)
}
inline std::string* CQuest_PublisherAddCommunityItemsToPlayer_Request::mutable_note() {
  std::string* _s = _internal_mutable_note();
  // @@protoc_insertion_point(field_mutable:CQuest_PublisherAddCommunityItemsToPlayer_Request.note)
  return _s;
}
inline const std::string& CQuest_PublisherAddCommunityItemsToPlayer_Request::_internal_note() const {
  return _impl_.note_.Get();
}
inline void CQuest_PublisherAddCommunityItemsToPlayer_Request::_internal_set_note(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.note_.Set(value, GetArenaForAllocation());
}
inline std::string* CQuest_PublisherAddCommunityItemsToPlayer_Request::_internal_mutable_note() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.note_.Mutable(GetArenaForAllocation());
}
inline std::string* CQuest_PublisherAddCommunityItemsToPlayer_Request::release_note() {
  // @@protoc_insertion_point(field_release:CQuest_PublisherAddCommunityItemsToPlayer_Request.note)
  if (!_internal_has_note()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.note_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.note_.IsDefault()) {
    _impl_.note_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CQuest_PublisherAddCommunityItemsToPlayer_Request::set_allocated_note(std::string* note) {
  if (note != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.note_.SetAllocated(note, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.note_.IsDefault()) {
    _impl_.note_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CQuest_PublisherAddCommunityItemsToPlayer_Request.note)
}

// -------------------------------------------------------------------

// CQuest_PublisherAddCommunityItemsToPlayer_Response

// optional uint32 items_matched = 1;
inline bool CQuest_PublisherAddCommunityItemsToPlayer_Response::_internal_has_items_matched() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CQuest_PublisherAddCommunityItemsToPlayer_Response::has_items_matched() const {
  return _internal_has_items_matched();
}
inline void CQuest_PublisherAddCommunityItemsToPlayer_Response::clear_items_matched() {
  _impl_.items_matched_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CQuest_PublisherAddCommunityItemsToPlayer_Response::_internal_items_matched() const {
  return _impl_.items_matched_;
}
inline uint32_t CQuest_PublisherAddCommunityItemsToPlayer_Response::items_matched() const {
  // @@protoc_insertion_point(field_get:CQuest_PublisherAddCommunityItemsToPlayer_Response.items_matched)
  return _internal_items_matched();
}
inline void CQuest_PublisherAddCommunityItemsToPlayer_Response::_internal_set_items_matched(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.items_matched_ = value;
}
inline void CQuest_PublisherAddCommunityItemsToPlayer_Response::set_items_matched(uint32_t value) {
  _internal_set_items_matched(value);
  // @@protoc_insertion_point(field_set:CQuest_PublisherAddCommunityItemsToPlayer_Response.items_matched)
}

// optional uint32 items_granted = 2;
inline bool CQuest_PublisherAddCommunityItemsToPlayer_Response::_internal_has_items_granted() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CQuest_PublisherAddCommunityItemsToPlayer_Response::has_items_granted() const {
  return _internal_has_items_granted();
}
inline void CQuest_PublisherAddCommunityItemsToPlayer_Response::clear_items_granted() {
  _impl_.items_granted_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CQuest_PublisherAddCommunityItemsToPlayer_Response::_internal_items_granted() const {
  return _impl_.items_granted_;
}
inline uint32_t CQuest_PublisherAddCommunityItemsToPlayer_Response::items_granted() const {
  // @@protoc_insertion_point(field_get:CQuest_PublisherAddCommunityItemsToPlayer_Response.items_granted)
  return _internal_items_granted();
}
inline void CQuest_PublisherAddCommunityItemsToPlayer_Response::_internal_set_items_granted(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.items_granted_ = value;
}
inline void CQuest_PublisherAddCommunityItemsToPlayer_Response::set_items_granted(uint32_t value) {
  _internal_set_items_granted(value);
  // @@protoc_insertion_point(field_set:CQuest_PublisherAddCommunityItemsToPlayer_Response.items_granted)
}

// -------------------------------------------------------------------

// CCommunity_GamePersonalDataCategoryInfo

// optional string type = 1;
inline bool CCommunity_GamePersonalDataCategoryInfo::_internal_has_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CCommunity_GamePersonalDataCategoryInfo::has_type() const {
  return _internal_has_type();
}
inline void CCommunity_GamePersonalDataCategoryInfo::clear_type() {
  _impl_.type_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CCommunity_GamePersonalDataCategoryInfo::type() const {
  // @@protoc_insertion_point(field_get:CCommunity_GamePersonalDataCategoryInfo.type)
  return _internal_type();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CCommunity_GamePersonalDataCategoryInfo::set_type(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.type_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CCommunity_GamePersonalDataCategoryInfo.type)
}
inline std::string* CCommunity_GamePersonalDataCategoryInfo::mutable_type() {
  std::string* _s = _internal_mutable_type();
  // @@protoc_insertion_point(field_mutable:CCommunity_GamePersonalDataCategoryInfo.type)
  return _s;
}
inline const std::string& CCommunity_GamePersonalDataCategoryInfo::_internal_type() const {
  return _impl_.type_.Get();
}
inline void CCommunity_GamePersonalDataCategoryInfo::_internal_set_type(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.type_.Set(value, GetArenaForAllocation());
}
inline std::string* CCommunity_GamePersonalDataCategoryInfo::_internal_mutable_type() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.type_.Mutable(GetArenaForAllocation());
}
inline std::string* CCommunity_GamePersonalDataCategoryInfo::release_type() {
  // @@protoc_insertion_point(field_release:CCommunity_GamePersonalDataCategoryInfo.type)
  if (!_internal_has_type()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.type_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.type_.IsDefault()) {
    _impl_.type_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CCommunity_GamePersonalDataCategoryInfo::set_allocated_type(std::string* type) {
  if (type != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.type_.SetAllocated(type, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.type_.IsDefault()) {
    _impl_.type_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CCommunity_GamePersonalDataCategoryInfo.type)
}

// optional string localization_token = 2;
inline bool CCommunity_GamePersonalDataCategoryInfo::_internal_has_localization_token() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CCommunity_GamePersonalDataCategoryInfo::has_localization_token() const {
  return _internal_has_localization_token();
}
inline void CCommunity_GamePersonalDataCategoryInfo::clear_localization_token() {
  _impl_.localization_token_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CCommunity_GamePersonalDataCategoryInfo::localization_token() const {
  // @@protoc_insertion_point(field_get:CCommunity_GamePersonalDataCategoryInfo.localization_token)
  return _internal_localization_token();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CCommunity_GamePersonalDataCategoryInfo::set_localization_token(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.localization_token_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CCommunity_GamePersonalDataCategoryInfo.localization_token)
}
inline std::string* CCommunity_GamePersonalDataCategoryInfo::mutable_localization_token() {
  std::string* _s = _internal_mutable_localization_token();
  // @@protoc_insertion_point(field_mutable:CCommunity_GamePersonalDataCategoryInfo.localization_token)
  return _s;
}
inline const std::string& CCommunity_GamePersonalDataCategoryInfo::_internal_localization_token() const {
  return _impl_.localization_token_.Get();
}
inline void CCommunity_GamePersonalDataCategoryInfo::_internal_set_localization_token(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.localization_token_.Set(value, GetArenaForAllocation());
}
inline std::string* CCommunity_GamePersonalDataCategoryInfo::_internal_mutable_localization_token() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.localization_token_.Mutable(GetArenaForAllocation());
}
inline std::string* CCommunity_GamePersonalDataCategoryInfo::release_localization_token() {
  // @@protoc_insertion_point(field_release:CCommunity_GamePersonalDataCategoryInfo.localization_token)
  if (!_internal_has_localization_token()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.localization_token_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.localization_token_.IsDefault()) {
    _impl_.localization_token_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CCommunity_GamePersonalDataCategoryInfo::set_allocated_localization_token(std::string* localization_token) {
  if (localization_token != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.localization_token_.SetAllocated(localization_token, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.localization_token_.IsDefault()) {
    _impl_.localization_token_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CCommunity_GamePersonalDataCategoryInfo.localization_token)
}

// optional string template_file = 3;
inline bool CCommunity_GamePersonalDataCategoryInfo::_internal_has_template_file() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CCommunity_GamePersonalDataCategoryInfo::has_template_file() const {
  return _internal_has_template_file();
}
inline void CCommunity_GamePersonalDataCategoryInfo::clear_template_file() {
  _impl_.template_file_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const std::string& CCommunity_GamePersonalDataCategoryInfo::template_file() const {
  // @@protoc_insertion_point(field_get:CCommunity_GamePersonalDataCategoryInfo.template_file)
  return _internal_template_file();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CCommunity_GamePersonalDataCategoryInfo::set_template_file(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000004u;
 _impl_.template_file_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CCommunity_GamePersonalDataCategoryInfo.template_file)
}
inline std::string* CCommunity_GamePersonalDataCategoryInfo::mutable_template_file() {
  std::string* _s = _internal_mutable_template_file();
  // @@protoc_insertion_point(field_mutable:CCommunity_GamePersonalDataCategoryInfo.template_file)
  return _s;
}
inline const std::string& CCommunity_GamePersonalDataCategoryInfo::_internal_template_file() const {
  return _impl_.template_file_.Get();
}
inline void CCommunity_GamePersonalDataCategoryInfo::_internal_set_template_file(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.template_file_.Set(value, GetArenaForAllocation());
}
inline std::string* CCommunity_GamePersonalDataCategoryInfo::_internal_mutable_template_file() {
  _impl_._has_bits_[0] |= 0x00000004u;
  return _impl_.template_file_.Mutable(GetArenaForAllocation());
}
inline std::string* CCommunity_GamePersonalDataCategoryInfo::release_template_file() {
  // @@protoc_insertion_point(field_release:CCommunity_GamePersonalDataCategoryInfo.template_file)
  if (!_internal_has_template_file()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000004u;
  auto* p = _impl_.template_file_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.template_file_.IsDefault()) {
    _impl_.template_file_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CCommunity_GamePersonalDataCategoryInfo::set_allocated_template_file(std::string* template_file) {
  if (template_file != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.template_file_.SetAllocated(template_file, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.template_file_.IsDefault()) {
    _impl_.template_file_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CCommunity_GamePersonalDataCategoryInfo.template_file)
}

// -------------------------------------------------------------------

// CCommunity_GetGamePersonalDataCategories_Request

// optional uint32 appid = 1;
inline bool CCommunity_GetGamePersonalDataCategories_Request::_internal_has_appid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CCommunity_GetGamePersonalDataCategories_Request::has_appid() const {
  return _internal_has_appid();
}
inline void CCommunity_GetGamePersonalDataCategories_Request::clear_appid() {
  _impl_.appid_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CCommunity_GetGamePersonalDataCategories_Request::_internal_appid() const {
  return _impl_.appid_;
}
inline uint32_t CCommunity_GetGamePersonalDataCategories_Request::appid() const {
  // @@protoc_insertion_point(field_get:CCommunity_GetGamePersonalDataCategories_Request.appid)
  return _internal_appid();
}
inline void CCommunity_GetGamePersonalDataCategories_Request::_internal_set_appid(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.appid_ = value;
}
inline void CCommunity_GetGamePersonalDataCategories_Request::set_appid(uint32_t value) {
  _internal_set_appid(value);
  // @@protoc_insertion_point(field_set:CCommunity_GetGamePersonalDataCategories_Request.appid)
}

// -------------------------------------------------------------------

// CCommunity_GetGamePersonalDataCategories_Response

// repeated .CCommunity_GamePersonalDataCategoryInfo categories = 1;
inline int CCommunity_GetGamePersonalDataCategories_Response::_internal_categories_size() const {
  return _impl_.categories_.size();
}
inline int CCommunity_GetGamePersonalDataCategories_Response::categories_size() const {
  return _internal_categories_size();
}
inline void CCommunity_GetGamePersonalDataCategories_Response::clear_categories() {
  _impl_.categories_.Clear();
}
inline ::CCommunity_GamePersonalDataCategoryInfo* CCommunity_GetGamePersonalDataCategories_Response::mutable_categories(int index) {
  // @@protoc_insertion_point(field_mutable:CCommunity_GetGamePersonalDataCategories_Response.categories)
  return _impl_.categories_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CCommunity_GamePersonalDataCategoryInfo >*
CCommunity_GetGamePersonalDataCategories_Response::mutable_categories() {
  // @@protoc_insertion_point(field_mutable_list:CCommunity_GetGamePersonalDataCategories_Response.categories)
  return &_impl_.categories_;
}
inline const ::CCommunity_GamePersonalDataCategoryInfo& CCommunity_GetGamePersonalDataCategories_Response::_internal_categories(int index) const {
  return _impl_.categories_.Get(index);
}
inline const ::CCommunity_GamePersonalDataCategoryInfo& CCommunity_GetGamePersonalDataCategories_Response::categories(int index) const {
  // @@protoc_insertion_point(field_get:CCommunity_GetGamePersonalDataCategories_Response.categories)
  return _internal_categories(index);
}
inline ::CCommunity_GamePersonalDataCategoryInfo* CCommunity_GetGamePersonalDataCategories_Response::_internal_add_categories() {
  return _impl_.categories_.Add();
}
inline ::CCommunity_GamePersonalDataCategoryInfo* CCommunity_GetGamePersonalDataCategories_Response::add_categories() {
  ::CCommunity_GamePersonalDataCategoryInfo* _add = _internal_add_categories();
  // @@protoc_insertion_point(field_add:CCommunity_GetGamePersonalDataCategories_Response.categories)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CCommunity_GamePersonalDataCategoryInfo >&
CCommunity_GetGamePersonalDataCategories_Response::categories() const {
  // @@protoc_insertion_point(field_list:CCommunity_GetGamePersonalDataCategories_Response.categories)
  return _impl_.categories_;
}

// optional string app_assets_basename = 2;
inline bool CCommunity_GetGamePersonalDataCategories_Response::_internal_has_app_assets_basename() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CCommunity_GetGamePersonalDataCategories_Response::has_app_assets_basename() const {
  return _internal_has_app_assets_basename();
}
inline void CCommunity_GetGamePersonalDataCategories_Response::clear_app_assets_basename() {
  _impl_.app_assets_basename_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CCommunity_GetGamePersonalDataCategories_Response::app_assets_basename() const {
  // @@protoc_insertion_point(field_get:CCommunity_GetGamePersonalDataCategories_Response.app_assets_basename)
  return _internal_app_assets_basename();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CCommunity_GetGamePersonalDataCategories_Response::set_app_assets_basename(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.app_assets_basename_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CCommunity_GetGamePersonalDataCategories_Response.app_assets_basename)
}
inline std::string* CCommunity_GetGamePersonalDataCategories_Response::mutable_app_assets_basename() {
  std::string* _s = _internal_mutable_app_assets_basename();
  // @@protoc_insertion_point(field_mutable:CCommunity_GetGamePersonalDataCategories_Response.app_assets_basename)
  return _s;
}
inline const std::string& CCommunity_GetGamePersonalDataCategories_Response::_internal_app_assets_basename() const {
  return _impl_.app_assets_basename_.Get();
}
inline void CCommunity_GetGamePersonalDataCategories_Response::_internal_set_app_assets_basename(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.app_assets_basename_.Set(value, GetArenaForAllocation());
}
inline std::string* CCommunity_GetGamePersonalDataCategories_Response::_internal_mutable_app_assets_basename() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.app_assets_basename_.Mutable(GetArenaForAllocation());
}
inline std::string* CCommunity_GetGamePersonalDataCategories_Response::release_app_assets_basename() {
  // @@protoc_insertion_point(field_release:CCommunity_GetGamePersonalDataCategories_Response.app_assets_basename)
  if (!_internal_has_app_assets_basename()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.app_assets_basename_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.app_assets_basename_.IsDefault()) {
    _impl_.app_assets_basename_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CCommunity_GetGamePersonalDataCategories_Response::set_allocated_app_assets_basename(std::string* app_assets_basename) {
  if (app_assets_basename != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.app_assets_basename_.SetAllocated(app_assets_basename, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.app_assets_basename_.IsDefault()) {
    _impl_.app_assets_basename_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CCommunity_GetGamePersonalDataCategories_Response.app_assets_basename)
}

// -------------------------------------------------------------------

// CCommunity_GetGamePersonalDataEntries_Request

// optional uint32 appid = 1;
inline bool CCommunity_GetGamePersonalDataEntries_Request::_internal_has_appid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CCommunity_GetGamePersonalDataEntries_Request::has_appid() const {
  return _internal_has_appid();
}
inline void CCommunity_GetGamePersonalDataEntries_Request::clear_appid() {
  _impl_.appid_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline uint32_t CCommunity_GetGamePersonalDataEntries_Request::_internal_appid() const {
  return _impl_.appid_;
}
inline uint32_t CCommunity_GetGamePersonalDataEntries_Request::appid() const {
  // @@protoc_insertion_point(field_get:CCommunity_GetGamePersonalDataEntries_Request.appid)
  return _internal_appid();
}
inline void CCommunity_GetGamePersonalDataEntries_Request::_internal_set_appid(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.appid_ = value;
}
inline void CCommunity_GetGamePersonalDataEntries_Request::set_appid(uint32_t value) {
  _internal_set_appid(value);
  // @@protoc_insertion_point(field_set:CCommunity_GetGamePersonalDataEntries_Request.appid)
}

// optional uint64 steamid = 2;
inline bool CCommunity_GetGamePersonalDataEntries_Request::_internal_has_steamid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CCommunity_GetGamePersonalDataEntries_Request::has_steamid() const {
  return _internal_has_steamid();
}
inline void CCommunity_GetGamePersonalDataEntries_Request::clear_steamid() {
  _impl_.steamid_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint64_t CCommunity_GetGamePersonalDataEntries_Request::_internal_steamid() const {
  return _impl_.steamid_;
}
inline uint64_t CCommunity_GetGamePersonalDataEntries_Request::steamid() const {
  // @@protoc_insertion_point(field_get:CCommunity_GetGamePersonalDataEntries_Request.steamid)
  return _internal_steamid();
}
inline void CCommunity_GetGamePersonalDataEntries_Request::_internal_set_steamid(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.steamid_ = value;
}
inline void CCommunity_GetGamePersonalDataEntries_Request::set_steamid(uint64_t value) {
  _internal_set_steamid(value);
  // @@protoc_insertion_point(field_set:CCommunity_GetGamePersonalDataEntries_Request.steamid)
}

// optional string type = 3;
inline bool CCommunity_GetGamePersonalDataEntries_Request::_internal_has_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CCommunity_GetGamePersonalDataEntries_Request::has_type() const {
  return _internal_has_type();
}
inline void CCommunity_GetGamePersonalDataEntries_Request::clear_type() {
  _impl_.type_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CCommunity_GetGamePersonalDataEntries_Request::type() const {
  // @@protoc_insertion_point(field_get:CCommunity_GetGamePersonalDataEntries_Request.type)
  return _internal_type();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CCommunity_GetGamePersonalDataEntries_Request::set_type(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.type_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CCommunity_GetGamePersonalDataEntries_Request.type)
}
inline std::string* CCommunity_GetGamePersonalDataEntries_Request::mutable_type() {
  std::string* _s = _internal_mutable_type();
  // @@protoc_insertion_point(field_mutable:CCommunity_GetGamePersonalDataEntries_Request.type)
  return _s;
}
inline const std::string& CCommunity_GetGamePersonalDataEntries_Request::_internal_type() const {
  return _impl_.type_.Get();
}
inline void CCommunity_GetGamePersonalDataEntries_Request::_internal_set_type(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.type_.Set(value, GetArenaForAllocation());
}
inline std::string* CCommunity_GetGamePersonalDataEntries_Request::_internal_mutable_type() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.type_.Mutable(GetArenaForAllocation());
}
inline std::string* CCommunity_GetGamePersonalDataEntries_Request::release_type() {
  // @@protoc_insertion_point(field_release:CCommunity_GetGamePersonalDataEntries_Request.type)
  if (!_internal_has_type()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.type_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.type_.IsDefault()) {
    _impl_.type_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CCommunity_GetGamePersonalDataEntries_Request::set_allocated_type(std::string* type) {
  if (type != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.type_.SetAllocated(type, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.type_.IsDefault()) {
    _impl_.type_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CCommunity_GetGamePersonalDataEntries_Request.type)
}

// optional string continue_token = 4;
inline bool CCommunity_GetGamePersonalDataEntries_Request::_internal_has_continue_token() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CCommunity_GetGamePersonalDataEntries_Request::has_continue_token() const {
  return _internal_has_continue_token();
}
inline void CCommunity_GetGamePersonalDataEntries_Request::clear_continue_token() {
  _impl_.continue_token_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CCommunity_GetGamePersonalDataEntries_Request::continue_token() const {
  // @@protoc_insertion_point(field_get:CCommunity_GetGamePersonalDataEntries_Request.continue_token)
  return _internal_continue_token();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CCommunity_GetGamePersonalDataEntries_Request::set_continue_token(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.continue_token_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CCommunity_GetGamePersonalDataEntries_Request.continue_token)
}
inline std::string* CCommunity_GetGamePersonalDataEntries_Request::mutable_continue_token() {
  std::string* _s = _internal_mutable_continue_token();
  // @@protoc_insertion_point(field_mutable:CCommunity_GetGamePersonalDataEntries_Request.continue_token)
  return _s;
}
inline const std::string& CCommunity_GetGamePersonalDataEntries_Request::_internal_continue_token() const {
  return _impl_.continue_token_.Get();
}
inline void CCommunity_GetGamePersonalDataEntries_Request::_internal_set_continue_token(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.continue_token_.Set(value, GetArenaForAllocation());
}
inline std::string* CCommunity_GetGamePersonalDataEntries_Request::_internal_mutable_continue_token() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.continue_token_.Mutable(GetArenaForAllocation());
}
inline std::string* CCommunity_GetGamePersonalDataEntries_Request::release_continue_token() {
  // @@protoc_insertion_point(field_release:CCommunity_GetGamePersonalDataEntries_Request.continue_token)
  if (!_internal_has_continue_token()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.continue_token_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.continue_token_.IsDefault()) {
    _impl_.continue_token_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CCommunity_GetGamePersonalDataEntries_Request::set_allocated_continue_token(std::string* continue_token) {
  if (continue_token != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.continue_token_.SetAllocated(continue_token, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.continue_token_.IsDefault()) {
    _impl_.continue_token_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CCommunity_GetGamePersonalDataEntries_Request.continue_token)
}

// -------------------------------------------------------------------

// CCommunity_GetGamePersonalDataEntries_Response

// optional uint32 gceresult = 1;
inline bool CCommunity_GetGamePersonalDataEntries_Response::_internal_has_gceresult() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CCommunity_GetGamePersonalDataEntries_Response::has_gceresult() const {
  return _internal_has_gceresult();
}
inline void CCommunity_GetGamePersonalDataEntries_Response::clear_gceresult() {
  _impl_.gceresult_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CCommunity_GetGamePersonalDataEntries_Response::_internal_gceresult() const {
  return _impl_.gceresult_;
}
inline uint32_t CCommunity_GetGamePersonalDataEntries_Response::gceresult() const {
  // @@protoc_insertion_point(field_get:CCommunity_GetGamePersonalDataEntries_Response.gceresult)
  return _internal_gceresult();
}
inline void CCommunity_GetGamePersonalDataEntries_Response::_internal_set_gceresult(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.gceresult_ = value;
}
inline void CCommunity_GetGamePersonalDataEntries_Response::set_gceresult(uint32_t value) {
  _internal_set_gceresult(value);
  // @@protoc_insertion_point(field_set:CCommunity_GetGamePersonalDataEntries_Response.gceresult)
}

// repeated string entries = 2;
inline int CCommunity_GetGamePersonalDataEntries_Response::_internal_entries_size() const {
  return _impl_.entries_.size();
}
inline int CCommunity_GetGamePersonalDataEntries_Response::entries_size() const {
  return _internal_entries_size();
}
inline void CCommunity_GetGamePersonalDataEntries_Response::clear_entries() {
  _impl_.entries_.Clear();
}
inline std::string* CCommunity_GetGamePersonalDataEntries_Response::add_entries() {
  std::string* _s = _internal_add_entries();
  // @@protoc_insertion_point(field_add_mutable:CCommunity_GetGamePersonalDataEntries_Response.entries)
  return _s;
}
inline const std::string& CCommunity_GetGamePersonalDataEntries_Response::_internal_entries(int index) const {
  return _impl_.entries_.Get(index);
}
inline const std::string& CCommunity_GetGamePersonalDataEntries_Response::entries(int index) const {
  // @@protoc_insertion_point(field_get:CCommunity_GetGamePersonalDataEntries_Response.entries)
  return _internal_entries(index);
}
inline std::string* CCommunity_GetGamePersonalDataEntries_Response::mutable_entries(int index) {
  // @@protoc_insertion_point(field_mutable:CCommunity_GetGamePersonalDataEntries_Response.entries)
  return _impl_.entries_.Mutable(index);
}
inline void CCommunity_GetGamePersonalDataEntries_Response::set_entries(int index, const std::string& value) {
  _impl_.entries_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:CCommunity_GetGamePersonalDataEntries_Response.entries)
}
inline void CCommunity_GetGamePersonalDataEntries_Response::set_entries(int index, std::string&& value) {
  _impl_.entries_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:CCommunity_GetGamePersonalDataEntries_Response.entries)
}
inline void CCommunity_GetGamePersonalDataEntries_Response::set_entries(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.entries_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:CCommunity_GetGamePersonalDataEntries_Response.entries)
}
inline void CCommunity_GetGamePersonalDataEntries_Response::set_entries(int index, const char* value, size_t size) {
  _impl_.entries_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CCommunity_GetGamePersonalDataEntries_Response.entries)
}
inline std::string* CCommunity_GetGamePersonalDataEntries_Response::_internal_add_entries() {
  return _impl_.entries_.Add();
}
inline void CCommunity_GetGamePersonalDataEntries_Response::add_entries(const std::string& value) {
  _impl_.entries_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:CCommunity_GetGamePersonalDataEntries_Response.entries)
}
inline void CCommunity_GetGamePersonalDataEntries_Response::add_entries(std::string&& value) {
  _impl_.entries_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:CCommunity_GetGamePersonalDataEntries_Response.entries)
}
inline void CCommunity_GetGamePersonalDataEntries_Response::add_entries(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.entries_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:CCommunity_GetGamePersonalDataEntries_Response.entries)
}
inline void CCommunity_GetGamePersonalDataEntries_Response::add_entries(const char* value, size_t size) {
  _impl_.entries_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:CCommunity_GetGamePersonalDataEntries_Response.entries)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
CCommunity_GetGamePersonalDataEntries_Response::entries() const {
  // @@protoc_insertion_point(field_list:CCommunity_GetGamePersonalDataEntries_Response.entries)
  return _impl_.entries_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
CCommunity_GetGamePersonalDataEntries_Response::mutable_entries() {
  // @@protoc_insertion_point(field_mutable_list:CCommunity_GetGamePersonalDataEntries_Response.entries)
  return &_impl_.entries_;
}

// optional string continue_token = 3;
inline bool CCommunity_GetGamePersonalDataEntries_Response::_internal_has_continue_token() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CCommunity_GetGamePersonalDataEntries_Response::has_continue_token() const {
  return _internal_has_continue_token();
}
inline void CCommunity_GetGamePersonalDataEntries_Response::clear_continue_token() {
  _impl_.continue_token_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CCommunity_GetGamePersonalDataEntries_Response::continue_token() const {
  // @@protoc_insertion_point(field_get:CCommunity_GetGamePersonalDataEntries_Response.continue_token)
  return _internal_continue_token();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CCommunity_GetGamePersonalDataEntries_Response::set_continue_token(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.continue_token_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CCommunity_GetGamePersonalDataEntries_Response.continue_token)
}
inline std::string* CCommunity_GetGamePersonalDataEntries_Response::mutable_continue_token() {
  std::string* _s = _internal_mutable_continue_token();
  // @@protoc_insertion_point(field_mutable:CCommunity_GetGamePersonalDataEntries_Response.continue_token)
  return _s;
}
inline const std::string& CCommunity_GetGamePersonalDataEntries_Response::_internal_continue_token() const {
  return _impl_.continue_token_.Get();
}
inline void CCommunity_GetGamePersonalDataEntries_Response::_internal_set_continue_token(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.continue_token_.Set(value, GetArenaForAllocation());
}
inline std::string* CCommunity_GetGamePersonalDataEntries_Response::_internal_mutable_continue_token() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.continue_token_.Mutable(GetArenaForAllocation());
}
inline std::string* CCommunity_GetGamePersonalDataEntries_Response::release_continue_token() {
  // @@protoc_insertion_point(field_release:CCommunity_GetGamePersonalDataEntries_Response.continue_token)
  if (!_internal_has_continue_token()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.continue_token_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.continue_token_.IsDefault()) {
    _impl_.continue_token_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CCommunity_GetGamePersonalDataEntries_Response::set_allocated_continue_token(std::string* continue_token) {
  if (continue_token != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.continue_token_.SetAllocated(continue_token, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.continue_token_.IsDefault()) {
    _impl_.continue_token_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CCommunity_GetGamePersonalDataEntries_Response.continue_token)
}

// optional string continue_text = 4;
inline bool CCommunity_GetGamePersonalDataEntries_Response::_internal_has_continue_text() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CCommunity_GetGamePersonalDataEntries_Response::has_continue_text() const {
  return _internal_has_continue_text();
}
inline void CCommunity_GetGamePersonalDataEntries_Response::clear_continue_text() {
  _impl_.continue_text_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CCommunity_GetGamePersonalDataEntries_Response::continue_text() const {
  // @@protoc_insertion_point(field_get:CCommunity_GetGamePersonalDataEntries_Response.continue_text)
  return _internal_continue_text();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CCommunity_GetGamePersonalDataEntries_Response::set_continue_text(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.continue_text_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CCommunity_GetGamePersonalDataEntries_Response.continue_text)
}
inline std::string* CCommunity_GetGamePersonalDataEntries_Response::mutable_continue_text() {
  std::string* _s = _internal_mutable_continue_text();
  // @@protoc_insertion_point(field_mutable:CCommunity_GetGamePersonalDataEntries_Response.continue_text)
  return _s;
}
inline const std::string& CCommunity_GetGamePersonalDataEntries_Response::_internal_continue_text() const {
  return _impl_.continue_text_.Get();
}
inline void CCommunity_GetGamePersonalDataEntries_Response::_internal_set_continue_text(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.continue_text_.Set(value, GetArenaForAllocation());
}
inline std::string* CCommunity_GetGamePersonalDataEntries_Response::_internal_mutable_continue_text() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.continue_text_.Mutable(GetArenaForAllocation());
}
inline std::string* CCommunity_GetGamePersonalDataEntries_Response::release_continue_text() {
  // @@protoc_insertion_point(field_release:CCommunity_GetGamePersonalDataEntries_Response.continue_text)
  if (!_internal_has_continue_text()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.continue_text_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.continue_text_.IsDefault()) {
    _impl_.continue_text_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CCommunity_GetGamePersonalDataEntries_Response::set_allocated_continue_text(std::string* continue_text) {
  if (continue_text != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.continue_text_.SetAllocated(continue_text, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.continue_text_.IsDefault()) {
    _impl_.continue_text_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CCommunity_GetGamePersonalDataEntries_Response.continue_text)
}

// -------------------------------------------------------------------

// CCommunity_TerminateGamePersonalDataEntries_Request

// optional uint32 appid = 1;
inline bool CCommunity_TerminateGamePersonalDataEntries_Request::_internal_has_appid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CCommunity_TerminateGamePersonalDataEntries_Request::has_appid() const {
  return _internal_has_appid();
}
inline void CCommunity_TerminateGamePersonalDataEntries_Request::clear_appid() {
  _impl_.appid_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CCommunity_TerminateGamePersonalDataEntries_Request::_internal_appid() const {
  return _impl_.appid_;
}
inline uint32_t CCommunity_TerminateGamePersonalDataEntries_Request::appid() const {
  // @@protoc_insertion_point(field_get:CCommunity_TerminateGamePersonalDataEntries_Request.appid)
  return _internal_appid();
}
inline void CCommunity_TerminateGamePersonalDataEntries_Request::_internal_set_appid(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.appid_ = value;
}
inline void CCommunity_TerminateGamePersonalDataEntries_Request::set_appid(uint32_t value) {
  _internal_set_appid(value);
  // @@protoc_insertion_point(field_set:CCommunity_TerminateGamePersonalDataEntries_Request.appid)
}

// optional uint64 steamid = 2;
inline bool CCommunity_TerminateGamePersonalDataEntries_Request::_internal_has_steamid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CCommunity_TerminateGamePersonalDataEntries_Request::has_steamid() const {
  return _internal_has_steamid();
}
inline void CCommunity_TerminateGamePersonalDataEntries_Request::clear_steamid() {
  _impl_.steamid_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint64_t CCommunity_TerminateGamePersonalDataEntries_Request::_internal_steamid() const {
  return _impl_.steamid_;
}
inline uint64_t CCommunity_TerminateGamePersonalDataEntries_Request::steamid() const {
  // @@protoc_insertion_point(field_get:CCommunity_TerminateGamePersonalDataEntries_Request.steamid)
  return _internal_steamid();
}
inline void CCommunity_TerminateGamePersonalDataEntries_Request::_internal_set_steamid(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.steamid_ = value;
}
inline void CCommunity_TerminateGamePersonalDataEntries_Request::set_steamid(uint64_t value) {
  _internal_set_steamid(value);
  // @@protoc_insertion_point(field_set:CCommunity_TerminateGamePersonalDataEntries_Request.steamid)
}

// -------------------------------------------------------------------

// CCommunity_TerminateGamePersonalDataEntries_Response

// optional uint32 gceresult = 1;
inline bool CCommunity_TerminateGamePersonalDataEntries_Response::_internal_has_gceresult() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CCommunity_TerminateGamePersonalDataEntries_Response::has_gceresult() const {
  return _internal_has_gceresult();
}
inline void CCommunity_TerminateGamePersonalDataEntries_Response::clear_gceresult() {
  _impl_.gceresult_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CCommunity_TerminateGamePersonalDataEntries_Response::_internal_gceresult() const {
  return _impl_.gceresult_;
}
inline uint32_t CCommunity_TerminateGamePersonalDataEntries_Response::gceresult() const {
  // @@protoc_insertion_point(field_get:CCommunity_TerminateGamePersonalDataEntries_Response.gceresult)
  return _internal_gceresult();
}
inline void CCommunity_TerminateGamePersonalDataEntries_Response::_internal_set_gceresult(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.gceresult_ = value;
}
inline void CCommunity_TerminateGamePersonalDataEntries_Response::set_gceresult(uint32_t value) {
  _internal_set_gceresult(value);
  // @@protoc_insertion_point(field_set:CCommunity_TerminateGamePersonalDataEntries_Response.gceresult)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::EGCSystemMsg> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::EGCSystemMsg>() {
  return ::EGCSystemMsg_descriptor();
}
template <> struct is_proto_enum< ::ESOMsg> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ESOMsg>() {
  return ::ESOMsg_descriptor();
}
template <> struct is_proto_enum< ::EGCBaseClientMsg> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::EGCBaseClientMsg>() {
  return ::EGCBaseClientMsg_descriptor();
}
template <> struct is_proto_enum< ::EGCToGCMsg> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::EGCToGCMsg>() {
  return ::EGCToGCMsg_descriptor();
}
template <> struct is_proto_enum< ::ECommunityItemClass> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ECommunityItemClass>() {
  return ::ECommunityItemClass_descriptor();
}
template <> struct is_proto_enum< ::ECommunityItemAttribute> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ECommunityItemAttribute>() {
  return ::ECommunityItemAttribute_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_gcsystemmsgs_2eproto
