// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: networkbasetypes.proto

#include "networkbasetypes.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

PROTOBUF_CONSTEXPR CMsgVector::CMsgVector(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.x_)*/0
  , /*decltype(_impl_.y_)*/0
  , /*decltype(_impl_.z_)*/0
  , /*decltype(_impl_.w_)*/0} {}
struct CMsgVectorDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgVectorDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgVectorDefaultTypeInternal() {}
  union {
    CMsgVector _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgVectorDefaultTypeInternal _CMsgVector_default_instance_;
PROTOBUF_CONSTEXPR CMsgVector2D::CMsgVector2D(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.x_)*/0
  , /*decltype(_impl_.y_)*/0} {}
struct CMsgVector2DDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgVector2DDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgVector2DDefaultTypeInternal() {}
  union {
    CMsgVector2D _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgVector2DDefaultTypeInternal _CMsgVector2D_default_instance_;
PROTOBUF_CONSTEXPR CMsgQAngle::CMsgQAngle(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.x_)*/0
  , /*decltype(_impl_.y_)*/0
  , /*decltype(_impl_.z_)*/0} {}
struct CMsgQAngleDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgQAngleDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgQAngleDefaultTypeInternal() {}
  union {
    CMsgQAngle _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgQAngleDefaultTypeInternal _CMsgQAngle_default_instance_;
PROTOBUF_CONSTEXPR CMsgQuaternion::CMsgQuaternion(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.x_)*/0
  , /*decltype(_impl_.y_)*/0
  , /*decltype(_impl_.z_)*/0
  , /*decltype(_impl_.w_)*/0} {}
struct CMsgQuaternionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgQuaternionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgQuaternionDefaultTypeInternal() {}
  union {
    CMsgQuaternion _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgQuaternionDefaultTypeInternal _CMsgQuaternion_default_instance_;
PROTOBUF_CONSTEXPR CMsgTransform::CMsgTransform(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.position_)*/nullptr
  , /*decltype(_impl_.orientation_)*/nullptr
  , /*decltype(_impl_.scale_)*/0} {}
struct CMsgTransformDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgTransformDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgTransformDefaultTypeInternal() {}
  union {
    CMsgTransform _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgTransformDefaultTypeInternal _CMsgTransform_default_instance_;
PROTOBUF_CONSTEXPR CMsgRGBA::CMsgRGBA(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.r_)*/0
  , /*decltype(_impl_.g_)*/0
  , /*decltype(_impl_.b_)*/0
  , /*decltype(_impl_.a_)*/0} {}
struct CMsgRGBADefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgRGBADefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgRGBADefaultTypeInternal() {}
  union {
    CMsgRGBA _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgRGBADefaultTypeInternal _CMsgRGBA_default_instance_;
PROTOBUF_CONSTEXPR CMsgPlayerInfo::CMsgPlayerInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.xuid_)*/uint64_t{0u}
  , /*decltype(_impl_.steamid_)*/uint64_t{0u}
  , /*decltype(_impl_.userid_)*/0
  , /*decltype(_impl_.fakeplayer_)*/false
  , /*decltype(_impl_.ishltv_)*/false} {}
struct CMsgPlayerInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgPlayerInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgPlayerInfoDefaultTypeInternal() {}
  union {
    CMsgPlayerInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgPlayerInfoDefaultTypeInternal _CMsgPlayerInfo_default_instance_;
PROTOBUF_CONSTEXPR CEntityMsg::CEntityMsg(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.target_entity_)*/16777215u} {}
struct CEntityMsgDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CEntityMsgDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CEntityMsgDefaultTypeInternal() {}
  union {
    CEntityMsg _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CEntityMsgDefaultTypeInternal _CEntityMsg_default_instance_;
PROTOBUF_CONSTEXPR CMsg_CVars_CVar::CMsg_CVars_CVar(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.value_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct CMsg_CVars_CVarDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsg_CVars_CVarDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsg_CVars_CVarDefaultTypeInternal() {}
  union {
    CMsg_CVars_CVar _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsg_CVars_CVarDefaultTypeInternal _CMsg_CVars_CVar_default_instance_;
PROTOBUF_CONSTEXPR CMsg_CVars::CMsg_CVars(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.cvars_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CMsg_CVarsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsg_CVarsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsg_CVarsDefaultTypeInternal() {}
  union {
    CMsg_CVars _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsg_CVarsDefaultTypeInternal _CMsg_CVars_default_instance_;
PROTOBUF_CONSTEXPR CNETMsg_NOP::CNETMsg_NOP(
    ::_pbi::ConstantInitialized) {}
struct CNETMsg_NOPDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CNETMsg_NOPDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CNETMsg_NOPDefaultTypeInternal() {}
  union {
    CNETMsg_NOP _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CNETMsg_NOPDefaultTypeInternal _CNETMsg_NOP_default_instance_;
PROTOBUF_CONSTEXPR CNETMsg_SplitScreenUser::CNETMsg_SplitScreenUser(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.slot_)*/0} {}
struct CNETMsg_SplitScreenUserDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CNETMsg_SplitScreenUserDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CNETMsg_SplitScreenUserDefaultTypeInternal() {}
  union {
    CNETMsg_SplitScreenUser _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CNETMsg_SplitScreenUserDefaultTypeInternal _CNETMsg_SplitScreenUser_default_instance_;
PROTOBUF_CONSTEXPR CNETMsg_Tick::CNETMsg_Tick(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.expected_long_tick_reason_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.tick_)*/0u
  , /*decltype(_impl_.host_computationtime_)*/0u
  , /*decltype(_impl_.host_computationtime_std_deviation_)*/0u
  , /*decltype(_impl_.legacy_host_loss_)*/0u
  , /*decltype(_impl_.host_unfiltered_frametime_)*/0u
  , /*decltype(_impl_.hltv_replay_flags_)*/0u
  , /*decltype(_impl_.expected_long_tick_)*/0u
  , /*decltype(_impl_.host_frame_dropped_pct_x10_)*/0u
  , /*decltype(_impl_.host_frame_irregular_arrival_pct_x10_)*/0u} {}
struct CNETMsg_TickDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CNETMsg_TickDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CNETMsg_TickDefaultTypeInternal() {}
  union {
    CNETMsg_Tick _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CNETMsg_TickDefaultTypeInternal _CNETMsg_Tick_default_instance_;
PROTOBUF_CONSTEXPR CNETMsg_StringCmd::CNETMsg_StringCmd(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.command_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.prediction_sync_)*/0u} {}
struct CNETMsg_StringCmdDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CNETMsg_StringCmdDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CNETMsg_StringCmdDefaultTypeInternal() {}
  union {
    CNETMsg_StringCmd _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CNETMsg_StringCmdDefaultTypeInternal _CNETMsg_StringCmd_default_instance_;
PROTOBUF_CONSTEXPR CNETMsg_SetConVar::CNETMsg_SetConVar(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.convars_)*/nullptr} {}
struct CNETMsg_SetConVarDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CNETMsg_SetConVarDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CNETMsg_SetConVarDefaultTypeInternal() {}
  union {
    CNETMsg_SetConVar _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CNETMsg_SetConVarDefaultTypeInternal _CNETMsg_SetConVar_default_instance_;
PROTOBUF_CONSTEXPR CNETMsg_SignonState::CNETMsg_SignonState(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.players_networkids_)*/{}
  , /*decltype(_impl_.map_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.addons_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.signon_state_)*/0
  , /*decltype(_impl_.spawn_count_)*/0u
  , /*decltype(_impl_.num_server_players_)*/0u} {}
struct CNETMsg_SignonStateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CNETMsg_SignonStateDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CNETMsg_SignonStateDefaultTypeInternal() {}
  union {
    CNETMsg_SignonState _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CNETMsg_SignonStateDefaultTypeInternal _CNETMsg_SignonState_default_instance_;
PROTOBUF_CONSTEXPR CSVCMsg_GameEvent_key_t::CSVCMsg_GameEvent_key_t(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.val_string_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.type_)*/0
  , /*decltype(_impl_.val_float_)*/0
  , /*decltype(_impl_.val_long_)*/0
  , /*decltype(_impl_.val_short_)*/0
  , /*decltype(_impl_.val_byte_)*/0
  , /*decltype(_impl_.val_bool_)*/false
  , /*decltype(_impl_.val_uint64_)*/uint64_t{0u}} {}
struct CSVCMsg_GameEvent_key_tDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CSVCMsg_GameEvent_key_tDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CSVCMsg_GameEvent_key_tDefaultTypeInternal() {}
  union {
    CSVCMsg_GameEvent_key_t _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CSVCMsg_GameEvent_key_tDefaultTypeInternal _CSVCMsg_GameEvent_key_t_default_instance_;
PROTOBUF_CONSTEXPR CSVCMsg_GameEvent::CSVCMsg_GameEvent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.keys_)*/{}
  , /*decltype(_impl_.event_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.eventid_)*/0} {}
struct CSVCMsg_GameEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CSVCMsg_GameEventDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CSVCMsg_GameEventDefaultTypeInternal() {}
  union {
    CSVCMsg_GameEvent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CSVCMsg_GameEventDefaultTypeInternal _CSVCMsg_GameEvent_default_instance_;
PROTOBUF_CONSTEXPR CSVCMsgList_GameEvents_event_t::CSVCMsgList_GameEvents_event_t(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.event_)*/nullptr
  , /*decltype(_impl_.tick_)*/0} {}
struct CSVCMsgList_GameEvents_event_tDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CSVCMsgList_GameEvents_event_tDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CSVCMsgList_GameEvents_event_tDefaultTypeInternal() {}
  union {
    CSVCMsgList_GameEvents_event_t _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CSVCMsgList_GameEvents_event_tDefaultTypeInternal _CSVCMsgList_GameEvents_event_t_default_instance_;
PROTOBUF_CONSTEXPR CSVCMsgList_GameEvents::CSVCMsgList_GameEvents(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.events_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CSVCMsgList_GameEventsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CSVCMsgList_GameEventsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CSVCMsgList_GameEventsDefaultTypeInternal() {}
  union {
    CSVCMsgList_GameEvents _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CSVCMsgList_GameEventsDefaultTypeInternal _CSVCMsgList_GameEvents_default_instance_;
PROTOBUF_CONSTEXPR CNETMsg_SpawnGroup_Load::CNETMsg_SpawnGroup_Load(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.worldname_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.entitylumpname_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.entityfiltername_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.spawngroupmanifest_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.localnamefixup_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.parentnamefixup_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.savegamefilename_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.worldgroupname_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.world_offset_pos_)*/nullptr
  , /*decltype(_impl_.world_offset_angle_)*/nullptr
  , /*decltype(_impl_.spawngrouphandle_)*/0u
  , /*decltype(_impl_.spawngroupownerhandle_)*/0u
  , /*decltype(_impl_.flags_)*/0u
  , /*decltype(_impl_.tickcount_)*/0
  , /*decltype(_impl_.manifestloadpriority_)*/0
  , /*decltype(_impl_.worldgroupid_)*/0u
  , /*decltype(_impl_.manifestincomplete_)*/false
  , /*decltype(_impl_.leveltransition_)*/false
  , /*decltype(_impl_.creationsequence_)*/0u
  , /*decltype(_impl_.spawngroupparenthandle_)*/0u} {}
struct CNETMsg_SpawnGroup_LoadDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CNETMsg_SpawnGroup_LoadDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CNETMsg_SpawnGroup_LoadDefaultTypeInternal() {}
  union {
    CNETMsg_SpawnGroup_Load _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CNETMsg_SpawnGroup_LoadDefaultTypeInternal _CNETMsg_SpawnGroup_Load_default_instance_;
PROTOBUF_CONSTEXPR CNETMsg_SpawnGroup_ManifestUpdate::CNETMsg_SpawnGroup_ManifestUpdate(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.spawngroupmanifest_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.spawngrouphandle_)*/0u
  , /*decltype(_impl_.manifestincomplete_)*/false} {}
struct CNETMsg_SpawnGroup_ManifestUpdateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CNETMsg_SpawnGroup_ManifestUpdateDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CNETMsg_SpawnGroup_ManifestUpdateDefaultTypeInternal() {}
  union {
    CNETMsg_SpawnGroup_ManifestUpdate _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CNETMsg_SpawnGroup_ManifestUpdateDefaultTypeInternal _CNETMsg_SpawnGroup_ManifestUpdate_default_instance_;
PROTOBUF_CONSTEXPR CNETMsg_SpawnGroup_SetCreationTick::CNETMsg_SpawnGroup_SetCreationTick(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.spawngrouphandle_)*/0u
  , /*decltype(_impl_.tickcount_)*/0
  , /*decltype(_impl_.creationsequence_)*/0u} {}
struct CNETMsg_SpawnGroup_SetCreationTickDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CNETMsg_SpawnGroup_SetCreationTickDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CNETMsg_SpawnGroup_SetCreationTickDefaultTypeInternal() {}
  union {
    CNETMsg_SpawnGroup_SetCreationTick _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CNETMsg_SpawnGroup_SetCreationTickDefaultTypeInternal _CNETMsg_SpawnGroup_SetCreationTick_default_instance_;
PROTOBUF_CONSTEXPR CNETMsg_SpawnGroup_Unload::CNETMsg_SpawnGroup_Unload(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.spawngrouphandle_)*/0u
  , /*decltype(_impl_.flags_)*/0u
  , /*decltype(_impl_.tickcount_)*/0} {}
struct CNETMsg_SpawnGroup_UnloadDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CNETMsg_SpawnGroup_UnloadDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CNETMsg_SpawnGroup_UnloadDefaultTypeInternal() {}
  union {
    CNETMsg_SpawnGroup_Unload _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CNETMsg_SpawnGroup_UnloadDefaultTypeInternal _CNETMsg_SpawnGroup_Unload_default_instance_;
PROTOBUF_CONSTEXPR CNETMsg_SpawnGroup_LoadCompleted::CNETMsg_SpawnGroup_LoadCompleted(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.spawngrouphandle_)*/0u} {}
struct CNETMsg_SpawnGroup_LoadCompletedDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CNETMsg_SpawnGroup_LoadCompletedDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CNETMsg_SpawnGroup_LoadCompletedDefaultTypeInternal() {}
  union {
    CNETMsg_SpawnGroup_LoadCompleted _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CNETMsg_SpawnGroup_LoadCompletedDefaultTypeInternal _CNETMsg_SpawnGroup_LoadCompleted_default_instance_;
PROTOBUF_CONSTEXPR CSVCMsg_GameSessionConfiguration::CSVCMsg_GameSessionConfiguration(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.hostname_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.savegamename_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.s1_mapname_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.gamemode_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.server_ip_address_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.data_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.previouslevel_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.landmarkname_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.is_multiplayer_)*/false
  , /*decltype(_impl_.is_loadsavegame_)*/false
  , /*decltype(_impl_.is_background_map_)*/false
  , /*decltype(_impl_.is_headless_)*/false
  , /*decltype(_impl_.min_client_limit_)*/0u
  , /*decltype(_impl_.max_client_limit_)*/0u
  , /*decltype(_impl_.max_clients_)*/0u
  , /*decltype(_impl_.tick_interval_)*/0u
  , /*decltype(_impl_.is_localonly_)*/false
  , /*decltype(_impl_.no_steam_server_)*/false
  , /*decltype(_impl_.is_transition_)*/false} {}
struct CSVCMsg_GameSessionConfigurationDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CSVCMsg_GameSessionConfigurationDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CSVCMsg_GameSessionConfigurationDefaultTypeInternal() {}
  union {
    CSVCMsg_GameSessionConfiguration _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CSVCMsg_GameSessionConfigurationDefaultTypeInternal _CSVCMsg_GameSessionConfiguration_default_instance_;
PROTOBUF_CONSTEXPR CNETMsg_DebugOverlay::CNETMsg_DebugOverlay(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.vectors_)*/{}
  , /*decltype(_impl_.colors_)*/{}
  , /*decltype(_impl_.dimensions_)*/{}
  , /*decltype(_impl_.times_)*/{}
  , /*decltype(_impl_.bools_)*/{}
  , /*decltype(_impl_.uint64s_)*/{}
  , /*decltype(_impl_.strings_)*/{}
  , /*decltype(_impl_.etype_)*/0} {}
struct CNETMsg_DebugOverlayDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CNETMsg_DebugOverlayDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CNETMsg_DebugOverlayDefaultTypeInternal() {}
  union {
    CNETMsg_DebugOverlay _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CNETMsg_DebugOverlayDefaultTypeInternal _CNETMsg_DebugOverlay_default_instance_;
static ::_pb::Metadata file_level_metadata_networkbasetypes_2eproto[27];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_networkbasetypes_2eproto[3];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_networkbasetypes_2eproto = nullptr;

const uint32_t TableStruct_networkbasetypes_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::CMsgVector, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgVector, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgVector, _impl_.x_),
  PROTOBUF_FIELD_OFFSET(::CMsgVector, _impl_.y_),
  PROTOBUF_FIELD_OFFSET(::CMsgVector, _impl_.z_),
  PROTOBUF_FIELD_OFFSET(::CMsgVector, _impl_.w_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::CMsgVector2D, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgVector2D, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgVector2D, _impl_.x_),
  PROTOBUF_FIELD_OFFSET(::CMsgVector2D, _impl_.y_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgQAngle, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgQAngle, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgQAngle, _impl_.x_),
  PROTOBUF_FIELD_OFFSET(::CMsgQAngle, _impl_.y_),
  PROTOBUF_FIELD_OFFSET(::CMsgQAngle, _impl_.z_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CMsgQuaternion, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgQuaternion, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgQuaternion, _impl_.x_),
  PROTOBUF_FIELD_OFFSET(::CMsgQuaternion, _impl_.y_),
  PROTOBUF_FIELD_OFFSET(::CMsgQuaternion, _impl_.z_),
  PROTOBUF_FIELD_OFFSET(::CMsgQuaternion, _impl_.w_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::CMsgTransform, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgTransform, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgTransform, _impl_.position_),
  PROTOBUF_FIELD_OFFSET(::CMsgTransform, _impl_.scale_),
  PROTOBUF_FIELD_OFFSET(::CMsgTransform, _impl_.orientation_),
  0,
  2,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgRGBA, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgRGBA, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgRGBA, _impl_.r_),
  PROTOBUF_FIELD_OFFSET(::CMsgRGBA, _impl_.g_),
  PROTOBUF_FIELD_OFFSET(::CMsgRGBA, _impl_.b_),
  PROTOBUF_FIELD_OFFSET(::CMsgRGBA, _impl_.a_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::CMsgPlayerInfo, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgPlayerInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgPlayerInfo, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::CMsgPlayerInfo, _impl_.xuid_),
  PROTOBUF_FIELD_OFFSET(::CMsgPlayerInfo, _impl_.userid_),
  PROTOBUF_FIELD_OFFSET(::CMsgPlayerInfo, _impl_.steamid_),
  PROTOBUF_FIELD_OFFSET(::CMsgPlayerInfo, _impl_.fakeplayer_),
  PROTOBUF_FIELD_OFFSET(::CMsgPlayerInfo, _impl_.ishltv_),
  0,
  1,
  3,
  2,
  4,
  5,
  PROTOBUF_FIELD_OFFSET(::CEntityMsg, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CEntityMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CEntityMsg, _impl_.target_entity_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsg_CVars_CVar, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsg_CVars_CVar, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsg_CVars_CVar, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::CMsg_CVars_CVar, _impl_.value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsg_CVars, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsg_CVars, _impl_.cvars_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CNETMsg_NOP, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CNETMsg_SplitScreenUser, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CNETMsg_SplitScreenUser, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CNETMsg_SplitScreenUser, _impl_.slot_),
  0,
  PROTOBUF_FIELD_OFFSET(::CNETMsg_Tick, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CNETMsg_Tick, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CNETMsg_Tick, _impl_.tick_),
  PROTOBUF_FIELD_OFFSET(::CNETMsg_Tick, _impl_.host_computationtime_),
  PROTOBUF_FIELD_OFFSET(::CNETMsg_Tick, _impl_.host_computationtime_std_deviation_),
  PROTOBUF_FIELD_OFFSET(::CNETMsg_Tick, _impl_.legacy_host_loss_),
  PROTOBUF_FIELD_OFFSET(::CNETMsg_Tick, _impl_.host_unfiltered_frametime_),
  PROTOBUF_FIELD_OFFSET(::CNETMsg_Tick, _impl_.hltv_replay_flags_),
  PROTOBUF_FIELD_OFFSET(::CNETMsg_Tick, _impl_.expected_long_tick_),
  PROTOBUF_FIELD_OFFSET(::CNETMsg_Tick, _impl_.expected_long_tick_reason_),
  PROTOBUF_FIELD_OFFSET(::CNETMsg_Tick, _impl_.host_frame_dropped_pct_x10_),
  PROTOBUF_FIELD_OFFSET(::CNETMsg_Tick, _impl_.host_frame_irregular_arrival_pct_x10_),
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  0,
  8,
  9,
  PROTOBUF_FIELD_OFFSET(::CNETMsg_StringCmd, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CNETMsg_StringCmd, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CNETMsg_StringCmd, _impl_.command_),
  PROTOBUF_FIELD_OFFSET(::CNETMsg_StringCmd, _impl_.prediction_sync_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CNETMsg_SetConVar, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CNETMsg_SetConVar, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CNETMsg_SetConVar, _impl_.convars_),
  0,
  PROTOBUF_FIELD_OFFSET(::CNETMsg_SignonState, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CNETMsg_SignonState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CNETMsg_SignonState, _impl_.signon_state_),
  PROTOBUF_FIELD_OFFSET(::CNETMsg_SignonState, _impl_.spawn_count_),
  PROTOBUF_FIELD_OFFSET(::CNETMsg_SignonState, _impl_.num_server_players_),
  PROTOBUF_FIELD_OFFSET(::CNETMsg_SignonState, _impl_.players_networkids_),
  PROTOBUF_FIELD_OFFSET(::CNETMsg_SignonState, _impl_.map_name_),
  PROTOBUF_FIELD_OFFSET(::CNETMsg_SignonState, _impl_.addons_),
  2,
  3,
  4,
  ~0u,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CSVCMsg_GameEvent_key_t, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CSVCMsg_GameEvent_key_t, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CSVCMsg_GameEvent_key_t, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::CSVCMsg_GameEvent_key_t, _impl_.val_string_),
  PROTOBUF_FIELD_OFFSET(::CSVCMsg_GameEvent_key_t, _impl_.val_float_),
  PROTOBUF_FIELD_OFFSET(::CSVCMsg_GameEvent_key_t, _impl_.val_long_),
  PROTOBUF_FIELD_OFFSET(::CSVCMsg_GameEvent_key_t, _impl_.val_short_),
  PROTOBUF_FIELD_OFFSET(::CSVCMsg_GameEvent_key_t, _impl_.val_byte_),
  PROTOBUF_FIELD_OFFSET(::CSVCMsg_GameEvent_key_t, _impl_.val_bool_),
  PROTOBUF_FIELD_OFFSET(::CSVCMsg_GameEvent_key_t, _impl_.val_uint64_),
  1,
  0,
  2,
  3,
  4,
  5,
  6,
  7,
  PROTOBUF_FIELD_OFFSET(::CSVCMsg_GameEvent, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CSVCMsg_GameEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CSVCMsg_GameEvent, _impl_.event_name_),
  PROTOBUF_FIELD_OFFSET(::CSVCMsg_GameEvent, _impl_.eventid_),
  PROTOBUF_FIELD_OFFSET(::CSVCMsg_GameEvent, _impl_.keys_),
  0,
  1,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CSVCMsgList_GameEvents_event_t, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CSVCMsgList_GameEvents_event_t, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CSVCMsgList_GameEvents_event_t, _impl_.tick_),
  PROTOBUF_FIELD_OFFSET(::CSVCMsgList_GameEvents_event_t, _impl_.event_),
  1,
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CSVCMsgList_GameEvents, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CSVCMsgList_GameEvents, _impl_.events_),
  PROTOBUF_FIELD_OFFSET(::CNETMsg_SpawnGroup_Load, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CNETMsg_SpawnGroup_Load, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CNETMsg_SpawnGroup_Load, _impl_.worldname_),
  PROTOBUF_FIELD_OFFSET(::CNETMsg_SpawnGroup_Load, _impl_.entitylumpname_),
  PROTOBUF_FIELD_OFFSET(::CNETMsg_SpawnGroup_Load, _impl_.entityfiltername_),
  PROTOBUF_FIELD_OFFSET(::CNETMsg_SpawnGroup_Load, _impl_.spawngrouphandle_),
  PROTOBUF_FIELD_OFFSET(::CNETMsg_SpawnGroup_Load, _impl_.spawngroupownerhandle_),
  PROTOBUF_FIELD_OFFSET(::CNETMsg_SpawnGroup_Load, _impl_.world_offset_pos_),
  PROTOBUF_FIELD_OFFSET(::CNETMsg_SpawnGroup_Load, _impl_.world_offset_angle_),
  PROTOBUF_FIELD_OFFSET(::CNETMsg_SpawnGroup_Load, _impl_.spawngroupmanifest_),
  PROTOBUF_FIELD_OFFSET(::CNETMsg_SpawnGroup_Load, _impl_.flags_),
  PROTOBUF_FIELD_OFFSET(::CNETMsg_SpawnGroup_Load, _impl_.tickcount_),
  PROTOBUF_FIELD_OFFSET(::CNETMsg_SpawnGroup_Load, _impl_.manifestincomplete_),
  PROTOBUF_FIELD_OFFSET(::CNETMsg_SpawnGroup_Load, _impl_.localnamefixup_),
  PROTOBUF_FIELD_OFFSET(::CNETMsg_SpawnGroup_Load, _impl_.parentnamefixup_),
  PROTOBUF_FIELD_OFFSET(::CNETMsg_SpawnGroup_Load, _impl_.manifestloadpriority_),
  PROTOBUF_FIELD_OFFSET(::CNETMsg_SpawnGroup_Load, _impl_.worldgroupid_),
  PROTOBUF_FIELD_OFFSET(::CNETMsg_SpawnGroup_Load, _impl_.creationsequence_),
  PROTOBUF_FIELD_OFFSET(::CNETMsg_SpawnGroup_Load, _impl_.savegamefilename_),
  PROTOBUF_FIELD_OFFSET(::CNETMsg_SpawnGroup_Load, _impl_.spawngroupparenthandle_),
  PROTOBUF_FIELD_OFFSET(::CNETMsg_SpawnGroup_Load, _impl_.leveltransition_),
  PROTOBUF_FIELD_OFFSET(::CNETMsg_SpawnGroup_Load, _impl_.worldgroupname_),
  0,
  1,
  2,
  10,
  11,
  8,
  9,
  3,
  12,
  13,
  16,
  4,
  5,
  14,
  15,
  18,
  6,
  19,
  17,
  7,
  PROTOBUF_FIELD_OFFSET(::CNETMsg_SpawnGroup_ManifestUpdate, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CNETMsg_SpawnGroup_ManifestUpdate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CNETMsg_SpawnGroup_ManifestUpdate, _impl_.spawngrouphandle_),
  PROTOBUF_FIELD_OFFSET(::CNETMsg_SpawnGroup_ManifestUpdate, _impl_.spawngroupmanifest_),
  PROTOBUF_FIELD_OFFSET(::CNETMsg_SpawnGroup_ManifestUpdate, _impl_.manifestincomplete_),
  1,
  0,
  2,
  PROTOBUF_FIELD_OFFSET(::CNETMsg_SpawnGroup_SetCreationTick, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CNETMsg_SpawnGroup_SetCreationTick, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CNETMsg_SpawnGroup_SetCreationTick, _impl_.spawngrouphandle_),
  PROTOBUF_FIELD_OFFSET(::CNETMsg_SpawnGroup_SetCreationTick, _impl_.tickcount_),
  PROTOBUF_FIELD_OFFSET(::CNETMsg_SpawnGroup_SetCreationTick, _impl_.creationsequence_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CNETMsg_SpawnGroup_Unload, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CNETMsg_SpawnGroup_Unload, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CNETMsg_SpawnGroup_Unload, _impl_.spawngrouphandle_),
  PROTOBUF_FIELD_OFFSET(::CNETMsg_SpawnGroup_Unload, _impl_.flags_),
  PROTOBUF_FIELD_OFFSET(::CNETMsg_SpawnGroup_Unload, _impl_.tickcount_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CNETMsg_SpawnGroup_LoadCompleted, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CNETMsg_SpawnGroup_LoadCompleted, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CNETMsg_SpawnGroup_LoadCompleted, _impl_.spawngrouphandle_),
  0,
  PROTOBUF_FIELD_OFFSET(::CSVCMsg_GameSessionConfiguration, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CSVCMsg_GameSessionConfiguration, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CSVCMsg_GameSessionConfiguration, _impl_.is_multiplayer_),
  PROTOBUF_FIELD_OFFSET(::CSVCMsg_GameSessionConfiguration, _impl_.is_loadsavegame_),
  PROTOBUF_FIELD_OFFSET(::CSVCMsg_GameSessionConfiguration, _impl_.is_background_map_),
  PROTOBUF_FIELD_OFFSET(::CSVCMsg_GameSessionConfiguration, _impl_.is_headless_),
  PROTOBUF_FIELD_OFFSET(::CSVCMsg_GameSessionConfiguration, _impl_.min_client_limit_),
  PROTOBUF_FIELD_OFFSET(::CSVCMsg_GameSessionConfiguration, _impl_.max_client_limit_),
  PROTOBUF_FIELD_OFFSET(::CSVCMsg_GameSessionConfiguration, _impl_.max_clients_),
  PROTOBUF_FIELD_OFFSET(::CSVCMsg_GameSessionConfiguration, _impl_.tick_interval_),
  PROTOBUF_FIELD_OFFSET(::CSVCMsg_GameSessionConfiguration, _impl_.hostname_),
  PROTOBUF_FIELD_OFFSET(::CSVCMsg_GameSessionConfiguration, _impl_.savegamename_),
  PROTOBUF_FIELD_OFFSET(::CSVCMsg_GameSessionConfiguration, _impl_.s1_mapname_),
  PROTOBUF_FIELD_OFFSET(::CSVCMsg_GameSessionConfiguration, _impl_.gamemode_),
  PROTOBUF_FIELD_OFFSET(::CSVCMsg_GameSessionConfiguration, _impl_.server_ip_address_),
  PROTOBUF_FIELD_OFFSET(::CSVCMsg_GameSessionConfiguration, _impl_.data_),
  PROTOBUF_FIELD_OFFSET(::CSVCMsg_GameSessionConfiguration, _impl_.is_localonly_),
  PROTOBUF_FIELD_OFFSET(::CSVCMsg_GameSessionConfiguration, _impl_.no_steam_server_),
  PROTOBUF_FIELD_OFFSET(::CSVCMsg_GameSessionConfiguration, _impl_.is_transition_),
  PROTOBUF_FIELD_OFFSET(::CSVCMsg_GameSessionConfiguration, _impl_.previouslevel_),
  PROTOBUF_FIELD_OFFSET(::CSVCMsg_GameSessionConfiguration, _impl_.landmarkname_),
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  0,
  1,
  2,
  3,
  4,
  5,
  16,
  17,
  18,
  6,
  7,
  PROTOBUF_FIELD_OFFSET(::CNETMsg_DebugOverlay, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CNETMsg_DebugOverlay, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CNETMsg_DebugOverlay, _impl_.etype_),
  PROTOBUF_FIELD_OFFSET(::CNETMsg_DebugOverlay, _impl_.vectors_),
  PROTOBUF_FIELD_OFFSET(::CNETMsg_DebugOverlay, _impl_.colors_),
  PROTOBUF_FIELD_OFFSET(::CNETMsg_DebugOverlay, _impl_.dimensions_),
  PROTOBUF_FIELD_OFFSET(::CNETMsg_DebugOverlay, _impl_.times_),
  PROTOBUF_FIELD_OFFSET(::CNETMsg_DebugOverlay, _impl_.bools_),
  PROTOBUF_FIELD_OFFSET(::CNETMsg_DebugOverlay, _impl_.uint64s_),
  PROTOBUF_FIELD_OFFSET(::CNETMsg_DebugOverlay, _impl_.strings_),
  0,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 10, -1, sizeof(::CMsgVector)},
  { 14, 22, -1, sizeof(::CMsgVector2D)},
  { 24, 33, -1, sizeof(::CMsgQAngle)},
  { 36, 46, -1, sizeof(::CMsgQuaternion)},
  { 50, 59, -1, sizeof(::CMsgTransform)},
  { 62, 72, -1, sizeof(::CMsgRGBA)},
  { 76, 88, -1, sizeof(::CMsgPlayerInfo)},
  { 94, 101, -1, sizeof(::CEntityMsg)},
  { 102, 110, -1, sizeof(::CMsg_CVars_CVar)},
  { 112, -1, -1, sizeof(::CMsg_CVars)},
  { 119, -1, -1, sizeof(::CNETMsg_NOP)},
  { 125, 132, -1, sizeof(::CNETMsg_SplitScreenUser)},
  { 133, 149, -1, sizeof(::CNETMsg_Tick)},
  { 159, 167, -1, sizeof(::CNETMsg_StringCmd)},
  { 169, 176, -1, sizeof(::CNETMsg_SetConVar)},
  { 177, 189, -1, sizeof(::CNETMsg_SignonState)},
  { 195, 209, -1, sizeof(::CSVCMsg_GameEvent_key_t)},
  { 217, 226, -1, sizeof(::CSVCMsg_GameEvent)},
  { 229, 237, -1, sizeof(::CSVCMsgList_GameEvents_event_t)},
  { 239, -1, -1, sizeof(::CSVCMsgList_GameEvents)},
  { 246, 272, -1, sizeof(::CNETMsg_SpawnGroup_Load)},
  { 292, 301, -1, sizeof(::CNETMsg_SpawnGroup_ManifestUpdate)},
  { 304, 313, -1, sizeof(::CNETMsg_SpawnGroup_SetCreationTick)},
  { 316, 325, -1, sizeof(::CNETMsg_SpawnGroup_Unload)},
  { 328, 335, -1, sizeof(::CNETMsg_SpawnGroup_LoadCompleted)},
  { 336, 361, -1, sizeof(::CSVCMsg_GameSessionConfiguration)},
  { 380, 394, -1, sizeof(::CNETMsg_DebugOverlay)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::_CMsgVector_default_instance_._instance,
  &::_CMsgVector2D_default_instance_._instance,
  &::_CMsgQAngle_default_instance_._instance,
  &::_CMsgQuaternion_default_instance_._instance,
  &::_CMsgTransform_default_instance_._instance,
  &::_CMsgRGBA_default_instance_._instance,
  &::_CMsgPlayerInfo_default_instance_._instance,
  &::_CEntityMsg_default_instance_._instance,
  &::_CMsg_CVars_CVar_default_instance_._instance,
  &::_CMsg_CVars_default_instance_._instance,
  &::_CNETMsg_NOP_default_instance_._instance,
  &::_CNETMsg_SplitScreenUser_default_instance_._instance,
  &::_CNETMsg_Tick_default_instance_._instance,
  &::_CNETMsg_StringCmd_default_instance_._instance,
  &::_CNETMsg_SetConVar_default_instance_._instance,
  &::_CNETMsg_SignonState_default_instance_._instance,
  &::_CSVCMsg_GameEvent_key_t_default_instance_._instance,
  &::_CSVCMsg_GameEvent_default_instance_._instance,
  &::_CSVCMsgList_GameEvents_event_t_default_instance_._instance,
  &::_CSVCMsgList_GameEvents_default_instance_._instance,
  &::_CNETMsg_SpawnGroup_Load_default_instance_._instance,
  &::_CNETMsg_SpawnGroup_ManifestUpdate_default_instance_._instance,
  &::_CNETMsg_SpawnGroup_SetCreationTick_default_instance_._instance,
  &::_CNETMsg_SpawnGroup_Unload_default_instance_._instance,
  &::_CNETMsg_SpawnGroup_LoadCompleted_default_instance_._instance,
  &::_CSVCMsg_GameSessionConfiguration_default_instance_._instance,
  &::_CNETMsg_DebugOverlay_default_instance_._instance,
};

const char descriptor_table_protodef_networkbasetypes_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\026networkbasetypes.proto\032\030network_connec"
  "tion.proto\"8\n\nCMsgVector\022\t\n\001x\030\001 \001(\002\022\t\n\001y"
  "\030\002 \001(\002\022\t\n\001z\030\003 \001(\002\022\t\n\001w\030\004 \001(\002\"$\n\014CMsgVect"
  "or2D\022\t\n\001x\030\001 \001(\002\022\t\n\001y\030\002 \001(\002\"-\n\nCMsgQAngle"
  "\022\t\n\001x\030\001 \001(\002\022\t\n\001y\030\002 \001(\002\022\t\n\001z\030\003 \001(\002\"<\n\016CMs"
  "gQuaternion\022\t\n\001x\030\001 \001(\002\022\t\n\001y\030\002 \001(\002\022\t\n\001z\030\003"
  " \001(\002\022\t\n\001w\030\004 \001(\002\"c\n\rCMsgTransform\022\035\n\010posi"
  "tion\030\001 \001(\0132\013.CMsgVector\022\r\n\005scale\030\002 \001(\002\022$"
  "\n\013orientation\030\003 \001(\0132\017.CMsgQuaternion\"6\n\010"
  "CMsgRGBA\022\t\n\001r\030\001 \001(\005\022\t\n\001g\030\002 \001(\005\022\t\n\001b\030\003 \001("
  "\005\022\t\n\001a\030\004 \001(\005\"q\n\016CMsgPlayerInfo\022\014\n\004name\030\001"
  " \001(\t\022\014\n\004xuid\030\002 \001(\006\022\016\n\006userid\030\003 \001(\005\022\017\n\007st"
  "eamid\030\004 \001(\006\022\022\n\nfakeplayer\030\005 \001(\010\022\016\n\006ishlt"
  "v\030\006 \001(\010\"-\n\nCEntityMsg\022\037\n\rtarget_entity\030\001"
  " \001(\r:\01016777215\"R\n\nCMsg_CVars\022\037\n\005cvars\030\001 "
  "\003(\0132\020.CMsg_CVars.CVar\032#\n\004CVar\022\014\n\004name\030\001 "
  "\001(\t\022\r\n\005value\030\002 \001(\t\"\r\n\013CNETMsg_NOP\"\'\n\027CNE"
  "TMsg_SplitScreenUser\022\014\n\004slot\030\001 \001(\005\"\317\002\n\014C"
  "NETMsg_Tick\022\014\n\004tick\030\001 \001(\r\022\034\n\024host_comput"
  "ationtime\030\004 \001(\r\022*\n\"host_computationtime_"
  "std_deviation\030\005 \001(\r\022\030\n\020legacy_host_loss\030"
  "\007 \001(\r\022!\n\031host_unfiltered_frametime\030\010 \001(\r"
  "\022\031\n\021hltv_replay_flags\030\t \001(\r\022\032\n\022expected_"
  "long_tick\030\n \001(\r\022!\n\031expected_long_tick_re"
  "ason\030\013 \001(\t\022\"\n\032host_frame_dropped_pct_x10"
  "\030\014 \001(\r\022,\n$host_frame_irregular_arrival_p"
  "ct_x10\030\r \001(\r\"=\n\021CNETMsg_StringCmd\022\017\n\007com"
  "mand\030\001 \001(\t\022\027\n\017prediction_sync\030\002 \001(\r\"1\n\021C"
  "NETMsg_SetConVar\022\034\n\007convars\030\001 \001(\0132\013.CMsg"
  "_CVars\"\274\001\n\023CNETMsg_SignonState\0226\n\014signon"
  "_state\030\001 \001(\0162\016.SignonState_t:\020SIGNONSTAT"
  "E_NONE\022\023\n\013spawn_count\030\002 \001(\r\022\032\n\022num_serve"
  "r_players\030\003 \001(\r\022\032\n\022players_networkids\030\004 "
  "\003(\t\022\020\n\010map_name\030\005 \001(\t\022\016\n\006addons\030\006 \001(\t\"\374\001"
  "\n\021CSVCMsg_GameEvent\022\022\n\nevent_name\030\001 \001(\t\022"
  "\017\n\007eventid\030\002 \001(\005\022&\n\004keys\030\003 \003(\0132\030.CSVCMsg"
  "_GameEvent.key_t\032\231\001\n\005key_t\022\014\n\004type\030\001 \001(\005"
  "\022\022\n\nval_string\030\002 \001(\t\022\021\n\tval_float\030\003 \001(\002\022"
  "\020\n\010val_long\030\004 \001(\005\022\021\n\tval_short\030\005 \001(\005\022\020\n\010"
  "val_byte\030\006 \001(\005\022\020\n\010val_bool\030\007 \001(\010\022\022\n\nval_"
  "uint64\030\010 \001(\004\"\205\001\n\026CSVCMsgList_GameEvents\022"
  "/\n\006events\030\001 \003(\0132\037.CSVCMsgList_GameEvents"
  ".event_t\032:\n\007event_t\022\014\n\004tick\030\001 \001(\005\022!\n\005eve"
  "nt\030\002 \001(\0132\022.CSVCMsg_GameEvent\"\253\004\n\027CNETMsg"
  "_SpawnGroup_Load\022\021\n\tworldname\030\001 \001(\t\022\026\n\016e"
  "ntitylumpname\030\002 \001(\t\022\030\n\020entityfiltername\030"
  "\003 \001(\t\022\030\n\020spawngrouphandle\030\004 \001(\r\022\035\n\025spawn"
  "groupownerhandle\030\005 \001(\r\022%\n\020world_offset_p"
  "os\030\006 \001(\0132\013.CMsgVector\022\'\n\022world_offset_an"
  "gle\030\007 \001(\0132\013.CMsgQAngle\022\032\n\022spawngroupmani"
  "fest\030\010 \001(\014\022\r\n\005flags\030\t \001(\r\022\021\n\ttickcount\030\n"
  " \001(\005\022\032\n\022manifestincomplete\030\013 \001(\010\022\026\n\016loca"
  "lnamefixup\030\014 \001(\t\022\027\n\017parentnamefixup\030\r \001("
  "\t\022\034\n\024manifestloadpriority\030\016 \001(\005\022\024\n\014world"
  "groupid\030\017 \001(\r\022\030\n\020creationsequence\030\020 \001(\r\022"
  "\030\n\020savegamefilename\030\021 \001(\t\022\036\n\026spawngroupp"
  "arenthandle\030\022 \001(\r\022\027\n\017leveltransition\030\023 \001"
  "(\010\022\026\n\016worldgroupname\030\024 \001(\t\"u\n!CNETMsg_Sp"
  "awnGroup_ManifestUpdate\022\030\n\020spawngrouphan"
  "dle\030\001 \001(\r\022\032\n\022spawngroupmanifest\030\002 \001(\014\022\032\n"
  "\022manifestincomplete\030\003 \001(\010\"k\n\"CNETMsg_Spa"
  "wnGroup_SetCreationTick\022\030\n\020spawngrouphan"
  "dle\030\001 \001(\r\022\021\n\ttickcount\030\002 \001(\005\022\030\n\020creation"
  "sequence\030\003 \001(\r\"W\n\031CNETMsg_SpawnGroup_Unl"
  "oad\022\030\n\020spawngrouphandle\030\001 \001(\r\022\r\n\005flags\030\002"
  " \001(\r\022\021\n\ttickcount\030\003 \001(\005\"<\n CNETMsg_Spawn"
  "Group_LoadCompleted\022\030\n\020spawngrouphandle\030"
  "\001 \001(\r\"\315\003\n CSVCMsg_GameSessionConfigurati"
  "on\022\026\n\016is_multiplayer\030\001 \001(\010\022\027\n\017is_loadsav"
  "egame\030\002 \001(\010\022\031\n\021is_background_map\030\003 \001(\010\022\023"
  "\n\013is_headless\030\004 \001(\010\022\030\n\020min_client_limit\030"
  "\005 \001(\r\022\030\n\020max_client_limit\030\006 \001(\r\022\023\n\013max_c"
  "lients\030\007 \001(\r\022\025\n\rtick_interval\030\010 \001(\007\022\020\n\010h"
  "ostname\030\t \001(\t\022\024\n\014savegamename\030\n \001(\t\022\022\n\ns"
  "1_mapname\030\013 \001(\t\022\020\n\010gamemode\030\014 \001(\t\022\031\n\021ser"
  "ver_ip_address\030\r \001(\t\022\014\n\004data\030\016 \001(\014\022\024\n\014is"
  "_localonly\030\017 \001(\010\022\027\n\017no_steam_server\030\023 \001("
  "\010\022\025\n\ris_transition\030\020 \001(\010\022\025\n\rpreviousleve"
  "l\030\021 \001(\t\022\024\n\014landmarkname\030\022 \001(\t\"\262\001\n\024CNETMs"
  "g_DebugOverlay\022\r\n\005etype\030\001 \001(\005\022\034\n\007vectors"
  "\030\002 \003(\0132\013.CMsgVector\022\031\n\006colors\030\003 \003(\0132\t.CM"
  "sgRGBA\022\022\n\ndimensions\030\004 \003(\002\022\r\n\005times\030\005 \003("
  "\002\022\r\n\005bools\030\006 \003(\010\022\017\n\007uint64s\030\007 \003(\004\022\017\n\007str"
  "ings\030\010 \003(\t*\324\001\n\rSignonState_t\022\024\n\020SIGNONST"
  "ATE_NONE\020\000\022\031\n\025SIGNONSTATE_CHALLENGE\020\001\022\031\n"
  "\025SIGNONSTATE_CONNECTED\020\002\022\023\n\017SIGNONSTATE_"
  "NEW\020\003\022\030\n\024SIGNONSTATE_PRESPAWN\020\004\022\025\n\021SIGNO"
  "NSTATE_SPAWN\020\005\022\024\n\020SIGNONSTATE_FULL\020\006\022\033\n\027"
  "SIGNONSTATE_CHANGELEVEL\020\007*\313\002\n\014NET_Messag"
  "es\022\013\n\007net_NOP\020\000\022\031\n\025net_Disconnect_Legacy"
  "\020\001\022\027\n\023net_SplitScreenUser\020\003\022\014\n\010net_Tick\020"
  "\004\022\021\n\rnet_StringCmd\020\005\022\021\n\rnet_SetConVar\020\006\022"
  "\023\n\017net_SignonState\020\007\022\027\n\023net_SpawnGroup_L"
  "oad\020\010\022!\n\035net_SpawnGroup_ManifestUpdate\020\t"
  "\022\"\n\036net_SpawnGroup_SetCreationTick\020\013\022\031\n\025"
  "net_SpawnGroup_Unload\020\014\022 \n\034net_SpawnGrou"
  "p_LoadCompleted\020\r\022\024\n\020net_DebugOverlay\020\017*"
  "\314\002\n\021SpawnGroupFlags_t\022\'\n#SPAWN_GROUP_LOA"
  "D_ENTITIES_FROM_SAVE\020\001\022#\n\037SPAWN_GROUP_DO"
  "NT_SPAWN_ENTITIES\020\002\022!\n\035SPAWN_GROUP_SYNCH"
  "RONOUS_SPAWN\020\004\022&\n\"SPAWN_GROUP_IS_INITIAL"
  "_SPAWN_GROUP\020\010\022+\n\'SPAWN_GROUP_CREATE_CLI"
  "ENT_ONLY_ENTITIES\020\020\022\"\n\036SPAWN_GROUP_BLOCK"
  "_UNTIL_LOADED\020@\022$\n\037SPAWN_GROUP_LOAD_STRE"
  "AMING_DATA\020\200\001\022\'\n\"SPAWN_GROUP_CREATE_NEW_"
  "SCENE_WORLD\020\200\002"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_networkbasetypes_2eproto_deps[1] = {
  &::descriptor_table_network_5fconnection_2eproto,
};
static ::_pbi::once_flag descriptor_table_networkbasetypes_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_networkbasetypes_2eproto = {
    false, false, 4214, descriptor_table_protodef_networkbasetypes_2eproto,
    "networkbasetypes.proto",
    &descriptor_table_networkbasetypes_2eproto_once, descriptor_table_networkbasetypes_2eproto_deps, 1, 27,
    schemas, file_default_instances, TableStruct_networkbasetypes_2eproto::offsets,
    file_level_metadata_networkbasetypes_2eproto, file_level_enum_descriptors_networkbasetypes_2eproto,
    file_level_service_descriptors_networkbasetypes_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_networkbasetypes_2eproto_getter() {
  return &descriptor_table_networkbasetypes_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_networkbasetypes_2eproto(&descriptor_table_networkbasetypes_2eproto);
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SignonState_t_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_networkbasetypes_2eproto);
  return file_level_enum_descriptors_networkbasetypes_2eproto[0];
}
bool SignonState_t_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* NET_Messages_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_networkbasetypes_2eproto);
  return file_level_enum_descriptors_networkbasetypes_2eproto[1];
}
bool NET_Messages_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 11:
    case 12:
    case 13:
    case 15:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SpawnGroupFlags_t_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_networkbasetypes_2eproto);
  return file_level_enum_descriptors_networkbasetypes_2eproto[2];
}
bool SpawnGroupFlags_t_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 4:
    case 8:
    case 16:
    case 64:
    case 128:
    case 256:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class CMsgVector::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgVector>()._impl_._has_bits_);
  static void set_has_x(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_y(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_z(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_w(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

CMsgVector::CMsgVector(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgVector)
}
CMsgVector::CMsgVector(const CMsgVector& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgVector* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.x_){}
    , decltype(_impl_.y_){}
    , decltype(_impl_.z_){}
    , decltype(_impl_.w_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.x_, &from._impl_.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.w_) -
    reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.w_));
  // @@protoc_insertion_point(copy_constructor:CMsgVector)
}

inline void CMsgVector::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.x_){0}
    , decltype(_impl_.y_){0}
    , decltype(_impl_.z_){0}
    , decltype(_impl_.w_){0}
  };
}

CMsgVector::~CMsgVector() {
  // @@protoc_insertion_point(destructor:CMsgVector)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgVector::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgVector::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgVector::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgVector)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&_impl_.x_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.w_) -
        reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.w_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgVector::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional float x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          _Internal::set_has_x(&has_bits);
          _impl_.x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _Internal::set_has_y(&has_bits);
          _impl_.y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float z = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _Internal::set_has_z(&has_bits);
          _impl_.z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float w = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          _Internal::set_has_w(&has_bits);
          _impl_.w_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgVector::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgVector)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional float x = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(1, this->_internal_x(), target);
  }

  // optional float y = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_y(), target);
  }

  // optional float z = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_z(), target);
  }

  // optional float w = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(4, this->_internal_w(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgVector)
  return target;
}

size_t CMsgVector::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgVector)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional float x = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 4;
    }

    // optional float y = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional float z = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

    // optional float w = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgVector::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgVector::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgVector::GetClassData() const { return &_class_data_; }


void CMsgVector::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgVector*>(&to_msg);
  auto& from = static_cast<const CMsgVector&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgVector)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.x_ = from._impl_.x_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.y_ = from._impl_.y_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.z_ = from._impl_.z_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.w_ = from._impl_.w_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgVector::CopyFrom(const CMsgVector& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgVector)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgVector::IsInitialized() const {
  return true;
}

void CMsgVector::InternalSwap(CMsgVector* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgVector, _impl_.w_)
      + sizeof(CMsgVector::_impl_.w_)
      - PROTOBUF_FIELD_OFFSET(CMsgVector, _impl_.x_)>(
          reinterpret_cast<char*>(&_impl_.x_),
          reinterpret_cast<char*>(&other->_impl_.x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgVector::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_networkbasetypes_2eproto_getter, &descriptor_table_networkbasetypes_2eproto_once,
      file_level_metadata_networkbasetypes_2eproto[0]);
}

// ===================================================================

class CMsgVector2D::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgVector2D>()._impl_._has_bits_);
  static void set_has_x(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_y(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgVector2D::CMsgVector2D(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgVector2D)
}
CMsgVector2D::CMsgVector2D(const CMsgVector2D& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgVector2D* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.x_){}
    , decltype(_impl_.y_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.x_, &from._impl_.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.y_) -
    reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.y_));
  // @@protoc_insertion_point(copy_constructor:CMsgVector2D)
}

inline void CMsgVector2D::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.x_){0}
    , decltype(_impl_.y_){0}
  };
}

CMsgVector2D::~CMsgVector2D() {
  // @@protoc_insertion_point(destructor:CMsgVector2D)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgVector2D::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgVector2D::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgVector2D::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgVector2D)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.x_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.y_) -
        reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.y_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgVector2D::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional float x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          _Internal::set_has_x(&has_bits);
          _impl_.x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _Internal::set_has_y(&has_bits);
          _impl_.y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgVector2D::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgVector2D)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional float x = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(1, this->_internal_x(), target);
  }

  // optional float y = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_y(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgVector2D)
  return target;
}

size_t CMsgVector2D::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgVector2D)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional float x = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 4;
    }

    // optional float y = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgVector2D::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgVector2D::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgVector2D::GetClassData() const { return &_class_data_; }


void CMsgVector2D::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgVector2D*>(&to_msg);
  auto& from = static_cast<const CMsgVector2D&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgVector2D)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.x_ = from._impl_.x_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.y_ = from._impl_.y_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgVector2D::CopyFrom(const CMsgVector2D& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgVector2D)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgVector2D::IsInitialized() const {
  return true;
}

void CMsgVector2D::InternalSwap(CMsgVector2D* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgVector2D, _impl_.y_)
      + sizeof(CMsgVector2D::_impl_.y_)
      - PROTOBUF_FIELD_OFFSET(CMsgVector2D, _impl_.x_)>(
          reinterpret_cast<char*>(&_impl_.x_),
          reinterpret_cast<char*>(&other->_impl_.x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgVector2D::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_networkbasetypes_2eproto_getter, &descriptor_table_networkbasetypes_2eproto_once,
      file_level_metadata_networkbasetypes_2eproto[1]);
}

// ===================================================================

class CMsgQAngle::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgQAngle>()._impl_._has_bits_);
  static void set_has_x(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_y(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_z(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CMsgQAngle::CMsgQAngle(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgQAngle)
}
CMsgQAngle::CMsgQAngle(const CMsgQAngle& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgQAngle* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.x_){}
    , decltype(_impl_.y_){}
    , decltype(_impl_.z_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.x_, &from._impl_.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.z_) -
    reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.z_));
  // @@protoc_insertion_point(copy_constructor:CMsgQAngle)
}

inline void CMsgQAngle::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.x_){0}
    , decltype(_impl_.y_){0}
    , decltype(_impl_.z_){0}
  };
}

CMsgQAngle::~CMsgQAngle() {
  // @@protoc_insertion_point(destructor:CMsgQAngle)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgQAngle::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgQAngle::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgQAngle::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgQAngle)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.x_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.z_) -
        reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.z_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgQAngle::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional float x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          _Internal::set_has_x(&has_bits);
          _impl_.x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _Internal::set_has_y(&has_bits);
          _impl_.y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float z = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _Internal::set_has_z(&has_bits);
          _impl_.z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgQAngle::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgQAngle)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional float x = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(1, this->_internal_x(), target);
  }

  // optional float y = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_y(), target);
  }

  // optional float z = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_z(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgQAngle)
  return target;
}

size_t CMsgQAngle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgQAngle)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional float x = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 4;
    }

    // optional float y = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional float z = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgQAngle::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgQAngle::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgQAngle::GetClassData() const { return &_class_data_; }


void CMsgQAngle::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgQAngle*>(&to_msg);
  auto& from = static_cast<const CMsgQAngle&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgQAngle)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.x_ = from._impl_.x_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.y_ = from._impl_.y_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.z_ = from._impl_.z_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgQAngle::CopyFrom(const CMsgQAngle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgQAngle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgQAngle::IsInitialized() const {
  return true;
}

void CMsgQAngle::InternalSwap(CMsgQAngle* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgQAngle, _impl_.z_)
      + sizeof(CMsgQAngle::_impl_.z_)
      - PROTOBUF_FIELD_OFFSET(CMsgQAngle, _impl_.x_)>(
          reinterpret_cast<char*>(&_impl_.x_),
          reinterpret_cast<char*>(&other->_impl_.x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgQAngle::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_networkbasetypes_2eproto_getter, &descriptor_table_networkbasetypes_2eproto_once,
      file_level_metadata_networkbasetypes_2eproto[2]);
}

// ===================================================================

class CMsgQuaternion::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgQuaternion>()._impl_._has_bits_);
  static void set_has_x(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_y(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_z(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_w(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

CMsgQuaternion::CMsgQuaternion(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgQuaternion)
}
CMsgQuaternion::CMsgQuaternion(const CMsgQuaternion& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgQuaternion* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.x_){}
    , decltype(_impl_.y_){}
    , decltype(_impl_.z_){}
    , decltype(_impl_.w_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.x_, &from._impl_.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.w_) -
    reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.w_));
  // @@protoc_insertion_point(copy_constructor:CMsgQuaternion)
}

inline void CMsgQuaternion::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.x_){0}
    , decltype(_impl_.y_){0}
    , decltype(_impl_.z_){0}
    , decltype(_impl_.w_){0}
  };
}

CMsgQuaternion::~CMsgQuaternion() {
  // @@protoc_insertion_point(destructor:CMsgQuaternion)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgQuaternion::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgQuaternion::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgQuaternion::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgQuaternion)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&_impl_.x_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.w_) -
        reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.w_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgQuaternion::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional float x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          _Internal::set_has_x(&has_bits);
          _impl_.x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _Internal::set_has_y(&has_bits);
          _impl_.y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float z = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _Internal::set_has_z(&has_bits);
          _impl_.z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float w = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          _Internal::set_has_w(&has_bits);
          _impl_.w_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgQuaternion::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgQuaternion)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional float x = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(1, this->_internal_x(), target);
  }

  // optional float y = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_y(), target);
  }

  // optional float z = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_z(), target);
  }

  // optional float w = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(4, this->_internal_w(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgQuaternion)
  return target;
}

size_t CMsgQuaternion::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgQuaternion)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional float x = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 4;
    }

    // optional float y = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional float z = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

    // optional float w = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgQuaternion::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgQuaternion::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgQuaternion::GetClassData() const { return &_class_data_; }


void CMsgQuaternion::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgQuaternion*>(&to_msg);
  auto& from = static_cast<const CMsgQuaternion&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgQuaternion)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.x_ = from._impl_.x_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.y_ = from._impl_.y_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.z_ = from._impl_.z_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.w_ = from._impl_.w_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgQuaternion::CopyFrom(const CMsgQuaternion& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgQuaternion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgQuaternion::IsInitialized() const {
  return true;
}

void CMsgQuaternion::InternalSwap(CMsgQuaternion* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgQuaternion, _impl_.w_)
      + sizeof(CMsgQuaternion::_impl_.w_)
      - PROTOBUF_FIELD_OFFSET(CMsgQuaternion, _impl_.x_)>(
          reinterpret_cast<char*>(&_impl_.x_),
          reinterpret_cast<char*>(&other->_impl_.x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgQuaternion::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_networkbasetypes_2eproto_getter, &descriptor_table_networkbasetypes_2eproto_once,
      file_level_metadata_networkbasetypes_2eproto[3]);
}

// ===================================================================

class CMsgTransform::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgTransform>()._impl_._has_bits_);
  static const ::CMsgVector& position(const CMsgTransform* msg);
  static void set_has_position(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_scale(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::CMsgQuaternion& orientation(const CMsgTransform* msg);
  static void set_has_orientation(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::CMsgVector&
CMsgTransform::_Internal::position(const CMsgTransform* msg) {
  return *msg->_impl_.position_;
}
const ::CMsgQuaternion&
CMsgTransform::_Internal::orientation(const CMsgTransform* msg) {
  return *msg->_impl_.orientation_;
}
CMsgTransform::CMsgTransform(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgTransform)
}
CMsgTransform::CMsgTransform(const CMsgTransform& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgTransform* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.position_){nullptr}
    , decltype(_impl_.orientation_){nullptr}
    , decltype(_impl_.scale_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_position()) {
    _this->_impl_.position_ = new ::CMsgVector(*from._impl_.position_);
  }
  if (from._internal_has_orientation()) {
    _this->_impl_.orientation_ = new ::CMsgQuaternion(*from._impl_.orientation_);
  }
  _this->_impl_.scale_ = from._impl_.scale_;
  // @@protoc_insertion_point(copy_constructor:CMsgTransform)
}

inline void CMsgTransform::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.position_){nullptr}
    , decltype(_impl_.orientation_){nullptr}
    , decltype(_impl_.scale_){0}
  };
}

CMsgTransform::~CMsgTransform() {
  // @@protoc_insertion_point(destructor:CMsgTransform)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgTransform::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.position_;
  if (this != internal_default_instance()) delete _impl_.orientation_;
}

void CMsgTransform::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgTransform::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgTransform)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.position_ != nullptr);
      _impl_.position_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.orientation_ != nullptr);
      _impl_.orientation_->Clear();
    }
  }
  _impl_.scale_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgTransform::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .CMsgVector position = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_position(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float scale = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _Internal::set_has_scale(&has_bits);
          _impl_.scale_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional .CMsgQuaternion orientation = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_orientation(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgTransform::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgTransform)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .CMsgVector position = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::position(this),
        _Internal::position(this).GetCachedSize(), target, stream);
  }

  // optional float scale = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_scale(), target);
  }

  // optional .CMsgQuaternion orientation = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::orientation(this),
        _Internal::orientation(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgTransform)
  return target;
}

size_t CMsgTransform::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgTransform)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .CMsgVector position = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.position_);
    }

    // optional .CMsgQuaternion orientation = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.orientation_);
    }

    // optional float scale = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgTransform::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgTransform::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgTransform::GetClassData() const { return &_class_data_; }


void CMsgTransform::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgTransform*>(&to_msg);
  auto& from = static_cast<const CMsgTransform&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgTransform)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_position()->::CMsgVector::MergeFrom(
          from._internal_position());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_orientation()->::CMsgQuaternion::MergeFrom(
          from._internal_orientation());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.scale_ = from._impl_.scale_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgTransform::CopyFrom(const CMsgTransform& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgTransform)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgTransform::IsInitialized() const {
  return true;
}

void CMsgTransform::InternalSwap(CMsgTransform* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgTransform, _impl_.scale_)
      + sizeof(CMsgTransform::_impl_.scale_)
      - PROTOBUF_FIELD_OFFSET(CMsgTransform, _impl_.position_)>(
          reinterpret_cast<char*>(&_impl_.position_),
          reinterpret_cast<char*>(&other->_impl_.position_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgTransform::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_networkbasetypes_2eproto_getter, &descriptor_table_networkbasetypes_2eproto_once,
      file_level_metadata_networkbasetypes_2eproto[4]);
}

// ===================================================================

class CMsgRGBA::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgRGBA>()._impl_._has_bits_);
  static void set_has_r(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_g(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_b(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_a(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

CMsgRGBA::CMsgRGBA(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgRGBA)
}
CMsgRGBA::CMsgRGBA(const CMsgRGBA& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgRGBA* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.r_){}
    , decltype(_impl_.g_){}
    , decltype(_impl_.b_){}
    , decltype(_impl_.a_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.r_, &from._impl_.r_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.a_) -
    reinterpret_cast<char*>(&_impl_.r_)) + sizeof(_impl_.a_));
  // @@protoc_insertion_point(copy_constructor:CMsgRGBA)
}

inline void CMsgRGBA::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.r_){0}
    , decltype(_impl_.g_){0}
    , decltype(_impl_.b_){0}
    , decltype(_impl_.a_){0}
  };
}

CMsgRGBA::~CMsgRGBA() {
  // @@protoc_insertion_point(destructor:CMsgRGBA)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgRGBA::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgRGBA::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgRGBA::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgRGBA)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&_impl_.r_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.a_) -
        reinterpret_cast<char*>(&_impl_.r_)) + sizeof(_impl_.a_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgRGBA::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 r = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_r(&has_bits);
          _impl_.r_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 g = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_g(&has_bits);
          _impl_.g_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 b = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_b(&has_bits);
          _impl_.b_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 a = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_a(&has_bits);
          _impl_.a_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgRGBA::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgRGBA)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 r = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_r(), target);
  }

  // optional int32 g = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_g(), target);
  }

  // optional int32 b = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_b(), target);
  }

  // optional int32 a = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_a(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgRGBA)
  return target;
}

size_t CMsgRGBA::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgRGBA)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional int32 r = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_r());
    }

    // optional int32 g = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_g());
    }

    // optional int32 b = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_b());
    }

    // optional int32 a = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_a());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgRGBA::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgRGBA::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgRGBA::GetClassData() const { return &_class_data_; }


void CMsgRGBA::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgRGBA*>(&to_msg);
  auto& from = static_cast<const CMsgRGBA&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgRGBA)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.r_ = from._impl_.r_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.g_ = from._impl_.g_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.b_ = from._impl_.b_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.a_ = from._impl_.a_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgRGBA::CopyFrom(const CMsgRGBA& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgRGBA)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgRGBA::IsInitialized() const {
  return true;
}

void CMsgRGBA::InternalSwap(CMsgRGBA* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgRGBA, _impl_.a_)
      + sizeof(CMsgRGBA::_impl_.a_)
      - PROTOBUF_FIELD_OFFSET(CMsgRGBA, _impl_.r_)>(
          reinterpret_cast<char*>(&_impl_.r_),
          reinterpret_cast<char*>(&other->_impl_.r_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgRGBA::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_networkbasetypes_2eproto_getter, &descriptor_table_networkbasetypes_2eproto_once,
      file_level_metadata_networkbasetypes_2eproto[5]);
}

// ===================================================================

class CMsgPlayerInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgPlayerInfo>()._impl_._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_xuid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_userid(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_steamid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_fakeplayer(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_ishltv(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

CMsgPlayerInfo::CMsgPlayerInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgPlayerInfo)
}
CMsgPlayerInfo::CMsgPlayerInfo(const CMsgPlayerInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgPlayerInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_){}
    , decltype(_impl_.xuid_){}
    , decltype(_impl_.steamid_){}
    , decltype(_impl_.userid_){}
    , decltype(_impl_.fakeplayer_){}
    , decltype(_impl_.ishltv_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.xuid_, &from._impl_.xuid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.ishltv_) -
    reinterpret_cast<char*>(&_impl_.xuid_)) + sizeof(_impl_.ishltv_));
  // @@protoc_insertion_point(copy_constructor:CMsgPlayerInfo)
}

inline void CMsgPlayerInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_){}
    , decltype(_impl_.xuid_){uint64_t{0u}}
    , decltype(_impl_.steamid_){uint64_t{0u}}
    , decltype(_impl_.userid_){0}
    , decltype(_impl_.fakeplayer_){false}
    , decltype(_impl_.ishltv_){false}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CMsgPlayerInfo::~CMsgPlayerInfo() {
  // @@protoc_insertion_point(destructor:CMsgPlayerInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgPlayerInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
}

void CMsgPlayerInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgPlayerInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgPlayerInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.name_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000003eu) {
    ::memset(&_impl_.xuid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.ishltv_) -
        reinterpret_cast<char*>(&_impl_.xuid_)) + sizeof(_impl_.ishltv_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgPlayerInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CMsgPlayerInfo.name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional fixed64 xuid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _Internal::set_has_xuid(&has_bits);
          _impl_.xuid_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional int32 userid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_userid(&has_bits);
          _impl_.userid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional fixed64 steamid = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33)) {
          _Internal::set_has_steamid(&has_bits);
          _impl_.steamid_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional bool fakeplayer = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_fakeplayer(&has_bits);
          _impl_.fakeplayer_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool ishltv = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_ishltv(&has_bits);
          _impl_.ishltv_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgPlayerInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgPlayerInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgPlayerInfo.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // optional fixed64 xuid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed64ToArray(2, this->_internal_xuid(), target);
  }

  // optional int32 userid = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_userid(), target);
  }

  // optional fixed64 steamid = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed64ToArray(4, this->_internal_steamid(), target);
  }

  // optional bool fakeplayer = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_fakeplayer(), target);
  }

  // optional bool ishltv = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(6, this->_internal_ishltv(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgPlayerInfo)
  return target;
}

size_t CMsgPlayerInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgPlayerInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional string name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional fixed64 xuid = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional fixed64 steamid = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional int32 userid = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_userid());
    }

    // optional bool fakeplayer = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional bool ishltv = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgPlayerInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgPlayerInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgPlayerInfo::GetClassData() const { return &_class_data_; }


void CMsgPlayerInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgPlayerInfo*>(&to_msg);
  auto& from = static_cast<const CMsgPlayerInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgPlayerInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.xuid_ = from._impl_.xuid_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.steamid_ = from._impl_.steamid_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.userid_ = from._impl_.userid_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.fakeplayer_ = from._impl_.fakeplayer_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.ishltv_ = from._impl_.ishltv_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgPlayerInfo::CopyFrom(const CMsgPlayerInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgPlayerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgPlayerInfo::IsInitialized() const {
  return true;
}

void CMsgPlayerInfo::InternalSwap(CMsgPlayerInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgPlayerInfo, _impl_.ishltv_)
      + sizeof(CMsgPlayerInfo::_impl_.ishltv_)
      - PROTOBUF_FIELD_OFFSET(CMsgPlayerInfo, _impl_.xuid_)>(
          reinterpret_cast<char*>(&_impl_.xuid_),
          reinterpret_cast<char*>(&other->_impl_.xuid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgPlayerInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_networkbasetypes_2eproto_getter, &descriptor_table_networkbasetypes_2eproto_once,
      file_level_metadata_networkbasetypes_2eproto[6]);
}

// ===================================================================

class CEntityMsg::_Internal {
 public:
  using HasBits = decltype(std::declval<CEntityMsg>()._impl_._has_bits_);
  static void set_has_target_entity(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CEntityMsg::CEntityMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CEntityMsg)
}
CEntityMsg::CEntityMsg(const CEntityMsg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CEntityMsg* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.target_entity_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.target_entity_ = from._impl_.target_entity_;
  // @@protoc_insertion_point(copy_constructor:CEntityMsg)
}

inline void CEntityMsg::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.target_entity_){16777215u}
  };
}

CEntityMsg::~CEntityMsg() {
  // @@protoc_insertion_point(destructor:CEntityMsg)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CEntityMsg::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CEntityMsg::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CEntityMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:CEntityMsg)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.target_entity_ = 16777215u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CEntityMsg::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 target_entity = 1 [default = 16777215];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_target_entity(&has_bits);
          _impl_.target_entity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CEntityMsg::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CEntityMsg)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 target_entity = 1 [default = 16777215];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_target_entity(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CEntityMsg)
  return target;
}

size_t CEntityMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CEntityMsg)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 target_entity = 1 [default = 16777215];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_target_entity());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CEntityMsg::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CEntityMsg::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CEntityMsg::GetClassData() const { return &_class_data_; }


void CEntityMsg::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CEntityMsg*>(&to_msg);
  auto& from = static_cast<const CEntityMsg&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CEntityMsg)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_target_entity()) {
    _this->_internal_set_target_entity(from._internal_target_entity());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CEntityMsg::CopyFrom(const CEntityMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CEntityMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CEntityMsg::IsInitialized() const {
  return true;
}

void CEntityMsg::InternalSwap(CEntityMsg* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.target_entity_, other->_impl_.target_entity_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CEntityMsg::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_networkbasetypes_2eproto_getter, &descriptor_table_networkbasetypes_2eproto_once,
      file_level_metadata_networkbasetypes_2eproto[7]);
}

// ===================================================================

class CMsg_CVars_CVar::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsg_CVars_CVar>()._impl_._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsg_CVars_CVar::CMsg_CVars_CVar(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsg_CVars.CVar)
}
CMsg_CVars_CVar::CMsg_CVars_CVar(const CMsg_CVars_CVar& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsg_CVars_CVar* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_){}
    , decltype(_impl_.value_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.value_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.value_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_value()) {
    _this->_impl_.value_.Set(from._internal_value(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:CMsg_CVars.CVar)
}

inline void CMsg_CVars_CVar::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_){}
    , decltype(_impl_.value_){}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.value_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.value_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CMsg_CVars_CVar::~CMsg_CVars_CVar() {
  // @@protoc_insertion_point(destructor:CMsg_CVars.CVar)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsg_CVars_CVar::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
  _impl_.value_.Destroy();
}

void CMsg_CVars_CVar::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsg_CVars_CVar::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsg_CVars.CVar)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.value_.ClearNonDefaultToEmpty();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsg_CVars_CVar::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CMsg_CVars.CVar.name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_value();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CMsg_CVars.CVar.value");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsg_CVars_CVar::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsg_CVars.CVar)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsg_CVars.CVar.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // optional string value = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_value().data(), static_cast<int>(this->_internal_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsg_CVars.CVar.value");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsg_CVars.CVar)
  return target;
}

size_t CMsg_CVars_CVar::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsg_CVars.CVar)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional string value = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_value());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsg_CVars_CVar::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsg_CVars_CVar::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsg_CVars_CVar::GetClassData() const { return &_class_data_; }


void CMsg_CVars_CVar::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsg_CVars_CVar*>(&to_msg);
  auto& from = static_cast<const CMsg_CVars_CVar&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsg_CVars.CVar)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_value(from._internal_value());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsg_CVars_CVar::CopyFrom(const CMsg_CVars_CVar& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsg_CVars.CVar)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsg_CVars_CVar::IsInitialized() const {
  return true;
}

void CMsg_CVars_CVar::InternalSwap(CMsg_CVars_CVar* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.value_, lhs_arena,
      &other->_impl_.value_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsg_CVars_CVar::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_networkbasetypes_2eproto_getter, &descriptor_table_networkbasetypes_2eproto_once,
      file_level_metadata_networkbasetypes_2eproto[8]);
}

// ===================================================================

class CMsg_CVars::_Internal {
 public:
};

CMsg_CVars::CMsg_CVars(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsg_CVars)
}
CMsg_CVars::CMsg_CVars(const CMsg_CVars& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsg_CVars* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.cvars_){from._impl_.cvars_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsg_CVars)
}

inline void CMsg_CVars::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.cvars_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CMsg_CVars::~CMsg_CVars() {
  // @@protoc_insertion_point(destructor:CMsg_CVars)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsg_CVars::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.cvars_.~RepeatedPtrField();
}

void CMsg_CVars::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsg_CVars::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsg_CVars)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.cvars_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsg_CVars::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .CMsg_CVars.CVar cvars = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_cvars(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsg_CVars::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsg_CVars)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CMsg_CVars.CVar cvars = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_cvars_size()); i < n; i++) {
    const auto& repfield = this->_internal_cvars(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsg_CVars)
  return target;
}

size_t CMsg_CVars::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsg_CVars)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsg_CVars.CVar cvars = 1;
  total_size += 1UL * this->_internal_cvars_size();
  for (const auto& msg : this->_impl_.cvars_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsg_CVars::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsg_CVars::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsg_CVars::GetClassData() const { return &_class_data_; }


void CMsg_CVars::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsg_CVars*>(&to_msg);
  auto& from = static_cast<const CMsg_CVars&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsg_CVars)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.cvars_.MergeFrom(from._impl_.cvars_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsg_CVars::CopyFrom(const CMsg_CVars& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsg_CVars)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsg_CVars::IsInitialized() const {
  return true;
}

void CMsg_CVars::InternalSwap(CMsg_CVars* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.cvars_.InternalSwap(&other->_impl_.cvars_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsg_CVars::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_networkbasetypes_2eproto_getter, &descriptor_table_networkbasetypes_2eproto_once,
      file_level_metadata_networkbasetypes_2eproto[9]);
}

// ===================================================================

class CNETMsg_NOP::_Internal {
 public:
};

CNETMsg_NOP::CNETMsg_NOP(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:CNETMsg_NOP)
}
CNETMsg_NOP::CNETMsg_NOP(const CNETMsg_NOP& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  CNETMsg_NOP* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CNETMsg_NOP)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CNETMsg_NOP::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CNETMsg_NOP::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata CNETMsg_NOP::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_networkbasetypes_2eproto_getter, &descriptor_table_networkbasetypes_2eproto_once,
      file_level_metadata_networkbasetypes_2eproto[10]);
}

// ===================================================================

class CNETMsg_SplitScreenUser::_Internal {
 public:
  using HasBits = decltype(std::declval<CNETMsg_SplitScreenUser>()._impl_._has_bits_);
  static void set_has_slot(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CNETMsg_SplitScreenUser::CNETMsg_SplitScreenUser(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CNETMsg_SplitScreenUser)
}
CNETMsg_SplitScreenUser::CNETMsg_SplitScreenUser(const CNETMsg_SplitScreenUser& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CNETMsg_SplitScreenUser* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.slot_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.slot_ = from._impl_.slot_;
  // @@protoc_insertion_point(copy_constructor:CNETMsg_SplitScreenUser)
}

inline void CNETMsg_SplitScreenUser::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.slot_){0}
  };
}

CNETMsg_SplitScreenUser::~CNETMsg_SplitScreenUser() {
  // @@protoc_insertion_point(destructor:CNETMsg_SplitScreenUser)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CNETMsg_SplitScreenUser::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CNETMsg_SplitScreenUser::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CNETMsg_SplitScreenUser::Clear() {
// @@protoc_insertion_point(message_clear_start:CNETMsg_SplitScreenUser)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.slot_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CNETMsg_SplitScreenUser::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 slot = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_slot(&has_bits);
          _impl_.slot_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CNETMsg_SplitScreenUser::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CNETMsg_SplitScreenUser)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 slot = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_slot(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CNETMsg_SplitScreenUser)
  return target;
}

size_t CNETMsg_SplitScreenUser::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CNETMsg_SplitScreenUser)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int32 slot = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_slot());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CNETMsg_SplitScreenUser::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CNETMsg_SplitScreenUser::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CNETMsg_SplitScreenUser::GetClassData() const { return &_class_data_; }


void CNETMsg_SplitScreenUser::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CNETMsg_SplitScreenUser*>(&to_msg);
  auto& from = static_cast<const CNETMsg_SplitScreenUser&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CNETMsg_SplitScreenUser)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_slot()) {
    _this->_internal_set_slot(from._internal_slot());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CNETMsg_SplitScreenUser::CopyFrom(const CNETMsg_SplitScreenUser& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CNETMsg_SplitScreenUser)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CNETMsg_SplitScreenUser::IsInitialized() const {
  return true;
}

void CNETMsg_SplitScreenUser::InternalSwap(CNETMsg_SplitScreenUser* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.slot_, other->_impl_.slot_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CNETMsg_SplitScreenUser::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_networkbasetypes_2eproto_getter, &descriptor_table_networkbasetypes_2eproto_once,
      file_level_metadata_networkbasetypes_2eproto[11]);
}

// ===================================================================

class CNETMsg_Tick::_Internal {
 public:
  using HasBits = decltype(std::declval<CNETMsg_Tick>()._impl_._has_bits_);
  static void set_has_tick(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_host_computationtime(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_host_computationtime_std_deviation(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_legacy_host_loss(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_host_unfiltered_frametime(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_hltv_replay_flags(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_expected_long_tick(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_expected_long_tick_reason(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_host_frame_dropped_pct_x10(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_host_frame_irregular_arrival_pct_x10(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
};

CNETMsg_Tick::CNETMsg_Tick(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CNETMsg_Tick)
}
CNETMsg_Tick::CNETMsg_Tick(const CNETMsg_Tick& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CNETMsg_Tick* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.expected_long_tick_reason_){}
    , decltype(_impl_.tick_){}
    , decltype(_impl_.host_computationtime_){}
    , decltype(_impl_.host_computationtime_std_deviation_){}
    , decltype(_impl_.legacy_host_loss_){}
    , decltype(_impl_.host_unfiltered_frametime_){}
    , decltype(_impl_.hltv_replay_flags_){}
    , decltype(_impl_.expected_long_tick_){}
    , decltype(_impl_.host_frame_dropped_pct_x10_){}
    , decltype(_impl_.host_frame_irregular_arrival_pct_x10_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.expected_long_tick_reason_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.expected_long_tick_reason_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_expected_long_tick_reason()) {
    _this->_impl_.expected_long_tick_reason_.Set(from._internal_expected_long_tick_reason(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.tick_, &from._impl_.tick_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.host_frame_irregular_arrival_pct_x10_) -
    reinterpret_cast<char*>(&_impl_.tick_)) + sizeof(_impl_.host_frame_irregular_arrival_pct_x10_));
  // @@protoc_insertion_point(copy_constructor:CNETMsg_Tick)
}

inline void CNETMsg_Tick::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.expected_long_tick_reason_){}
    , decltype(_impl_.tick_){0u}
    , decltype(_impl_.host_computationtime_){0u}
    , decltype(_impl_.host_computationtime_std_deviation_){0u}
    , decltype(_impl_.legacy_host_loss_){0u}
    , decltype(_impl_.host_unfiltered_frametime_){0u}
    , decltype(_impl_.hltv_replay_flags_){0u}
    , decltype(_impl_.expected_long_tick_){0u}
    , decltype(_impl_.host_frame_dropped_pct_x10_){0u}
    , decltype(_impl_.host_frame_irregular_arrival_pct_x10_){0u}
  };
  _impl_.expected_long_tick_reason_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.expected_long_tick_reason_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CNETMsg_Tick::~CNETMsg_Tick() {
  // @@protoc_insertion_point(destructor:CNETMsg_Tick)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CNETMsg_Tick::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.expected_long_tick_reason_.Destroy();
}

void CNETMsg_Tick::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CNETMsg_Tick::Clear() {
// @@protoc_insertion_point(message_clear_start:CNETMsg_Tick)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.expected_long_tick_reason_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&_impl_.tick_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.expected_long_tick_) -
        reinterpret_cast<char*>(&_impl_.tick_)) + sizeof(_impl_.expected_long_tick_));
  }
  if (cached_has_bits & 0x00000300u) {
    ::memset(&_impl_.host_frame_dropped_pct_x10_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.host_frame_irregular_arrival_pct_x10_) -
        reinterpret_cast<char*>(&_impl_.host_frame_dropped_pct_x10_)) + sizeof(_impl_.host_frame_irregular_arrival_pct_x10_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CNETMsg_Tick::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 tick = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_tick(&has_bits);
          _impl_.tick_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 host_computationtime = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_host_computationtime(&has_bits);
          _impl_.host_computationtime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 host_computationtime_std_deviation = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_host_computationtime_std_deviation(&has_bits);
          _impl_.host_computationtime_std_deviation_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 legacy_host_loss = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_legacy_host_loss(&has_bits);
          _impl_.legacy_host_loss_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 host_unfiltered_frametime = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_host_unfiltered_frametime(&has_bits);
          _impl_.host_unfiltered_frametime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 hltv_replay_flags = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_hltv_replay_flags(&has_bits);
          _impl_.hltv_replay_flags_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 expected_long_tick = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_expected_long_tick(&has_bits);
          _impl_.expected_long_tick_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string expected_long_tick_reason = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          auto str = _internal_mutable_expected_long_tick_reason();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CNETMsg_Tick.expected_long_tick_reason");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional uint32 host_frame_dropped_pct_x10 = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _Internal::set_has_host_frame_dropped_pct_x10(&has_bits);
          _impl_.host_frame_dropped_pct_x10_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 host_frame_irregular_arrival_pct_x10 = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _Internal::set_has_host_frame_irregular_arrival_pct_x10(&has_bits);
          _impl_.host_frame_irregular_arrival_pct_x10_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CNETMsg_Tick::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CNETMsg_Tick)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 tick = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_tick(), target);
  }

  // optional uint32 host_computationtime = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_host_computationtime(), target);
  }

  // optional uint32 host_computationtime_std_deviation = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_host_computationtime_std_deviation(), target);
  }

  // optional uint32 legacy_host_loss = 7;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(7, this->_internal_legacy_host_loss(), target);
  }

  // optional uint32 host_unfiltered_frametime = 8;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(8, this->_internal_host_unfiltered_frametime(), target);
  }

  // optional uint32 hltv_replay_flags = 9;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(9, this->_internal_hltv_replay_flags(), target);
  }

  // optional uint32 expected_long_tick = 10;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(10, this->_internal_expected_long_tick(), target);
  }

  // optional string expected_long_tick_reason = 11;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_expected_long_tick_reason().data(), static_cast<int>(this->_internal_expected_long_tick_reason().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CNETMsg_Tick.expected_long_tick_reason");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_expected_long_tick_reason(), target);
  }

  // optional uint32 host_frame_dropped_pct_x10 = 12;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(12, this->_internal_host_frame_dropped_pct_x10(), target);
  }

  // optional uint32 host_frame_irregular_arrival_pct_x10 = 13;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(13, this->_internal_host_frame_irregular_arrival_pct_x10(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CNETMsg_Tick)
  return target;
}

size_t CNETMsg_Tick::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CNETMsg_Tick)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string expected_long_tick_reason = 11;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_expected_long_tick_reason());
    }

    // optional uint32 tick = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_tick());
    }

    // optional uint32 host_computationtime = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_host_computationtime());
    }

    // optional uint32 host_computationtime_std_deviation = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_host_computationtime_std_deviation());
    }

    // optional uint32 legacy_host_loss = 7;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_legacy_host_loss());
    }

    // optional uint32 host_unfiltered_frametime = 8;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_host_unfiltered_frametime());
    }

    // optional uint32 hltv_replay_flags = 9;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_hltv_replay_flags());
    }

    // optional uint32 expected_long_tick = 10;
    if (cached_has_bits & 0x00000080u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_expected_long_tick());
    }

  }
  if (cached_has_bits & 0x00000300u) {
    // optional uint32 host_frame_dropped_pct_x10 = 12;
    if (cached_has_bits & 0x00000100u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_host_frame_dropped_pct_x10());
    }

    // optional uint32 host_frame_irregular_arrival_pct_x10 = 13;
    if (cached_has_bits & 0x00000200u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_host_frame_irregular_arrival_pct_x10());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CNETMsg_Tick::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CNETMsg_Tick::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CNETMsg_Tick::GetClassData() const { return &_class_data_; }


void CNETMsg_Tick::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CNETMsg_Tick*>(&to_msg);
  auto& from = static_cast<const CNETMsg_Tick&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CNETMsg_Tick)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_expected_long_tick_reason(from._internal_expected_long_tick_reason());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.tick_ = from._impl_.tick_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.host_computationtime_ = from._impl_.host_computationtime_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.host_computationtime_std_deviation_ = from._impl_.host_computationtime_std_deviation_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.legacy_host_loss_ = from._impl_.legacy_host_loss_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.host_unfiltered_frametime_ = from._impl_.host_unfiltered_frametime_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.hltv_replay_flags_ = from._impl_.hltv_replay_flags_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.expected_long_tick_ = from._impl_.expected_long_tick_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.host_frame_dropped_pct_x10_ = from._impl_.host_frame_dropped_pct_x10_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.host_frame_irregular_arrival_pct_x10_ = from._impl_.host_frame_irregular_arrival_pct_x10_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CNETMsg_Tick::CopyFrom(const CNETMsg_Tick& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CNETMsg_Tick)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CNETMsg_Tick::IsInitialized() const {
  return true;
}

void CNETMsg_Tick::InternalSwap(CNETMsg_Tick* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.expected_long_tick_reason_, lhs_arena,
      &other->_impl_.expected_long_tick_reason_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CNETMsg_Tick, _impl_.host_frame_irregular_arrival_pct_x10_)
      + sizeof(CNETMsg_Tick::_impl_.host_frame_irregular_arrival_pct_x10_)
      - PROTOBUF_FIELD_OFFSET(CNETMsg_Tick, _impl_.tick_)>(
          reinterpret_cast<char*>(&_impl_.tick_),
          reinterpret_cast<char*>(&other->_impl_.tick_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CNETMsg_Tick::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_networkbasetypes_2eproto_getter, &descriptor_table_networkbasetypes_2eproto_once,
      file_level_metadata_networkbasetypes_2eproto[12]);
}

// ===================================================================

class CNETMsg_StringCmd::_Internal {
 public:
  using HasBits = decltype(std::declval<CNETMsg_StringCmd>()._impl_._has_bits_);
  static void set_has_command(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_prediction_sync(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CNETMsg_StringCmd::CNETMsg_StringCmd(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CNETMsg_StringCmd)
}
CNETMsg_StringCmd::CNETMsg_StringCmd(const CNETMsg_StringCmd& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CNETMsg_StringCmd* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.command_){}
    , decltype(_impl_.prediction_sync_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.command_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.command_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_command()) {
    _this->_impl_.command_.Set(from._internal_command(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.prediction_sync_ = from._impl_.prediction_sync_;
  // @@protoc_insertion_point(copy_constructor:CNETMsg_StringCmd)
}

inline void CNETMsg_StringCmd::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.command_){}
    , decltype(_impl_.prediction_sync_){0u}
  };
  _impl_.command_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.command_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CNETMsg_StringCmd::~CNETMsg_StringCmd() {
  // @@protoc_insertion_point(destructor:CNETMsg_StringCmd)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CNETMsg_StringCmd::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.command_.Destroy();
}

void CNETMsg_StringCmd::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CNETMsg_StringCmd::Clear() {
// @@protoc_insertion_point(message_clear_start:CNETMsg_StringCmd)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.command_.ClearNonDefaultToEmpty();
  }
  _impl_.prediction_sync_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CNETMsg_StringCmd::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string command = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_command();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CNETMsg_StringCmd.command");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional uint32 prediction_sync = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_prediction_sync(&has_bits);
          _impl_.prediction_sync_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CNETMsg_StringCmd::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CNETMsg_StringCmd)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string command = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_command().data(), static_cast<int>(this->_internal_command().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CNETMsg_StringCmd.command");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_command(), target);
  }

  // optional uint32 prediction_sync = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_prediction_sync(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CNETMsg_StringCmd)
  return target;
}

size_t CNETMsg_StringCmd::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CNETMsg_StringCmd)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string command = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_command());
    }

    // optional uint32 prediction_sync = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_prediction_sync());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CNETMsg_StringCmd::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CNETMsg_StringCmd::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CNETMsg_StringCmd::GetClassData() const { return &_class_data_; }


void CNETMsg_StringCmd::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CNETMsg_StringCmd*>(&to_msg);
  auto& from = static_cast<const CNETMsg_StringCmd&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CNETMsg_StringCmd)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_command(from._internal_command());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.prediction_sync_ = from._impl_.prediction_sync_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CNETMsg_StringCmd::CopyFrom(const CNETMsg_StringCmd& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CNETMsg_StringCmd)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CNETMsg_StringCmd::IsInitialized() const {
  return true;
}

void CNETMsg_StringCmd::InternalSwap(CNETMsg_StringCmd* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.command_, lhs_arena,
      &other->_impl_.command_, rhs_arena
  );
  swap(_impl_.prediction_sync_, other->_impl_.prediction_sync_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CNETMsg_StringCmd::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_networkbasetypes_2eproto_getter, &descriptor_table_networkbasetypes_2eproto_once,
      file_level_metadata_networkbasetypes_2eproto[13]);
}

// ===================================================================

class CNETMsg_SetConVar::_Internal {
 public:
  using HasBits = decltype(std::declval<CNETMsg_SetConVar>()._impl_._has_bits_);
  static const ::CMsg_CVars& convars(const CNETMsg_SetConVar* msg);
  static void set_has_convars(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::CMsg_CVars&
CNETMsg_SetConVar::_Internal::convars(const CNETMsg_SetConVar* msg) {
  return *msg->_impl_.convars_;
}
CNETMsg_SetConVar::CNETMsg_SetConVar(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CNETMsg_SetConVar)
}
CNETMsg_SetConVar::CNETMsg_SetConVar(const CNETMsg_SetConVar& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CNETMsg_SetConVar* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.convars_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_convars()) {
    _this->_impl_.convars_ = new ::CMsg_CVars(*from._impl_.convars_);
  }
  // @@protoc_insertion_point(copy_constructor:CNETMsg_SetConVar)
}

inline void CNETMsg_SetConVar::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.convars_){nullptr}
  };
}

CNETMsg_SetConVar::~CNETMsg_SetConVar() {
  // @@protoc_insertion_point(destructor:CNETMsg_SetConVar)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CNETMsg_SetConVar::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.convars_;
}

void CNETMsg_SetConVar::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CNETMsg_SetConVar::Clear() {
// @@protoc_insertion_point(message_clear_start:CNETMsg_SetConVar)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.convars_ != nullptr);
    _impl_.convars_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CNETMsg_SetConVar::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .CMsg_CVars convars = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_convars(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CNETMsg_SetConVar::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CNETMsg_SetConVar)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .CMsg_CVars convars = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::convars(this),
        _Internal::convars(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CNETMsg_SetConVar)
  return target;
}

size_t CNETMsg_SetConVar::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CNETMsg_SetConVar)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .CMsg_CVars convars = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.convars_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CNETMsg_SetConVar::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CNETMsg_SetConVar::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CNETMsg_SetConVar::GetClassData() const { return &_class_data_; }


void CNETMsg_SetConVar::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CNETMsg_SetConVar*>(&to_msg);
  auto& from = static_cast<const CNETMsg_SetConVar&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CNETMsg_SetConVar)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_convars()) {
    _this->_internal_mutable_convars()->::CMsg_CVars::MergeFrom(
        from._internal_convars());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CNETMsg_SetConVar::CopyFrom(const CNETMsg_SetConVar& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CNETMsg_SetConVar)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CNETMsg_SetConVar::IsInitialized() const {
  return true;
}

void CNETMsg_SetConVar::InternalSwap(CNETMsg_SetConVar* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.convars_, other->_impl_.convars_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CNETMsg_SetConVar::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_networkbasetypes_2eproto_getter, &descriptor_table_networkbasetypes_2eproto_once,
      file_level_metadata_networkbasetypes_2eproto[14]);
}

// ===================================================================

class CNETMsg_SignonState::_Internal {
 public:
  using HasBits = decltype(std::declval<CNETMsg_SignonState>()._impl_._has_bits_);
  static void set_has_signon_state(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_spawn_count(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_num_server_players(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_map_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_addons(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CNETMsg_SignonState::CNETMsg_SignonState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CNETMsg_SignonState)
}
CNETMsg_SignonState::CNETMsg_SignonState(const CNETMsg_SignonState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CNETMsg_SignonState* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.players_networkids_){from._impl_.players_networkids_}
    , decltype(_impl_.map_name_){}
    , decltype(_impl_.addons_){}
    , decltype(_impl_.signon_state_){}
    , decltype(_impl_.spawn_count_){}
    , decltype(_impl_.num_server_players_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.map_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.map_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_map_name()) {
    _this->_impl_.map_name_.Set(from._internal_map_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.addons_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.addons_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_addons()) {
    _this->_impl_.addons_.Set(from._internal_addons(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.signon_state_, &from._impl_.signon_state_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.num_server_players_) -
    reinterpret_cast<char*>(&_impl_.signon_state_)) + sizeof(_impl_.num_server_players_));
  // @@protoc_insertion_point(copy_constructor:CNETMsg_SignonState)
}

inline void CNETMsg_SignonState::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.players_networkids_){arena}
    , decltype(_impl_.map_name_){}
    , decltype(_impl_.addons_){}
    , decltype(_impl_.signon_state_){0}
    , decltype(_impl_.spawn_count_){0u}
    , decltype(_impl_.num_server_players_){0u}
  };
  _impl_.map_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.map_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.addons_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.addons_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CNETMsg_SignonState::~CNETMsg_SignonState() {
  // @@protoc_insertion_point(destructor:CNETMsg_SignonState)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CNETMsg_SignonState::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.players_networkids_.~RepeatedPtrField();
  _impl_.map_name_.Destroy();
  _impl_.addons_.Destroy();
}

void CNETMsg_SignonState::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CNETMsg_SignonState::Clear() {
// @@protoc_insertion_point(message_clear_start:CNETMsg_SignonState)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.players_networkids_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.map_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.addons_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000001cu) {
    ::memset(&_impl_.signon_state_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.num_server_players_) -
        reinterpret_cast<char*>(&_impl_.signon_state_)) + sizeof(_impl_.num_server_players_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CNETMsg_SignonState::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .SignonState_t signon_state = 1 [default = SIGNONSTATE_NONE];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::SignonState_t_IsValid(val))) {
            _internal_set_signon_state(static_cast<::SignonState_t>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional uint32 spawn_count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_spawn_count(&has_bits);
          _impl_.spawn_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 num_server_players = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_num_server_players(&has_bits);
          _impl_.num_server_players_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string players_networkids = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_players_networkids();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            #ifndef NDEBUG
            ::_pbi::VerifyUTF8(str, "CNETMsg_SignonState.players_networkids");
            #endif  // !NDEBUG
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional string map_name = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_map_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CNETMsg_SignonState.map_name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string addons = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_addons();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CNETMsg_SignonState.addons");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CNETMsg_SignonState::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CNETMsg_SignonState)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .SignonState_t signon_state = 1 [default = SIGNONSTATE_NONE];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_signon_state(), target);
  }

  // optional uint32 spawn_count = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_spawn_count(), target);
  }

  // optional uint32 num_server_players = 3;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_num_server_players(), target);
  }

  // repeated string players_networkids = 4;
  for (int i = 0, n = this->_internal_players_networkids_size(); i < n; i++) {
    const auto& s = this->_internal_players_networkids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CNETMsg_SignonState.players_networkids");
    target = stream->WriteString(4, s, target);
  }

  // optional string map_name = 5;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_map_name().data(), static_cast<int>(this->_internal_map_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CNETMsg_SignonState.map_name");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_map_name(), target);
  }

  // optional string addons = 6;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_addons().data(), static_cast<int>(this->_internal_addons().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CNETMsg_SignonState.addons");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_addons(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CNETMsg_SignonState)
  return target;
}

size_t CNETMsg_SignonState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CNETMsg_SignonState)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string players_networkids = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.players_networkids_.size());
  for (int i = 0, n = _impl_.players_networkids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.players_networkids_.Get(i));
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string map_name = 5;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_map_name());
    }

    // optional string addons = 6;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_addons());
    }

    // optional .SignonState_t signon_state = 1 [default = SIGNONSTATE_NONE];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_signon_state());
    }

    // optional uint32 spawn_count = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_spawn_count());
    }

    // optional uint32 num_server_players = 3;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_num_server_players());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CNETMsg_SignonState::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CNETMsg_SignonState::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CNETMsg_SignonState::GetClassData() const { return &_class_data_; }


void CNETMsg_SignonState::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CNETMsg_SignonState*>(&to_msg);
  auto& from = static_cast<const CNETMsg_SignonState&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CNETMsg_SignonState)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.players_networkids_.MergeFrom(from._impl_.players_networkids_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_map_name(from._internal_map_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_addons(from._internal_addons());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.signon_state_ = from._impl_.signon_state_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.spawn_count_ = from._impl_.spawn_count_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.num_server_players_ = from._impl_.num_server_players_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CNETMsg_SignonState::CopyFrom(const CNETMsg_SignonState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CNETMsg_SignonState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CNETMsg_SignonState::IsInitialized() const {
  return true;
}

void CNETMsg_SignonState::InternalSwap(CNETMsg_SignonState* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.players_networkids_.InternalSwap(&other->_impl_.players_networkids_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.map_name_, lhs_arena,
      &other->_impl_.map_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.addons_, lhs_arena,
      &other->_impl_.addons_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CNETMsg_SignonState, _impl_.num_server_players_)
      + sizeof(CNETMsg_SignonState::_impl_.num_server_players_)
      - PROTOBUF_FIELD_OFFSET(CNETMsg_SignonState, _impl_.signon_state_)>(
          reinterpret_cast<char*>(&_impl_.signon_state_),
          reinterpret_cast<char*>(&other->_impl_.signon_state_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CNETMsg_SignonState::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_networkbasetypes_2eproto_getter, &descriptor_table_networkbasetypes_2eproto_once,
      file_level_metadata_networkbasetypes_2eproto[15]);
}

// ===================================================================

class CSVCMsg_GameEvent_key_t::_Internal {
 public:
  using HasBits = decltype(std::declval<CSVCMsg_GameEvent_key_t>()._impl_._has_bits_);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_val_string(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_val_float(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_val_long(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_val_short(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_val_byte(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_val_bool(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_val_uint64(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
};

CSVCMsg_GameEvent_key_t::CSVCMsg_GameEvent_key_t(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CSVCMsg_GameEvent.key_t)
}
CSVCMsg_GameEvent_key_t::CSVCMsg_GameEvent_key_t(const CSVCMsg_GameEvent_key_t& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CSVCMsg_GameEvent_key_t* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.val_string_){}
    , decltype(_impl_.type_){}
    , decltype(_impl_.val_float_){}
    , decltype(_impl_.val_long_){}
    , decltype(_impl_.val_short_){}
    , decltype(_impl_.val_byte_){}
    , decltype(_impl_.val_bool_){}
    , decltype(_impl_.val_uint64_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.val_string_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.val_string_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_val_string()) {
    _this->_impl_.val_string_.Set(from._internal_val_string(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.type_, &from._impl_.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.val_uint64_) -
    reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.val_uint64_));
  // @@protoc_insertion_point(copy_constructor:CSVCMsg_GameEvent.key_t)
}

inline void CSVCMsg_GameEvent_key_t::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.val_string_){}
    , decltype(_impl_.type_){0}
    , decltype(_impl_.val_float_){0}
    , decltype(_impl_.val_long_){0}
    , decltype(_impl_.val_short_){0}
    , decltype(_impl_.val_byte_){0}
    , decltype(_impl_.val_bool_){false}
    , decltype(_impl_.val_uint64_){uint64_t{0u}}
  };
  _impl_.val_string_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.val_string_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CSVCMsg_GameEvent_key_t::~CSVCMsg_GameEvent_key_t() {
  // @@protoc_insertion_point(destructor:CSVCMsg_GameEvent.key_t)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CSVCMsg_GameEvent_key_t::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.val_string_.Destroy();
}

void CSVCMsg_GameEvent_key_t::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CSVCMsg_GameEvent_key_t::Clear() {
// @@protoc_insertion_point(message_clear_start:CSVCMsg_GameEvent.key_t)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.val_string_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&_impl_.type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.val_uint64_) -
        reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.val_uint64_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSVCMsg_GameEvent_key_t::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_type(&has_bits);
          _impl_.type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string val_string = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_val_string();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CSVCMsg_GameEvent.key_t.val_string");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional float val_float = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _Internal::set_has_val_float(&has_bits);
          _impl_.val_float_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional int32 val_long = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_val_long(&has_bits);
          _impl_.val_long_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 val_short = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_val_short(&has_bits);
          _impl_.val_short_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 val_byte = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_val_byte(&has_bits);
          _impl_.val_byte_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool val_bool = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_val_bool(&has_bits);
          _impl_.val_bool_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 val_uint64 = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_val_uint64(&has_bits);
          _impl_.val_uint64_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CSVCMsg_GameEvent_key_t::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSVCMsg_GameEvent.key_t)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 type = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_type(), target);
  }

  // optional string val_string = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_val_string().data(), static_cast<int>(this->_internal_val_string().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CSVCMsg_GameEvent.key_t.val_string");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_val_string(), target);
  }

  // optional float val_float = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_val_float(), target);
  }

  // optional int32 val_long = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_val_long(), target);
  }

  // optional int32 val_short = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_val_short(), target);
  }

  // optional int32 val_byte = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(6, this->_internal_val_byte(), target);
  }

  // optional bool val_bool = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(7, this->_internal_val_bool(), target);
  }

  // optional uint64 val_uint64 = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(8, this->_internal_val_uint64(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSVCMsg_GameEvent.key_t)
  return target;
}

size_t CSVCMsg_GameEvent_key_t::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSVCMsg_GameEvent.key_t)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string val_string = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_val_string());
    }

    // optional int32 type = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_type());
    }

    // optional float val_float = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

    // optional int32 val_long = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_val_long());
    }

    // optional int32 val_short = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_val_short());
    }

    // optional int32 val_byte = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_val_byte());
    }

    // optional bool val_bool = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

    // optional uint64 val_uint64 = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_val_uint64());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CSVCMsg_GameEvent_key_t::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CSVCMsg_GameEvent_key_t::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CSVCMsg_GameEvent_key_t::GetClassData() const { return &_class_data_; }


void CSVCMsg_GameEvent_key_t::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CSVCMsg_GameEvent_key_t*>(&to_msg);
  auto& from = static_cast<const CSVCMsg_GameEvent_key_t&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CSVCMsg_GameEvent.key_t)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_val_string(from._internal_val_string());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.type_ = from._impl_.type_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.val_float_ = from._impl_.val_float_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.val_long_ = from._impl_.val_long_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.val_short_ = from._impl_.val_short_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.val_byte_ = from._impl_.val_byte_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.val_bool_ = from._impl_.val_bool_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.val_uint64_ = from._impl_.val_uint64_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CSVCMsg_GameEvent_key_t::CopyFrom(const CSVCMsg_GameEvent_key_t& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSVCMsg_GameEvent.key_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSVCMsg_GameEvent_key_t::IsInitialized() const {
  return true;
}

void CSVCMsg_GameEvent_key_t::InternalSwap(CSVCMsg_GameEvent_key_t* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.val_string_, lhs_arena,
      &other->_impl_.val_string_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CSVCMsg_GameEvent_key_t, _impl_.val_uint64_)
      + sizeof(CSVCMsg_GameEvent_key_t::_impl_.val_uint64_)
      - PROTOBUF_FIELD_OFFSET(CSVCMsg_GameEvent_key_t, _impl_.type_)>(
          reinterpret_cast<char*>(&_impl_.type_),
          reinterpret_cast<char*>(&other->_impl_.type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CSVCMsg_GameEvent_key_t::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_networkbasetypes_2eproto_getter, &descriptor_table_networkbasetypes_2eproto_once,
      file_level_metadata_networkbasetypes_2eproto[16]);
}

// ===================================================================

class CSVCMsg_GameEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<CSVCMsg_GameEvent>()._impl_._has_bits_);
  static void set_has_event_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_eventid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CSVCMsg_GameEvent::CSVCMsg_GameEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CSVCMsg_GameEvent)
}
CSVCMsg_GameEvent::CSVCMsg_GameEvent(const CSVCMsg_GameEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CSVCMsg_GameEvent* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.keys_){from._impl_.keys_}
    , decltype(_impl_.event_name_){}
    , decltype(_impl_.eventid_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.event_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.event_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_event_name()) {
    _this->_impl_.event_name_.Set(from._internal_event_name(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.eventid_ = from._impl_.eventid_;
  // @@protoc_insertion_point(copy_constructor:CSVCMsg_GameEvent)
}

inline void CSVCMsg_GameEvent::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.keys_){arena}
    , decltype(_impl_.event_name_){}
    , decltype(_impl_.eventid_){0}
  };
  _impl_.event_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.event_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CSVCMsg_GameEvent::~CSVCMsg_GameEvent() {
  // @@protoc_insertion_point(destructor:CSVCMsg_GameEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CSVCMsg_GameEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.keys_.~RepeatedPtrField();
  _impl_.event_name_.Destroy();
}

void CSVCMsg_GameEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CSVCMsg_GameEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:CSVCMsg_GameEvent)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.keys_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.event_name_.ClearNonDefaultToEmpty();
  }
  _impl_.eventid_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSVCMsg_GameEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string event_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_event_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CSVCMsg_GameEvent.event_name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional int32 eventid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_eventid(&has_bits);
          _impl_.eventid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .CSVCMsg_GameEvent.key_t keys = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_keys(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CSVCMsg_GameEvent::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSVCMsg_GameEvent)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string event_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_event_name().data(), static_cast<int>(this->_internal_event_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CSVCMsg_GameEvent.event_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_event_name(), target);
  }

  // optional int32 eventid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_eventid(), target);
  }

  // repeated .CSVCMsg_GameEvent.key_t keys = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_keys_size()); i < n; i++) {
    const auto& repfield = this->_internal_keys(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSVCMsg_GameEvent)
  return target;
}

size_t CSVCMsg_GameEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSVCMsg_GameEvent)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CSVCMsg_GameEvent.key_t keys = 3;
  total_size += 1UL * this->_internal_keys_size();
  for (const auto& msg : this->_impl_.keys_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string event_name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_event_name());
    }

    // optional int32 eventid = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_eventid());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CSVCMsg_GameEvent::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CSVCMsg_GameEvent::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CSVCMsg_GameEvent::GetClassData() const { return &_class_data_; }


void CSVCMsg_GameEvent::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CSVCMsg_GameEvent*>(&to_msg);
  auto& from = static_cast<const CSVCMsg_GameEvent&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CSVCMsg_GameEvent)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.keys_.MergeFrom(from._impl_.keys_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_event_name(from._internal_event_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.eventid_ = from._impl_.eventid_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CSVCMsg_GameEvent::CopyFrom(const CSVCMsg_GameEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSVCMsg_GameEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSVCMsg_GameEvent::IsInitialized() const {
  return true;
}

void CSVCMsg_GameEvent::InternalSwap(CSVCMsg_GameEvent* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.keys_.InternalSwap(&other->_impl_.keys_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.event_name_, lhs_arena,
      &other->_impl_.event_name_, rhs_arena
  );
  swap(_impl_.eventid_, other->_impl_.eventid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSVCMsg_GameEvent::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_networkbasetypes_2eproto_getter, &descriptor_table_networkbasetypes_2eproto_once,
      file_level_metadata_networkbasetypes_2eproto[17]);
}

// ===================================================================

class CSVCMsgList_GameEvents_event_t::_Internal {
 public:
  using HasBits = decltype(std::declval<CSVCMsgList_GameEvents_event_t>()._impl_._has_bits_);
  static void set_has_tick(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::CSVCMsg_GameEvent& event(const CSVCMsgList_GameEvents_event_t* msg);
  static void set_has_event(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::CSVCMsg_GameEvent&
CSVCMsgList_GameEvents_event_t::_Internal::event(const CSVCMsgList_GameEvents_event_t* msg) {
  return *msg->_impl_.event_;
}
CSVCMsgList_GameEvents_event_t::CSVCMsgList_GameEvents_event_t(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CSVCMsgList_GameEvents.event_t)
}
CSVCMsgList_GameEvents_event_t::CSVCMsgList_GameEvents_event_t(const CSVCMsgList_GameEvents_event_t& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CSVCMsgList_GameEvents_event_t* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.event_){nullptr}
    , decltype(_impl_.tick_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_event()) {
    _this->_impl_.event_ = new ::CSVCMsg_GameEvent(*from._impl_.event_);
  }
  _this->_impl_.tick_ = from._impl_.tick_;
  // @@protoc_insertion_point(copy_constructor:CSVCMsgList_GameEvents.event_t)
}

inline void CSVCMsgList_GameEvents_event_t::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.event_){nullptr}
    , decltype(_impl_.tick_){0}
  };
}

CSVCMsgList_GameEvents_event_t::~CSVCMsgList_GameEvents_event_t() {
  // @@protoc_insertion_point(destructor:CSVCMsgList_GameEvents.event_t)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CSVCMsgList_GameEvents_event_t::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.event_;
}

void CSVCMsgList_GameEvents_event_t::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CSVCMsgList_GameEvents_event_t::Clear() {
// @@protoc_insertion_point(message_clear_start:CSVCMsgList_GameEvents.event_t)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.event_ != nullptr);
    _impl_.event_->Clear();
  }
  _impl_.tick_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSVCMsgList_GameEvents_event_t::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 tick = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_tick(&has_bits);
          _impl_.tick_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .CSVCMsg_GameEvent event = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_event(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CSVCMsgList_GameEvents_event_t::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSVCMsgList_GameEvents.event_t)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 tick = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_tick(), target);
  }

  // optional .CSVCMsg_GameEvent event = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::event(this),
        _Internal::event(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSVCMsgList_GameEvents.event_t)
  return target;
}

size_t CSVCMsgList_GameEvents_event_t::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSVCMsgList_GameEvents.event_t)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .CSVCMsg_GameEvent event = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_);
    }

    // optional int32 tick = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_tick());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CSVCMsgList_GameEvents_event_t::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CSVCMsgList_GameEvents_event_t::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CSVCMsgList_GameEvents_event_t::GetClassData() const { return &_class_data_; }


void CSVCMsgList_GameEvents_event_t::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CSVCMsgList_GameEvents_event_t*>(&to_msg);
  auto& from = static_cast<const CSVCMsgList_GameEvents_event_t&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CSVCMsgList_GameEvents.event_t)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_event()->::CSVCMsg_GameEvent::MergeFrom(
          from._internal_event());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.tick_ = from._impl_.tick_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CSVCMsgList_GameEvents_event_t::CopyFrom(const CSVCMsgList_GameEvents_event_t& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSVCMsgList_GameEvents.event_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSVCMsgList_GameEvents_event_t::IsInitialized() const {
  return true;
}

void CSVCMsgList_GameEvents_event_t::InternalSwap(CSVCMsgList_GameEvents_event_t* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CSVCMsgList_GameEvents_event_t, _impl_.tick_)
      + sizeof(CSVCMsgList_GameEvents_event_t::_impl_.tick_)
      - PROTOBUF_FIELD_OFFSET(CSVCMsgList_GameEvents_event_t, _impl_.event_)>(
          reinterpret_cast<char*>(&_impl_.event_),
          reinterpret_cast<char*>(&other->_impl_.event_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CSVCMsgList_GameEvents_event_t::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_networkbasetypes_2eproto_getter, &descriptor_table_networkbasetypes_2eproto_once,
      file_level_metadata_networkbasetypes_2eproto[18]);
}

// ===================================================================

class CSVCMsgList_GameEvents::_Internal {
 public:
};

CSVCMsgList_GameEvents::CSVCMsgList_GameEvents(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CSVCMsgList_GameEvents)
}
CSVCMsgList_GameEvents::CSVCMsgList_GameEvents(const CSVCMsgList_GameEvents& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CSVCMsgList_GameEvents* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.events_){from._impl_.events_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CSVCMsgList_GameEvents)
}

inline void CSVCMsgList_GameEvents::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.events_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CSVCMsgList_GameEvents::~CSVCMsgList_GameEvents() {
  // @@protoc_insertion_point(destructor:CSVCMsgList_GameEvents)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CSVCMsgList_GameEvents::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.events_.~RepeatedPtrField();
}

void CSVCMsgList_GameEvents::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CSVCMsgList_GameEvents::Clear() {
// @@protoc_insertion_point(message_clear_start:CSVCMsgList_GameEvents)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.events_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSVCMsgList_GameEvents::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .CSVCMsgList_GameEvents.event_t events = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_events(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CSVCMsgList_GameEvents::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSVCMsgList_GameEvents)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CSVCMsgList_GameEvents.event_t events = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_events_size()); i < n; i++) {
    const auto& repfield = this->_internal_events(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSVCMsgList_GameEvents)
  return target;
}

size_t CSVCMsgList_GameEvents::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSVCMsgList_GameEvents)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CSVCMsgList_GameEvents.event_t events = 1;
  total_size += 1UL * this->_internal_events_size();
  for (const auto& msg : this->_impl_.events_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CSVCMsgList_GameEvents::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CSVCMsgList_GameEvents::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CSVCMsgList_GameEvents::GetClassData() const { return &_class_data_; }


void CSVCMsgList_GameEvents::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CSVCMsgList_GameEvents*>(&to_msg);
  auto& from = static_cast<const CSVCMsgList_GameEvents&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CSVCMsgList_GameEvents)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.events_.MergeFrom(from._impl_.events_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CSVCMsgList_GameEvents::CopyFrom(const CSVCMsgList_GameEvents& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSVCMsgList_GameEvents)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSVCMsgList_GameEvents::IsInitialized() const {
  return true;
}

void CSVCMsgList_GameEvents::InternalSwap(CSVCMsgList_GameEvents* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.events_.InternalSwap(&other->_impl_.events_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSVCMsgList_GameEvents::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_networkbasetypes_2eproto_getter, &descriptor_table_networkbasetypes_2eproto_once,
      file_level_metadata_networkbasetypes_2eproto[19]);
}

// ===================================================================

class CNETMsg_SpawnGroup_Load::_Internal {
 public:
  using HasBits = decltype(std::declval<CNETMsg_SpawnGroup_Load>()._impl_._has_bits_);
  static void set_has_worldname(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_entitylumpname(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_entityfiltername(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_spawngrouphandle(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_spawngroupownerhandle(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static const ::CMsgVector& world_offset_pos(const CNETMsg_SpawnGroup_Load* msg);
  static void set_has_world_offset_pos(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::CMsgQAngle& world_offset_angle(const CNETMsg_SpawnGroup_Load* msg);
  static void set_has_world_offset_angle(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_spawngroupmanifest(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_flags(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_tickcount(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_manifestincomplete(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_localnamefixup(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_parentnamefixup(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_manifestloadpriority(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_worldgroupid(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_creationsequence(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_savegamefilename(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_spawngroupparenthandle(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_leveltransition(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_worldgroupname(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
};

const ::CMsgVector&
CNETMsg_SpawnGroup_Load::_Internal::world_offset_pos(const CNETMsg_SpawnGroup_Load* msg) {
  return *msg->_impl_.world_offset_pos_;
}
const ::CMsgQAngle&
CNETMsg_SpawnGroup_Load::_Internal::world_offset_angle(const CNETMsg_SpawnGroup_Load* msg) {
  return *msg->_impl_.world_offset_angle_;
}
CNETMsg_SpawnGroup_Load::CNETMsg_SpawnGroup_Load(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CNETMsg_SpawnGroup_Load)
}
CNETMsg_SpawnGroup_Load::CNETMsg_SpawnGroup_Load(const CNETMsg_SpawnGroup_Load& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CNETMsg_SpawnGroup_Load* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.worldname_){}
    , decltype(_impl_.entitylumpname_){}
    , decltype(_impl_.entityfiltername_){}
    , decltype(_impl_.spawngroupmanifest_){}
    , decltype(_impl_.localnamefixup_){}
    , decltype(_impl_.parentnamefixup_){}
    , decltype(_impl_.savegamefilename_){}
    , decltype(_impl_.worldgroupname_){}
    , decltype(_impl_.world_offset_pos_){nullptr}
    , decltype(_impl_.world_offset_angle_){nullptr}
    , decltype(_impl_.spawngrouphandle_){}
    , decltype(_impl_.spawngroupownerhandle_){}
    , decltype(_impl_.flags_){}
    , decltype(_impl_.tickcount_){}
    , decltype(_impl_.manifestloadpriority_){}
    , decltype(_impl_.worldgroupid_){}
    , decltype(_impl_.manifestincomplete_){}
    , decltype(_impl_.leveltransition_){}
    , decltype(_impl_.creationsequence_){}
    , decltype(_impl_.spawngroupparenthandle_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.worldname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.worldname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_worldname()) {
    _this->_impl_.worldname_.Set(from._internal_worldname(), 
      _this->GetArenaForAllocation());
  }
  _impl_.entitylumpname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.entitylumpname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_entitylumpname()) {
    _this->_impl_.entitylumpname_.Set(from._internal_entitylumpname(), 
      _this->GetArenaForAllocation());
  }
  _impl_.entityfiltername_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.entityfiltername_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_entityfiltername()) {
    _this->_impl_.entityfiltername_.Set(from._internal_entityfiltername(), 
      _this->GetArenaForAllocation());
  }
  _impl_.spawngroupmanifest_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.spawngroupmanifest_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_spawngroupmanifest()) {
    _this->_impl_.spawngroupmanifest_.Set(from._internal_spawngroupmanifest(), 
      _this->GetArenaForAllocation());
  }
  _impl_.localnamefixup_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.localnamefixup_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_localnamefixup()) {
    _this->_impl_.localnamefixup_.Set(from._internal_localnamefixup(), 
      _this->GetArenaForAllocation());
  }
  _impl_.parentnamefixup_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.parentnamefixup_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_parentnamefixup()) {
    _this->_impl_.parentnamefixup_.Set(from._internal_parentnamefixup(), 
      _this->GetArenaForAllocation());
  }
  _impl_.savegamefilename_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.savegamefilename_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_savegamefilename()) {
    _this->_impl_.savegamefilename_.Set(from._internal_savegamefilename(), 
      _this->GetArenaForAllocation());
  }
  _impl_.worldgroupname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.worldgroupname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_worldgroupname()) {
    _this->_impl_.worldgroupname_.Set(from._internal_worldgroupname(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_world_offset_pos()) {
    _this->_impl_.world_offset_pos_ = new ::CMsgVector(*from._impl_.world_offset_pos_);
  }
  if (from._internal_has_world_offset_angle()) {
    _this->_impl_.world_offset_angle_ = new ::CMsgQAngle(*from._impl_.world_offset_angle_);
  }
  ::memcpy(&_impl_.spawngrouphandle_, &from._impl_.spawngrouphandle_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.spawngroupparenthandle_) -
    reinterpret_cast<char*>(&_impl_.spawngrouphandle_)) + sizeof(_impl_.spawngroupparenthandle_));
  // @@protoc_insertion_point(copy_constructor:CNETMsg_SpawnGroup_Load)
}

inline void CNETMsg_SpawnGroup_Load::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.worldname_){}
    , decltype(_impl_.entitylumpname_){}
    , decltype(_impl_.entityfiltername_){}
    , decltype(_impl_.spawngroupmanifest_){}
    , decltype(_impl_.localnamefixup_){}
    , decltype(_impl_.parentnamefixup_){}
    , decltype(_impl_.savegamefilename_){}
    , decltype(_impl_.worldgroupname_){}
    , decltype(_impl_.world_offset_pos_){nullptr}
    , decltype(_impl_.world_offset_angle_){nullptr}
    , decltype(_impl_.spawngrouphandle_){0u}
    , decltype(_impl_.spawngroupownerhandle_){0u}
    , decltype(_impl_.flags_){0u}
    , decltype(_impl_.tickcount_){0}
    , decltype(_impl_.manifestloadpriority_){0}
    , decltype(_impl_.worldgroupid_){0u}
    , decltype(_impl_.manifestincomplete_){false}
    , decltype(_impl_.leveltransition_){false}
    , decltype(_impl_.creationsequence_){0u}
    , decltype(_impl_.spawngroupparenthandle_){0u}
  };
  _impl_.worldname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.worldname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.entitylumpname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.entitylumpname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.entityfiltername_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.entityfiltername_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.spawngroupmanifest_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.spawngroupmanifest_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.localnamefixup_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.localnamefixup_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.parentnamefixup_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.parentnamefixup_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.savegamefilename_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.savegamefilename_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.worldgroupname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.worldgroupname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CNETMsg_SpawnGroup_Load::~CNETMsg_SpawnGroup_Load() {
  // @@protoc_insertion_point(destructor:CNETMsg_SpawnGroup_Load)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CNETMsg_SpawnGroup_Load::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.worldname_.Destroy();
  _impl_.entitylumpname_.Destroy();
  _impl_.entityfiltername_.Destroy();
  _impl_.spawngroupmanifest_.Destroy();
  _impl_.localnamefixup_.Destroy();
  _impl_.parentnamefixup_.Destroy();
  _impl_.savegamefilename_.Destroy();
  _impl_.worldgroupname_.Destroy();
  if (this != internal_default_instance()) delete _impl_.world_offset_pos_;
  if (this != internal_default_instance()) delete _impl_.world_offset_angle_;
}

void CNETMsg_SpawnGroup_Load::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CNETMsg_SpawnGroup_Load::Clear() {
// @@protoc_insertion_point(message_clear_start:CNETMsg_SpawnGroup_Load)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.worldname_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.entitylumpname_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.entityfiltername_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.spawngroupmanifest_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.localnamefixup_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000020u) {
      _impl_.parentnamefixup_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000040u) {
      _impl_.savegamefilename_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000080u) {
      _impl_.worldgroupname_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      GOOGLE_DCHECK(_impl_.world_offset_pos_ != nullptr);
      _impl_.world_offset_pos_->Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      GOOGLE_DCHECK(_impl_.world_offset_angle_ != nullptr);
      _impl_.world_offset_angle_->Clear();
    }
  }
  if (cached_has_bits & 0x0000fc00u) {
    ::memset(&_impl_.spawngrouphandle_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.worldgroupid_) -
        reinterpret_cast<char*>(&_impl_.spawngrouphandle_)) + sizeof(_impl_.worldgroupid_));
  }
  if (cached_has_bits & 0x000f0000u) {
    ::memset(&_impl_.manifestincomplete_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.spawngroupparenthandle_) -
        reinterpret_cast<char*>(&_impl_.manifestincomplete_)) + sizeof(_impl_.spawngroupparenthandle_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CNETMsg_SpawnGroup_Load::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string worldname = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_worldname();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CNETMsg_SpawnGroup_Load.worldname");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string entitylumpname = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_entitylumpname();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CNETMsg_SpawnGroup_Load.entitylumpname");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string entityfiltername = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_entityfiltername();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CNETMsg_SpawnGroup_Load.entityfiltername");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional uint32 spawngrouphandle = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_spawngrouphandle(&has_bits);
          _impl_.spawngrouphandle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 spawngroupownerhandle = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_spawngroupownerhandle(&has_bits);
          _impl_.spawngroupownerhandle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .CMsgVector world_offset_pos = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_world_offset_pos(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .CMsgQAngle world_offset_angle = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_world_offset_angle(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes spawngroupmanifest = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_spawngroupmanifest();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 flags = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_flags(&has_bits);
          _impl_.flags_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 tickcount = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_tickcount(&has_bits);
          _impl_.tickcount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool manifestincomplete = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _Internal::set_has_manifestincomplete(&has_bits);
          _impl_.manifestincomplete_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string localnamefixup = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          auto str = _internal_mutable_localnamefixup();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CNETMsg_SpawnGroup_Load.localnamefixup");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string parentnamefixup = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          auto str = _internal_mutable_parentnamefixup();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CNETMsg_SpawnGroup_Load.parentnamefixup");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional int32 manifestloadpriority = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          _Internal::set_has_manifestloadpriority(&has_bits);
          _impl_.manifestloadpriority_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 worldgroupid = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          _Internal::set_has_worldgroupid(&has_bits);
          _impl_.worldgroupid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 creationsequence = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          _Internal::set_has_creationsequence(&has_bits);
          _impl_.creationsequence_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string savegamefilename = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 138)) {
          auto str = _internal_mutable_savegamefilename();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CNETMsg_SpawnGroup_Load.savegamefilename");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional uint32 spawngroupparenthandle = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 144)) {
          _Internal::set_has_spawngroupparenthandle(&has_bits);
          _impl_.spawngroupparenthandle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool leveltransition = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 152)) {
          _Internal::set_has_leveltransition(&has_bits);
          _impl_.leveltransition_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string worldgroupname = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          auto str = _internal_mutable_worldgroupname();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CNETMsg_SpawnGroup_Load.worldgroupname");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CNETMsg_SpawnGroup_Load::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CNETMsg_SpawnGroup_Load)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string worldname = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_worldname().data(), static_cast<int>(this->_internal_worldname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CNETMsg_SpawnGroup_Load.worldname");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_worldname(), target);
  }

  // optional string entitylumpname = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_entitylumpname().data(), static_cast<int>(this->_internal_entitylumpname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CNETMsg_SpawnGroup_Load.entitylumpname");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_entitylumpname(), target);
  }

  // optional string entityfiltername = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_entityfiltername().data(), static_cast<int>(this->_internal_entityfiltername().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CNETMsg_SpawnGroup_Load.entityfiltername");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_entityfiltername(), target);
  }

  // optional uint32 spawngrouphandle = 4;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_spawngrouphandle(), target);
  }

  // optional uint32 spawngroupownerhandle = 5;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_spawngroupownerhandle(), target);
  }

  // optional .CMsgVector world_offset_pos = 6;
  if (cached_has_bits & 0x00000100u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::world_offset_pos(this),
        _Internal::world_offset_pos(this).GetCachedSize(), target, stream);
  }

  // optional .CMsgQAngle world_offset_angle = 7;
  if (cached_has_bits & 0x00000200u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::world_offset_angle(this),
        _Internal::world_offset_angle(this).GetCachedSize(), target, stream);
  }

  // optional bytes spawngroupmanifest = 8;
  if (cached_has_bits & 0x00000008u) {
    target = stream->WriteBytesMaybeAliased(
        8, this->_internal_spawngroupmanifest(), target);
  }

  // optional uint32 flags = 9;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(9, this->_internal_flags(), target);
  }

  // optional int32 tickcount = 10;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(10, this->_internal_tickcount(), target);
  }

  // optional bool manifestincomplete = 11;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(11, this->_internal_manifestincomplete(), target);
  }

  // optional string localnamefixup = 12;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_localnamefixup().data(), static_cast<int>(this->_internal_localnamefixup().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CNETMsg_SpawnGroup_Load.localnamefixup");
    target = stream->WriteStringMaybeAliased(
        12, this->_internal_localnamefixup(), target);
  }

  // optional string parentnamefixup = 13;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_parentnamefixup().data(), static_cast<int>(this->_internal_parentnamefixup().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CNETMsg_SpawnGroup_Load.parentnamefixup");
    target = stream->WriteStringMaybeAliased(
        13, this->_internal_parentnamefixup(), target);
  }

  // optional int32 manifestloadpriority = 14;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(14, this->_internal_manifestloadpriority(), target);
  }

  // optional uint32 worldgroupid = 15;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(15, this->_internal_worldgroupid(), target);
  }

  // optional uint32 creationsequence = 16;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(16, this->_internal_creationsequence(), target);
  }

  // optional string savegamefilename = 17;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_savegamefilename().data(), static_cast<int>(this->_internal_savegamefilename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CNETMsg_SpawnGroup_Load.savegamefilename");
    target = stream->WriteStringMaybeAliased(
        17, this->_internal_savegamefilename(), target);
  }

  // optional uint32 spawngroupparenthandle = 18;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(18, this->_internal_spawngroupparenthandle(), target);
  }

  // optional bool leveltransition = 19;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(19, this->_internal_leveltransition(), target);
  }

  // optional string worldgroupname = 20;
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_worldgroupname().data(), static_cast<int>(this->_internal_worldgroupname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CNETMsg_SpawnGroup_Load.worldgroupname");
    target = stream->WriteStringMaybeAliased(
        20, this->_internal_worldgroupname(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CNETMsg_SpawnGroup_Load)
  return target;
}

size_t CNETMsg_SpawnGroup_Load::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CNETMsg_SpawnGroup_Load)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string worldname = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_worldname());
    }

    // optional string entitylumpname = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_entitylumpname());
    }

    // optional string entityfiltername = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_entityfiltername());
    }

    // optional bytes spawngroupmanifest = 8;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_spawngroupmanifest());
    }

    // optional string localnamefixup = 12;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_localnamefixup());
    }

    // optional string parentnamefixup = 13;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_parentnamefixup());
    }

    // optional string savegamefilename = 17;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_savegamefilename());
    }

    // optional string worldgroupname = 20;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_worldgroupname());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional .CMsgVector world_offset_pos = 6;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.world_offset_pos_);
    }

    // optional .CMsgQAngle world_offset_angle = 7;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.world_offset_angle_);
    }

    // optional uint32 spawngrouphandle = 4;
    if (cached_has_bits & 0x00000400u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_spawngrouphandle());
    }

    // optional uint32 spawngroupownerhandle = 5;
    if (cached_has_bits & 0x00000800u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_spawngroupownerhandle());
    }

    // optional uint32 flags = 9;
    if (cached_has_bits & 0x00001000u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_flags());
    }

    // optional int32 tickcount = 10;
    if (cached_has_bits & 0x00002000u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_tickcount());
    }

    // optional int32 manifestloadpriority = 14;
    if (cached_has_bits & 0x00004000u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_manifestloadpriority());
    }

    // optional uint32 worldgroupid = 15;
    if (cached_has_bits & 0x00008000u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_worldgroupid());
    }

  }
  if (cached_has_bits & 0x000f0000u) {
    // optional bool manifestincomplete = 11;
    if (cached_has_bits & 0x00010000u) {
      total_size += 1 + 1;
    }

    // optional bool leveltransition = 19;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 + 1;
    }

    // optional uint32 creationsequence = 16;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_creationsequence());
    }

    // optional uint32 spawngroupparenthandle = 18;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_spawngroupparenthandle());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CNETMsg_SpawnGroup_Load::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CNETMsg_SpawnGroup_Load::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CNETMsg_SpawnGroup_Load::GetClassData() const { return &_class_data_; }


void CNETMsg_SpawnGroup_Load::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CNETMsg_SpawnGroup_Load*>(&to_msg);
  auto& from = static_cast<const CNETMsg_SpawnGroup_Load&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CNETMsg_SpawnGroup_Load)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_worldname(from._internal_worldname());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_entitylumpname(from._internal_entitylumpname());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_entityfiltername(from._internal_entityfiltername());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_set_spawngroupmanifest(from._internal_spawngroupmanifest());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_set_localnamefixup(from._internal_localnamefixup());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_internal_set_parentnamefixup(from._internal_parentnamefixup());
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_internal_set_savegamefilename(from._internal_savegamefilename());
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_internal_set_worldgroupname(from._internal_worldgroupname());
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_internal_mutable_world_offset_pos()->::CMsgVector::MergeFrom(
          from._internal_world_offset_pos());
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_internal_mutable_world_offset_angle()->::CMsgQAngle::MergeFrom(
          from._internal_world_offset_angle());
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_impl_.spawngrouphandle_ = from._impl_.spawngrouphandle_;
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_impl_.spawngroupownerhandle_ = from._impl_.spawngroupownerhandle_;
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_impl_.flags_ = from._impl_.flags_;
    }
    if (cached_has_bits & 0x00002000u) {
      _this->_impl_.tickcount_ = from._impl_.tickcount_;
    }
    if (cached_has_bits & 0x00004000u) {
      _this->_impl_.manifestloadpriority_ = from._impl_.manifestloadpriority_;
    }
    if (cached_has_bits & 0x00008000u) {
      _this->_impl_.worldgroupid_ = from._impl_.worldgroupid_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x000f0000u) {
    if (cached_has_bits & 0x00010000u) {
      _this->_impl_.manifestincomplete_ = from._impl_.manifestincomplete_;
    }
    if (cached_has_bits & 0x00020000u) {
      _this->_impl_.leveltransition_ = from._impl_.leveltransition_;
    }
    if (cached_has_bits & 0x00040000u) {
      _this->_impl_.creationsequence_ = from._impl_.creationsequence_;
    }
    if (cached_has_bits & 0x00080000u) {
      _this->_impl_.spawngroupparenthandle_ = from._impl_.spawngroupparenthandle_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CNETMsg_SpawnGroup_Load::CopyFrom(const CNETMsg_SpawnGroup_Load& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CNETMsg_SpawnGroup_Load)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CNETMsg_SpawnGroup_Load::IsInitialized() const {
  return true;
}

void CNETMsg_SpawnGroup_Load::InternalSwap(CNETMsg_SpawnGroup_Load* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.worldname_, lhs_arena,
      &other->_impl_.worldname_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.entitylumpname_, lhs_arena,
      &other->_impl_.entitylumpname_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.entityfiltername_, lhs_arena,
      &other->_impl_.entityfiltername_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.spawngroupmanifest_, lhs_arena,
      &other->_impl_.spawngroupmanifest_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.localnamefixup_, lhs_arena,
      &other->_impl_.localnamefixup_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.parentnamefixup_, lhs_arena,
      &other->_impl_.parentnamefixup_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.savegamefilename_, lhs_arena,
      &other->_impl_.savegamefilename_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.worldgroupname_, lhs_arena,
      &other->_impl_.worldgroupname_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CNETMsg_SpawnGroup_Load, _impl_.spawngroupparenthandle_)
      + sizeof(CNETMsg_SpawnGroup_Load::_impl_.spawngroupparenthandle_)
      - PROTOBUF_FIELD_OFFSET(CNETMsg_SpawnGroup_Load, _impl_.world_offset_pos_)>(
          reinterpret_cast<char*>(&_impl_.world_offset_pos_),
          reinterpret_cast<char*>(&other->_impl_.world_offset_pos_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CNETMsg_SpawnGroup_Load::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_networkbasetypes_2eproto_getter, &descriptor_table_networkbasetypes_2eproto_once,
      file_level_metadata_networkbasetypes_2eproto[20]);
}

// ===================================================================

class CNETMsg_SpawnGroup_ManifestUpdate::_Internal {
 public:
  using HasBits = decltype(std::declval<CNETMsg_SpawnGroup_ManifestUpdate>()._impl_._has_bits_);
  static void set_has_spawngrouphandle(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_spawngroupmanifest(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_manifestincomplete(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CNETMsg_SpawnGroup_ManifestUpdate::CNETMsg_SpawnGroup_ManifestUpdate(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CNETMsg_SpawnGroup_ManifestUpdate)
}
CNETMsg_SpawnGroup_ManifestUpdate::CNETMsg_SpawnGroup_ManifestUpdate(const CNETMsg_SpawnGroup_ManifestUpdate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CNETMsg_SpawnGroup_ManifestUpdate* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.spawngroupmanifest_){}
    , decltype(_impl_.spawngrouphandle_){}
    , decltype(_impl_.manifestincomplete_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.spawngroupmanifest_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.spawngroupmanifest_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_spawngroupmanifest()) {
    _this->_impl_.spawngroupmanifest_.Set(from._internal_spawngroupmanifest(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.spawngrouphandle_, &from._impl_.spawngrouphandle_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.manifestincomplete_) -
    reinterpret_cast<char*>(&_impl_.spawngrouphandle_)) + sizeof(_impl_.manifestincomplete_));
  // @@protoc_insertion_point(copy_constructor:CNETMsg_SpawnGroup_ManifestUpdate)
}

inline void CNETMsg_SpawnGroup_ManifestUpdate::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.spawngroupmanifest_){}
    , decltype(_impl_.spawngrouphandle_){0u}
    , decltype(_impl_.manifestincomplete_){false}
  };
  _impl_.spawngroupmanifest_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.spawngroupmanifest_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CNETMsg_SpawnGroup_ManifestUpdate::~CNETMsg_SpawnGroup_ManifestUpdate() {
  // @@protoc_insertion_point(destructor:CNETMsg_SpawnGroup_ManifestUpdate)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CNETMsg_SpawnGroup_ManifestUpdate::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.spawngroupmanifest_.Destroy();
}

void CNETMsg_SpawnGroup_ManifestUpdate::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CNETMsg_SpawnGroup_ManifestUpdate::Clear() {
// @@protoc_insertion_point(message_clear_start:CNETMsg_SpawnGroup_ManifestUpdate)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.spawngroupmanifest_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&_impl_.spawngrouphandle_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.manifestincomplete_) -
        reinterpret_cast<char*>(&_impl_.spawngrouphandle_)) + sizeof(_impl_.manifestincomplete_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CNETMsg_SpawnGroup_ManifestUpdate::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 spawngrouphandle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_spawngrouphandle(&has_bits);
          _impl_.spawngrouphandle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes spawngroupmanifest = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_spawngroupmanifest();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool manifestincomplete = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_manifestincomplete(&has_bits);
          _impl_.manifestincomplete_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CNETMsg_SpawnGroup_ManifestUpdate::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CNETMsg_SpawnGroup_ManifestUpdate)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 spawngrouphandle = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_spawngrouphandle(), target);
  }

  // optional bytes spawngroupmanifest = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_spawngroupmanifest(), target);
  }

  // optional bool manifestincomplete = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_manifestincomplete(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CNETMsg_SpawnGroup_ManifestUpdate)
  return target;
}

size_t CNETMsg_SpawnGroup_ManifestUpdate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CNETMsg_SpawnGroup_ManifestUpdate)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional bytes spawngroupmanifest = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_spawngroupmanifest());
    }

    // optional uint32 spawngrouphandle = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_spawngrouphandle());
    }

    // optional bool manifestincomplete = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CNETMsg_SpawnGroup_ManifestUpdate::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CNETMsg_SpawnGroup_ManifestUpdate::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CNETMsg_SpawnGroup_ManifestUpdate::GetClassData() const { return &_class_data_; }


void CNETMsg_SpawnGroup_ManifestUpdate::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CNETMsg_SpawnGroup_ManifestUpdate*>(&to_msg);
  auto& from = static_cast<const CNETMsg_SpawnGroup_ManifestUpdate&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CNETMsg_SpawnGroup_ManifestUpdate)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_spawngroupmanifest(from._internal_spawngroupmanifest());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.spawngrouphandle_ = from._impl_.spawngrouphandle_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.manifestincomplete_ = from._impl_.manifestincomplete_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CNETMsg_SpawnGroup_ManifestUpdate::CopyFrom(const CNETMsg_SpawnGroup_ManifestUpdate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CNETMsg_SpawnGroup_ManifestUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CNETMsg_SpawnGroup_ManifestUpdate::IsInitialized() const {
  return true;
}

void CNETMsg_SpawnGroup_ManifestUpdate::InternalSwap(CNETMsg_SpawnGroup_ManifestUpdate* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.spawngroupmanifest_, lhs_arena,
      &other->_impl_.spawngroupmanifest_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CNETMsg_SpawnGroup_ManifestUpdate, _impl_.manifestincomplete_)
      + sizeof(CNETMsg_SpawnGroup_ManifestUpdate::_impl_.manifestincomplete_)
      - PROTOBUF_FIELD_OFFSET(CNETMsg_SpawnGroup_ManifestUpdate, _impl_.spawngrouphandle_)>(
          reinterpret_cast<char*>(&_impl_.spawngrouphandle_),
          reinterpret_cast<char*>(&other->_impl_.spawngrouphandle_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CNETMsg_SpawnGroup_ManifestUpdate::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_networkbasetypes_2eproto_getter, &descriptor_table_networkbasetypes_2eproto_once,
      file_level_metadata_networkbasetypes_2eproto[21]);
}

// ===================================================================

class CNETMsg_SpawnGroup_SetCreationTick::_Internal {
 public:
  using HasBits = decltype(std::declval<CNETMsg_SpawnGroup_SetCreationTick>()._impl_._has_bits_);
  static void set_has_spawngrouphandle(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_tickcount(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_creationsequence(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CNETMsg_SpawnGroup_SetCreationTick::CNETMsg_SpawnGroup_SetCreationTick(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CNETMsg_SpawnGroup_SetCreationTick)
}
CNETMsg_SpawnGroup_SetCreationTick::CNETMsg_SpawnGroup_SetCreationTick(const CNETMsg_SpawnGroup_SetCreationTick& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CNETMsg_SpawnGroup_SetCreationTick* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.spawngrouphandle_){}
    , decltype(_impl_.tickcount_){}
    , decltype(_impl_.creationsequence_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.spawngrouphandle_, &from._impl_.spawngrouphandle_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.creationsequence_) -
    reinterpret_cast<char*>(&_impl_.spawngrouphandle_)) + sizeof(_impl_.creationsequence_));
  // @@protoc_insertion_point(copy_constructor:CNETMsg_SpawnGroup_SetCreationTick)
}

inline void CNETMsg_SpawnGroup_SetCreationTick::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.spawngrouphandle_){0u}
    , decltype(_impl_.tickcount_){0}
    , decltype(_impl_.creationsequence_){0u}
  };
}

CNETMsg_SpawnGroup_SetCreationTick::~CNETMsg_SpawnGroup_SetCreationTick() {
  // @@protoc_insertion_point(destructor:CNETMsg_SpawnGroup_SetCreationTick)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CNETMsg_SpawnGroup_SetCreationTick::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CNETMsg_SpawnGroup_SetCreationTick::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CNETMsg_SpawnGroup_SetCreationTick::Clear() {
// @@protoc_insertion_point(message_clear_start:CNETMsg_SpawnGroup_SetCreationTick)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.spawngrouphandle_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.creationsequence_) -
        reinterpret_cast<char*>(&_impl_.spawngrouphandle_)) + sizeof(_impl_.creationsequence_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CNETMsg_SpawnGroup_SetCreationTick::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 spawngrouphandle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_spawngrouphandle(&has_bits);
          _impl_.spawngrouphandle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 tickcount = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_tickcount(&has_bits);
          _impl_.tickcount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 creationsequence = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_creationsequence(&has_bits);
          _impl_.creationsequence_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CNETMsg_SpawnGroup_SetCreationTick::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CNETMsg_SpawnGroup_SetCreationTick)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 spawngrouphandle = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_spawngrouphandle(), target);
  }

  // optional int32 tickcount = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_tickcount(), target);
  }

  // optional uint32 creationsequence = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_creationsequence(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CNETMsg_SpawnGroup_SetCreationTick)
  return target;
}

size_t CNETMsg_SpawnGroup_SetCreationTick::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CNETMsg_SpawnGroup_SetCreationTick)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint32 spawngrouphandle = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_spawngrouphandle());
    }

    // optional int32 tickcount = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_tickcount());
    }

    // optional uint32 creationsequence = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_creationsequence());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CNETMsg_SpawnGroup_SetCreationTick::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CNETMsg_SpawnGroup_SetCreationTick::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CNETMsg_SpawnGroup_SetCreationTick::GetClassData() const { return &_class_data_; }


void CNETMsg_SpawnGroup_SetCreationTick::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CNETMsg_SpawnGroup_SetCreationTick*>(&to_msg);
  auto& from = static_cast<const CNETMsg_SpawnGroup_SetCreationTick&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CNETMsg_SpawnGroup_SetCreationTick)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.spawngrouphandle_ = from._impl_.spawngrouphandle_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.tickcount_ = from._impl_.tickcount_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.creationsequence_ = from._impl_.creationsequence_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CNETMsg_SpawnGroup_SetCreationTick::CopyFrom(const CNETMsg_SpawnGroup_SetCreationTick& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CNETMsg_SpawnGroup_SetCreationTick)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CNETMsg_SpawnGroup_SetCreationTick::IsInitialized() const {
  return true;
}

void CNETMsg_SpawnGroup_SetCreationTick::InternalSwap(CNETMsg_SpawnGroup_SetCreationTick* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CNETMsg_SpawnGroup_SetCreationTick, _impl_.creationsequence_)
      + sizeof(CNETMsg_SpawnGroup_SetCreationTick::_impl_.creationsequence_)
      - PROTOBUF_FIELD_OFFSET(CNETMsg_SpawnGroup_SetCreationTick, _impl_.spawngrouphandle_)>(
          reinterpret_cast<char*>(&_impl_.spawngrouphandle_),
          reinterpret_cast<char*>(&other->_impl_.spawngrouphandle_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CNETMsg_SpawnGroup_SetCreationTick::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_networkbasetypes_2eproto_getter, &descriptor_table_networkbasetypes_2eproto_once,
      file_level_metadata_networkbasetypes_2eproto[22]);
}

// ===================================================================

class CNETMsg_SpawnGroup_Unload::_Internal {
 public:
  using HasBits = decltype(std::declval<CNETMsg_SpawnGroup_Unload>()._impl_._has_bits_);
  static void set_has_spawngrouphandle(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_flags(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_tickcount(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CNETMsg_SpawnGroup_Unload::CNETMsg_SpawnGroup_Unload(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CNETMsg_SpawnGroup_Unload)
}
CNETMsg_SpawnGroup_Unload::CNETMsg_SpawnGroup_Unload(const CNETMsg_SpawnGroup_Unload& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CNETMsg_SpawnGroup_Unload* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.spawngrouphandle_){}
    , decltype(_impl_.flags_){}
    , decltype(_impl_.tickcount_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.spawngrouphandle_, &from._impl_.spawngrouphandle_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.tickcount_) -
    reinterpret_cast<char*>(&_impl_.spawngrouphandle_)) + sizeof(_impl_.tickcount_));
  // @@protoc_insertion_point(copy_constructor:CNETMsg_SpawnGroup_Unload)
}

inline void CNETMsg_SpawnGroup_Unload::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.spawngrouphandle_){0u}
    , decltype(_impl_.flags_){0u}
    , decltype(_impl_.tickcount_){0}
  };
}

CNETMsg_SpawnGroup_Unload::~CNETMsg_SpawnGroup_Unload() {
  // @@protoc_insertion_point(destructor:CNETMsg_SpawnGroup_Unload)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CNETMsg_SpawnGroup_Unload::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CNETMsg_SpawnGroup_Unload::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CNETMsg_SpawnGroup_Unload::Clear() {
// @@protoc_insertion_point(message_clear_start:CNETMsg_SpawnGroup_Unload)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.spawngrouphandle_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.tickcount_) -
        reinterpret_cast<char*>(&_impl_.spawngrouphandle_)) + sizeof(_impl_.tickcount_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CNETMsg_SpawnGroup_Unload::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 spawngrouphandle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_spawngrouphandle(&has_bits);
          _impl_.spawngrouphandle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 flags = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_flags(&has_bits);
          _impl_.flags_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 tickcount = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_tickcount(&has_bits);
          _impl_.tickcount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CNETMsg_SpawnGroup_Unload::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CNETMsg_SpawnGroup_Unload)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 spawngrouphandle = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_spawngrouphandle(), target);
  }

  // optional uint32 flags = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_flags(), target);
  }

  // optional int32 tickcount = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_tickcount(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CNETMsg_SpawnGroup_Unload)
  return target;
}

size_t CNETMsg_SpawnGroup_Unload::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CNETMsg_SpawnGroup_Unload)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint32 spawngrouphandle = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_spawngrouphandle());
    }

    // optional uint32 flags = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_flags());
    }

    // optional int32 tickcount = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_tickcount());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CNETMsg_SpawnGroup_Unload::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CNETMsg_SpawnGroup_Unload::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CNETMsg_SpawnGroup_Unload::GetClassData() const { return &_class_data_; }


void CNETMsg_SpawnGroup_Unload::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CNETMsg_SpawnGroup_Unload*>(&to_msg);
  auto& from = static_cast<const CNETMsg_SpawnGroup_Unload&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CNETMsg_SpawnGroup_Unload)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.spawngrouphandle_ = from._impl_.spawngrouphandle_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.flags_ = from._impl_.flags_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.tickcount_ = from._impl_.tickcount_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CNETMsg_SpawnGroup_Unload::CopyFrom(const CNETMsg_SpawnGroup_Unload& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CNETMsg_SpawnGroup_Unload)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CNETMsg_SpawnGroup_Unload::IsInitialized() const {
  return true;
}

void CNETMsg_SpawnGroup_Unload::InternalSwap(CNETMsg_SpawnGroup_Unload* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CNETMsg_SpawnGroup_Unload, _impl_.tickcount_)
      + sizeof(CNETMsg_SpawnGroup_Unload::_impl_.tickcount_)
      - PROTOBUF_FIELD_OFFSET(CNETMsg_SpawnGroup_Unload, _impl_.spawngrouphandle_)>(
          reinterpret_cast<char*>(&_impl_.spawngrouphandle_),
          reinterpret_cast<char*>(&other->_impl_.spawngrouphandle_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CNETMsg_SpawnGroup_Unload::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_networkbasetypes_2eproto_getter, &descriptor_table_networkbasetypes_2eproto_once,
      file_level_metadata_networkbasetypes_2eproto[23]);
}

// ===================================================================

class CNETMsg_SpawnGroup_LoadCompleted::_Internal {
 public:
  using HasBits = decltype(std::declval<CNETMsg_SpawnGroup_LoadCompleted>()._impl_._has_bits_);
  static void set_has_spawngrouphandle(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CNETMsg_SpawnGroup_LoadCompleted::CNETMsg_SpawnGroup_LoadCompleted(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CNETMsg_SpawnGroup_LoadCompleted)
}
CNETMsg_SpawnGroup_LoadCompleted::CNETMsg_SpawnGroup_LoadCompleted(const CNETMsg_SpawnGroup_LoadCompleted& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CNETMsg_SpawnGroup_LoadCompleted* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.spawngrouphandle_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.spawngrouphandle_ = from._impl_.spawngrouphandle_;
  // @@protoc_insertion_point(copy_constructor:CNETMsg_SpawnGroup_LoadCompleted)
}

inline void CNETMsg_SpawnGroup_LoadCompleted::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.spawngrouphandle_){0u}
  };
}

CNETMsg_SpawnGroup_LoadCompleted::~CNETMsg_SpawnGroup_LoadCompleted() {
  // @@protoc_insertion_point(destructor:CNETMsg_SpawnGroup_LoadCompleted)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CNETMsg_SpawnGroup_LoadCompleted::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CNETMsg_SpawnGroup_LoadCompleted::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CNETMsg_SpawnGroup_LoadCompleted::Clear() {
// @@protoc_insertion_point(message_clear_start:CNETMsg_SpawnGroup_LoadCompleted)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.spawngrouphandle_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CNETMsg_SpawnGroup_LoadCompleted::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 spawngrouphandle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_spawngrouphandle(&has_bits);
          _impl_.spawngrouphandle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CNETMsg_SpawnGroup_LoadCompleted::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CNETMsg_SpawnGroup_LoadCompleted)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 spawngrouphandle = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_spawngrouphandle(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CNETMsg_SpawnGroup_LoadCompleted)
  return target;
}

size_t CNETMsg_SpawnGroup_LoadCompleted::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CNETMsg_SpawnGroup_LoadCompleted)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 spawngrouphandle = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_spawngrouphandle());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CNETMsg_SpawnGroup_LoadCompleted::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CNETMsg_SpawnGroup_LoadCompleted::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CNETMsg_SpawnGroup_LoadCompleted::GetClassData() const { return &_class_data_; }


void CNETMsg_SpawnGroup_LoadCompleted::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CNETMsg_SpawnGroup_LoadCompleted*>(&to_msg);
  auto& from = static_cast<const CNETMsg_SpawnGroup_LoadCompleted&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CNETMsg_SpawnGroup_LoadCompleted)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_spawngrouphandle()) {
    _this->_internal_set_spawngrouphandle(from._internal_spawngrouphandle());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CNETMsg_SpawnGroup_LoadCompleted::CopyFrom(const CNETMsg_SpawnGroup_LoadCompleted& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CNETMsg_SpawnGroup_LoadCompleted)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CNETMsg_SpawnGroup_LoadCompleted::IsInitialized() const {
  return true;
}

void CNETMsg_SpawnGroup_LoadCompleted::InternalSwap(CNETMsg_SpawnGroup_LoadCompleted* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.spawngrouphandle_, other->_impl_.spawngrouphandle_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CNETMsg_SpawnGroup_LoadCompleted::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_networkbasetypes_2eproto_getter, &descriptor_table_networkbasetypes_2eproto_once,
      file_level_metadata_networkbasetypes_2eproto[24]);
}

// ===================================================================

class CSVCMsg_GameSessionConfiguration::_Internal {
 public:
  using HasBits = decltype(std::declval<CSVCMsg_GameSessionConfiguration>()._impl_._has_bits_);
  static void set_has_is_multiplayer(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_is_loadsavegame(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_is_background_map(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_is_headless(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_min_client_limit(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_max_client_limit(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_max_clients(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_tick_interval(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_hostname(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_savegamename(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_s1_mapname(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_gamemode(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_server_ip_address(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_data(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_is_localonly(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_no_steam_server(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_is_transition(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_previouslevel(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_landmarkname(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
};

CSVCMsg_GameSessionConfiguration::CSVCMsg_GameSessionConfiguration(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CSVCMsg_GameSessionConfiguration)
}
CSVCMsg_GameSessionConfiguration::CSVCMsg_GameSessionConfiguration(const CSVCMsg_GameSessionConfiguration& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CSVCMsg_GameSessionConfiguration* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.hostname_){}
    , decltype(_impl_.savegamename_){}
    , decltype(_impl_.s1_mapname_){}
    , decltype(_impl_.gamemode_){}
    , decltype(_impl_.server_ip_address_){}
    , decltype(_impl_.data_){}
    , decltype(_impl_.previouslevel_){}
    , decltype(_impl_.landmarkname_){}
    , decltype(_impl_.is_multiplayer_){}
    , decltype(_impl_.is_loadsavegame_){}
    , decltype(_impl_.is_background_map_){}
    , decltype(_impl_.is_headless_){}
    , decltype(_impl_.min_client_limit_){}
    , decltype(_impl_.max_client_limit_){}
    , decltype(_impl_.max_clients_){}
    , decltype(_impl_.tick_interval_){}
    , decltype(_impl_.is_localonly_){}
    , decltype(_impl_.no_steam_server_){}
    , decltype(_impl_.is_transition_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.hostname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.hostname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_hostname()) {
    _this->_impl_.hostname_.Set(from._internal_hostname(), 
      _this->GetArenaForAllocation());
  }
  _impl_.savegamename_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.savegamename_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_savegamename()) {
    _this->_impl_.savegamename_.Set(from._internal_savegamename(), 
      _this->GetArenaForAllocation());
  }
  _impl_.s1_mapname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.s1_mapname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_s1_mapname()) {
    _this->_impl_.s1_mapname_.Set(from._internal_s1_mapname(), 
      _this->GetArenaForAllocation());
  }
  _impl_.gamemode_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.gamemode_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_gamemode()) {
    _this->_impl_.gamemode_.Set(from._internal_gamemode(), 
      _this->GetArenaForAllocation());
  }
  _impl_.server_ip_address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.server_ip_address_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_server_ip_address()) {
    _this->_impl_.server_ip_address_.Set(from._internal_server_ip_address(), 
      _this->GetArenaForAllocation());
  }
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_data()) {
    _this->_impl_.data_.Set(from._internal_data(), 
      _this->GetArenaForAllocation());
  }
  _impl_.previouslevel_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.previouslevel_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_previouslevel()) {
    _this->_impl_.previouslevel_.Set(from._internal_previouslevel(), 
      _this->GetArenaForAllocation());
  }
  _impl_.landmarkname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.landmarkname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_landmarkname()) {
    _this->_impl_.landmarkname_.Set(from._internal_landmarkname(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.is_multiplayer_, &from._impl_.is_multiplayer_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.is_transition_) -
    reinterpret_cast<char*>(&_impl_.is_multiplayer_)) + sizeof(_impl_.is_transition_));
  // @@protoc_insertion_point(copy_constructor:CSVCMsg_GameSessionConfiguration)
}

inline void CSVCMsg_GameSessionConfiguration::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.hostname_){}
    , decltype(_impl_.savegamename_){}
    , decltype(_impl_.s1_mapname_){}
    , decltype(_impl_.gamemode_){}
    , decltype(_impl_.server_ip_address_){}
    , decltype(_impl_.data_){}
    , decltype(_impl_.previouslevel_){}
    , decltype(_impl_.landmarkname_){}
    , decltype(_impl_.is_multiplayer_){false}
    , decltype(_impl_.is_loadsavegame_){false}
    , decltype(_impl_.is_background_map_){false}
    , decltype(_impl_.is_headless_){false}
    , decltype(_impl_.min_client_limit_){0u}
    , decltype(_impl_.max_client_limit_){0u}
    , decltype(_impl_.max_clients_){0u}
    , decltype(_impl_.tick_interval_){0u}
    , decltype(_impl_.is_localonly_){false}
    , decltype(_impl_.no_steam_server_){false}
    , decltype(_impl_.is_transition_){false}
  };
  _impl_.hostname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.hostname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.savegamename_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.savegamename_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.s1_mapname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.s1_mapname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.gamemode_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.gamemode_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.server_ip_address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.server_ip_address_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.previouslevel_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.previouslevel_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.landmarkname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.landmarkname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CSVCMsg_GameSessionConfiguration::~CSVCMsg_GameSessionConfiguration() {
  // @@protoc_insertion_point(destructor:CSVCMsg_GameSessionConfiguration)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CSVCMsg_GameSessionConfiguration::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.hostname_.Destroy();
  _impl_.savegamename_.Destroy();
  _impl_.s1_mapname_.Destroy();
  _impl_.gamemode_.Destroy();
  _impl_.server_ip_address_.Destroy();
  _impl_.data_.Destroy();
  _impl_.previouslevel_.Destroy();
  _impl_.landmarkname_.Destroy();
}

void CSVCMsg_GameSessionConfiguration::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CSVCMsg_GameSessionConfiguration::Clear() {
// @@protoc_insertion_point(message_clear_start:CSVCMsg_GameSessionConfiguration)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.hostname_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.savegamename_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.s1_mapname_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.gamemode_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.server_ip_address_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000020u) {
      _impl_.data_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000040u) {
      _impl_.previouslevel_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000080u) {
      _impl_.landmarkname_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&_impl_.is_multiplayer_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.tick_interval_) -
        reinterpret_cast<char*>(&_impl_.is_multiplayer_)) + sizeof(_impl_.tick_interval_));
  }
  if (cached_has_bits & 0x00070000u) {
    ::memset(&_impl_.is_localonly_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.is_transition_) -
        reinterpret_cast<char*>(&_impl_.is_localonly_)) + sizeof(_impl_.is_transition_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSVCMsg_GameSessionConfiguration::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool is_multiplayer = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_is_multiplayer(&has_bits);
          _impl_.is_multiplayer_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_loadsavegame = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_is_loadsavegame(&has_bits);
          _impl_.is_loadsavegame_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_background_map = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_is_background_map(&has_bits);
          _impl_.is_background_map_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_headless = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_is_headless(&has_bits);
          _impl_.is_headless_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 min_client_limit = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_min_client_limit(&has_bits);
          _impl_.min_client_limit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 max_client_limit = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_max_client_limit(&has_bits);
          _impl_.max_client_limit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 max_clients = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_max_clients(&has_bits);
          _impl_.max_clients_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional fixed32 tick_interval = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 69)) {
          _Internal::set_has_tick_interval(&has_bits);
          _impl_.tick_interval_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint32_t>(ptr);
          ptr += sizeof(uint32_t);
        } else
          goto handle_unusual;
        continue;
      // optional string hostname = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_hostname();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CSVCMsg_GameSessionConfiguration.hostname");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string savegamename = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          auto str = _internal_mutable_savegamename();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CSVCMsg_GameSessionConfiguration.savegamename");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string s1_mapname = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          auto str = _internal_mutable_s1_mapname();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CSVCMsg_GameSessionConfiguration.s1_mapname");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string gamemode = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          auto str = _internal_mutable_gamemode();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CSVCMsg_GameSessionConfiguration.gamemode");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string server_ip_address = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          auto str = _internal_mutable_server_ip_address();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CSVCMsg_GameSessionConfiguration.server_ip_address");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional bytes data = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          auto str = _internal_mutable_data();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_localonly = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          _Internal::set_has_is_localonly(&has_bits);
          _impl_.is_localonly_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_transition = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          _Internal::set_has_is_transition(&has_bits);
          _impl_.is_transition_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string previouslevel = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 138)) {
          auto str = _internal_mutable_previouslevel();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CSVCMsg_GameSessionConfiguration.previouslevel");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string landmarkname = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 146)) {
          auto str = _internal_mutable_landmarkname();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CSVCMsg_GameSessionConfiguration.landmarkname");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional bool no_steam_server = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 152)) {
          _Internal::set_has_no_steam_server(&has_bits);
          _impl_.no_steam_server_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CSVCMsg_GameSessionConfiguration::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSVCMsg_GameSessionConfiguration)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool is_multiplayer = 1;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_is_multiplayer(), target);
  }

  // optional bool is_loadsavegame = 2;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_is_loadsavegame(), target);
  }

  // optional bool is_background_map = 3;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_is_background_map(), target);
  }

  // optional bool is_headless = 4;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_is_headless(), target);
  }

  // optional uint32 min_client_limit = 5;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_min_client_limit(), target);
  }

  // optional uint32 max_client_limit = 6;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_max_client_limit(), target);
  }

  // optional uint32 max_clients = 7;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(7, this->_internal_max_clients(), target);
  }

  // optional fixed32 tick_interval = 8;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed32ToArray(8, this->_internal_tick_interval(), target);
  }

  // optional string hostname = 9;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_hostname().data(), static_cast<int>(this->_internal_hostname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CSVCMsg_GameSessionConfiguration.hostname");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_hostname(), target);
  }

  // optional string savegamename = 10;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_savegamename().data(), static_cast<int>(this->_internal_savegamename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CSVCMsg_GameSessionConfiguration.savegamename");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_savegamename(), target);
  }

  // optional string s1_mapname = 11;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_s1_mapname().data(), static_cast<int>(this->_internal_s1_mapname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CSVCMsg_GameSessionConfiguration.s1_mapname");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_s1_mapname(), target);
  }

  // optional string gamemode = 12;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_gamemode().data(), static_cast<int>(this->_internal_gamemode().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CSVCMsg_GameSessionConfiguration.gamemode");
    target = stream->WriteStringMaybeAliased(
        12, this->_internal_gamemode(), target);
  }

  // optional string server_ip_address = 13;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_server_ip_address().data(), static_cast<int>(this->_internal_server_ip_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CSVCMsg_GameSessionConfiguration.server_ip_address");
    target = stream->WriteStringMaybeAliased(
        13, this->_internal_server_ip_address(), target);
  }

  // optional bytes data = 14;
  if (cached_has_bits & 0x00000020u) {
    target = stream->WriteBytesMaybeAliased(
        14, this->_internal_data(), target);
  }

  // optional bool is_localonly = 15;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(15, this->_internal_is_localonly(), target);
  }

  // optional bool is_transition = 16;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(16, this->_internal_is_transition(), target);
  }

  // optional string previouslevel = 17;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_previouslevel().data(), static_cast<int>(this->_internal_previouslevel().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CSVCMsg_GameSessionConfiguration.previouslevel");
    target = stream->WriteStringMaybeAliased(
        17, this->_internal_previouslevel(), target);
  }

  // optional string landmarkname = 18;
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_landmarkname().data(), static_cast<int>(this->_internal_landmarkname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CSVCMsg_GameSessionConfiguration.landmarkname");
    target = stream->WriteStringMaybeAliased(
        18, this->_internal_landmarkname(), target);
  }

  // optional bool no_steam_server = 19;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(19, this->_internal_no_steam_server(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSVCMsg_GameSessionConfiguration)
  return target;
}

size_t CSVCMsg_GameSessionConfiguration::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSVCMsg_GameSessionConfiguration)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string hostname = 9;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_hostname());
    }

    // optional string savegamename = 10;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_savegamename());
    }

    // optional string s1_mapname = 11;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_s1_mapname());
    }

    // optional string gamemode = 12;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_gamemode());
    }

    // optional string server_ip_address = 13;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_server_ip_address());
    }

    // optional bytes data = 14;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_data());
    }

    // optional string previouslevel = 17;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_previouslevel());
    }

    // optional string landmarkname = 18;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_landmarkname());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional bool is_multiplayer = 1;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 1;
    }

    // optional bool is_loadsavegame = 2;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 1;
    }

    // optional bool is_background_map = 3;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 1;
    }

    // optional bool is_headless = 4;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 1;
    }

    // optional uint32 min_client_limit = 5;
    if (cached_has_bits & 0x00001000u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_min_client_limit());
    }

    // optional uint32 max_client_limit = 6;
    if (cached_has_bits & 0x00002000u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_max_client_limit());
    }

    // optional uint32 max_clients = 7;
    if (cached_has_bits & 0x00004000u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_max_clients());
    }

    // optional fixed32 tick_interval = 8;
    if (cached_has_bits & 0x00008000u) {
      total_size += 1 + 4;
    }

  }
  if (cached_has_bits & 0x00070000u) {
    // optional bool is_localonly = 15;
    if (cached_has_bits & 0x00010000u) {
      total_size += 1 + 1;
    }

    // optional bool no_steam_server = 19;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 + 1;
    }

    // optional bool is_transition = 16;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CSVCMsg_GameSessionConfiguration::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CSVCMsg_GameSessionConfiguration::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CSVCMsg_GameSessionConfiguration::GetClassData() const { return &_class_data_; }


void CSVCMsg_GameSessionConfiguration::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CSVCMsg_GameSessionConfiguration*>(&to_msg);
  auto& from = static_cast<const CSVCMsg_GameSessionConfiguration&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CSVCMsg_GameSessionConfiguration)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_hostname(from._internal_hostname());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_savegamename(from._internal_savegamename());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_s1_mapname(from._internal_s1_mapname());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_set_gamemode(from._internal_gamemode());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_set_server_ip_address(from._internal_server_ip_address());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_internal_set_data(from._internal_data());
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_internal_set_previouslevel(from._internal_previouslevel());
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_internal_set_landmarkname(from._internal_landmarkname());
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.is_multiplayer_ = from._impl_.is_multiplayer_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.is_loadsavegame_ = from._impl_.is_loadsavegame_;
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_impl_.is_background_map_ = from._impl_.is_background_map_;
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_impl_.is_headless_ = from._impl_.is_headless_;
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_impl_.min_client_limit_ = from._impl_.min_client_limit_;
    }
    if (cached_has_bits & 0x00002000u) {
      _this->_impl_.max_client_limit_ = from._impl_.max_client_limit_;
    }
    if (cached_has_bits & 0x00004000u) {
      _this->_impl_.max_clients_ = from._impl_.max_clients_;
    }
    if (cached_has_bits & 0x00008000u) {
      _this->_impl_.tick_interval_ = from._impl_.tick_interval_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00070000u) {
    if (cached_has_bits & 0x00010000u) {
      _this->_impl_.is_localonly_ = from._impl_.is_localonly_;
    }
    if (cached_has_bits & 0x00020000u) {
      _this->_impl_.no_steam_server_ = from._impl_.no_steam_server_;
    }
    if (cached_has_bits & 0x00040000u) {
      _this->_impl_.is_transition_ = from._impl_.is_transition_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CSVCMsg_GameSessionConfiguration::CopyFrom(const CSVCMsg_GameSessionConfiguration& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSVCMsg_GameSessionConfiguration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSVCMsg_GameSessionConfiguration::IsInitialized() const {
  return true;
}

void CSVCMsg_GameSessionConfiguration::InternalSwap(CSVCMsg_GameSessionConfiguration* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.hostname_, lhs_arena,
      &other->_impl_.hostname_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.savegamename_, lhs_arena,
      &other->_impl_.savegamename_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.s1_mapname_, lhs_arena,
      &other->_impl_.s1_mapname_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.gamemode_, lhs_arena,
      &other->_impl_.gamemode_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.server_ip_address_, lhs_arena,
      &other->_impl_.server_ip_address_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.data_, lhs_arena,
      &other->_impl_.data_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.previouslevel_, lhs_arena,
      &other->_impl_.previouslevel_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.landmarkname_, lhs_arena,
      &other->_impl_.landmarkname_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CSVCMsg_GameSessionConfiguration, _impl_.is_transition_)
      + sizeof(CSVCMsg_GameSessionConfiguration::_impl_.is_transition_)
      - PROTOBUF_FIELD_OFFSET(CSVCMsg_GameSessionConfiguration, _impl_.is_multiplayer_)>(
          reinterpret_cast<char*>(&_impl_.is_multiplayer_),
          reinterpret_cast<char*>(&other->_impl_.is_multiplayer_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CSVCMsg_GameSessionConfiguration::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_networkbasetypes_2eproto_getter, &descriptor_table_networkbasetypes_2eproto_once,
      file_level_metadata_networkbasetypes_2eproto[25]);
}

// ===================================================================

class CNETMsg_DebugOverlay::_Internal {
 public:
  using HasBits = decltype(std::declval<CNETMsg_DebugOverlay>()._impl_._has_bits_);
  static void set_has_etype(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CNETMsg_DebugOverlay::CNETMsg_DebugOverlay(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CNETMsg_DebugOverlay)
}
CNETMsg_DebugOverlay::CNETMsg_DebugOverlay(const CNETMsg_DebugOverlay& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CNETMsg_DebugOverlay* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.vectors_){from._impl_.vectors_}
    , decltype(_impl_.colors_){from._impl_.colors_}
    , decltype(_impl_.dimensions_){from._impl_.dimensions_}
    , decltype(_impl_.times_){from._impl_.times_}
    , decltype(_impl_.bools_){from._impl_.bools_}
    , decltype(_impl_.uint64s_){from._impl_.uint64s_}
    , decltype(_impl_.strings_){from._impl_.strings_}
    , decltype(_impl_.etype_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.etype_ = from._impl_.etype_;
  // @@protoc_insertion_point(copy_constructor:CNETMsg_DebugOverlay)
}

inline void CNETMsg_DebugOverlay::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.vectors_){arena}
    , decltype(_impl_.colors_){arena}
    , decltype(_impl_.dimensions_){arena}
    , decltype(_impl_.times_){arena}
    , decltype(_impl_.bools_){arena}
    , decltype(_impl_.uint64s_){arena}
    , decltype(_impl_.strings_){arena}
    , decltype(_impl_.etype_){0}
  };
}

CNETMsg_DebugOverlay::~CNETMsg_DebugOverlay() {
  // @@protoc_insertion_point(destructor:CNETMsg_DebugOverlay)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CNETMsg_DebugOverlay::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.vectors_.~RepeatedPtrField();
  _impl_.colors_.~RepeatedPtrField();
  _impl_.dimensions_.~RepeatedField();
  _impl_.times_.~RepeatedField();
  _impl_.bools_.~RepeatedField();
  _impl_.uint64s_.~RepeatedField();
  _impl_.strings_.~RepeatedPtrField();
}

void CNETMsg_DebugOverlay::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CNETMsg_DebugOverlay::Clear() {
// @@protoc_insertion_point(message_clear_start:CNETMsg_DebugOverlay)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.vectors_.Clear();
  _impl_.colors_.Clear();
  _impl_.dimensions_.Clear();
  _impl_.times_.Clear();
  _impl_.bools_.Clear();
  _impl_.uint64s_.Clear();
  _impl_.strings_.Clear();
  _impl_.etype_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CNETMsg_DebugOverlay::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 etype = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_etype(&has_bits);
          _impl_.etype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .CMsgVector vectors = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_vectors(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .CMsgRGBA colors = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_colors(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated float dimensions = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_dimensions(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
            ptr += sizeof(float);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<37>(ptr));
        } else if (static_cast<uint8_t>(tag) == 34) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_dimensions(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated float times = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 45)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_times(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
            ptr += sizeof(float);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<45>(ptr));
        } else if (static_cast<uint8_t>(tag) == 42) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_times(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated bool bools = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_bools(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<48>(ptr));
        } else if (static_cast<uint8_t>(tag) == 50) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedBoolParser(_internal_mutable_bools(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint64 uint64s = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_uint64s(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<56>(ptr));
        } else if (static_cast<uint8_t>(tag) == 58) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_uint64s(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string strings = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_strings();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            #ifndef NDEBUG
            ::_pbi::VerifyUTF8(str, "CNETMsg_DebugOverlay.strings");
            #endif  // !NDEBUG
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CNETMsg_DebugOverlay::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CNETMsg_DebugOverlay)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 etype = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_etype(), target);
  }

  // repeated .CMsgVector vectors = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_vectors_size()); i < n; i++) {
    const auto& repfield = this->_internal_vectors(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .CMsgRGBA colors = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_colors_size()); i < n; i++) {
    const auto& repfield = this->_internal_colors(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated float dimensions = 4;
  for (int i = 0, n = this->_internal_dimensions_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(4, this->_internal_dimensions(i), target);
  }

  // repeated float times = 5;
  for (int i = 0, n = this->_internal_times_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(5, this->_internal_times(i), target);
  }

  // repeated bool bools = 6;
  for (int i = 0, n = this->_internal_bools_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(6, this->_internal_bools(i), target);
  }

  // repeated uint64 uint64s = 7;
  for (int i = 0, n = this->_internal_uint64s_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(7, this->_internal_uint64s(i), target);
  }

  // repeated string strings = 8;
  for (int i = 0, n = this->_internal_strings_size(); i < n; i++) {
    const auto& s = this->_internal_strings(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CNETMsg_DebugOverlay.strings");
    target = stream->WriteString(8, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CNETMsg_DebugOverlay)
  return target;
}

size_t CNETMsg_DebugOverlay::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CNETMsg_DebugOverlay)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgVector vectors = 2;
  total_size += 1UL * this->_internal_vectors_size();
  for (const auto& msg : this->_impl_.vectors_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .CMsgRGBA colors = 3;
  total_size += 1UL * this->_internal_colors_size();
  for (const auto& msg : this->_impl_.colors_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated float dimensions = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_dimensions_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_dimensions_size());
    total_size += data_size;
  }

  // repeated float times = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_times_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_times_size());
    total_size += data_size;
  }

  // repeated bool bools = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_bools_size());
    size_t data_size = 1UL * count;
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_bools_size());
    total_size += data_size;
  }

  // repeated uint64 uint64s = 7;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt64Size(this->_impl_.uint64s_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_uint64s_size());
    total_size += data_size;
  }

  // repeated string strings = 8;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.strings_.size());
  for (int i = 0, n = _impl_.strings_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.strings_.Get(i));
  }

  // optional int32 etype = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_etype());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CNETMsg_DebugOverlay::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CNETMsg_DebugOverlay::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CNETMsg_DebugOverlay::GetClassData() const { return &_class_data_; }


void CNETMsg_DebugOverlay::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CNETMsg_DebugOverlay*>(&to_msg);
  auto& from = static_cast<const CNETMsg_DebugOverlay&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CNETMsg_DebugOverlay)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.vectors_.MergeFrom(from._impl_.vectors_);
  _this->_impl_.colors_.MergeFrom(from._impl_.colors_);
  _this->_impl_.dimensions_.MergeFrom(from._impl_.dimensions_);
  _this->_impl_.times_.MergeFrom(from._impl_.times_);
  _this->_impl_.bools_.MergeFrom(from._impl_.bools_);
  _this->_impl_.uint64s_.MergeFrom(from._impl_.uint64s_);
  _this->_impl_.strings_.MergeFrom(from._impl_.strings_);
  if (from._internal_has_etype()) {
    _this->_internal_set_etype(from._internal_etype());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CNETMsg_DebugOverlay::CopyFrom(const CNETMsg_DebugOverlay& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CNETMsg_DebugOverlay)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CNETMsg_DebugOverlay::IsInitialized() const {
  return true;
}

void CNETMsg_DebugOverlay::InternalSwap(CNETMsg_DebugOverlay* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.vectors_.InternalSwap(&other->_impl_.vectors_);
  _impl_.colors_.InternalSwap(&other->_impl_.colors_);
  _impl_.dimensions_.InternalSwap(&other->_impl_.dimensions_);
  _impl_.times_.InternalSwap(&other->_impl_.times_);
  _impl_.bools_.InternalSwap(&other->_impl_.bools_);
  _impl_.uint64s_.InternalSwap(&other->_impl_.uint64s_);
  _impl_.strings_.InternalSwap(&other->_impl_.strings_);
  swap(_impl_.etype_, other->_impl_.etype_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CNETMsg_DebugOverlay::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_networkbasetypes_2eproto_getter, &descriptor_table_networkbasetypes_2eproto_once,
      file_level_metadata_networkbasetypes_2eproto[26]);
}

// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::CMsgVector*
Arena::CreateMaybeMessage< ::CMsgVector >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgVector >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgVector2D*
Arena::CreateMaybeMessage< ::CMsgVector2D >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgVector2D >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgQAngle*
Arena::CreateMaybeMessage< ::CMsgQAngle >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgQAngle >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgQuaternion*
Arena::CreateMaybeMessage< ::CMsgQuaternion >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgQuaternion >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgTransform*
Arena::CreateMaybeMessage< ::CMsgTransform >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgTransform >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgRGBA*
Arena::CreateMaybeMessage< ::CMsgRGBA >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgRGBA >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgPlayerInfo*
Arena::CreateMaybeMessage< ::CMsgPlayerInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgPlayerInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::CEntityMsg*
Arena::CreateMaybeMessage< ::CEntityMsg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CEntityMsg >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsg_CVars_CVar*
Arena::CreateMaybeMessage< ::CMsg_CVars_CVar >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsg_CVars_CVar >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsg_CVars*
Arena::CreateMaybeMessage< ::CMsg_CVars >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsg_CVars >(arena);
}
template<> PROTOBUF_NOINLINE ::CNETMsg_NOP*
Arena::CreateMaybeMessage< ::CNETMsg_NOP >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CNETMsg_NOP >(arena);
}
template<> PROTOBUF_NOINLINE ::CNETMsg_SplitScreenUser*
Arena::CreateMaybeMessage< ::CNETMsg_SplitScreenUser >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CNETMsg_SplitScreenUser >(arena);
}
template<> PROTOBUF_NOINLINE ::CNETMsg_Tick*
Arena::CreateMaybeMessage< ::CNETMsg_Tick >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CNETMsg_Tick >(arena);
}
template<> PROTOBUF_NOINLINE ::CNETMsg_StringCmd*
Arena::CreateMaybeMessage< ::CNETMsg_StringCmd >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CNETMsg_StringCmd >(arena);
}
template<> PROTOBUF_NOINLINE ::CNETMsg_SetConVar*
Arena::CreateMaybeMessage< ::CNETMsg_SetConVar >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CNETMsg_SetConVar >(arena);
}
template<> PROTOBUF_NOINLINE ::CNETMsg_SignonState*
Arena::CreateMaybeMessage< ::CNETMsg_SignonState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CNETMsg_SignonState >(arena);
}
template<> PROTOBUF_NOINLINE ::CSVCMsg_GameEvent_key_t*
Arena::CreateMaybeMessage< ::CSVCMsg_GameEvent_key_t >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CSVCMsg_GameEvent_key_t >(arena);
}
template<> PROTOBUF_NOINLINE ::CSVCMsg_GameEvent*
Arena::CreateMaybeMessage< ::CSVCMsg_GameEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CSVCMsg_GameEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::CSVCMsgList_GameEvents_event_t*
Arena::CreateMaybeMessage< ::CSVCMsgList_GameEvents_event_t >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CSVCMsgList_GameEvents_event_t >(arena);
}
template<> PROTOBUF_NOINLINE ::CSVCMsgList_GameEvents*
Arena::CreateMaybeMessage< ::CSVCMsgList_GameEvents >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CSVCMsgList_GameEvents >(arena);
}
template<> PROTOBUF_NOINLINE ::CNETMsg_SpawnGroup_Load*
Arena::CreateMaybeMessage< ::CNETMsg_SpawnGroup_Load >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CNETMsg_SpawnGroup_Load >(arena);
}
template<> PROTOBUF_NOINLINE ::CNETMsg_SpawnGroup_ManifestUpdate*
Arena::CreateMaybeMessage< ::CNETMsg_SpawnGroup_ManifestUpdate >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CNETMsg_SpawnGroup_ManifestUpdate >(arena);
}
template<> PROTOBUF_NOINLINE ::CNETMsg_SpawnGroup_SetCreationTick*
Arena::CreateMaybeMessage< ::CNETMsg_SpawnGroup_SetCreationTick >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CNETMsg_SpawnGroup_SetCreationTick >(arena);
}
template<> PROTOBUF_NOINLINE ::CNETMsg_SpawnGroup_Unload*
Arena::CreateMaybeMessage< ::CNETMsg_SpawnGroup_Unload >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CNETMsg_SpawnGroup_Unload >(arena);
}
template<> PROTOBUF_NOINLINE ::CNETMsg_SpawnGroup_LoadCompleted*
Arena::CreateMaybeMessage< ::CNETMsg_SpawnGroup_LoadCompleted >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CNETMsg_SpawnGroup_LoadCompleted >(arena);
}
template<> PROTOBUF_NOINLINE ::CSVCMsg_GameSessionConfiguration*
Arena::CreateMaybeMessage< ::CSVCMsg_GameSessionConfiguration >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CSVCMsg_GameSessionConfiguration >(arena);
}
template<> PROTOBUF_NOINLINE ::CNETMsg_DebugOverlay*
Arena::CreateMaybeMessage< ::CNETMsg_DebugOverlay >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CNETMsg_DebugOverlay >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
