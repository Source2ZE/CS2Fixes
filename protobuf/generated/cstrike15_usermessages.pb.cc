// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cstrike15_usermessages.proto

#include "cstrike15_usermessages.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

PROTOBUF_CONSTEXPR CCSUsrMsg_VGUIMenu_Keys::CCSUsrMsg_VGUIMenu_Keys(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.value_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct CCSUsrMsg_VGUIMenu_KeysDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CCSUsrMsg_VGUIMenu_KeysDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CCSUsrMsg_VGUIMenu_KeysDefaultTypeInternal() {}
  union {
    CCSUsrMsg_VGUIMenu_Keys _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CCSUsrMsg_VGUIMenu_KeysDefaultTypeInternal _CCSUsrMsg_VGUIMenu_Keys_default_instance_;
PROTOBUF_CONSTEXPR CCSUsrMsg_VGUIMenu::CCSUsrMsg_VGUIMenu(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.keys_)*/{}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.show_)*/false} {}
struct CCSUsrMsg_VGUIMenuDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CCSUsrMsg_VGUIMenuDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CCSUsrMsg_VGUIMenuDefaultTypeInternal() {}
  union {
    CCSUsrMsg_VGUIMenu _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CCSUsrMsg_VGUIMenuDefaultTypeInternal _CCSUsrMsg_VGUIMenu_default_instance_;
PROTOBUF_CONSTEXPR CCSUsrMsg_Geiger::CCSUsrMsg_Geiger(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.range_)*/0} {}
struct CCSUsrMsg_GeigerDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CCSUsrMsg_GeigerDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CCSUsrMsg_GeigerDefaultTypeInternal() {}
  union {
    CCSUsrMsg_Geiger _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CCSUsrMsg_GeigerDefaultTypeInternal _CCSUsrMsg_Geiger_default_instance_;
PROTOBUF_CONSTEXPR CCSUsrMsg_Train::CCSUsrMsg_Train(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.train_)*/0} {}
struct CCSUsrMsg_TrainDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CCSUsrMsg_TrainDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CCSUsrMsg_TrainDefaultTypeInternal() {}
  union {
    CCSUsrMsg_Train _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CCSUsrMsg_TrainDefaultTypeInternal _CCSUsrMsg_Train_default_instance_;
PROTOBUF_CONSTEXPR CCSUsrMsg_HudText::CCSUsrMsg_HudText(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.text_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct CCSUsrMsg_HudTextDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CCSUsrMsg_HudTextDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CCSUsrMsg_HudTextDefaultTypeInternal() {}
  union {
    CCSUsrMsg_HudText _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CCSUsrMsg_HudTextDefaultTypeInternal _CCSUsrMsg_HudText_default_instance_;
PROTOBUF_CONSTEXPR CCSUsrMsg_HudMsg::CCSUsrMsg_HudMsg(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.text_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.pos_)*/nullptr
  , /*decltype(_impl_.clr1_)*/nullptr
  , /*decltype(_impl_.clr2_)*/nullptr
  , /*decltype(_impl_.channel_)*/0
  , /*decltype(_impl_.effect_)*/0
  , /*decltype(_impl_.fade_in_time_)*/0
  , /*decltype(_impl_.fade_out_time_)*/0
  , /*decltype(_impl_.hold_time_)*/0
  , /*decltype(_impl_.fx_time_)*/0} {}
struct CCSUsrMsg_HudMsgDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CCSUsrMsg_HudMsgDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CCSUsrMsg_HudMsgDefaultTypeInternal() {}
  union {
    CCSUsrMsg_HudMsg _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CCSUsrMsg_HudMsgDefaultTypeInternal _CCSUsrMsg_HudMsg_default_instance_;
PROTOBUF_CONSTEXPR CCSUsrMsg_Shake::CCSUsrMsg_Shake(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.command_)*/0
  , /*decltype(_impl_.local_amplitude_)*/0
  , /*decltype(_impl_.frequency_)*/0
  , /*decltype(_impl_.duration_)*/0} {}
struct CCSUsrMsg_ShakeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CCSUsrMsg_ShakeDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CCSUsrMsg_ShakeDefaultTypeInternal() {}
  union {
    CCSUsrMsg_Shake _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CCSUsrMsg_ShakeDefaultTypeInternal _CCSUsrMsg_Shake_default_instance_;
PROTOBUF_CONSTEXPR CCSUsrMsg_Fade::CCSUsrMsg_Fade(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.clr_)*/nullptr
  , /*decltype(_impl_.duration_)*/0
  , /*decltype(_impl_.hold_time_)*/0
  , /*decltype(_impl_.flags_)*/0} {}
struct CCSUsrMsg_FadeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CCSUsrMsg_FadeDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CCSUsrMsg_FadeDefaultTypeInternal() {}
  union {
    CCSUsrMsg_Fade _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CCSUsrMsg_FadeDefaultTypeInternal _CCSUsrMsg_Fade_default_instance_;
PROTOBUF_CONSTEXPR CCSUsrMsg_Rumble::CCSUsrMsg_Rumble(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.index_)*/0
  , /*decltype(_impl_.data_)*/0
  , /*decltype(_impl_.flags_)*/0} {}
struct CCSUsrMsg_RumbleDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CCSUsrMsg_RumbleDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CCSUsrMsg_RumbleDefaultTypeInternal() {}
  union {
    CCSUsrMsg_Rumble _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CCSUsrMsg_RumbleDefaultTypeInternal _CCSUsrMsg_Rumble_default_instance_;
PROTOBUF_CONSTEXPR CCSUsrMsg_CloseCaption::CCSUsrMsg_CloseCaption(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.cctoken_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.hash_)*/0u
  , /*decltype(_impl_.duration_)*/0
  , /*decltype(_impl_.from_player_)*/false} {}
struct CCSUsrMsg_CloseCaptionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CCSUsrMsg_CloseCaptionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CCSUsrMsg_CloseCaptionDefaultTypeInternal() {}
  union {
    CCSUsrMsg_CloseCaption _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CCSUsrMsg_CloseCaptionDefaultTypeInternal _CCSUsrMsg_CloseCaption_default_instance_;
PROTOBUF_CONSTEXPR CCSUsrMsg_CloseCaptionDirect::CCSUsrMsg_CloseCaptionDirect(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.hash_)*/0u
  , /*decltype(_impl_.duration_)*/0
  , /*decltype(_impl_.from_player_)*/false} {}
struct CCSUsrMsg_CloseCaptionDirectDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CCSUsrMsg_CloseCaptionDirectDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CCSUsrMsg_CloseCaptionDirectDefaultTypeInternal() {}
  union {
    CCSUsrMsg_CloseCaptionDirect _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CCSUsrMsg_CloseCaptionDirectDefaultTypeInternal _CCSUsrMsg_CloseCaptionDirect_default_instance_;
PROTOBUF_CONSTEXPR CCSUsrMsg_SendAudio::CCSUsrMsg_SendAudio(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.radio_sound_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct CCSUsrMsg_SendAudioDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CCSUsrMsg_SendAudioDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CCSUsrMsg_SendAudioDefaultTypeInternal() {}
  union {
    CCSUsrMsg_SendAudio _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CCSUsrMsg_SendAudioDefaultTypeInternal _CCSUsrMsg_SendAudio_default_instance_;
PROTOBUF_CONSTEXPR CCSUsrMsg_RawAudio::CCSUsrMsg_RawAudio(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.voice_filename_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.pitch_)*/0
  , /*decltype(_impl_.duration_)*/0
  , /*decltype(_impl_.entidx_)*/-1} {}
struct CCSUsrMsg_RawAudioDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CCSUsrMsg_RawAudioDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CCSUsrMsg_RawAudioDefaultTypeInternal() {}
  union {
    CCSUsrMsg_RawAudio _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CCSUsrMsg_RawAudioDefaultTypeInternal _CCSUsrMsg_RawAudio_default_instance_;
PROTOBUF_CONSTEXPR CCSUsrMsg_VoiceMask_PlayerMask::CCSUsrMsg_VoiceMask_PlayerMask(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.game_rules_mask_)*/0
  , /*decltype(_impl_.ban_masks_)*/0} {}
struct CCSUsrMsg_VoiceMask_PlayerMaskDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CCSUsrMsg_VoiceMask_PlayerMaskDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CCSUsrMsg_VoiceMask_PlayerMaskDefaultTypeInternal() {}
  union {
    CCSUsrMsg_VoiceMask_PlayerMask _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CCSUsrMsg_VoiceMask_PlayerMaskDefaultTypeInternal _CCSUsrMsg_VoiceMask_PlayerMask_default_instance_;
PROTOBUF_CONSTEXPR CCSUsrMsg_VoiceMask::CCSUsrMsg_VoiceMask(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.player_masks_)*/{}
  , /*decltype(_impl_.player_mod_enable_)*/false} {}
struct CCSUsrMsg_VoiceMaskDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CCSUsrMsg_VoiceMaskDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CCSUsrMsg_VoiceMaskDefaultTypeInternal() {}
  union {
    CCSUsrMsg_VoiceMask _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CCSUsrMsg_VoiceMaskDefaultTypeInternal _CCSUsrMsg_VoiceMask_default_instance_;
PROTOBUF_CONSTEXPR CCSUsrMsg_Damage::CCSUsrMsg_Damage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.inflictor_world_pos_)*/nullptr
  , /*decltype(_impl_.amount_)*/0
  , /*decltype(_impl_.victim_entindex_)*/-1} {}
struct CCSUsrMsg_DamageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CCSUsrMsg_DamageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CCSUsrMsg_DamageDefaultTypeInternal() {}
  union {
    CCSUsrMsg_Damage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CCSUsrMsg_DamageDefaultTypeInternal _CCSUsrMsg_Damage_default_instance_;
PROTOBUF_CONSTEXPR CCSUsrMsg_RadioText::CCSUsrMsg_RadioText(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.params_)*/{}
  , /*decltype(_impl_.msg_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.msg_dst_)*/0
  , /*decltype(_impl_.client_)*/-1} {}
struct CCSUsrMsg_RadioTextDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CCSUsrMsg_RadioTextDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CCSUsrMsg_RadioTextDefaultTypeInternal() {}
  union {
    CCSUsrMsg_RadioText _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CCSUsrMsg_RadioTextDefaultTypeInternal _CCSUsrMsg_RadioText_default_instance_;
PROTOBUF_CONSTEXPR CCSUsrMsg_HintText::CCSUsrMsg_HintText(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.message_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct CCSUsrMsg_HintTextDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CCSUsrMsg_HintTextDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CCSUsrMsg_HintTextDefaultTypeInternal() {}
  union {
    CCSUsrMsg_HintText _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CCSUsrMsg_HintTextDefaultTypeInternal _CCSUsrMsg_HintText_default_instance_;
PROTOBUF_CONSTEXPR CCSUsrMsg_KeyHintText::CCSUsrMsg_KeyHintText(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.messages_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CCSUsrMsg_KeyHintTextDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CCSUsrMsg_KeyHintTextDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CCSUsrMsg_KeyHintTextDefaultTypeInternal() {}
  union {
    CCSUsrMsg_KeyHintText _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CCSUsrMsg_KeyHintTextDefaultTypeInternal _CCSUsrMsg_KeyHintText_default_instance_;
PROTOBUF_CONSTEXPR CCSUsrMsg_ProcessSpottedEntityUpdate_SpottedEntityUpdate::CCSUsrMsg_ProcessSpottedEntityUpdate_SpottedEntityUpdate(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.class_id_)*/0
  , /*decltype(_impl_.origin_x_)*/0
  , /*decltype(_impl_.origin_y_)*/0
  , /*decltype(_impl_.origin_z_)*/0
  , /*decltype(_impl_.angle_y_)*/0
  , /*decltype(_impl_.defuser_)*/false
  , /*decltype(_impl_.player_has_defuser_)*/false
  , /*decltype(_impl_.player_has_c4_)*/false
  , /*decltype(_impl_.entity_idx_)*/-1} {}
struct CCSUsrMsg_ProcessSpottedEntityUpdate_SpottedEntityUpdateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CCSUsrMsg_ProcessSpottedEntityUpdate_SpottedEntityUpdateDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CCSUsrMsg_ProcessSpottedEntityUpdate_SpottedEntityUpdateDefaultTypeInternal() {}
  union {
    CCSUsrMsg_ProcessSpottedEntityUpdate_SpottedEntityUpdate _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CCSUsrMsg_ProcessSpottedEntityUpdate_SpottedEntityUpdateDefaultTypeInternal _CCSUsrMsg_ProcessSpottedEntityUpdate_SpottedEntityUpdate_default_instance_;
PROTOBUF_CONSTEXPR CCSUsrMsg_ProcessSpottedEntityUpdate::CCSUsrMsg_ProcessSpottedEntityUpdate(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.entity_updates_)*/{}
  , /*decltype(_impl_.new_update_)*/false} {}
struct CCSUsrMsg_ProcessSpottedEntityUpdateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CCSUsrMsg_ProcessSpottedEntityUpdateDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CCSUsrMsg_ProcessSpottedEntityUpdateDefaultTypeInternal() {}
  union {
    CCSUsrMsg_ProcessSpottedEntityUpdate _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CCSUsrMsg_ProcessSpottedEntityUpdateDefaultTypeInternal _CCSUsrMsg_ProcessSpottedEntityUpdate_default_instance_;
PROTOBUF_CONSTEXPR CCSUsrMsg_SendPlayerItemDrops::CCSUsrMsg_SendPlayerItemDrops(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.entity_updates_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CCSUsrMsg_SendPlayerItemDropsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CCSUsrMsg_SendPlayerItemDropsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CCSUsrMsg_SendPlayerItemDropsDefaultTypeInternal() {}
  union {
    CCSUsrMsg_SendPlayerItemDrops _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CCSUsrMsg_SendPlayerItemDropsDefaultTypeInternal _CCSUsrMsg_SendPlayerItemDrops_default_instance_;
PROTOBUF_CONSTEXPR CCSUsrMsg_SendPlayerItemFound::CCSUsrMsg_SendPlayerItemFound(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.iteminfo_)*/nullptr
  , /*decltype(_impl_.playerslot_)*/-1} {}
struct CCSUsrMsg_SendPlayerItemFoundDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CCSUsrMsg_SendPlayerItemFoundDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CCSUsrMsg_SendPlayerItemFoundDefaultTypeInternal() {}
  union {
    CCSUsrMsg_SendPlayerItemFound _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CCSUsrMsg_SendPlayerItemFoundDefaultTypeInternal _CCSUsrMsg_SendPlayerItemFound_default_instance_;
PROTOBUF_CONSTEXPR CCSUsrMsg_ReloadEffect::CCSUsrMsg_ReloadEffect(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.actanim_)*/0
  , /*decltype(_impl_.origin_x_)*/0
  , /*decltype(_impl_.origin_y_)*/0
  , /*decltype(_impl_.origin_z_)*/0
  , /*decltype(_impl_.entidx_)*/-1} {}
struct CCSUsrMsg_ReloadEffectDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CCSUsrMsg_ReloadEffectDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CCSUsrMsg_ReloadEffectDefaultTypeInternal() {}
  union {
    CCSUsrMsg_ReloadEffect _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CCSUsrMsg_ReloadEffectDefaultTypeInternal _CCSUsrMsg_ReloadEffect_default_instance_;
PROTOBUF_CONSTEXPR CCSUsrMsg_WeaponSound::CCSUsrMsg_WeaponSound(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.sound_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.origin_x_)*/0
  , /*decltype(_impl_.origin_y_)*/0
  , /*decltype(_impl_.origin_z_)*/0
  , /*decltype(_impl_.game_timestamp_)*/0
  , /*decltype(_impl_.source_soundscapeid_)*/0u
  , /*decltype(_impl_.entidx_)*/-1} {}
struct CCSUsrMsg_WeaponSoundDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CCSUsrMsg_WeaponSoundDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CCSUsrMsg_WeaponSoundDefaultTypeInternal() {}
  union {
    CCSUsrMsg_WeaponSound _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CCSUsrMsg_WeaponSoundDefaultTypeInternal _CCSUsrMsg_WeaponSound_default_instance_;
PROTOBUF_CONSTEXPR CCSUsrMsg_UpdateScreenHealthBar::CCSUsrMsg_UpdateScreenHealthBar(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.healthratio_old_)*/0
  , /*decltype(_impl_.healthratio_new_)*/0
  , /*decltype(_impl_.style_)*/0
  , /*decltype(_impl_.entidx_)*/-1} {}
struct CCSUsrMsg_UpdateScreenHealthBarDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CCSUsrMsg_UpdateScreenHealthBarDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CCSUsrMsg_UpdateScreenHealthBarDefaultTypeInternal() {}
  union {
    CCSUsrMsg_UpdateScreenHealthBar _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CCSUsrMsg_UpdateScreenHealthBarDefaultTypeInternal _CCSUsrMsg_UpdateScreenHealthBar_default_instance_;
PROTOBUF_CONSTEXPR CCSUsrMsg_EntityOutlineHighlight::CCSUsrMsg_EntityOutlineHighlight(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.removehighlight_)*/false
  , /*decltype(_impl_.entidx_)*/-1} {}
struct CCSUsrMsg_EntityOutlineHighlightDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CCSUsrMsg_EntityOutlineHighlightDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CCSUsrMsg_EntityOutlineHighlightDefaultTypeInternal() {}
  union {
    CCSUsrMsg_EntityOutlineHighlight _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CCSUsrMsg_EntityOutlineHighlightDefaultTypeInternal _CCSUsrMsg_EntityOutlineHighlight_default_instance_;
PROTOBUF_CONSTEXPR CCSUsrMsg_AdjustMoney::CCSUsrMsg_AdjustMoney(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.amount_)*/0} {}
struct CCSUsrMsg_AdjustMoneyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CCSUsrMsg_AdjustMoneyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CCSUsrMsg_AdjustMoneyDefaultTypeInternal() {}
  union {
    CCSUsrMsg_AdjustMoney _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CCSUsrMsg_AdjustMoneyDefaultTypeInternal _CCSUsrMsg_AdjustMoney_default_instance_;
PROTOBUF_CONSTEXPR CCSUsrMsg_ReportHit::CCSUsrMsg_ReportHit(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.pos_x_)*/0
  , /*decltype(_impl_.pos_y_)*/0
  , /*decltype(_impl_.pos_z_)*/0
  , /*decltype(_impl_.timestamp_)*/0} {}
struct CCSUsrMsg_ReportHitDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CCSUsrMsg_ReportHitDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CCSUsrMsg_ReportHitDefaultTypeInternal() {}
  union {
    CCSUsrMsg_ReportHit _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CCSUsrMsg_ReportHitDefaultTypeInternal _CCSUsrMsg_ReportHit_default_instance_;
PROTOBUF_CONSTEXPR CCSUsrMsg_KillCam::CCSUsrMsg_KillCam(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.obs_mode_)*/0
  , /*decltype(_impl_.first_target_)*/-1
  , /*decltype(_impl_.second_target_)*/-1} {}
struct CCSUsrMsg_KillCamDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CCSUsrMsg_KillCamDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CCSUsrMsg_KillCamDefaultTypeInternal() {}
  union {
    CCSUsrMsg_KillCam _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CCSUsrMsg_KillCamDefaultTypeInternal _CCSUsrMsg_KillCam_default_instance_;
PROTOBUF_CONSTEXPR CCSUsrMsg_DesiredTimescale::CCSUsrMsg_DesiredTimescale(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.desired_timescale_)*/0
  , /*decltype(_impl_.duration_realtime_sec_)*/0
  , /*decltype(_impl_.interpolator_type_)*/0
  , /*decltype(_impl_.start_blend_time_)*/0} {}
struct CCSUsrMsg_DesiredTimescaleDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CCSUsrMsg_DesiredTimescaleDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CCSUsrMsg_DesiredTimescaleDefaultTypeInternal() {}
  union {
    CCSUsrMsg_DesiredTimescale _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CCSUsrMsg_DesiredTimescaleDefaultTypeInternal _CCSUsrMsg_DesiredTimescale_default_instance_;
PROTOBUF_CONSTEXPR CCSUsrMsg_CurrentTimescale::CCSUsrMsg_CurrentTimescale(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.cur_timescale_)*/0} {}
struct CCSUsrMsg_CurrentTimescaleDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CCSUsrMsg_CurrentTimescaleDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CCSUsrMsg_CurrentTimescaleDefaultTypeInternal() {}
  union {
    CCSUsrMsg_CurrentTimescale _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CCSUsrMsg_CurrentTimescaleDefaultTypeInternal _CCSUsrMsg_CurrentTimescale_default_instance_;
PROTOBUF_CONSTEXPR CCSUsrMsg_AchievementEvent::CCSUsrMsg_AchievementEvent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.achievement_)*/0
  , /*decltype(_impl_.count_)*/0
  , /*decltype(_impl_.user_id_)*/0} {}
struct CCSUsrMsg_AchievementEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CCSUsrMsg_AchievementEventDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CCSUsrMsg_AchievementEventDefaultTypeInternal() {}
  union {
    CCSUsrMsg_AchievementEvent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CCSUsrMsg_AchievementEventDefaultTypeInternal _CCSUsrMsg_AchievementEvent_default_instance_;
PROTOBUF_CONSTEXPR CCSUsrMsg_MatchEndConditions::CCSUsrMsg_MatchEndConditions(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.fraglimit_)*/0
  , /*decltype(_impl_.mp_maxrounds_)*/0
  , /*decltype(_impl_.mp_winlimit_)*/0
  , /*decltype(_impl_.mp_timelimit_)*/0} {}
struct CCSUsrMsg_MatchEndConditionsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CCSUsrMsg_MatchEndConditionsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CCSUsrMsg_MatchEndConditionsDefaultTypeInternal() {}
  union {
    CCSUsrMsg_MatchEndConditions _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CCSUsrMsg_MatchEndConditionsDefaultTypeInternal _CCSUsrMsg_MatchEndConditions_default_instance_;
PROTOBUF_CONSTEXPR CCSUsrMsg_PlayerStatsUpdate_Stat::CCSUsrMsg_PlayerStatsUpdate_Stat(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.idx_)*/0
  , /*decltype(_impl_.delta_)*/0} {}
struct CCSUsrMsg_PlayerStatsUpdate_StatDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CCSUsrMsg_PlayerStatsUpdate_StatDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CCSUsrMsg_PlayerStatsUpdate_StatDefaultTypeInternal() {}
  union {
    CCSUsrMsg_PlayerStatsUpdate_Stat _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CCSUsrMsg_PlayerStatsUpdate_StatDefaultTypeInternal _CCSUsrMsg_PlayerStatsUpdate_Stat_default_instance_;
PROTOBUF_CONSTEXPR CCSUsrMsg_PlayerStatsUpdate::CCSUsrMsg_PlayerStatsUpdate(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.stats_)*/{}
  , /*decltype(_impl_.version_)*/0
  , /*decltype(_impl_.ehandle_)*/0u
  , /*decltype(_impl_.crc_)*/0} {}
struct CCSUsrMsg_PlayerStatsUpdateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CCSUsrMsg_PlayerStatsUpdateDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CCSUsrMsg_PlayerStatsUpdateDefaultTypeInternal() {}
  union {
    CCSUsrMsg_PlayerStatsUpdate _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CCSUsrMsg_PlayerStatsUpdateDefaultTypeInternal _CCSUsrMsg_PlayerStatsUpdate_default_instance_;
PROTOBUF_CONSTEXPR CCSUsrMsg_QuestProgress::CCSUsrMsg_QuestProgress(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.quest_id_)*/0u
  , /*decltype(_impl_.normal_points_)*/0u
  , /*decltype(_impl_.bonus_points_)*/0u
  , /*decltype(_impl_.is_event_quest_)*/false} {}
struct CCSUsrMsg_QuestProgressDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CCSUsrMsg_QuestProgressDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CCSUsrMsg_QuestProgressDefaultTypeInternal() {}
  union {
    CCSUsrMsg_QuestProgress _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CCSUsrMsg_QuestProgressDefaultTypeInternal _CCSUsrMsg_QuestProgress_default_instance_;
PROTOBUF_CONSTEXPR CCSUsrMsg_ScoreLeaderboardData::CCSUsrMsg_ScoreLeaderboardData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.data_)*/nullptr} {}
struct CCSUsrMsg_ScoreLeaderboardDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CCSUsrMsg_ScoreLeaderboardDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CCSUsrMsg_ScoreLeaderboardDataDefaultTypeInternal() {}
  union {
    CCSUsrMsg_ScoreLeaderboardData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CCSUsrMsg_ScoreLeaderboardDataDefaultTypeInternal _CCSUsrMsg_ScoreLeaderboardData_default_instance_;
PROTOBUF_CONSTEXPR CCSUsrMsg_PlayerDecalDigitalSignature::CCSUsrMsg_PlayerDecalDigitalSignature(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.data_)*/nullptr} {}
struct CCSUsrMsg_PlayerDecalDigitalSignatureDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CCSUsrMsg_PlayerDecalDigitalSignatureDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CCSUsrMsg_PlayerDecalDigitalSignatureDefaultTypeInternal() {}
  union {
    CCSUsrMsg_PlayerDecalDigitalSignature _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CCSUsrMsg_PlayerDecalDigitalSignatureDefaultTypeInternal _CCSUsrMsg_PlayerDecalDigitalSignature_default_instance_;
PROTOBUF_CONSTEXPR CCSUsrMsg_XRankGet::CCSUsrMsg_XRankGet(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.mode_idx_)*/0
  , /*decltype(_impl_.controller_)*/0} {}
struct CCSUsrMsg_XRankGetDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CCSUsrMsg_XRankGetDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CCSUsrMsg_XRankGetDefaultTypeInternal() {}
  union {
    CCSUsrMsg_XRankGet _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CCSUsrMsg_XRankGetDefaultTypeInternal _CCSUsrMsg_XRankGet_default_instance_;
PROTOBUF_CONSTEXPR CCSUsrMsg_XRankUpd::CCSUsrMsg_XRankUpd(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.mode_idx_)*/0
  , /*decltype(_impl_.controller_)*/0
  , /*decltype(_impl_.ranking_)*/0} {}
struct CCSUsrMsg_XRankUpdDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CCSUsrMsg_XRankUpdDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CCSUsrMsg_XRankUpdDefaultTypeInternal() {}
  union {
    CCSUsrMsg_XRankUpd _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CCSUsrMsg_XRankUpdDefaultTypeInternal _CCSUsrMsg_XRankUpd_default_instance_;
PROTOBUF_CONSTEXPR CCSUsrMsg_CallVoteFailed::CCSUsrMsg_CallVoteFailed(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.reason_)*/0
  , /*decltype(_impl_.time_)*/0} {}
struct CCSUsrMsg_CallVoteFailedDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CCSUsrMsg_CallVoteFailedDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CCSUsrMsg_CallVoteFailedDefaultTypeInternal() {}
  union {
    CCSUsrMsg_CallVoteFailed _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CCSUsrMsg_CallVoteFailedDefaultTypeInternal _CCSUsrMsg_CallVoteFailed_default_instance_;
PROTOBUF_CONSTEXPR CCSUsrMsg_VoteStart::CCSUsrMsg_VoteStart(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.disp_str_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.details_str_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.other_team_str_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.team_)*/0
  , /*decltype(_impl_.vote_type_)*/0
  , /*decltype(_impl_.is_yes_no_vote_)*/false
  , /*decltype(_impl_.player_slot_)*/-1
  , /*decltype(_impl_.player_slot_target_)*/-1} {}
struct CCSUsrMsg_VoteStartDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CCSUsrMsg_VoteStartDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CCSUsrMsg_VoteStartDefaultTypeInternal() {}
  union {
    CCSUsrMsg_VoteStart _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CCSUsrMsg_VoteStartDefaultTypeInternal _CCSUsrMsg_VoteStart_default_instance_;
PROTOBUF_CONSTEXPR CCSUsrMsg_VotePass::CCSUsrMsg_VotePass(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.disp_str_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.details_str_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.team_)*/0
  , /*decltype(_impl_.vote_type_)*/0} {}
struct CCSUsrMsg_VotePassDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CCSUsrMsg_VotePassDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CCSUsrMsg_VotePassDefaultTypeInternal() {}
  union {
    CCSUsrMsg_VotePass _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CCSUsrMsg_VotePassDefaultTypeInternal _CCSUsrMsg_VotePass_default_instance_;
PROTOBUF_CONSTEXPR CCSUsrMsg_VoteFailed::CCSUsrMsg_VoteFailed(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.team_)*/0
  , /*decltype(_impl_.reason_)*/0} {}
struct CCSUsrMsg_VoteFailedDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CCSUsrMsg_VoteFailedDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CCSUsrMsg_VoteFailedDefaultTypeInternal() {}
  union {
    CCSUsrMsg_VoteFailed _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CCSUsrMsg_VoteFailedDefaultTypeInternal _CCSUsrMsg_VoteFailed_default_instance_;
PROTOBUF_CONSTEXPR CCSUsrMsg_VoteSetup::CCSUsrMsg_VoteSetup(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.potential_issues_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CCSUsrMsg_VoteSetupDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CCSUsrMsg_VoteSetupDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CCSUsrMsg_VoteSetupDefaultTypeInternal() {}
  union {
    CCSUsrMsg_VoteSetup _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CCSUsrMsg_VoteSetupDefaultTypeInternal _CCSUsrMsg_VoteSetup_default_instance_;
PROTOBUF_CONSTEXPR CCSUsrMsg_SendLastKillerDamageToClient::CCSUsrMsg_SendLastKillerDamageToClient(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.num_hits_given_)*/0
  , /*decltype(_impl_.damage_given_)*/0
  , /*decltype(_impl_.num_hits_taken_)*/0
  , /*decltype(_impl_.damage_taken_)*/0
  , /*decltype(_impl_.actual_damage_given_)*/0
  , /*decltype(_impl_.actual_damage_taken_)*/0} {}
struct CCSUsrMsg_SendLastKillerDamageToClientDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CCSUsrMsg_SendLastKillerDamageToClientDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CCSUsrMsg_SendLastKillerDamageToClientDefaultTypeInternal() {}
  union {
    CCSUsrMsg_SendLastKillerDamageToClient _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CCSUsrMsg_SendLastKillerDamageToClientDefaultTypeInternal _CCSUsrMsg_SendLastKillerDamageToClient_default_instance_;
PROTOBUF_CONSTEXPR CCSUsrMsg_ServerRankUpdate_RankUpdate::CCSUsrMsg_ServerRankUpdate_RankUpdate(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.account_id_)*/0
  , /*decltype(_impl_.rank_old_)*/0
  , /*decltype(_impl_.rank_new_)*/0
  , /*decltype(_impl_.num_wins_)*/0
  , /*decltype(_impl_.rank_change_)*/0
  , /*decltype(_impl_.rank_type_id_)*/0} {}
struct CCSUsrMsg_ServerRankUpdate_RankUpdateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CCSUsrMsg_ServerRankUpdate_RankUpdateDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CCSUsrMsg_ServerRankUpdate_RankUpdateDefaultTypeInternal() {}
  union {
    CCSUsrMsg_ServerRankUpdate_RankUpdate _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CCSUsrMsg_ServerRankUpdate_RankUpdateDefaultTypeInternal _CCSUsrMsg_ServerRankUpdate_RankUpdate_default_instance_;
PROTOBUF_CONSTEXPR CCSUsrMsg_ServerRankUpdate::CCSUsrMsg_ServerRankUpdate(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.rank_update_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CCSUsrMsg_ServerRankUpdateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CCSUsrMsg_ServerRankUpdateDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CCSUsrMsg_ServerRankUpdateDefaultTypeInternal() {}
  union {
    CCSUsrMsg_ServerRankUpdate _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CCSUsrMsg_ServerRankUpdateDefaultTypeInternal _CCSUsrMsg_ServerRankUpdate_default_instance_;
PROTOBUF_CONSTEXPR CCSUsrMsg_XpUpdate::CCSUsrMsg_XpUpdate(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.data_)*/nullptr} {}
struct CCSUsrMsg_XpUpdateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CCSUsrMsg_XpUpdateDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CCSUsrMsg_XpUpdateDefaultTypeInternal() {}
  union {
    CCSUsrMsg_XpUpdate _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CCSUsrMsg_XpUpdateDefaultTypeInternal _CCSUsrMsg_XpUpdate_default_instance_;
PROTOBUF_CONSTEXPR CCSUsrMsg_ItemPickup::CCSUsrMsg_ItemPickup(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.item_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct CCSUsrMsg_ItemPickupDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CCSUsrMsg_ItemPickupDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CCSUsrMsg_ItemPickupDefaultTypeInternal() {}
  union {
    CCSUsrMsg_ItemPickup _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CCSUsrMsg_ItemPickupDefaultTypeInternal _CCSUsrMsg_ItemPickup_default_instance_;
PROTOBUF_CONSTEXPR CCSUsrMsg_ShowMenu::CCSUsrMsg_ShowMenu(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.menu_string_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.bits_valid_slots_)*/0
  , /*decltype(_impl_.display_time_)*/0} {}
struct CCSUsrMsg_ShowMenuDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CCSUsrMsg_ShowMenuDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CCSUsrMsg_ShowMenuDefaultTypeInternal() {}
  union {
    CCSUsrMsg_ShowMenu _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CCSUsrMsg_ShowMenuDefaultTypeInternal _CCSUsrMsg_ShowMenu_default_instance_;
PROTOBUF_CONSTEXPR CCSUsrMsg_BarTime::CCSUsrMsg_BarTime(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.time_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct CCSUsrMsg_BarTimeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CCSUsrMsg_BarTimeDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CCSUsrMsg_BarTimeDefaultTypeInternal() {}
  union {
    CCSUsrMsg_BarTime _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CCSUsrMsg_BarTimeDefaultTypeInternal _CCSUsrMsg_BarTime_default_instance_;
PROTOBUF_CONSTEXPR CCSUsrMsg_AmmoDenied::CCSUsrMsg_AmmoDenied(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.ammoidx_)*/0} {}
struct CCSUsrMsg_AmmoDeniedDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CCSUsrMsg_AmmoDeniedDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CCSUsrMsg_AmmoDeniedDefaultTypeInternal() {}
  union {
    CCSUsrMsg_AmmoDenied _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CCSUsrMsg_AmmoDeniedDefaultTypeInternal _CCSUsrMsg_AmmoDenied_default_instance_;
PROTOBUF_CONSTEXPR CCSUsrMsg_MarkAchievement::CCSUsrMsg_MarkAchievement(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.achievement_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct CCSUsrMsg_MarkAchievementDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CCSUsrMsg_MarkAchievementDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CCSUsrMsg_MarkAchievementDefaultTypeInternal() {}
  union {
    CCSUsrMsg_MarkAchievement _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CCSUsrMsg_MarkAchievementDefaultTypeInternal _CCSUsrMsg_MarkAchievement_default_instance_;
PROTOBUF_CONSTEXPR CCSUsrMsg_MatchStatsUpdate::CCSUsrMsg_MatchStatsUpdate(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.update_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct CCSUsrMsg_MatchStatsUpdateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CCSUsrMsg_MatchStatsUpdateDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CCSUsrMsg_MatchStatsUpdateDefaultTypeInternal() {}
  union {
    CCSUsrMsg_MatchStatsUpdate _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CCSUsrMsg_MatchStatsUpdateDefaultTypeInternal _CCSUsrMsg_MatchStatsUpdate_default_instance_;
PROTOBUF_CONSTEXPR CCSUsrMsg_ItemDrop::CCSUsrMsg_ItemDrop(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.itemid_)*/int64_t{0}
  , /*decltype(_impl_.death_)*/false} {}
struct CCSUsrMsg_ItemDropDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CCSUsrMsg_ItemDropDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CCSUsrMsg_ItemDropDefaultTypeInternal() {}
  union {
    CCSUsrMsg_ItemDrop _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CCSUsrMsg_ItemDropDefaultTypeInternal _CCSUsrMsg_ItemDrop_default_instance_;
PROTOBUF_CONSTEXPR CCSUsrMsg_GlowPropTurnOff::CCSUsrMsg_GlowPropTurnOff(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.entidx_)*/-1} {}
struct CCSUsrMsg_GlowPropTurnOffDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CCSUsrMsg_GlowPropTurnOffDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CCSUsrMsg_GlowPropTurnOffDefaultTypeInternal() {}
  union {
    CCSUsrMsg_GlowPropTurnOff _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CCSUsrMsg_GlowPropTurnOffDefaultTypeInternal _CCSUsrMsg_GlowPropTurnOff_default_instance_;
PROTOBUF_CONSTEXPR CCSUsrMsg_RoundBackupFilenames::CCSUsrMsg_RoundBackupFilenames(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.filename_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.nicename_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.count_)*/0
  , /*decltype(_impl_.index_)*/0} {}
struct CCSUsrMsg_RoundBackupFilenamesDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CCSUsrMsg_RoundBackupFilenamesDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CCSUsrMsg_RoundBackupFilenamesDefaultTypeInternal() {}
  union {
    CCSUsrMsg_RoundBackupFilenames _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CCSUsrMsg_RoundBackupFilenamesDefaultTypeInternal _CCSUsrMsg_RoundBackupFilenames_default_instance_;
PROTOBUF_CONSTEXPR CCSUsrMsg_SSUI::CCSUsrMsg_SSUI(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.show_)*/false
  , /*decltype(_impl_.start_time_)*/0
  , /*decltype(_impl_.end_time_)*/0} {}
struct CCSUsrMsg_SSUIDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CCSUsrMsg_SSUIDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CCSUsrMsg_SSUIDefaultTypeInternal() {}
  union {
    CCSUsrMsg_SSUI _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CCSUsrMsg_SSUIDefaultTypeInternal _CCSUsrMsg_SSUI_default_instance_;
PROTOBUF_CONSTEXPR CCSUsrMsg_SurvivalStats_Fact::CCSUsrMsg_SurvivalStats_Fact(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.type_)*/0
  , /*decltype(_impl_.display_)*/0
  , /*decltype(_impl_.value_)*/0
  , /*decltype(_impl_.interestingness_)*/0} {}
struct CCSUsrMsg_SurvivalStats_FactDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CCSUsrMsg_SurvivalStats_FactDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CCSUsrMsg_SurvivalStats_FactDefaultTypeInternal() {}
  union {
    CCSUsrMsg_SurvivalStats_Fact _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CCSUsrMsg_SurvivalStats_FactDefaultTypeInternal _CCSUsrMsg_SurvivalStats_Fact_default_instance_;
PROTOBUF_CONSTEXPR CCSUsrMsg_SurvivalStats_Placement::CCSUsrMsg_SurvivalStats_Placement(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.xuid_)*/uint64_t{0u}
  , /*decltype(_impl_.teamnumber_)*/0
  , /*decltype(_impl_.placement_)*/0} {}
struct CCSUsrMsg_SurvivalStats_PlacementDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CCSUsrMsg_SurvivalStats_PlacementDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CCSUsrMsg_SurvivalStats_PlacementDefaultTypeInternal() {}
  union {
    CCSUsrMsg_SurvivalStats_Placement _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CCSUsrMsg_SurvivalStats_PlacementDefaultTypeInternal _CCSUsrMsg_SurvivalStats_Placement_default_instance_;
PROTOBUF_CONSTEXPR CCSUsrMsg_SurvivalStats_Damage::CCSUsrMsg_SurvivalStats_Damage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.xuid_)*/uint64_t{0u}
  , /*decltype(_impl_.to_)*/0
  , /*decltype(_impl_.to_hits_)*/0
  , /*decltype(_impl_.from_)*/0
  , /*decltype(_impl_.from_hits_)*/0} {}
struct CCSUsrMsg_SurvivalStats_DamageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CCSUsrMsg_SurvivalStats_DamageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CCSUsrMsg_SurvivalStats_DamageDefaultTypeInternal() {}
  union {
    CCSUsrMsg_SurvivalStats_Damage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CCSUsrMsg_SurvivalStats_DamageDefaultTypeInternal _CCSUsrMsg_SurvivalStats_Damage_default_instance_;
PROTOBUF_CONSTEXPR CCSUsrMsg_SurvivalStats::CCSUsrMsg_SurvivalStats(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.facts_)*/{}
  , /*decltype(_impl_.users_)*/{}
  , /*decltype(_impl_.damages_)*/{}
  , /*decltype(_impl_.xuid_)*/uint64_t{0u}
  , /*decltype(_impl_.ticknumber_)*/0} {}
struct CCSUsrMsg_SurvivalStatsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CCSUsrMsg_SurvivalStatsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CCSUsrMsg_SurvivalStatsDefaultTypeInternal() {}
  union {
    CCSUsrMsg_SurvivalStats _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CCSUsrMsg_SurvivalStatsDefaultTypeInternal _CCSUsrMsg_SurvivalStats_default_instance_;
PROTOBUF_CONSTEXPR CCSUsrMsg_EndOfMatchAllPlayersData_Accolade::CCSUsrMsg_EndOfMatchAllPlayersData_Accolade(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.eaccolade_)*/0
  , /*decltype(_impl_.value_)*/0
  , /*decltype(_impl_.position_)*/0} {}
struct CCSUsrMsg_EndOfMatchAllPlayersData_AccoladeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CCSUsrMsg_EndOfMatchAllPlayersData_AccoladeDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CCSUsrMsg_EndOfMatchAllPlayersData_AccoladeDefaultTypeInternal() {}
  union {
    CCSUsrMsg_EndOfMatchAllPlayersData_Accolade _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CCSUsrMsg_EndOfMatchAllPlayersData_AccoladeDefaultTypeInternal _CCSUsrMsg_EndOfMatchAllPlayersData_Accolade_default_instance_;
PROTOBUF_CONSTEXPR CCSUsrMsg_EndOfMatchAllPlayersData_PlayerData::CCSUsrMsg_EndOfMatchAllPlayersData_PlayerData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.items_)*/{}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.nomination_)*/nullptr
  , /*decltype(_impl_.xuid_)*/uint64_t{0u}
  , /*decltype(_impl_.teamnumber_)*/0
  , /*decltype(_impl_.playercolor_)*/0
  , /*decltype(_impl_.isbot_)*/false
  , /*decltype(_impl_.slot_)*/-1} {}
struct CCSUsrMsg_EndOfMatchAllPlayersData_PlayerDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CCSUsrMsg_EndOfMatchAllPlayersData_PlayerDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CCSUsrMsg_EndOfMatchAllPlayersData_PlayerDataDefaultTypeInternal() {}
  union {
    CCSUsrMsg_EndOfMatchAllPlayersData_PlayerData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CCSUsrMsg_EndOfMatchAllPlayersData_PlayerDataDefaultTypeInternal _CCSUsrMsg_EndOfMatchAllPlayersData_PlayerData_default_instance_;
PROTOBUF_CONSTEXPR CCSUsrMsg_EndOfMatchAllPlayersData::CCSUsrMsg_EndOfMatchAllPlayersData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.allplayerdata_)*/{}
  , /*decltype(_impl_.scene_)*/0} {}
struct CCSUsrMsg_EndOfMatchAllPlayersDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CCSUsrMsg_EndOfMatchAllPlayersDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CCSUsrMsg_EndOfMatchAllPlayersDataDefaultTypeInternal() {}
  union {
    CCSUsrMsg_EndOfMatchAllPlayersData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CCSUsrMsg_EndOfMatchAllPlayersDataDefaultTypeInternal _CCSUsrMsg_EndOfMatchAllPlayersData_default_instance_;
PROTOBUF_CONSTEXPR CCSUsrMsg_RoundEndReportData_RerEvent_Victim::CCSUsrMsg_RoundEndReportData_RerEvent_Victim(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.team_number_)*/0
  , /*decltype(_impl_.color_)*/0
  , /*decltype(_impl_.xuid_)*/uint64_t{0u}
  , /*decltype(_impl_.is_bot_)*/false
  , /*decltype(_impl_.is_dead_)*/false
  , /*decltype(_impl_.playerslot_)*/-1} {}
struct CCSUsrMsg_RoundEndReportData_RerEvent_VictimDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CCSUsrMsg_RoundEndReportData_RerEvent_VictimDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CCSUsrMsg_RoundEndReportData_RerEvent_VictimDefaultTypeInternal() {}
  union {
    CCSUsrMsg_RoundEndReportData_RerEvent_Victim _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CCSUsrMsg_RoundEndReportData_RerEvent_VictimDefaultTypeInternal _CCSUsrMsg_RoundEndReportData_RerEvent_Victim_default_instance_;
PROTOBUF_CONSTEXPR CCSUsrMsg_RoundEndReportData_RerEvent_Objective::CCSUsrMsg_RoundEndReportData_RerEvent_Objective(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.type_)*/0} {}
struct CCSUsrMsg_RoundEndReportData_RerEvent_ObjectiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CCSUsrMsg_RoundEndReportData_RerEvent_ObjectiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CCSUsrMsg_RoundEndReportData_RerEvent_ObjectiveDefaultTypeInternal() {}
  union {
    CCSUsrMsg_RoundEndReportData_RerEvent_Objective _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CCSUsrMsg_RoundEndReportData_RerEvent_ObjectiveDefaultTypeInternal _CCSUsrMsg_RoundEndReportData_RerEvent_Objective_default_instance_;
PROTOBUF_CONSTEXPR CCSUsrMsg_RoundEndReportData_RerEvent_Damage::CCSUsrMsg_RoundEndReportData_RerEvent_Damage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.other_xuid_)*/uint64_t{0u}
  , /*decltype(_impl_.health_removed_)*/0
  , /*decltype(_impl_.num_hits_)*/0
  , /*decltype(_impl_.return_health_removed_)*/0
  , /*decltype(_impl_.return_num_hits_)*/0
  , /*decltype(_impl_.other_playerslot_)*/-1} {}
struct CCSUsrMsg_RoundEndReportData_RerEvent_DamageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CCSUsrMsg_RoundEndReportData_RerEvent_DamageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CCSUsrMsg_RoundEndReportData_RerEvent_DamageDefaultTypeInternal() {}
  union {
    CCSUsrMsg_RoundEndReportData_RerEvent_Damage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CCSUsrMsg_RoundEndReportData_RerEvent_DamageDefaultTypeInternal _CCSUsrMsg_RoundEndReportData_RerEvent_Damage_default_instance_;
PROTOBUF_CONSTEXPR CCSUsrMsg_RoundEndReportData_RerEvent::CCSUsrMsg_RoundEndReportData_RerEvent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.all_damage_data_)*/{}
  , /*decltype(_impl_.victim_data_)*/nullptr
  , /*decltype(_impl_.objective_data_)*/nullptr
  , /*decltype(_impl_.timestamp_)*/0
  , /*decltype(_impl_.terrorist_odds_)*/0
  , /*decltype(_impl_.ct_alive_)*/0
  , /*decltype(_impl_.t_alive_)*/0} {}
struct CCSUsrMsg_RoundEndReportData_RerEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CCSUsrMsg_RoundEndReportData_RerEventDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CCSUsrMsg_RoundEndReportData_RerEventDefaultTypeInternal() {}
  union {
    CCSUsrMsg_RoundEndReportData_RerEvent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CCSUsrMsg_RoundEndReportData_RerEventDefaultTypeInternal _CCSUsrMsg_RoundEndReportData_RerEvent_default_instance_;
PROTOBUF_CONSTEXPR CCSUsrMsg_RoundEndReportData_InitialConditions::CCSUsrMsg_RoundEndReportData_InitialConditions(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.ct_equip_value_)*/0
  , /*decltype(_impl_.t_equip_value_)*/0
  , /*decltype(_impl_.terrorist_odds_)*/0} {}
struct CCSUsrMsg_RoundEndReportData_InitialConditionsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CCSUsrMsg_RoundEndReportData_InitialConditionsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CCSUsrMsg_RoundEndReportData_InitialConditionsDefaultTypeInternal() {}
  union {
    CCSUsrMsg_RoundEndReportData_InitialConditions _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CCSUsrMsg_RoundEndReportData_InitialConditionsDefaultTypeInternal _CCSUsrMsg_RoundEndReportData_InitialConditions_default_instance_;
PROTOBUF_CONSTEXPR CCSUsrMsg_RoundEndReportData::CCSUsrMsg_RoundEndReportData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.all_rer_event_data_)*/{}
  , /*decltype(_impl_.init_conditions_)*/nullptr} {}
struct CCSUsrMsg_RoundEndReportDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CCSUsrMsg_RoundEndReportDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CCSUsrMsg_RoundEndReportDataDefaultTypeInternal() {}
  union {
    CCSUsrMsg_RoundEndReportData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CCSUsrMsg_RoundEndReportDataDefaultTypeInternal _CCSUsrMsg_RoundEndReportData_default_instance_;
PROTOBUF_CONSTEXPR CCSUsrMsg_PostRoundDamageReport::CCSUsrMsg_PostRoundDamageReport(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.other_xuid_)*/uint64_t{0u}
  , /*decltype(_impl_.given_kill_type_)*/0
  , /*decltype(_impl_.given_health_removed_)*/0
  , /*decltype(_impl_.given_num_hits_)*/0
  , /*decltype(_impl_.taken_kill_type_)*/0
  , /*decltype(_impl_.taken_health_removed_)*/0
  , /*decltype(_impl_.taken_num_hits_)*/0} {}
struct CCSUsrMsg_PostRoundDamageReportDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CCSUsrMsg_PostRoundDamageReportDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CCSUsrMsg_PostRoundDamageReportDefaultTypeInternal() {}
  union {
    CCSUsrMsg_PostRoundDamageReport _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CCSUsrMsg_PostRoundDamageReportDefaultTypeInternal _CCSUsrMsg_PostRoundDamageReport_default_instance_;
PROTOBUF_CONSTEXPR CCSUsrMsg_CurrentRoundOdds::CCSUsrMsg_CurrentRoundOdds(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.odds_)*/0} {}
struct CCSUsrMsg_CurrentRoundOddsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CCSUsrMsg_CurrentRoundOddsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CCSUsrMsg_CurrentRoundOddsDefaultTypeInternal() {}
  union {
    CCSUsrMsg_CurrentRoundOdds _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CCSUsrMsg_CurrentRoundOddsDefaultTypeInternal _CCSUsrMsg_CurrentRoundOdds_default_instance_;
PROTOBUF_CONSTEXPR CCSUsrMsg_DeepStats::CCSUsrMsg_DeepStats(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.stats_)*/nullptr} {}
struct CCSUsrMsg_DeepStatsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CCSUsrMsg_DeepStatsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CCSUsrMsg_DeepStatsDefaultTypeInternal() {}
  union {
    CCSUsrMsg_DeepStats _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CCSUsrMsg_DeepStatsDefaultTypeInternal _CCSUsrMsg_DeepStats_default_instance_;
PROTOBUF_CONSTEXPR CCSUsrMsg_ShootInfo::CCSUsrMsg_ShootInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.hitbox_transforms_)*/{}
  , /*decltype(_impl_.shoot_pos_)*/nullptr
  , /*decltype(_impl_.shoot_dir_)*/nullptr
  , /*decltype(_impl_.frame_number_)*/0} {}
struct CCSUsrMsg_ShootInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CCSUsrMsg_ShootInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CCSUsrMsg_ShootInfoDefaultTypeInternal() {}
  union {
    CCSUsrMsg_ShootInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CCSUsrMsg_ShootInfoDefaultTypeInternal _CCSUsrMsg_ShootInfo_default_instance_;
PROTOBUF_CONSTEXPR CCSUsrMsg_ResetHud::CCSUsrMsg_ResetHud(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.reset_)*/false} {}
struct CCSUsrMsg_ResetHudDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CCSUsrMsg_ResetHudDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CCSUsrMsg_ResetHudDefaultTypeInternal() {}
  union {
    CCSUsrMsg_ResetHud _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CCSUsrMsg_ResetHudDefaultTypeInternal _CCSUsrMsg_ResetHud_default_instance_;
PROTOBUF_CONSTEXPR CCSUsrMsg_GameTitle::CCSUsrMsg_GameTitle(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.dummy_)*/0} {}
struct CCSUsrMsg_GameTitleDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CCSUsrMsg_GameTitleDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CCSUsrMsg_GameTitleDefaultTypeInternal() {}
  union {
    CCSUsrMsg_GameTitle _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CCSUsrMsg_GameTitleDefaultTypeInternal _CCSUsrMsg_GameTitle_default_instance_;
PROTOBUF_CONSTEXPR CCSUsrMsg_RequestState::CCSUsrMsg_RequestState(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.dummy_)*/0} {}
struct CCSUsrMsg_RequestStateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CCSUsrMsg_RequestStateDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CCSUsrMsg_RequestStateDefaultTypeInternal() {}
  union {
    CCSUsrMsg_RequestState _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CCSUsrMsg_RequestStateDefaultTypeInternal _CCSUsrMsg_RequestState_default_instance_;
PROTOBUF_CONSTEXPR CCSUsrMsg_StopSpectatorMode::CCSUsrMsg_StopSpectatorMode(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.dummy_)*/0} {}
struct CCSUsrMsg_StopSpectatorModeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CCSUsrMsg_StopSpectatorModeDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CCSUsrMsg_StopSpectatorModeDefaultTypeInternal() {}
  union {
    CCSUsrMsg_StopSpectatorMode _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CCSUsrMsg_StopSpectatorModeDefaultTypeInternal _CCSUsrMsg_StopSpectatorMode_default_instance_;
PROTOBUF_CONSTEXPR CCSUsrMsg_DisconnectToLobby::CCSUsrMsg_DisconnectToLobby(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.dummy_)*/0} {}
struct CCSUsrMsg_DisconnectToLobbyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CCSUsrMsg_DisconnectToLobbyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CCSUsrMsg_DisconnectToLobbyDefaultTypeInternal() {}
  union {
    CCSUsrMsg_DisconnectToLobby _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CCSUsrMsg_DisconnectToLobbyDefaultTypeInternal _CCSUsrMsg_DisconnectToLobby_default_instance_;
PROTOBUF_CONSTEXPR CCSUsrMsg_WarmupHasEnded::CCSUsrMsg_WarmupHasEnded(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.dummy_)*/0} {}
struct CCSUsrMsg_WarmupHasEndedDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CCSUsrMsg_WarmupHasEndedDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CCSUsrMsg_WarmupHasEndedDefaultTypeInternal() {}
  union {
    CCSUsrMsg_WarmupHasEnded _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CCSUsrMsg_WarmupHasEndedDefaultTypeInternal _CCSUsrMsg_WarmupHasEnded_default_instance_;
PROTOBUF_CONSTEXPR CCSUsrMsg_ClientInfo::CCSUsrMsg_ClientInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.dummy_)*/0} {}
struct CCSUsrMsg_ClientInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CCSUsrMsg_ClientInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CCSUsrMsg_ClientInfoDefaultTypeInternal() {}
  union {
    CCSUsrMsg_ClientInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CCSUsrMsg_ClientInfoDefaultTypeInternal _CCSUsrMsg_ClientInfo_default_instance_;
PROTOBUF_CONSTEXPR CCSUsrMsg_ServerRankRevealAll::CCSUsrMsg_ServerRankRevealAll(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.reservation_)*/nullptr
  , /*decltype(_impl_.seconds_till_shutdown_)*/0} {}
struct CCSUsrMsg_ServerRankRevealAllDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CCSUsrMsg_ServerRankRevealAllDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CCSUsrMsg_ServerRankRevealAllDefaultTypeInternal() {}
  union {
    CCSUsrMsg_ServerRankRevealAll _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CCSUsrMsg_ServerRankRevealAllDefaultTypeInternal _CCSUsrMsg_ServerRankRevealAll_default_instance_;
PROTOBUF_CONSTEXPR CCSUsrMsgPreMatchSayText::CCSUsrMsgPreMatchSayText(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.text_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.account_id_)*/0u
  , /*decltype(_impl_.all_chat_)*/false} {}
struct CCSUsrMsgPreMatchSayTextDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CCSUsrMsgPreMatchSayTextDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CCSUsrMsgPreMatchSayTextDefaultTypeInternal() {}
  union {
    CCSUsrMsgPreMatchSayText _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CCSUsrMsgPreMatchSayTextDefaultTypeInternal _CCSUsrMsgPreMatchSayText_default_instance_;
PROTOBUF_CONSTEXPR CCSUsrMsg_CounterStrafe::CCSUsrMsg_CounterStrafe(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.press_to_release_ns_)*/0
  , /*decltype(_impl_.total_keys_down_)*/0} {}
struct CCSUsrMsg_CounterStrafeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CCSUsrMsg_CounterStrafeDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CCSUsrMsg_CounterStrafeDefaultTypeInternal() {}
  union {
    CCSUsrMsg_CounterStrafe _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CCSUsrMsg_CounterStrafeDefaultTypeInternal _CCSUsrMsg_CounterStrafe_default_instance_;
PROTOBUF_CONSTEXPR CCSUsrMsg_DamagePrediction::CCSUsrMsg_DamagePrediction(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.shoot_pos_)*/nullptr
  , /*decltype(_impl_.shoot_dir_)*/nullptr
  , /*decltype(_impl_.aim_punch_)*/nullptr
  , /*decltype(_impl_.command_num_)*/0
  , /*decltype(_impl_.pellet_idx_)*/0
  , /*decltype(_impl_.victim_slot_)*/0
  , /*decltype(_impl_.victim_starting_health_)*/0
  , /*decltype(_impl_.victim_damage_)*/0} {}
struct CCSUsrMsg_DamagePredictionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CCSUsrMsg_DamagePredictionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CCSUsrMsg_DamagePredictionDefaultTypeInternal() {}
  union {
    CCSUsrMsg_DamagePrediction _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CCSUsrMsg_DamagePredictionDefaultTypeInternal _CCSUsrMsg_DamagePrediction_default_instance_;
static ::_pb::Metadata file_level_metadata_cstrike15_5fusermessages_2eproto[88];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_cstrike15_5fusermessages_2eproto[2];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_cstrike15_5fusermessages_2eproto = nullptr;

const uint32_t TableStruct_cstrike15_5fusermessages_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_VGUIMenu_Keys, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_VGUIMenu_Keys, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_VGUIMenu_Keys, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_VGUIMenu_Keys, _impl_.value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_VGUIMenu, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_VGUIMenu, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_VGUIMenu, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_VGUIMenu, _impl_.show_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_VGUIMenu, _impl_.keys_),
  0,
  1,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_Geiger, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_Geiger, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_Geiger, _impl_.range_),
  0,
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_Train, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_Train, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_Train, _impl_.train_),
  0,
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_HudText, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_HudText, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_HudText, _impl_.text_),
  0,
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_HudMsg, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_HudMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_HudMsg, _impl_.channel_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_HudMsg, _impl_.pos_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_HudMsg, _impl_.clr1_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_HudMsg, _impl_.clr2_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_HudMsg, _impl_.effect_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_HudMsg, _impl_.fade_in_time_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_HudMsg, _impl_.fade_out_time_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_HudMsg, _impl_.hold_time_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_HudMsg, _impl_.fx_time_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_HudMsg, _impl_.text_),
  4,
  1,
  2,
  3,
  5,
  6,
  7,
  8,
  9,
  0,
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_Shake, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_Shake, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_Shake, _impl_.command_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_Shake, _impl_.local_amplitude_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_Shake, _impl_.frequency_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_Shake, _impl_.duration_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_Fade, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_Fade, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_Fade, _impl_.duration_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_Fade, _impl_.hold_time_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_Fade, _impl_.flags_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_Fade, _impl_.clr_),
  1,
  2,
  3,
  0,
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_Rumble, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_Rumble, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_Rumble, _impl_.index_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_Rumble, _impl_.data_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_Rumble, _impl_.flags_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_CloseCaption, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_CloseCaption, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_CloseCaption, _impl_.hash_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_CloseCaption, _impl_.duration_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_CloseCaption, _impl_.from_player_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_CloseCaption, _impl_.cctoken_),
  1,
  2,
  3,
  0,
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_CloseCaptionDirect, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_CloseCaptionDirect, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_CloseCaptionDirect, _impl_.hash_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_CloseCaptionDirect, _impl_.duration_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_CloseCaptionDirect, _impl_.from_player_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_SendAudio, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_SendAudio, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_SendAudio, _impl_.radio_sound_),
  0,
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_RawAudio, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_RawAudio, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_RawAudio, _impl_.pitch_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_RawAudio, _impl_.entidx_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_RawAudio, _impl_.duration_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_RawAudio, _impl_.voice_filename_),
  1,
  3,
  2,
  0,
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_VoiceMask_PlayerMask, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_VoiceMask_PlayerMask, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_VoiceMask_PlayerMask, _impl_.game_rules_mask_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_VoiceMask_PlayerMask, _impl_.ban_masks_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_VoiceMask, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_VoiceMask, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_VoiceMask, _impl_.player_masks_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_VoiceMask, _impl_.player_mod_enable_),
  ~0u,
  0,
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_Damage, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_Damage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_Damage, _impl_.amount_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_Damage, _impl_.inflictor_world_pos_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_Damage, _impl_.victim_entindex_),
  1,
  0,
  2,
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_RadioText, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_RadioText, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_RadioText, _impl_.msg_dst_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_RadioText, _impl_.client_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_RadioText, _impl_.msg_name_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_RadioText, _impl_.params_),
  1,
  2,
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_HintText, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_HintText, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_HintText, _impl_.message_),
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_KeyHintText, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_KeyHintText, _impl_.messages_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_ProcessSpottedEntityUpdate_SpottedEntityUpdate, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_ProcessSpottedEntityUpdate_SpottedEntityUpdate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_ProcessSpottedEntityUpdate_SpottedEntityUpdate, _impl_.entity_idx_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_ProcessSpottedEntityUpdate_SpottedEntityUpdate, _impl_.class_id_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_ProcessSpottedEntityUpdate_SpottedEntityUpdate, _impl_.origin_x_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_ProcessSpottedEntityUpdate_SpottedEntityUpdate, _impl_.origin_y_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_ProcessSpottedEntityUpdate_SpottedEntityUpdate, _impl_.origin_z_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_ProcessSpottedEntityUpdate_SpottedEntityUpdate, _impl_.angle_y_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_ProcessSpottedEntityUpdate_SpottedEntityUpdate, _impl_.defuser_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_ProcessSpottedEntityUpdate_SpottedEntityUpdate, _impl_.player_has_defuser_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_ProcessSpottedEntityUpdate_SpottedEntityUpdate, _impl_.player_has_c4_),
  8,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_ProcessSpottedEntityUpdate, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_ProcessSpottedEntityUpdate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_ProcessSpottedEntityUpdate, _impl_.new_update_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_ProcessSpottedEntityUpdate, _impl_.entity_updates_),
  0,
  ~0u,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_SendPlayerItemDrops, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_SendPlayerItemDrops, _impl_.entity_updates_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_SendPlayerItemFound, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_SendPlayerItemFound, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_SendPlayerItemFound, _impl_.iteminfo_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_SendPlayerItemFound, _impl_.playerslot_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_ReloadEffect, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_ReloadEffect, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_ReloadEffect, _impl_.entidx_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_ReloadEffect, _impl_.actanim_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_ReloadEffect, _impl_.origin_x_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_ReloadEffect, _impl_.origin_y_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_ReloadEffect, _impl_.origin_z_),
  4,
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_WeaponSound, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_WeaponSound, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_WeaponSound, _impl_.entidx_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_WeaponSound, _impl_.origin_x_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_WeaponSound, _impl_.origin_y_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_WeaponSound, _impl_.origin_z_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_WeaponSound, _impl_.sound_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_WeaponSound, _impl_.game_timestamp_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_WeaponSound, _impl_.source_soundscapeid_),
  6,
  1,
  2,
  3,
  0,
  4,
  5,
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_UpdateScreenHealthBar, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_UpdateScreenHealthBar, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_UpdateScreenHealthBar, _impl_.entidx_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_UpdateScreenHealthBar, _impl_.healthratio_old_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_UpdateScreenHealthBar, _impl_.healthratio_new_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_UpdateScreenHealthBar, _impl_.style_),
  3,
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_EntityOutlineHighlight, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_EntityOutlineHighlight, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_EntityOutlineHighlight, _impl_.entidx_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_EntityOutlineHighlight, _impl_.removehighlight_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_AdjustMoney, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_AdjustMoney, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_AdjustMoney, _impl_.amount_),
  0,
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_ReportHit, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_ReportHit, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_ReportHit, _impl_.pos_x_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_ReportHit, _impl_.pos_y_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_ReportHit, _impl_.timestamp_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_ReportHit, _impl_.pos_z_),
  0,
  1,
  3,
  2,
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_KillCam, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_KillCam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_KillCam, _impl_.obs_mode_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_KillCam, _impl_.first_target_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_KillCam, _impl_.second_target_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_DesiredTimescale, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_DesiredTimescale, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_DesiredTimescale, _impl_.desired_timescale_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_DesiredTimescale, _impl_.duration_realtime_sec_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_DesiredTimescale, _impl_.interpolator_type_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_DesiredTimescale, _impl_.start_blend_time_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_CurrentTimescale, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_CurrentTimescale, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_CurrentTimescale, _impl_.cur_timescale_),
  0,
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_AchievementEvent, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_AchievementEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_AchievementEvent, _impl_.achievement_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_AchievementEvent, _impl_.count_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_AchievementEvent, _impl_.user_id_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_MatchEndConditions, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_MatchEndConditions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_MatchEndConditions, _impl_.fraglimit_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_MatchEndConditions, _impl_.mp_maxrounds_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_MatchEndConditions, _impl_.mp_winlimit_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_MatchEndConditions, _impl_.mp_timelimit_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_PlayerStatsUpdate_Stat, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_PlayerStatsUpdate_Stat, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_PlayerStatsUpdate_Stat, _impl_.idx_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_PlayerStatsUpdate_Stat, _impl_.delta_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_PlayerStatsUpdate, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_PlayerStatsUpdate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_PlayerStatsUpdate, _impl_.version_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_PlayerStatsUpdate, _impl_.stats_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_PlayerStatsUpdate, _impl_.ehandle_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_PlayerStatsUpdate, _impl_.crc_),
  0,
  ~0u,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_QuestProgress, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_QuestProgress, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_QuestProgress, _impl_.quest_id_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_QuestProgress, _impl_.normal_points_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_QuestProgress, _impl_.bonus_points_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_QuestProgress, _impl_.is_event_quest_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_ScoreLeaderboardData, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_ScoreLeaderboardData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_ScoreLeaderboardData, _impl_.data_),
  0,
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_PlayerDecalDigitalSignature, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_PlayerDecalDigitalSignature, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_PlayerDecalDigitalSignature, _impl_.data_),
  0,
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_XRankGet, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_XRankGet, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_XRankGet, _impl_.mode_idx_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_XRankGet, _impl_.controller_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_XRankUpd, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_XRankUpd, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_XRankUpd, _impl_.mode_idx_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_XRankUpd, _impl_.controller_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_XRankUpd, _impl_.ranking_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_CallVoteFailed, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_CallVoteFailed, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_CallVoteFailed, _impl_.reason_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_CallVoteFailed, _impl_.time_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_VoteStart, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_VoteStart, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_VoteStart, _impl_.team_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_VoteStart, _impl_.player_slot_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_VoteStart, _impl_.vote_type_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_VoteStart, _impl_.disp_str_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_VoteStart, _impl_.details_str_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_VoteStart, _impl_.other_team_str_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_VoteStart, _impl_.is_yes_no_vote_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_VoteStart, _impl_.player_slot_target_),
  3,
  6,
  4,
  0,
  1,
  2,
  5,
  7,
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_VotePass, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_VotePass, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_VotePass, _impl_.team_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_VotePass, _impl_.vote_type_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_VotePass, _impl_.disp_str_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_VotePass, _impl_.details_str_),
  2,
  3,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_VoteFailed, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_VoteFailed, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_VoteFailed, _impl_.team_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_VoteFailed, _impl_.reason_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_VoteSetup, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_VoteSetup, _impl_.potential_issues_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_SendLastKillerDamageToClient, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_SendLastKillerDamageToClient, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_SendLastKillerDamageToClient, _impl_.num_hits_given_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_SendLastKillerDamageToClient, _impl_.damage_given_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_SendLastKillerDamageToClient, _impl_.num_hits_taken_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_SendLastKillerDamageToClient, _impl_.damage_taken_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_SendLastKillerDamageToClient, _impl_.actual_damage_given_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_SendLastKillerDamageToClient, _impl_.actual_damage_taken_),
  0,
  1,
  2,
  3,
  4,
  5,
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_ServerRankUpdate_RankUpdate, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_ServerRankUpdate_RankUpdate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_ServerRankUpdate_RankUpdate, _impl_.account_id_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_ServerRankUpdate_RankUpdate, _impl_.rank_old_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_ServerRankUpdate_RankUpdate, _impl_.rank_new_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_ServerRankUpdate_RankUpdate, _impl_.num_wins_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_ServerRankUpdate_RankUpdate, _impl_.rank_change_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_ServerRankUpdate_RankUpdate, _impl_.rank_type_id_),
  0,
  1,
  2,
  3,
  4,
  5,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_ServerRankUpdate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_ServerRankUpdate, _impl_.rank_update_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_XpUpdate, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_XpUpdate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_XpUpdate, _impl_.data_),
  0,
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_ItemPickup, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_ItemPickup, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_ItemPickup, _impl_.item_),
  0,
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_ShowMenu, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_ShowMenu, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_ShowMenu, _impl_.bits_valid_slots_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_ShowMenu, _impl_.display_time_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_ShowMenu, _impl_.menu_string_),
  1,
  2,
  0,
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_BarTime, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_BarTime, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_BarTime, _impl_.time_),
  0,
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_AmmoDenied, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_AmmoDenied, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_AmmoDenied, _impl_.ammoidx_),
  0,
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_MarkAchievement, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_MarkAchievement, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_MarkAchievement, _impl_.achievement_),
  0,
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_MatchStatsUpdate, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_MatchStatsUpdate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_MatchStatsUpdate, _impl_.update_),
  0,
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_ItemDrop, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_ItemDrop, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_ItemDrop, _impl_.itemid_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_ItemDrop, _impl_.death_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_GlowPropTurnOff, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_GlowPropTurnOff, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_GlowPropTurnOff, _impl_.entidx_),
  0,
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_RoundBackupFilenames, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_RoundBackupFilenames, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_RoundBackupFilenames, _impl_.count_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_RoundBackupFilenames, _impl_.index_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_RoundBackupFilenames, _impl_.filename_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_RoundBackupFilenames, _impl_.nicename_),
  2,
  3,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_SSUI, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_SSUI, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_SSUI, _impl_.show_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_SSUI, _impl_.start_time_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_SSUI, _impl_.end_time_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_SurvivalStats_Fact, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_SurvivalStats_Fact, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_SurvivalStats_Fact, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_SurvivalStats_Fact, _impl_.display_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_SurvivalStats_Fact, _impl_.value_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_SurvivalStats_Fact, _impl_.interestingness_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_SurvivalStats_Placement, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_SurvivalStats_Placement, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_SurvivalStats_Placement, _impl_.xuid_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_SurvivalStats_Placement, _impl_.teamnumber_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_SurvivalStats_Placement, _impl_.placement_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_SurvivalStats_Damage, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_SurvivalStats_Damage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_SurvivalStats_Damage, _impl_.xuid_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_SurvivalStats_Damage, _impl_.to_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_SurvivalStats_Damage, _impl_.to_hits_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_SurvivalStats_Damage, _impl_.from_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_SurvivalStats_Damage, _impl_.from_hits_),
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_SurvivalStats, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_SurvivalStats, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_SurvivalStats, _impl_.xuid_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_SurvivalStats, _impl_.facts_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_SurvivalStats, _impl_.users_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_SurvivalStats, _impl_.damages_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_SurvivalStats, _impl_.ticknumber_),
  0,
  ~0u,
  ~0u,
  ~0u,
  1,
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_EndOfMatchAllPlayersData_Accolade, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_EndOfMatchAllPlayersData_Accolade, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_EndOfMatchAllPlayersData_Accolade, _impl_.eaccolade_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_EndOfMatchAllPlayersData_Accolade, _impl_.value_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_EndOfMatchAllPlayersData_Accolade, _impl_.position_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_EndOfMatchAllPlayersData_PlayerData, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_EndOfMatchAllPlayersData_PlayerData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_EndOfMatchAllPlayersData_PlayerData, _impl_.slot_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_EndOfMatchAllPlayersData_PlayerData, _impl_.xuid_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_EndOfMatchAllPlayersData_PlayerData, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_EndOfMatchAllPlayersData_PlayerData, _impl_.teamnumber_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_EndOfMatchAllPlayersData_PlayerData, _impl_.nomination_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_EndOfMatchAllPlayersData_PlayerData, _impl_.items_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_EndOfMatchAllPlayersData_PlayerData, _impl_.playercolor_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_EndOfMatchAllPlayersData_PlayerData, _impl_.isbot_),
  6,
  2,
  0,
  3,
  1,
  ~0u,
  4,
  5,
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_EndOfMatchAllPlayersData, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_EndOfMatchAllPlayersData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_EndOfMatchAllPlayersData, _impl_.allplayerdata_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_EndOfMatchAllPlayersData, _impl_.scene_),
  ~0u,
  0,
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_RoundEndReportData_RerEvent_Victim, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_RoundEndReportData_RerEvent_Victim, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_RoundEndReportData_RerEvent_Victim, _impl_.team_number_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_RoundEndReportData_RerEvent_Victim, _impl_.playerslot_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_RoundEndReportData_RerEvent_Victim, _impl_.xuid_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_RoundEndReportData_RerEvent_Victim, _impl_.color_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_RoundEndReportData_RerEvent_Victim, _impl_.is_bot_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_RoundEndReportData_RerEvent_Victim, _impl_.is_dead_),
  0,
  5,
  2,
  1,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_RoundEndReportData_RerEvent_Objective, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_RoundEndReportData_RerEvent_Objective, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_RoundEndReportData_RerEvent_Objective, _impl_.type_),
  0,
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_RoundEndReportData_RerEvent_Damage, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_RoundEndReportData_RerEvent_Damage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_RoundEndReportData_RerEvent_Damage, _impl_.other_playerslot_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_RoundEndReportData_RerEvent_Damage, _impl_.other_xuid_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_RoundEndReportData_RerEvent_Damage, _impl_.health_removed_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_RoundEndReportData_RerEvent_Damage, _impl_.num_hits_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_RoundEndReportData_RerEvent_Damage, _impl_.return_health_removed_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_RoundEndReportData_RerEvent_Damage, _impl_.return_num_hits_),
  5,
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_RoundEndReportData_RerEvent, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_RoundEndReportData_RerEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_RoundEndReportData_RerEvent, _impl_.timestamp_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_RoundEndReportData_RerEvent, _impl_.terrorist_odds_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_RoundEndReportData_RerEvent, _impl_.ct_alive_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_RoundEndReportData_RerEvent, _impl_.t_alive_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_RoundEndReportData_RerEvent, _impl_.victim_data_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_RoundEndReportData_RerEvent, _impl_.objective_data_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_RoundEndReportData_RerEvent, _impl_.all_damage_data_),
  2,
  3,
  4,
  5,
  0,
  1,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_RoundEndReportData_InitialConditions, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_RoundEndReportData_InitialConditions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_RoundEndReportData_InitialConditions, _impl_.ct_equip_value_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_RoundEndReportData_InitialConditions, _impl_.t_equip_value_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_RoundEndReportData_InitialConditions, _impl_.terrorist_odds_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_RoundEndReportData, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_RoundEndReportData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_RoundEndReportData, _impl_.init_conditions_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_RoundEndReportData, _impl_.all_rer_event_data_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_PostRoundDamageReport, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_PostRoundDamageReport, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_PostRoundDamageReport, _impl_.other_xuid_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_PostRoundDamageReport, _impl_.given_kill_type_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_PostRoundDamageReport, _impl_.given_health_removed_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_PostRoundDamageReport, _impl_.given_num_hits_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_PostRoundDamageReport, _impl_.taken_kill_type_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_PostRoundDamageReport, _impl_.taken_health_removed_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_PostRoundDamageReport, _impl_.taken_num_hits_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_CurrentRoundOdds, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_CurrentRoundOdds, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_CurrentRoundOdds, _impl_.odds_),
  0,
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_DeepStats, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_DeepStats, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_DeepStats, _impl_.stats_),
  0,
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_ShootInfo, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_ShootInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_ShootInfo, _impl_.frame_number_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_ShootInfo, _impl_.hitbox_transforms_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_ShootInfo, _impl_.shoot_pos_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_ShootInfo, _impl_.shoot_dir_),
  2,
  ~0u,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_ResetHud, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_ResetHud, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_ResetHud, _impl_.reset_),
  0,
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_GameTitle, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_GameTitle, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_GameTitle, _impl_.dummy_),
  0,
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_RequestState, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_RequestState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_RequestState, _impl_.dummy_),
  0,
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_StopSpectatorMode, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_StopSpectatorMode, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_StopSpectatorMode, _impl_.dummy_),
  0,
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_DisconnectToLobby, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_DisconnectToLobby, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_DisconnectToLobby, _impl_.dummy_),
  0,
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_WarmupHasEnded, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_WarmupHasEnded, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_WarmupHasEnded, _impl_.dummy_),
  0,
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_ClientInfo, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_ClientInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_ClientInfo, _impl_.dummy_),
  0,
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_ServerRankRevealAll, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_ServerRankRevealAll, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_ServerRankRevealAll, _impl_.seconds_till_shutdown_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_ServerRankRevealAll, _impl_.reservation_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsgPreMatchSayText, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsgPreMatchSayText, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsgPreMatchSayText, _impl_.account_id_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsgPreMatchSayText, _impl_.text_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsgPreMatchSayText, _impl_.all_chat_),
  1,
  0,
  2,
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_CounterStrafe, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_CounterStrafe, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_CounterStrafe, _impl_.press_to_release_ns_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_CounterStrafe, _impl_.total_keys_down_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_DamagePrediction, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_DamagePrediction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_DamagePrediction, _impl_.command_num_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_DamagePrediction, _impl_.pellet_idx_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_DamagePrediction, _impl_.victim_slot_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_DamagePrediction, _impl_.victim_starting_health_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_DamagePrediction, _impl_.victim_damage_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_DamagePrediction, _impl_.shoot_pos_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_DamagePrediction, _impl_.shoot_dir_),
  PROTOBUF_FIELD_OFFSET(::CCSUsrMsg_DamagePrediction, _impl_.aim_punch_),
  3,
  4,
  5,
  6,
  7,
  0,
  1,
  2,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, -1, sizeof(::CCSUsrMsg_VGUIMenu_Keys)},
  { 10, 19, -1, sizeof(::CCSUsrMsg_VGUIMenu)},
  { 22, 29, -1, sizeof(::CCSUsrMsg_Geiger)},
  { 30, 37, -1, sizeof(::CCSUsrMsg_Train)},
  { 38, 45, -1, sizeof(::CCSUsrMsg_HudText)},
  { 46, 62, -1, sizeof(::CCSUsrMsg_HudMsg)},
  { 72, 82, -1, sizeof(::CCSUsrMsg_Shake)},
  { 86, 96, -1, sizeof(::CCSUsrMsg_Fade)},
  { 100, 109, -1, sizeof(::CCSUsrMsg_Rumble)},
  { 112, 122, -1, sizeof(::CCSUsrMsg_CloseCaption)},
  { 126, 135, -1, sizeof(::CCSUsrMsg_CloseCaptionDirect)},
  { 138, 145, -1, sizeof(::CCSUsrMsg_SendAudio)},
  { 146, 156, -1, sizeof(::CCSUsrMsg_RawAudio)},
  { 160, 168, -1, sizeof(::CCSUsrMsg_VoiceMask_PlayerMask)},
  { 170, 178, -1, sizeof(::CCSUsrMsg_VoiceMask)},
  { 180, 189, -1, sizeof(::CCSUsrMsg_Damage)},
  { 192, 202, -1, sizeof(::CCSUsrMsg_RadioText)},
  { 206, 213, -1, sizeof(::CCSUsrMsg_HintText)},
  { 214, -1, -1, sizeof(::CCSUsrMsg_KeyHintText)},
  { 221, 236, -1, sizeof(::CCSUsrMsg_ProcessSpottedEntityUpdate_SpottedEntityUpdate)},
  { 245, 253, -1, sizeof(::CCSUsrMsg_ProcessSpottedEntityUpdate)},
  { 255, -1, -1, sizeof(::CCSUsrMsg_SendPlayerItemDrops)},
  { 262, 270, -1, sizeof(::CCSUsrMsg_SendPlayerItemFound)},
  { 272, 283, -1, sizeof(::CCSUsrMsg_ReloadEffect)},
  { 288, 301, -1, sizeof(::CCSUsrMsg_WeaponSound)},
  { 308, 318, -1, sizeof(::CCSUsrMsg_UpdateScreenHealthBar)},
  { 322, 330, -1, sizeof(::CCSUsrMsg_EntityOutlineHighlight)},
  { 332, 339, -1, sizeof(::CCSUsrMsg_AdjustMoney)},
  { 340, 350, -1, sizeof(::CCSUsrMsg_ReportHit)},
  { 354, 363, -1, sizeof(::CCSUsrMsg_KillCam)},
  { 366, 376, -1, sizeof(::CCSUsrMsg_DesiredTimescale)},
  { 380, 387, -1, sizeof(::CCSUsrMsg_CurrentTimescale)},
  { 388, 397, -1, sizeof(::CCSUsrMsg_AchievementEvent)},
  { 400, 410, -1, sizeof(::CCSUsrMsg_MatchEndConditions)},
  { 414, 422, -1, sizeof(::CCSUsrMsg_PlayerStatsUpdate_Stat)},
  { 424, 434, -1, sizeof(::CCSUsrMsg_PlayerStatsUpdate)},
  { 438, 448, -1, sizeof(::CCSUsrMsg_QuestProgress)},
  { 452, 459, -1, sizeof(::CCSUsrMsg_ScoreLeaderboardData)},
  { 460, 467, -1, sizeof(::CCSUsrMsg_PlayerDecalDigitalSignature)},
  { 468, 476, -1, sizeof(::CCSUsrMsg_XRankGet)},
  { 478, 487, -1, sizeof(::CCSUsrMsg_XRankUpd)},
  { 490, 498, -1, sizeof(::CCSUsrMsg_CallVoteFailed)},
  { 500, 514, -1, sizeof(::CCSUsrMsg_VoteStart)},
  { 522, 532, -1, sizeof(::CCSUsrMsg_VotePass)},
  { 536, 544, -1, sizeof(::CCSUsrMsg_VoteFailed)},
  { 546, -1, -1, sizeof(::CCSUsrMsg_VoteSetup)},
  { 553, 565, -1, sizeof(::CCSUsrMsg_SendLastKillerDamageToClient)},
  { 571, 583, -1, sizeof(::CCSUsrMsg_ServerRankUpdate_RankUpdate)},
  { 589, -1, -1, sizeof(::CCSUsrMsg_ServerRankUpdate)},
  { 596, 603, -1, sizeof(::CCSUsrMsg_XpUpdate)},
  { 604, 611, -1, sizeof(::CCSUsrMsg_ItemPickup)},
  { 612, 621, -1, sizeof(::CCSUsrMsg_ShowMenu)},
  { 624, 631, -1, sizeof(::CCSUsrMsg_BarTime)},
  { 632, 639, -1, sizeof(::CCSUsrMsg_AmmoDenied)},
  { 640, 647, -1, sizeof(::CCSUsrMsg_MarkAchievement)},
  { 648, 655, -1, sizeof(::CCSUsrMsg_MatchStatsUpdate)},
  { 656, 664, -1, sizeof(::CCSUsrMsg_ItemDrop)},
  { 666, 673, -1, sizeof(::CCSUsrMsg_GlowPropTurnOff)},
  { 674, 684, -1, sizeof(::CCSUsrMsg_RoundBackupFilenames)},
  { 688, 697, -1, sizeof(::CCSUsrMsg_SSUI)},
  { 700, 710, -1, sizeof(::CCSUsrMsg_SurvivalStats_Fact)},
  { 714, 723, -1, sizeof(::CCSUsrMsg_SurvivalStats_Placement)},
  { 726, 737, -1, sizeof(::CCSUsrMsg_SurvivalStats_Damage)},
  { 742, 753, -1, sizeof(::CCSUsrMsg_SurvivalStats)},
  { 758, 767, -1, sizeof(::CCSUsrMsg_EndOfMatchAllPlayersData_Accolade)},
  { 770, 784, -1, sizeof(::CCSUsrMsg_EndOfMatchAllPlayersData_PlayerData)},
  { 792, 800, -1, sizeof(::CCSUsrMsg_EndOfMatchAllPlayersData)},
  { 802, 814, -1, sizeof(::CCSUsrMsg_RoundEndReportData_RerEvent_Victim)},
  { 820, 827, -1, sizeof(::CCSUsrMsg_RoundEndReportData_RerEvent_Objective)},
  { 828, 840, -1, sizeof(::CCSUsrMsg_RoundEndReportData_RerEvent_Damage)},
  { 846, 859, -1, sizeof(::CCSUsrMsg_RoundEndReportData_RerEvent)},
  { 866, 875, -1, sizeof(::CCSUsrMsg_RoundEndReportData_InitialConditions)},
  { 878, 886, -1, sizeof(::CCSUsrMsg_RoundEndReportData)},
  { 888, 901, -1, sizeof(::CCSUsrMsg_PostRoundDamageReport)},
  { 908, 915, -1, sizeof(::CCSUsrMsg_CurrentRoundOdds)},
  { 916, 923, -1, sizeof(::CCSUsrMsg_DeepStats)},
  { 924, 934, -1, sizeof(::CCSUsrMsg_ShootInfo)},
  { 938, 945, -1, sizeof(::CCSUsrMsg_ResetHud)},
  { 946, 953, -1, sizeof(::CCSUsrMsg_GameTitle)},
  { 954, 961, -1, sizeof(::CCSUsrMsg_RequestState)},
  { 962, 969, -1, sizeof(::CCSUsrMsg_StopSpectatorMode)},
  { 970, 977, -1, sizeof(::CCSUsrMsg_DisconnectToLobby)},
  { 978, 985, -1, sizeof(::CCSUsrMsg_WarmupHasEnded)},
  { 986, 993, -1, sizeof(::CCSUsrMsg_ClientInfo)},
  { 994, 1002, -1, sizeof(::CCSUsrMsg_ServerRankRevealAll)},
  { 1004, 1013, -1, sizeof(::CCSUsrMsgPreMatchSayText)},
  { 1016, 1024, -1, sizeof(::CCSUsrMsg_CounterStrafe)},
  { 1026, 1040, -1, sizeof(::CCSUsrMsg_DamagePrediction)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::_CCSUsrMsg_VGUIMenu_Keys_default_instance_._instance,
  &::_CCSUsrMsg_VGUIMenu_default_instance_._instance,
  &::_CCSUsrMsg_Geiger_default_instance_._instance,
  &::_CCSUsrMsg_Train_default_instance_._instance,
  &::_CCSUsrMsg_HudText_default_instance_._instance,
  &::_CCSUsrMsg_HudMsg_default_instance_._instance,
  &::_CCSUsrMsg_Shake_default_instance_._instance,
  &::_CCSUsrMsg_Fade_default_instance_._instance,
  &::_CCSUsrMsg_Rumble_default_instance_._instance,
  &::_CCSUsrMsg_CloseCaption_default_instance_._instance,
  &::_CCSUsrMsg_CloseCaptionDirect_default_instance_._instance,
  &::_CCSUsrMsg_SendAudio_default_instance_._instance,
  &::_CCSUsrMsg_RawAudio_default_instance_._instance,
  &::_CCSUsrMsg_VoiceMask_PlayerMask_default_instance_._instance,
  &::_CCSUsrMsg_VoiceMask_default_instance_._instance,
  &::_CCSUsrMsg_Damage_default_instance_._instance,
  &::_CCSUsrMsg_RadioText_default_instance_._instance,
  &::_CCSUsrMsg_HintText_default_instance_._instance,
  &::_CCSUsrMsg_KeyHintText_default_instance_._instance,
  &::_CCSUsrMsg_ProcessSpottedEntityUpdate_SpottedEntityUpdate_default_instance_._instance,
  &::_CCSUsrMsg_ProcessSpottedEntityUpdate_default_instance_._instance,
  &::_CCSUsrMsg_SendPlayerItemDrops_default_instance_._instance,
  &::_CCSUsrMsg_SendPlayerItemFound_default_instance_._instance,
  &::_CCSUsrMsg_ReloadEffect_default_instance_._instance,
  &::_CCSUsrMsg_WeaponSound_default_instance_._instance,
  &::_CCSUsrMsg_UpdateScreenHealthBar_default_instance_._instance,
  &::_CCSUsrMsg_EntityOutlineHighlight_default_instance_._instance,
  &::_CCSUsrMsg_AdjustMoney_default_instance_._instance,
  &::_CCSUsrMsg_ReportHit_default_instance_._instance,
  &::_CCSUsrMsg_KillCam_default_instance_._instance,
  &::_CCSUsrMsg_DesiredTimescale_default_instance_._instance,
  &::_CCSUsrMsg_CurrentTimescale_default_instance_._instance,
  &::_CCSUsrMsg_AchievementEvent_default_instance_._instance,
  &::_CCSUsrMsg_MatchEndConditions_default_instance_._instance,
  &::_CCSUsrMsg_PlayerStatsUpdate_Stat_default_instance_._instance,
  &::_CCSUsrMsg_PlayerStatsUpdate_default_instance_._instance,
  &::_CCSUsrMsg_QuestProgress_default_instance_._instance,
  &::_CCSUsrMsg_ScoreLeaderboardData_default_instance_._instance,
  &::_CCSUsrMsg_PlayerDecalDigitalSignature_default_instance_._instance,
  &::_CCSUsrMsg_XRankGet_default_instance_._instance,
  &::_CCSUsrMsg_XRankUpd_default_instance_._instance,
  &::_CCSUsrMsg_CallVoteFailed_default_instance_._instance,
  &::_CCSUsrMsg_VoteStart_default_instance_._instance,
  &::_CCSUsrMsg_VotePass_default_instance_._instance,
  &::_CCSUsrMsg_VoteFailed_default_instance_._instance,
  &::_CCSUsrMsg_VoteSetup_default_instance_._instance,
  &::_CCSUsrMsg_SendLastKillerDamageToClient_default_instance_._instance,
  &::_CCSUsrMsg_ServerRankUpdate_RankUpdate_default_instance_._instance,
  &::_CCSUsrMsg_ServerRankUpdate_default_instance_._instance,
  &::_CCSUsrMsg_XpUpdate_default_instance_._instance,
  &::_CCSUsrMsg_ItemPickup_default_instance_._instance,
  &::_CCSUsrMsg_ShowMenu_default_instance_._instance,
  &::_CCSUsrMsg_BarTime_default_instance_._instance,
  &::_CCSUsrMsg_AmmoDenied_default_instance_._instance,
  &::_CCSUsrMsg_MarkAchievement_default_instance_._instance,
  &::_CCSUsrMsg_MatchStatsUpdate_default_instance_._instance,
  &::_CCSUsrMsg_ItemDrop_default_instance_._instance,
  &::_CCSUsrMsg_GlowPropTurnOff_default_instance_._instance,
  &::_CCSUsrMsg_RoundBackupFilenames_default_instance_._instance,
  &::_CCSUsrMsg_SSUI_default_instance_._instance,
  &::_CCSUsrMsg_SurvivalStats_Fact_default_instance_._instance,
  &::_CCSUsrMsg_SurvivalStats_Placement_default_instance_._instance,
  &::_CCSUsrMsg_SurvivalStats_Damage_default_instance_._instance,
  &::_CCSUsrMsg_SurvivalStats_default_instance_._instance,
  &::_CCSUsrMsg_EndOfMatchAllPlayersData_Accolade_default_instance_._instance,
  &::_CCSUsrMsg_EndOfMatchAllPlayersData_PlayerData_default_instance_._instance,
  &::_CCSUsrMsg_EndOfMatchAllPlayersData_default_instance_._instance,
  &::_CCSUsrMsg_RoundEndReportData_RerEvent_Victim_default_instance_._instance,
  &::_CCSUsrMsg_RoundEndReportData_RerEvent_Objective_default_instance_._instance,
  &::_CCSUsrMsg_RoundEndReportData_RerEvent_Damage_default_instance_._instance,
  &::_CCSUsrMsg_RoundEndReportData_RerEvent_default_instance_._instance,
  &::_CCSUsrMsg_RoundEndReportData_InitialConditions_default_instance_._instance,
  &::_CCSUsrMsg_RoundEndReportData_default_instance_._instance,
  &::_CCSUsrMsg_PostRoundDamageReport_default_instance_._instance,
  &::_CCSUsrMsg_CurrentRoundOdds_default_instance_._instance,
  &::_CCSUsrMsg_DeepStats_default_instance_._instance,
  &::_CCSUsrMsg_ShootInfo_default_instance_._instance,
  &::_CCSUsrMsg_ResetHud_default_instance_._instance,
  &::_CCSUsrMsg_GameTitle_default_instance_._instance,
  &::_CCSUsrMsg_RequestState_default_instance_._instance,
  &::_CCSUsrMsg_StopSpectatorMode_default_instance_._instance,
  &::_CCSUsrMsg_DisconnectToLobby_default_instance_._instance,
  &::_CCSUsrMsg_WarmupHasEnded_default_instance_._instance,
  &::_CCSUsrMsg_ClientInfo_default_instance_._instance,
  &::_CCSUsrMsg_ServerRankRevealAll_default_instance_._instance,
  &::_CCSUsrMsgPreMatchSayText_default_instance_._instance,
  &::_CCSUsrMsg_CounterStrafe_default_instance_._instance,
  &::_CCSUsrMsg_DamagePrediction_default_instance_._instance,
};

const char descriptor_table_protodef_cstrike15_5fusermessages_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\034cstrike15_usermessages.proto\032\026networkb"
  "asetypes.proto\032\032cstrike15_gcmessages.pro"
  "to\"}\n\022CCSUsrMsg_VGUIMenu\022\014\n\004name\030\001 \001(\t\022\014"
  "\n\004show\030\002 \001(\010\022&\n\004keys\030\003 \003(\0132\030.CCSUsrMsg_V"
  "GUIMenu.Keys\032#\n\004Keys\022\014\n\004name\030\001 \001(\t\022\r\n\005va"
  "lue\030\002 \001(\t\"!\n\020CCSUsrMsg_Geiger\022\r\n\005range\030\001"
  " \001(\005\" \n\017CCSUsrMsg_Train\022\r\n\005train\030\001 \001(\005\"!"
  "\n\021CCSUsrMsg_HudText\022\014\n\004text\030\001 \001(\t\"\340\001\n\020CC"
  "SUsrMsg_HudMsg\022\017\n\007channel\030\001 \001(\005\022\032\n\003pos\030\002"
  " \001(\0132\r.CMsgVector2D\022\027\n\004clr1\030\003 \001(\0132\t.CMsg"
  "RGBA\022\027\n\004clr2\030\004 \001(\0132\t.CMsgRGBA\022\016\n\006effect\030"
  "\005 \001(\005\022\024\n\014fade_in_time\030\006 \001(\002\022\025\n\rfade_out_"
  "time\030\007 \001(\002\022\021\n\thold_time\030\t \001(\002\022\017\n\007fx_time"
  "\030\n \001(\002\022\014\n\004text\030\013 \001(\t\"`\n\017CCSUsrMsg_Shake\022"
  "\017\n\007command\030\001 \001(\005\022\027\n\017local_amplitude\030\002 \001("
  "\002\022\021\n\tfrequency\030\003 \001(\002\022\020\n\010duration\030\004 \001(\002\"\\"
  "\n\016CCSUsrMsg_Fade\022\020\n\010duration\030\001 \001(\005\022\021\n\tho"
  "ld_time\030\002 \001(\005\022\r\n\005flags\030\003 \001(\005\022\026\n\003clr\030\004 \001("
  "\0132\t.CMsgRGBA\">\n\020CCSUsrMsg_Rumble\022\r\n\005inde"
  "x\030\001 \001(\005\022\014\n\004data\030\002 \001(\005\022\r\n\005flags\030\003 \001(\005\"^\n\026"
  "CCSUsrMsg_CloseCaption\022\014\n\004hash\030\001 \001(\r\022\020\n\010"
  "duration\030\002 \001(\005\022\023\n\013from_player\030\003 \001(\010\022\017\n\007c"
  "ctoken\030\004 \001(\t\"S\n\034CCSUsrMsg_CloseCaptionDi"
  "rect\022\014\n\004hash\030\001 \001(\r\022\020\n\010duration\030\002 \001(\005\022\023\n\013"
  "from_player\030\003 \001(\010\"*\n\023CCSUsrMsg_SendAudio"
  "\022\023\n\013radio_sound\030\001 \001(\t\"a\n\022CCSUsrMsg_RawAu"
  "dio\022\r\n\005pitch\030\001 \001(\005\022\022\n\006entidx\030\002 \001(\005:\002-1\022\020"
  "\n\010duration\030\003 \001(\002\022\026\n\016voice_filename\030\004 \001(\t"
  "\"\241\001\n\023CCSUsrMsg_VoiceMask\0225\n\014player_masks"
  "\030\001 \003(\0132\037.CCSUsrMsg_VoiceMask.PlayerMask\022"
  "\031\n\021player_mod_enable\030\002 \001(\010\0328\n\nPlayerMask"
  "\022\027\n\017game_rules_mask\030\001 \001(\005\022\021\n\tban_masks\030\002"
  " \001(\005\"i\n\020CCSUsrMsg_Damage\022\016\n\006amount\030\001 \001(\005"
  "\022(\n\023inflictor_world_pos\030\002 \001(\0132\013.CMsgVect"
  "or\022\033\n\017victim_entindex\030\003 \001(\005:\002-1\"\\\n\023CCSUs"
  "rMsg_RadioText\022\017\n\007msg_dst\030\001 \001(\005\022\022\n\006clien"
  "t\030\002 \001(\005:\002-1\022\020\n\010msg_name\030\003 \001(\t\022\016\n\006params\030"
  "\004 \003(\t\"%\n\022CCSUsrMsg_HintText\022\017\n\007message\030\001"
  " \001(\t\")\n\025CCSUsrMsg_KeyHintText\022\020\n\010message"
  "s\030\001 \003(\t\"\332\002\n$CCSUsrMsg_ProcessSpottedEnti"
  "tyUpdate\022\022\n\nnew_update\030\001 \001(\010\022Q\n\016entity_u"
  "pdates\030\002 \003(\01329.CCSUsrMsg_ProcessSpottedE"
  "ntityUpdate.SpottedEntityUpdate\032\312\001\n\023Spot"
  "tedEntityUpdate\022\026\n\nentity_idx\030\001 \001(\005:\002-1\022"
  "\020\n\010class_id\030\002 \001(\005\022\020\n\010origin_x\030\003 \001(\005\022\020\n\010o"
  "rigin_y\030\004 \001(\005\022\020\n\010origin_z\030\005 \001(\005\022\017\n\007angle"
  "_y\030\006 \001(\005\022\017\n\007defuser\030\007 \001(\010\022\032\n\022player_has_"
  "defuser\030\010 \001(\010\022\025\n\rplayer_has_c4\030\t \001(\010\"S\n\035"
  "CCSUsrMsg_SendPlayerItemDrops\0222\n\016entity_"
  "updates\030\001 \003(\0132\032.CEconItemPreviewDataBloc"
  "k\"e\n\035CCSUsrMsg_SendPlayerItemFound\022,\n\010it"
  "eminfo\030\001 \001(\0132\032.CEconItemPreviewDataBlock"
  "\022\026\n\nplayerslot\030\002 \001(\005:\002-1\"s\n\026CCSUsrMsg_Re"
  "loadEffect\022\022\n\006entidx\030\001 \001(\005:\002-1\022\017\n\007actani"
  "m\030\002 \001(\005\022\020\n\010origin_x\030\003 \001(\002\022\020\n\010origin_y\030\004 "
  "\001(\002\022\020\n\010origin_z\030\005 \001(\002\"\245\001\n\025CCSUsrMsg_Weap"
  "onSound\022\022\n\006entidx\030\001 \001(\005:\002-1\022\020\n\010origin_x\030"
  "\002 \001(\002\022\020\n\010origin_y\030\003 \001(\002\022\020\n\010origin_z\030\004 \001("
  "\002\022\r\n\005sound\030\005 \001(\t\022\026\n\016game_timestamp\030\006 \001(\002"
  "\022\033\n\023source_soundscapeid\030\007 \001(\007\"v\n\037CCSUsrM"
  "sg_UpdateScreenHealthBar\022\022\n\006entidx\030\001 \001(\005"
  ":\002-1\022\027\n\017healthratio_old\030\002 \001(\002\022\027\n\017healthr"
  "atio_new\030\003 \001(\002\022\r\n\005style\030\004 \001(\005\"O\n CCSUsrM"
  "sg_EntityOutlineHighlight\022\022\n\006entidx\030\001 \001("
  "\005:\002-1\022\027\n\017removehighlight\030\002 \001(\010\"\'\n\025CCSUsr"
  "Msg_AdjustMoney\022\016\n\006amount\030\001 \001(\005\"U\n\023CCSUs"
  "rMsg_ReportHit\022\r\n\005pos_x\030\001 \001(\002\022\r\n\005pos_y\030\002"
  " \001(\002\022\021\n\ttimestamp\030\004 \001(\002\022\r\n\005pos_z\030\003 \001(\002\"Z"
  "\n\021CCSUsrMsg_KillCam\022\020\n\010obs_mode\030\001 \001(\005\022\030\n"
  "\014first_target\030\002 \001(\005:\002-1\022\031\n\rsecond_target"
  "\030\003 \001(\005:\002-1\"\213\001\n\032CCSUsrMsg_DesiredTimescal"
  "e\022\031\n\021desired_timescale\030\001 \001(\002\022\035\n\025duration"
  "_realtime_sec\030\002 \001(\002\022\031\n\021interpolator_type"
  "\030\003 \001(\005\022\030\n\020start_blend_time\030\004 \001(\002\"3\n\032CCSU"
  "srMsg_CurrentTimescale\022\025\n\rcur_timescale\030"
  "\001 \001(\002\"Q\n\032CCSUsrMsg_AchievementEvent\022\023\n\013a"
  "chievement\030\001 \001(\005\022\r\n\005count\030\002 \001(\005\022\017\n\007user_"
  "id\030\003 \001(\005\"r\n\034CCSUsrMsg_MatchEndConditions"
  "\022\021\n\tfraglimit\030\001 \001(\005\022\024\n\014mp_maxrounds\030\002 \001("
  "\005\022\023\n\013mp_winlimit\030\003 \001(\005\022\024\n\014mp_timelimit\030\004"
  " \001(\002\"\242\001\n\033CCSUsrMsg_PlayerStatsUpdate\022\017\n\007"
  "version\030\001 \001(\005\0220\n\005stats\030\004 \003(\0132!.CCSUsrMsg"
  "_PlayerStatsUpdate.Stat\022\017\n\007ehandle\030\005 \001(\r"
  "\022\013\n\003crc\030\006 \001(\005\032\"\n\004Stat\022\013\n\003idx\030\001 \001(\005\022\r\n\005de"
  "lta\030\002 \001(\005\"p\n\027CCSUsrMsg_QuestProgress\022\020\n\010"
  "quest_id\030\001 \001(\r\022\025\n\rnormal_points\030\002 \001(\r\022\024\n"
  "\014bonus_points\030\003 \001(\r\022\026\n\016is_event_quest\030\004 "
  "\001(\010\"E\n\036CCSUsrMsg_ScoreLeaderboardData\022#\n"
  "\004data\030\001 \001(\0132\025.ScoreLeaderboardData\"S\n%CC"
  "SUsrMsg_PlayerDecalDigitalSignature\022*\n\004d"
  "ata\030\001 \001(\0132\034.PlayerDecalDigitalSignature\""
  ":\n\022CCSUsrMsg_XRankGet\022\020\n\010mode_idx\030\001 \001(\005\022"
  "\022\n\ncontroller\030\002 \001(\005\"K\n\022CCSUsrMsg_XRankUp"
  "d\022\020\n\010mode_idx\030\001 \001(\005\022\022\n\ncontroller\030\002 \001(\005\022"
  "\017\n\007ranking\030\003 \001(\005\"8\n\030CCSUsrMsg_CallVoteFa"
  "iled\022\016\n\006reason\030\001 \001(\005\022\014\n\004time\030\002 \001(\005\"\306\001\n\023C"
  "CSUsrMsg_VoteStart\022\014\n\004team\030\001 \001(\005\022\027\n\013play"
  "er_slot\030\002 \001(\005:\002-1\022\021\n\tvote_type\030\003 \001(\005\022\020\n\010"
  "disp_str\030\004 \001(\t\022\023\n\013details_str\030\005 \001(\t\022\026\n\016o"
  "ther_team_str\030\006 \001(\t\022\026\n\016is_yes_no_vote\030\007 "
  "\001(\010\022\036\n\022player_slot_target\030\010 \001(\005:\002-1\"\\\n\022C"
  "CSUsrMsg_VotePass\022\014\n\004team\030\001 \001(\005\022\021\n\tvote_"
  "type\030\002 \001(\005\022\020\n\010disp_str\030\003 \001(\t\022\023\n\013details_"
  "str\030\004 \001(\t\"4\n\024CCSUsrMsg_VoteFailed\022\014\n\004tea"
  "m\030\001 \001(\005\022\016\n\006reason\030\002 \001(\005\"/\n\023CCSUsrMsg_Vot"
  "eSetup\022\030\n\020potential_issues\030\001 \003(\t\"\276\001\n&CCS"
  "UsrMsg_SendLastKillerDamageToClient\022\026\n\016n"
  "um_hits_given\030\001 \001(\005\022\024\n\014damage_given\030\002 \001("
  "\005\022\026\n\016num_hits_taken\030\003 \001(\005\022\024\n\014damage_take"
  "n\030\004 \001(\005\022\033\n\023actual_damage_given\030\005 \001(\005\022\033\n\023"
  "actual_damage_taken\030\006 \001(\005\"\335\001\n\032CCSUsrMsg_"
  "ServerRankUpdate\022;\n\013rank_update\030\001 \003(\0132&."
  "CCSUsrMsg_ServerRankUpdate.RankUpdate\032\201\001"
  "\n\nRankUpdate\022\022\n\naccount_id\030\001 \001(\005\022\020\n\010rank"
  "_old\030\002 \001(\005\022\020\n\010rank_new\030\003 \001(\005\022\020\n\010num_wins"
  "\030\004 \001(\005\022\023\n\013rank_change\030\005 \001(\002\022\024\n\014rank_type"
  "_id\030\006 \001(\005\"Q\n\022CCSUsrMsg_XpUpdate\022;\n\004data\030"
  "\001 \001(\0132-.CMsgGCCstrike15_v2_GC2ServerNoti"
  "fyXPRewarded\"$\n\024CCSUsrMsg_ItemPickup\022\014\n\004"
  "item\030\001 \001(\t\"Y\n\022CCSUsrMsg_ShowMenu\022\030\n\020bits"
  "_valid_slots\030\001 \001(\005\022\024\n\014display_time\030\002 \001(\005"
  "\022\023\n\013menu_string\030\003 \001(\t\"!\n\021CCSUsrMsg_BarTi"
  "me\022\014\n\004time\030\001 \001(\t\"\'\n\024CCSUsrMsg_AmmoDenied"
  "\022\017\n\007ammoidx\030\001 \001(\005\"0\n\031CCSUsrMsg_MarkAchie"
  "vement\022\023\n\013achievement\030\001 \001(\t\",\n\032CCSUsrMsg"
  "_MatchStatsUpdate\022\016\n\006update\030\001 \001(\t\"3\n\022CCS"
  "UsrMsg_ItemDrop\022\016\n\006itemid\030\001 \001(\003\022\r\n\005death"
  "\030\002 \001(\010\"/\n\031CCSUsrMsg_GlowPropTurnOff\022\022\n\006e"
  "ntidx\030\001 \001(\005:\002-1\"b\n\036CCSUsrMsg_RoundBackup"
  "Filenames\022\r\n\005count\030\001 \001(\005\022\r\n\005index\030\002 \001(\005\022"
  "\020\n\010filename\030\003 \001(\t\022\020\n\010nicename\030\004 \001(\t\"D\n\016C"
  "CSUsrMsg_SSUI\022\014\n\004show\030\001 \001(\010\022\022\n\nstart_tim"
  "e\030\002 \001(\002\022\020\n\010end_time\030\003 \001(\002\"\265\003\n\027CCSUsrMsg_"
  "SurvivalStats\022\014\n\004xuid\030\001 \001(\004\022,\n\005facts\030\002 \003"
  "(\0132\035.CCSUsrMsg_SurvivalStats.Fact\0221\n\005use"
  "rs\030\003 \003(\0132\".CCSUsrMsg_SurvivalStats.Place"
  "ment\0220\n\007damages\030\005 \003(\0132\037.CCSUsrMsg_Surviv"
  "alStats.Damage\022\022\n\nticknumber\030\004 \001(\005\032M\n\004Fa"
  "ct\022\014\n\004type\030\001 \001(\005\022\017\n\007display\030\002 \001(\005\022\r\n\005val"
  "ue\030\003 \001(\005\022\027\n\017interestingness\030\004 \001(\002\032@\n\tPla"
  "cement\022\014\n\004xuid\030\001 \001(\004\022\022\n\nteamnumber\030\002 \001(\005"
  "\022\021\n\tplacement\030\003 \001(\005\032T\n\006Damage\022\014\n\004xuid\030\001 "
  "\001(\004\022\n\n\002to\030\002 \001(\005\022\017\n\007to_hits\030\003 \001(\005\022\014\n\004from"
  "\030\004 \001(\005\022\021\n\tfrom_hits\030\005 \001(\005\"\234\003\n\"CCSUsrMsg_"
  "EndOfMatchAllPlayersData\022E\n\rallplayerdat"
  "a\030\001 \003(\0132..CCSUsrMsg_EndOfMatchAllPlayers"
  "Data.PlayerData\022\r\n\005scene\030\002 \001(\005\032>\n\010Accola"
  "de\022\021\n\teaccolade\030\001 \001(\005\022\r\n\005value\030\002 \001(\002\022\020\n\010"
  "position\030\003 \001(\005\032\337\001\n\nPlayerData\022\020\n\004slot\030\001 "
  "\001(\005:\002-1\022\014\n\004xuid\030\002 \001(\004\022\014\n\004name\030\003 \001(\t\022\022\n\nt"
  "eamnumber\030\004 \001(\005\022@\n\nnomination\030\005 \001(\0132,.CC"
  "SUsrMsg_EndOfMatchAllPlayersData.Accolad"
  "e\022)\n\005items\030\006 \003(\0132\032.CEconItemPreviewDataB"
  "lock\022\023\n\013playercolor\030\007 \001(\005\022\r\n\005isbot\030\010 \001(\010"
  "\"\350\006\n\034CCSUsrMsg_RoundEndReportData\022H\n\017ini"
  "t_conditions\030\001 \001(\0132/.CCSUsrMsg_RoundEndR"
  "eportData.InitialConditions\022B\n\022all_rer_e"
  "vent_data\030\002 \003(\0132&.CCSUsrMsg_RoundEndRepo"
  "rtData.RerEvent\032\335\004\n\010RerEvent\022\021\n\ttimestam"
  "p\030\001 \001(\002\022\026\n\016terrorist_odds\030\002 \001(\005\022\020\n\010ct_al"
  "ive\030\003 \001(\005\022\017\n\007t_alive\030\004 \001(\005\022B\n\013victim_dat"
  "a\030\005 \001(\0132-.CCSUsrMsg_RoundEndReportData.R"
  "erEvent.Victim\022H\n\016objective_data\030\006 \001(\01320"
  ".CCSUsrMsg_RoundEndReportData.RerEvent.O"
  "bjective\022F\n\017all_damage_data\030\007 \003(\0132-.CCSU"
  "srMsg_RoundEndReportData.RerEvent.Damage"
  "\032s\n\006Victim\022\023\n\013team_number\030\001 \001(\005\022\026\n\nplaye"
  "rslot\030\002 \001(\005:\002-1\022\014\n\004xuid\030\003 \001(\004\022\r\n\005color\030\004"
  " \001(\005\022\016\n\006is_bot\030\005 \001(\010\022\017\n\007is_dead\030\006 \001(\010\032\031\n"
  "\tObjective\022\014\n\004type\030\001 \001(\005\032\234\001\n\006Damage\022\034\n\020o"
  "ther_playerslot\030\001 \001(\005:\002-1\022\022\n\nother_xuid\030"
  "\002 \001(\004\022\026\n\016health_removed\030\003 \001(\005\022\020\n\010num_hit"
  "s\030\004 \001(\005\022\035\n\025return_health_removed\030\005 \001(\005\022\027"
  "\n\017return_num_hits\030\006 \001(\005\032Z\n\021InitialCondit"
  "ions\022\026\n\016ct_equip_value\030\001 \001(\005\022\025\n\rt_equip_"
  "value\030\002 \001(\005\022\026\n\016terrorist_odds\030\003 \001(\005\"\323\001\n\037"
  "CCSUsrMsg_PostRoundDamageReport\022\022\n\nother"
  "_xuid\030\001 \001(\004\022\027\n\017given_kill_type\030\002 \001(\005\022\034\n\024"
  "given_health_removed\030\003 \001(\005\022\026\n\016given_num_"
  "hits\030\004 \001(\005\022\027\n\017taken_kill_type\030\005 \001(\005\022\034\n\024t"
  "aken_health_removed\030\006 \001(\005\022\026\n\016taken_num_h"
  "its\030\007 \001(\005\"*\n\032CCSUsrMsg_CurrentRoundOdds\022"
  "\014\n\004odds\030\001 \001(\005\"F\n\023CCSUsrMsg_DeepStats\022/\n\005"
  "stats\030\001 \001(\0132 .CMsgGCCStrike15_ClientDeep"
  "Stats\"\226\001\n\023CCSUsrMsg_ShootInfo\022\024\n\014frame_n"
  "umber\030\001 \001(\005\022)\n\021hitbox_transforms\030\002 \003(\0132\016"
  ".CMsgTransform\022\036\n\tshoot_pos\030\003 \001(\0132\013.CMsg"
  "Vector\022\036\n\tshoot_dir\030\004 \001(\0132\013.CMsgQAngle\"#"
  "\n\022CCSUsrMsg_ResetHud\022\r\n\005reset\030\001 \001(\010\"$\n\023C"
  "CSUsrMsg_GameTitle\022\r\n\005dummy\030\001 \001(\005\"\'\n\026CCS"
  "UsrMsg_RequestState\022\r\n\005dummy\030\001 \001(\005\",\n\033CC"
  "SUsrMsg_StopSpectatorMode\022\r\n\005dummy\030\001 \001(\005"
  "\",\n\033CCSUsrMsg_DisconnectToLobby\022\r\n\005dummy"
  "\030\001 \001(\005\")\n\030CCSUsrMsg_WarmupHasEnded\022\r\n\005du"
  "mmy\030\001 \001(\005\"%\n\024CCSUsrMsg_ClientInfo\022\r\n\005dum"
  "my\030\001 \001(\005\"\204\001\n\035CCSUsrMsg_ServerRankRevealA"
  "ll\022\035\n\025seconds_till_shutdown\030\001 \001(\005\022D\n\013res"
  "ervation\030\002 \001(\0132/.CMsgGCCStrike15_v2_Matc"
  "hmakingGC2ServerReserve\"N\n\030CCSUsrMsgPreM"
  "atchSayText\022\022\n\naccount_id\030\001 \001(\r\022\014\n\004text\030"
  "\002 \001(\t\022\020\n\010all_chat\030\003 \001(\010\"O\n\027CCSUsrMsg_Cou"
  "nterStrafe\022\033\n\023press_to_release_ns\030\001 \001(\005\022"
  "\027\n\017total_keys_down\030\002 \001(\005\"\361\001\n\032CCSUsrMsg_D"
  "amagePrediction\022\023\n\013command_num\030\001 \001(\005\022\022\n\n"
  "pellet_idx\030\002 \001(\005\022\023\n\013victim_slot\030\003 \001(\005\022\036\n"
  "\026victim_starting_health\030\004 \001(\005\022\025\n\rvictim_"
  "damage\030\005 \001(\005\022\036\n\tshoot_pos\030\006 \001(\0132\013.CMsgVe"
  "ctor\022\036\n\tshoot_dir\030\007 \001(\0132\013.CMsgQAngle\022\036\n\t"
  "aim_punch\030\010 \001(\0132\013.CMsgQAngle*\311\017\n\026ECstrik"
  "e15UserMessages\022\023\n\016CS_UM_VGUIMenu\020\255\002\022\021\n\014"
  "CS_UM_Geiger\020\256\002\022\020\n\013CS_UM_Train\020\257\002\022\022\n\rCS_"
  "UM_HudText\020\260\002\022\022\n\rCS_UM_SayText\020\261\002\022\023\n\016CS_"
  "UM_SayText2\020\262\002\022\022\n\rCS_UM_TextMsg\020\263\002\022\021\n\014CS"
  "_UM_HudMsg\020\264\002\022\023\n\016CS_UM_ResetHud\020\265\002\022\024\n\017CS"
  "_UM_GameTitle\020\266\002\022\020\n\013CS_UM_Shake\020\270\002\022\017\n\nCS"
  "_UM_Fade\020\271\002\022\021\n\014CS_UM_Rumble\020\272\002\022\027\n\022CS_UM_"
  "CloseCaption\020\273\002\022\035\n\030CS_UM_CloseCaptionDir"
  "ect\020\274\002\022\024\n\017CS_UM_SendAudio\020\275\002\022\023\n\016CS_UM_Ra"
  "wAudio\020\276\002\022\024\n\017CS_UM_VoiceMask\020\277\002\022\027\n\022CS_UM"
  "_RequestState\020\300\002\022\021\n\014CS_UM_Damage\020\301\002\022\024\n\017C"
  "S_UM_RadioText\020\302\002\022\023\n\016CS_UM_HintText\020\303\002\022\026"
  "\n\021CS_UM_KeyHintText\020\304\002\022%\n CS_UM_ProcessS"
  "pottedEntityUpdate\020\305\002\022\027\n\022CS_UM_ReloadEff"
  "ect\020\306\002\022\026\n\021CS_UM_AdjustMoney\020\307\002\022\032\n\025CS_UM_"
  "UpdateTeamMoney\020\310\002\022\034\n\027CS_UM_StopSpectato"
  "rMode\020\311\002\022\022\n\rCS_UM_KillCam\020\312\002\022\033\n\026CS_UM_De"
  "siredTimescale\020\313\002\022\033\n\026CS_UM_CurrentTimesc"
  "ale\020\314\002\022\033\n\026CS_UM_AchievementEvent\020\315\002\022\035\n\030C"
  "S_UM_MatchEndConditions\020\316\002\022\034\n\027CS_UM_Disc"
  "onnectToLobby\020\317\002\022\034\n\027CS_UM_PlayerStatsUpd"
  "ate\020\320\002\022\031\n\024CS_UM_WarmupHasEnded\020\322\002\022\025\n\020CS_"
  "UM_ClientInfo\020\323\002\022\023\n\016CS_UM_XRankGet\020\324\002\022\023\n"
  "\016CS_UM_XRankUpd\020\325\002\022\031\n\024CS_UM_CallVoteFail"
  "ed\020\331\002\022\024\n\017CS_UM_VoteStart\020\332\002\022\023\n\016CS_UM_Vot"
  "ePass\020\333\002\022\025\n\020CS_UM_VoteFailed\020\334\002\022\024\n\017CS_UM"
  "_VoteSetup\020\335\002\022\036\n\031CS_UM_ServerRankRevealA"
  "ll\020\336\002\022\'\n\"CS_UM_SendLastKillerDamageToCli"
  "ent\020\337\002\022\033\n\026CS_UM_ServerRankUpdate\020\340\002\022\025\n\020C"
  "S_UM_ItemPickup\020\341\002\022\023\n\016CS_UM_ShowMenu\020\342\002\022"
  "\022\n\rCS_UM_BarTime\020\343\002\022\025\n\020CS_UM_AmmoDenied\020"
  "\344\002\022\032\n\025CS_UM_MarkAchievement\020\345\002\022\033\n\026CS_UM_"
  "MatchStatsUpdate\020\346\002\022\023\n\016CS_UM_ItemDrop\020\347\002"
  "\022\032\n\025CS_UM_GlowPropTurnOff\020\350\002\022\036\n\031CS_UM_Se"
  "ndPlayerItemDrops\020\351\002\022\037\n\032CS_UM_RoundBacku"
  "pFilenames\020\352\002\022\036\n\031CS_UM_SendPlayerItemFou"
  "nd\020\353\002\022\024\n\017CS_UM_ReportHit\020\354\002\022\023\n\016CS_UM_XpU"
  "pdate\020\355\002\022\030\n\023CS_UM_QuestProgress\020\356\002\022\037\n\032CS"
  "_UM_ScoreLeaderboardData\020\357\002\022&\n!CS_UM_Pla"
  "yerDecalDigitalSignature\020\360\002\022\026\n\021CS_UM_Wea"
  "ponSound\020\361\002\022 \n\033CS_UM_UpdateScreenHealthB"
  "ar\020\362\002\022!\n\034CS_UM_EntityOutlineHighlight\020\363\002"
  "\022\017\n\nCS_UM_SSUI\020\364\002\022\030\n\023CS_UM_SurvivalStats"
  "\020\365\002\022\035\n\030CS_UM_DisconnectToLobby2\020\366\002\022#\n\036CS"
  "_UM_EndOfMatchAllPlayersData\020\367\002\022 \n\033CS_UM"
  "_PostRoundDamageReport\020\370\002\022\035\n\030CS_UM_Round"
  "EndReportData\020\373\002\022\033\n\026CS_UM_CurrentRoundOd"
  "ds\020\374\002\022\024\n\017CS_UM_DeepStats\020\375\002\022\024\n\017CS_UM_Sho"
  "otInfo\020\377\002\022\030\n\023CS_UM_CounterStrafe\020\201\003\022\033\n\026C"
  "S_UM_DamagePrediction\020\202\003*\210\001\n\"ECSUsrMsg_D"
  "isconnectToLobby_Action\0220\n,k_ECSUsrMsg_D"
  "isconnectToLobby_Action_Default\020\000\0220\n,k_E"
  "CSUsrMsg_DisconnectToLobby_Action_GoQueu"
  "e\020\001"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_cstrike15_5fusermessages_2eproto_deps[2] = {
  &::descriptor_table_cstrike15_5fgcmessages_2eproto,
  &::descriptor_table_networkbasetypes_2eproto,
};
static ::_pbi::once_flag descriptor_table_cstrike15_5fusermessages_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_cstrike15_5fusermessages_2eproto = {
    false, false, 10483, descriptor_table_protodef_cstrike15_5fusermessages_2eproto,
    "cstrike15_usermessages.proto",
    &descriptor_table_cstrike15_5fusermessages_2eproto_once, descriptor_table_cstrike15_5fusermessages_2eproto_deps, 2, 88,
    schemas, file_default_instances, TableStruct_cstrike15_5fusermessages_2eproto::offsets,
    file_level_metadata_cstrike15_5fusermessages_2eproto, file_level_enum_descriptors_cstrike15_5fusermessages_2eproto,
    file_level_service_descriptors_cstrike15_5fusermessages_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_cstrike15_5fusermessages_2eproto_getter() {
  return &descriptor_table_cstrike15_5fusermessages_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_cstrike15_5fusermessages_2eproto(&descriptor_table_cstrike15_5fusermessages_2eproto);
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ECstrike15UserMessages_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_cstrike15_5fusermessages_2eproto);
  return file_level_enum_descriptors_cstrike15_5fusermessages_2eproto[0];
}
bool ECstrike15UserMessages_IsValid(int value) {
  switch (value) {
    case 301:
    case 302:
    case 303:
    case 304:
    case 305:
    case 306:
    case 307:
    case 308:
    case 309:
    case 310:
    case 312:
    case 313:
    case 314:
    case 315:
    case 316:
    case 317:
    case 318:
    case 319:
    case 320:
    case 321:
    case 322:
    case 323:
    case 324:
    case 325:
    case 326:
    case 327:
    case 328:
    case 329:
    case 330:
    case 331:
    case 332:
    case 333:
    case 334:
    case 335:
    case 336:
    case 338:
    case 339:
    case 340:
    case 341:
    case 345:
    case 346:
    case 347:
    case 348:
    case 349:
    case 350:
    case 351:
    case 352:
    case 353:
    case 354:
    case 355:
    case 356:
    case 357:
    case 358:
    case 359:
    case 360:
    case 361:
    case 362:
    case 363:
    case 364:
    case 365:
    case 366:
    case 367:
    case 368:
    case 369:
    case 370:
    case 371:
    case 372:
    case 373:
    case 374:
    case 375:
    case 376:
    case 379:
    case 380:
    case 381:
    case 383:
    case 385:
    case 386:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ECSUsrMsg_DisconnectToLobby_Action_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_cstrike15_5fusermessages_2eproto);
  return file_level_enum_descriptors_cstrike15_5fusermessages_2eproto[1];
}
bool ECSUsrMsg_DisconnectToLobby_Action_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class CCSUsrMsg_VGUIMenu_Keys::_Internal {
 public:
  using HasBits = decltype(std::declval<CCSUsrMsg_VGUIMenu_Keys>()._impl_._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CCSUsrMsg_VGUIMenu_Keys::CCSUsrMsg_VGUIMenu_Keys(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CCSUsrMsg_VGUIMenu.Keys)
}
CCSUsrMsg_VGUIMenu_Keys::CCSUsrMsg_VGUIMenu_Keys(const CCSUsrMsg_VGUIMenu_Keys& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CCSUsrMsg_VGUIMenu_Keys* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_){}
    , decltype(_impl_.value_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.value_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.value_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_value()) {
    _this->_impl_.value_.Set(from._internal_value(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:CCSUsrMsg_VGUIMenu.Keys)
}

inline void CCSUsrMsg_VGUIMenu_Keys::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_){}
    , decltype(_impl_.value_){}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.value_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.value_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CCSUsrMsg_VGUIMenu_Keys::~CCSUsrMsg_VGUIMenu_Keys() {
  // @@protoc_insertion_point(destructor:CCSUsrMsg_VGUIMenu.Keys)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CCSUsrMsg_VGUIMenu_Keys::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
  _impl_.value_.Destroy();
}

void CCSUsrMsg_VGUIMenu_Keys::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CCSUsrMsg_VGUIMenu_Keys::Clear() {
// @@protoc_insertion_point(message_clear_start:CCSUsrMsg_VGUIMenu.Keys)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.value_.ClearNonDefaultToEmpty();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CCSUsrMsg_VGUIMenu_Keys::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CCSUsrMsg_VGUIMenu.Keys.name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_value();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CCSUsrMsg_VGUIMenu.Keys.value");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CCSUsrMsg_VGUIMenu_Keys::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCSUsrMsg_VGUIMenu.Keys)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CCSUsrMsg_VGUIMenu.Keys.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // optional string value = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_value().data(), static_cast<int>(this->_internal_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CCSUsrMsg_VGUIMenu.Keys.value");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCSUsrMsg_VGUIMenu.Keys)
  return target;
}

size_t CCSUsrMsg_VGUIMenu_Keys::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCSUsrMsg_VGUIMenu.Keys)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional string value = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_value());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CCSUsrMsg_VGUIMenu_Keys::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CCSUsrMsg_VGUIMenu_Keys::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CCSUsrMsg_VGUIMenu_Keys::GetClassData() const { return &_class_data_; }


void CCSUsrMsg_VGUIMenu_Keys::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CCSUsrMsg_VGUIMenu_Keys*>(&to_msg);
  auto& from = static_cast<const CCSUsrMsg_VGUIMenu_Keys&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CCSUsrMsg_VGUIMenu.Keys)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_value(from._internal_value());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CCSUsrMsg_VGUIMenu_Keys::CopyFrom(const CCSUsrMsg_VGUIMenu_Keys& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCSUsrMsg_VGUIMenu.Keys)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCSUsrMsg_VGUIMenu_Keys::IsInitialized() const {
  return true;
}

void CCSUsrMsg_VGUIMenu_Keys::InternalSwap(CCSUsrMsg_VGUIMenu_Keys* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.value_, lhs_arena,
      &other->_impl_.value_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata CCSUsrMsg_VGUIMenu_Keys::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cstrike15_5fusermessages_2eproto_getter, &descriptor_table_cstrike15_5fusermessages_2eproto_once,
      file_level_metadata_cstrike15_5fusermessages_2eproto[0]);
}

// ===================================================================

class CCSUsrMsg_VGUIMenu::_Internal {
 public:
  using HasBits = decltype(std::declval<CCSUsrMsg_VGUIMenu>()._impl_._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_show(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CCSUsrMsg_VGUIMenu::CCSUsrMsg_VGUIMenu(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CCSUsrMsg_VGUIMenu)
}
CCSUsrMsg_VGUIMenu::CCSUsrMsg_VGUIMenu(const CCSUsrMsg_VGUIMenu& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CCSUsrMsg_VGUIMenu* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.keys_){from._impl_.keys_}
    , decltype(_impl_.name_){}
    , decltype(_impl_.show_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.show_ = from._impl_.show_;
  // @@protoc_insertion_point(copy_constructor:CCSUsrMsg_VGUIMenu)
}

inline void CCSUsrMsg_VGUIMenu::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.keys_){arena}
    , decltype(_impl_.name_){}
    , decltype(_impl_.show_){false}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CCSUsrMsg_VGUIMenu::~CCSUsrMsg_VGUIMenu() {
  // @@protoc_insertion_point(destructor:CCSUsrMsg_VGUIMenu)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CCSUsrMsg_VGUIMenu::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.keys_.~RepeatedPtrField();
  _impl_.name_.Destroy();
}

void CCSUsrMsg_VGUIMenu::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CCSUsrMsg_VGUIMenu::Clear() {
// @@protoc_insertion_point(message_clear_start:CCSUsrMsg_VGUIMenu)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.keys_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.name_.ClearNonDefaultToEmpty();
  }
  _impl_.show_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CCSUsrMsg_VGUIMenu::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CCSUsrMsg_VGUIMenu.name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional bool show = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_show(&has_bits);
          _impl_.show_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .CCSUsrMsg_VGUIMenu.Keys keys = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_keys(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CCSUsrMsg_VGUIMenu::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCSUsrMsg_VGUIMenu)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CCSUsrMsg_VGUIMenu.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // optional bool show = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_show(), target);
  }

  // repeated .CCSUsrMsg_VGUIMenu.Keys keys = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_keys_size()); i < n; i++) {
    const auto& repfield = this->_internal_keys(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCSUsrMsg_VGUIMenu)
  return target;
}

size_t CCSUsrMsg_VGUIMenu::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCSUsrMsg_VGUIMenu)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CCSUsrMsg_VGUIMenu.Keys keys = 3;
  total_size += 1UL * this->_internal_keys_size();
  for (const auto& msg : this->_impl_.keys_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional bool show = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CCSUsrMsg_VGUIMenu::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CCSUsrMsg_VGUIMenu::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CCSUsrMsg_VGUIMenu::GetClassData() const { return &_class_data_; }


void CCSUsrMsg_VGUIMenu::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CCSUsrMsg_VGUIMenu*>(&to_msg);
  auto& from = static_cast<const CCSUsrMsg_VGUIMenu&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CCSUsrMsg_VGUIMenu)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.keys_.MergeFrom(from._impl_.keys_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.show_ = from._impl_.show_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CCSUsrMsg_VGUIMenu::CopyFrom(const CCSUsrMsg_VGUIMenu& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCSUsrMsg_VGUIMenu)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCSUsrMsg_VGUIMenu::IsInitialized() const {
  return true;
}

void CCSUsrMsg_VGUIMenu::InternalSwap(CCSUsrMsg_VGUIMenu* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.keys_.InternalSwap(&other->_impl_.keys_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  swap(_impl_.show_, other->_impl_.show_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CCSUsrMsg_VGUIMenu::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cstrike15_5fusermessages_2eproto_getter, &descriptor_table_cstrike15_5fusermessages_2eproto_once,
      file_level_metadata_cstrike15_5fusermessages_2eproto[1]);
}

// ===================================================================

class CCSUsrMsg_Geiger::_Internal {
 public:
  using HasBits = decltype(std::declval<CCSUsrMsg_Geiger>()._impl_._has_bits_);
  static void set_has_range(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CCSUsrMsg_Geiger::CCSUsrMsg_Geiger(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CCSUsrMsg_Geiger)
}
CCSUsrMsg_Geiger::CCSUsrMsg_Geiger(const CCSUsrMsg_Geiger& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CCSUsrMsg_Geiger* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.range_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.range_ = from._impl_.range_;
  // @@protoc_insertion_point(copy_constructor:CCSUsrMsg_Geiger)
}

inline void CCSUsrMsg_Geiger::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.range_){0}
  };
}

CCSUsrMsg_Geiger::~CCSUsrMsg_Geiger() {
  // @@protoc_insertion_point(destructor:CCSUsrMsg_Geiger)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CCSUsrMsg_Geiger::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CCSUsrMsg_Geiger::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CCSUsrMsg_Geiger::Clear() {
// @@protoc_insertion_point(message_clear_start:CCSUsrMsg_Geiger)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.range_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CCSUsrMsg_Geiger::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 range = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_range(&has_bits);
          _impl_.range_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CCSUsrMsg_Geiger::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCSUsrMsg_Geiger)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 range = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_range(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCSUsrMsg_Geiger)
  return target;
}

size_t CCSUsrMsg_Geiger::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCSUsrMsg_Geiger)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int32 range = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_range());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CCSUsrMsg_Geiger::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CCSUsrMsg_Geiger::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CCSUsrMsg_Geiger::GetClassData() const { return &_class_data_; }


void CCSUsrMsg_Geiger::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CCSUsrMsg_Geiger*>(&to_msg);
  auto& from = static_cast<const CCSUsrMsg_Geiger&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CCSUsrMsg_Geiger)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_range()) {
    _this->_internal_set_range(from._internal_range());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CCSUsrMsg_Geiger::CopyFrom(const CCSUsrMsg_Geiger& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCSUsrMsg_Geiger)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCSUsrMsg_Geiger::IsInitialized() const {
  return true;
}

void CCSUsrMsg_Geiger::InternalSwap(CCSUsrMsg_Geiger* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.range_, other->_impl_.range_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CCSUsrMsg_Geiger::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cstrike15_5fusermessages_2eproto_getter, &descriptor_table_cstrike15_5fusermessages_2eproto_once,
      file_level_metadata_cstrike15_5fusermessages_2eproto[2]);
}

// ===================================================================

class CCSUsrMsg_Train::_Internal {
 public:
  using HasBits = decltype(std::declval<CCSUsrMsg_Train>()._impl_._has_bits_);
  static void set_has_train(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CCSUsrMsg_Train::CCSUsrMsg_Train(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CCSUsrMsg_Train)
}
CCSUsrMsg_Train::CCSUsrMsg_Train(const CCSUsrMsg_Train& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CCSUsrMsg_Train* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.train_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.train_ = from._impl_.train_;
  // @@protoc_insertion_point(copy_constructor:CCSUsrMsg_Train)
}

inline void CCSUsrMsg_Train::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.train_){0}
  };
}

CCSUsrMsg_Train::~CCSUsrMsg_Train() {
  // @@protoc_insertion_point(destructor:CCSUsrMsg_Train)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CCSUsrMsg_Train::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CCSUsrMsg_Train::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CCSUsrMsg_Train::Clear() {
// @@protoc_insertion_point(message_clear_start:CCSUsrMsg_Train)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.train_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CCSUsrMsg_Train::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 train = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_train(&has_bits);
          _impl_.train_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CCSUsrMsg_Train::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCSUsrMsg_Train)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 train = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_train(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCSUsrMsg_Train)
  return target;
}

size_t CCSUsrMsg_Train::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCSUsrMsg_Train)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int32 train = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_train());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CCSUsrMsg_Train::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CCSUsrMsg_Train::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CCSUsrMsg_Train::GetClassData() const { return &_class_data_; }


void CCSUsrMsg_Train::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CCSUsrMsg_Train*>(&to_msg);
  auto& from = static_cast<const CCSUsrMsg_Train&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CCSUsrMsg_Train)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_train()) {
    _this->_internal_set_train(from._internal_train());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CCSUsrMsg_Train::CopyFrom(const CCSUsrMsg_Train& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCSUsrMsg_Train)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCSUsrMsg_Train::IsInitialized() const {
  return true;
}

void CCSUsrMsg_Train::InternalSwap(CCSUsrMsg_Train* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.train_, other->_impl_.train_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CCSUsrMsg_Train::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cstrike15_5fusermessages_2eproto_getter, &descriptor_table_cstrike15_5fusermessages_2eproto_once,
      file_level_metadata_cstrike15_5fusermessages_2eproto[3]);
}

// ===================================================================

class CCSUsrMsg_HudText::_Internal {
 public:
  using HasBits = decltype(std::declval<CCSUsrMsg_HudText>()._impl_._has_bits_);
  static void set_has_text(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CCSUsrMsg_HudText::CCSUsrMsg_HudText(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CCSUsrMsg_HudText)
}
CCSUsrMsg_HudText::CCSUsrMsg_HudText(const CCSUsrMsg_HudText& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CCSUsrMsg_HudText* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.text_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.text_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.text_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_text()) {
    _this->_impl_.text_.Set(from._internal_text(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:CCSUsrMsg_HudText)
}

inline void CCSUsrMsg_HudText::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.text_){}
  };
  _impl_.text_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.text_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CCSUsrMsg_HudText::~CCSUsrMsg_HudText() {
  // @@protoc_insertion_point(destructor:CCSUsrMsg_HudText)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CCSUsrMsg_HudText::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.text_.Destroy();
}

void CCSUsrMsg_HudText::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CCSUsrMsg_HudText::Clear() {
// @@protoc_insertion_point(message_clear_start:CCSUsrMsg_HudText)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.text_.ClearNonDefaultToEmpty();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CCSUsrMsg_HudText::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string text = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_text();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CCSUsrMsg_HudText.text");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CCSUsrMsg_HudText::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCSUsrMsg_HudText)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string text = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_text().data(), static_cast<int>(this->_internal_text().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CCSUsrMsg_HudText.text");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_text(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCSUsrMsg_HudText)
  return target;
}

size_t CCSUsrMsg_HudText::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCSUsrMsg_HudText)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string text = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_text());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CCSUsrMsg_HudText::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CCSUsrMsg_HudText::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CCSUsrMsg_HudText::GetClassData() const { return &_class_data_; }


void CCSUsrMsg_HudText::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CCSUsrMsg_HudText*>(&to_msg);
  auto& from = static_cast<const CCSUsrMsg_HudText&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CCSUsrMsg_HudText)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_text()) {
    _this->_internal_set_text(from._internal_text());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CCSUsrMsg_HudText::CopyFrom(const CCSUsrMsg_HudText& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCSUsrMsg_HudText)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCSUsrMsg_HudText::IsInitialized() const {
  return true;
}

void CCSUsrMsg_HudText::InternalSwap(CCSUsrMsg_HudText* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.text_, lhs_arena,
      &other->_impl_.text_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata CCSUsrMsg_HudText::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cstrike15_5fusermessages_2eproto_getter, &descriptor_table_cstrike15_5fusermessages_2eproto_once,
      file_level_metadata_cstrike15_5fusermessages_2eproto[4]);
}

// ===================================================================

class CCSUsrMsg_HudMsg::_Internal {
 public:
  using HasBits = decltype(std::declval<CCSUsrMsg_HudMsg>()._impl_._has_bits_);
  static void set_has_channel(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::CMsgVector2D& pos(const CCSUsrMsg_HudMsg* msg);
  static void set_has_pos(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::CMsgRGBA& clr1(const CCSUsrMsg_HudMsg* msg);
  static void set_has_clr1(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::CMsgRGBA& clr2(const CCSUsrMsg_HudMsg* msg);
  static void set_has_clr2(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_effect(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_fade_in_time(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_fade_out_time(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_hold_time(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_fx_time(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_text(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::CMsgVector2D&
CCSUsrMsg_HudMsg::_Internal::pos(const CCSUsrMsg_HudMsg* msg) {
  return *msg->_impl_.pos_;
}
const ::CMsgRGBA&
CCSUsrMsg_HudMsg::_Internal::clr1(const CCSUsrMsg_HudMsg* msg) {
  return *msg->_impl_.clr1_;
}
const ::CMsgRGBA&
CCSUsrMsg_HudMsg::_Internal::clr2(const CCSUsrMsg_HudMsg* msg) {
  return *msg->_impl_.clr2_;
}
void CCSUsrMsg_HudMsg::clear_pos() {
  if (_impl_.pos_ != nullptr) _impl_.pos_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void CCSUsrMsg_HudMsg::clear_clr1() {
  if (_impl_.clr1_ != nullptr) _impl_.clr1_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
void CCSUsrMsg_HudMsg::clear_clr2() {
  if (_impl_.clr2_ != nullptr) _impl_.clr2_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
CCSUsrMsg_HudMsg::CCSUsrMsg_HudMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CCSUsrMsg_HudMsg)
}
CCSUsrMsg_HudMsg::CCSUsrMsg_HudMsg(const CCSUsrMsg_HudMsg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CCSUsrMsg_HudMsg* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.text_){}
    , decltype(_impl_.pos_){nullptr}
    , decltype(_impl_.clr1_){nullptr}
    , decltype(_impl_.clr2_){nullptr}
    , decltype(_impl_.channel_){}
    , decltype(_impl_.effect_){}
    , decltype(_impl_.fade_in_time_){}
    , decltype(_impl_.fade_out_time_){}
    , decltype(_impl_.hold_time_){}
    , decltype(_impl_.fx_time_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.text_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.text_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_text()) {
    _this->_impl_.text_.Set(from._internal_text(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_pos()) {
    _this->_impl_.pos_ = new ::CMsgVector2D(*from._impl_.pos_);
  }
  if (from._internal_has_clr1()) {
    _this->_impl_.clr1_ = new ::CMsgRGBA(*from._impl_.clr1_);
  }
  if (from._internal_has_clr2()) {
    _this->_impl_.clr2_ = new ::CMsgRGBA(*from._impl_.clr2_);
  }
  ::memcpy(&_impl_.channel_, &from._impl_.channel_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.fx_time_) -
    reinterpret_cast<char*>(&_impl_.channel_)) + sizeof(_impl_.fx_time_));
  // @@protoc_insertion_point(copy_constructor:CCSUsrMsg_HudMsg)
}

inline void CCSUsrMsg_HudMsg::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.text_){}
    , decltype(_impl_.pos_){nullptr}
    , decltype(_impl_.clr1_){nullptr}
    , decltype(_impl_.clr2_){nullptr}
    , decltype(_impl_.channel_){0}
    , decltype(_impl_.effect_){0}
    , decltype(_impl_.fade_in_time_){0}
    , decltype(_impl_.fade_out_time_){0}
    , decltype(_impl_.hold_time_){0}
    , decltype(_impl_.fx_time_){0}
  };
  _impl_.text_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.text_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CCSUsrMsg_HudMsg::~CCSUsrMsg_HudMsg() {
  // @@protoc_insertion_point(destructor:CCSUsrMsg_HudMsg)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CCSUsrMsg_HudMsg::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.text_.Destroy();
  if (this != internal_default_instance()) delete _impl_.pos_;
  if (this != internal_default_instance()) delete _impl_.clr1_;
  if (this != internal_default_instance()) delete _impl_.clr2_;
}

void CCSUsrMsg_HudMsg::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CCSUsrMsg_HudMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:CCSUsrMsg_HudMsg)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.text_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.pos_ != nullptr);
      _impl_.pos_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.clr1_ != nullptr);
      _impl_.clr1_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.clr2_ != nullptr);
      _impl_.clr2_->Clear();
    }
  }
  if (cached_has_bits & 0x000000f0u) {
    ::memset(&_impl_.channel_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.fade_out_time_) -
        reinterpret_cast<char*>(&_impl_.channel_)) + sizeof(_impl_.fade_out_time_));
  }
  if (cached_has_bits & 0x00000300u) {
    ::memset(&_impl_.hold_time_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.fx_time_) -
        reinterpret_cast<char*>(&_impl_.hold_time_)) + sizeof(_impl_.fx_time_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CCSUsrMsg_HudMsg::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 channel = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_channel(&has_bits);
          _impl_.channel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .CMsgVector2D pos = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_pos(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .CMsgRGBA clr1 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_clr1(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .CMsgRGBA clr2 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_clr2(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 effect = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_effect(&has_bits);
          _impl_.effect_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float fade_in_time = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 53)) {
          _Internal::set_has_fade_in_time(&has_bits);
          _impl_.fade_in_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float fade_out_time = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 61)) {
          _Internal::set_has_fade_out_time(&has_bits);
          _impl_.fade_out_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float hold_time = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 77)) {
          _Internal::set_has_hold_time(&has_bits);
          _impl_.hold_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float fx_time = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 85)) {
          _Internal::set_has_fx_time(&has_bits);
          _impl_.fx_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional string text = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          auto str = _internal_mutable_text();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CCSUsrMsg_HudMsg.text");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CCSUsrMsg_HudMsg::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCSUsrMsg_HudMsg)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 channel = 1;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_channel(), target);
  }

  // optional .CMsgVector2D pos = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::pos(this),
        _Internal::pos(this).GetCachedSize(), target, stream);
  }

  // optional .CMsgRGBA clr1 = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::clr1(this),
        _Internal::clr1(this).GetCachedSize(), target, stream);
  }

  // optional .CMsgRGBA clr2 = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::clr2(this),
        _Internal::clr2(this).GetCachedSize(), target, stream);
  }

  // optional int32 effect = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_effect(), target);
  }

  // optional float fade_in_time = 6;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(6, this->_internal_fade_in_time(), target);
  }

  // optional float fade_out_time = 7;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(7, this->_internal_fade_out_time(), target);
  }

  // optional float hold_time = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(9, this->_internal_hold_time(), target);
  }

  // optional float fx_time = 10;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(10, this->_internal_fx_time(), target);
  }

  // optional string text = 11;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_text().data(), static_cast<int>(this->_internal_text().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CCSUsrMsg_HudMsg.text");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_text(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCSUsrMsg_HudMsg)
  return target;
}

size_t CCSUsrMsg_HudMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCSUsrMsg_HudMsg)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string text = 11;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_text());
    }

    // optional .CMsgVector2D pos = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.pos_);
    }

    // optional .CMsgRGBA clr1 = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.clr1_);
    }

    // optional .CMsgRGBA clr2 = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.clr2_);
    }

    // optional int32 channel = 1;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_channel());
    }

    // optional int32 effect = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_effect());
    }

    // optional float fade_in_time = 6;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 4;
    }

    // optional float fade_out_time = 7;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 4;
    }

  }
  if (cached_has_bits & 0x00000300u) {
    // optional float hold_time = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 4;
    }

    // optional float fx_time = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 4;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CCSUsrMsg_HudMsg::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CCSUsrMsg_HudMsg::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CCSUsrMsg_HudMsg::GetClassData() const { return &_class_data_; }


void CCSUsrMsg_HudMsg::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CCSUsrMsg_HudMsg*>(&to_msg);
  auto& from = static_cast<const CCSUsrMsg_HudMsg&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CCSUsrMsg_HudMsg)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_text(from._internal_text());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_pos()->::CMsgVector2D::MergeFrom(
          from._internal_pos());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_clr1()->::CMsgRGBA::MergeFrom(
          from._internal_clr1());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_clr2()->::CMsgRGBA::MergeFrom(
          from._internal_clr2());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.channel_ = from._impl_.channel_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.effect_ = from._impl_.effect_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.fade_in_time_ = from._impl_.fade_in_time_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.fade_out_time_ = from._impl_.fade_out_time_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.hold_time_ = from._impl_.hold_time_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.fx_time_ = from._impl_.fx_time_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CCSUsrMsg_HudMsg::CopyFrom(const CCSUsrMsg_HudMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCSUsrMsg_HudMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCSUsrMsg_HudMsg::IsInitialized() const {
  return true;
}

void CCSUsrMsg_HudMsg::InternalSwap(CCSUsrMsg_HudMsg* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.text_, lhs_arena,
      &other->_impl_.text_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CCSUsrMsg_HudMsg, _impl_.fx_time_)
      + sizeof(CCSUsrMsg_HudMsg::_impl_.fx_time_)
      - PROTOBUF_FIELD_OFFSET(CCSUsrMsg_HudMsg, _impl_.pos_)>(
          reinterpret_cast<char*>(&_impl_.pos_),
          reinterpret_cast<char*>(&other->_impl_.pos_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CCSUsrMsg_HudMsg::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cstrike15_5fusermessages_2eproto_getter, &descriptor_table_cstrike15_5fusermessages_2eproto_once,
      file_level_metadata_cstrike15_5fusermessages_2eproto[5]);
}

// ===================================================================

class CCSUsrMsg_Shake::_Internal {
 public:
  using HasBits = decltype(std::declval<CCSUsrMsg_Shake>()._impl_._has_bits_);
  static void set_has_command(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_local_amplitude(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_frequency(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_duration(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

CCSUsrMsg_Shake::CCSUsrMsg_Shake(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CCSUsrMsg_Shake)
}
CCSUsrMsg_Shake::CCSUsrMsg_Shake(const CCSUsrMsg_Shake& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CCSUsrMsg_Shake* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.command_){}
    , decltype(_impl_.local_amplitude_){}
    , decltype(_impl_.frequency_){}
    , decltype(_impl_.duration_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.command_, &from._impl_.command_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.duration_) -
    reinterpret_cast<char*>(&_impl_.command_)) + sizeof(_impl_.duration_));
  // @@protoc_insertion_point(copy_constructor:CCSUsrMsg_Shake)
}

inline void CCSUsrMsg_Shake::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.command_){0}
    , decltype(_impl_.local_amplitude_){0}
    , decltype(_impl_.frequency_){0}
    , decltype(_impl_.duration_){0}
  };
}

CCSUsrMsg_Shake::~CCSUsrMsg_Shake() {
  // @@protoc_insertion_point(destructor:CCSUsrMsg_Shake)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CCSUsrMsg_Shake::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CCSUsrMsg_Shake::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CCSUsrMsg_Shake::Clear() {
// @@protoc_insertion_point(message_clear_start:CCSUsrMsg_Shake)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&_impl_.command_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.duration_) -
        reinterpret_cast<char*>(&_impl_.command_)) + sizeof(_impl_.duration_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CCSUsrMsg_Shake::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 command = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_command(&has_bits);
          _impl_.command_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float local_amplitude = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _Internal::set_has_local_amplitude(&has_bits);
          _impl_.local_amplitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float frequency = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _Internal::set_has_frequency(&has_bits);
          _impl_.frequency_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float duration = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          _Internal::set_has_duration(&has_bits);
          _impl_.duration_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CCSUsrMsg_Shake::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCSUsrMsg_Shake)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 command = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_command(), target);
  }

  // optional float local_amplitude = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_local_amplitude(), target);
  }

  // optional float frequency = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_frequency(), target);
  }

  // optional float duration = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(4, this->_internal_duration(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCSUsrMsg_Shake)
  return target;
}

size_t CCSUsrMsg_Shake::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCSUsrMsg_Shake)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional int32 command = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_command());
    }

    // optional float local_amplitude = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional float frequency = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

    // optional float duration = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CCSUsrMsg_Shake::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CCSUsrMsg_Shake::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CCSUsrMsg_Shake::GetClassData() const { return &_class_data_; }


void CCSUsrMsg_Shake::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CCSUsrMsg_Shake*>(&to_msg);
  auto& from = static_cast<const CCSUsrMsg_Shake&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CCSUsrMsg_Shake)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.command_ = from._impl_.command_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.local_amplitude_ = from._impl_.local_amplitude_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.frequency_ = from._impl_.frequency_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.duration_ = from._impl_.duration_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CCSUsrMsg_Shake::CopyFrom(const CCSUsrMsg_Shake& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCSUsrMsg_Shake)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCSUsrMsg_Shake::IsInitialized() const {
  return true;
}

void CCSUsrMsg_Shake::InternalSwap(CCSUsrMsg_Shake* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CCSUsrMsg_Shake, _impl_.duration_)
      + sizeof(CCSUsrMsg_Shake::_impl_.duration_)
      - PROTOBUF_FIELD_OFFSET(CCSUsrMsg_Shake, _impl_.command_)>(
          reinterpret_cast<char*>(&_impl_.command_),
          reinterpret_cast<char*>(&other->_impl_.command_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CCSUsrMsg_Shake::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cstrike15_5fusermessages_2eproto_getter, &descriptor_table_cstrike15_5fusermessages_2eproto_once,
      file_level_metadata_cstrike15_5fusermessages_2eproto[6]);
}

// ===================================================================

class CCSUsrMsg_Fade::_Internal {
 public:
  using HasBits = decltype(std::declval<CCSUsrMsg_Fade>()._impl_._has_bits_);
  static void set_has_duration(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_hold_time(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_flags(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::CMsgRGBA& clr(const CCSUsrMsg_Fade* msg);
  static void set_has_clr(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::CMsgRGBA&
CCSUsrMsg_Fade::_Internal::clr(const CCSUsrMsg_Fade* msg) {
  return *msg->_impl_.clr_;
}
void CCSUsrMsg_Fade::clear_clr() {
  if (_impl_.clr_ != nullptr) _impl_.clr_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
CCSUsrMsg_Fade::CCSUsrMsg_Fade(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CCSUsrMsg_Fade)
}
CCSUsrMsg_Fade::CCSUsrMsg_Fade(const CCSUsrMsg_Fade& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CCSUsrMsg_Fade* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.clr_){nullptr}
    , decltype(_impl_.duration_){}
    , decltype(_impl_.hold_time_){}
    , decltype(_impl_.flags_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_clr()) {
    _this->_impl_.clr_ = new ::CMsgRGBA(*from._impl_.clr_);
  }
  ::memcpy(&_impl_.duration_, &from._impl_.duration_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.flags_) -
    reinterpret_cast<char*>(&_impl_.duration_)) + sizeof(_impl_.flags_));
  // @@protoc_insertion_point(copy_constructor:CCSUsrMsg_Fade)
}

inline void CCSUsrMsg_Fade::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.clr_){nullptr}
    , decltype(_impl_.duration_){0}
    , decltype(_impl_.hold_time_){0}
    , decltype(_impl_.flags_){0}
  };
}

CCSUsrMsg_Fade::~CCSUsrMsg_Fade() {
  // @@protoc_insertion_point(destructor:CCSUsrMsg_Fade)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CCSUsrMsg_Fade::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.clr_;
}

void CCSUsrMsg_Fade::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CCSUsrMsg_Fade::Clear() {
// @@protoc_insertion_point(message_clear_start:CCSUsrMsg_Fade)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.clr_ != nullptr);
    _impl_.clr_->Clear();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&_impl_.duration_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.flags_) -
        reinterpret_cast<char*>(&_impl_.duration_)) + sizeof(_impl_.flags_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CCSUsrMsg_Fade::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 duration = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_duration(&has_bits);
          _impl_.duration_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 hold_time = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_hold_time(&has_bits);
          _impl_.hold_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 flags = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_flags(&has_bits);
          _impl_.flags_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .CMsgRGBA clr = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_clr(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CCSUsrMsg_Fade::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCSUsrMsg_Fade)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 duration = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_duration(), target);
  }

  // optional int32 hold_time = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_hold_time(), target);
  }

  // optional int32 flags = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_flags(), target);
  }

  // optional .CMsgRGBA clr = 4;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::clr(this),
        _Internal::clr(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCSUsrMsg_Fade)
  return target;
}

size_t CCSUsrMsg_Fade::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCSUsrMsg_Fade)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .CMsgRGBA clr = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.clr_);
    }

    // optional int32 duration = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_duration());
    }

    // optional int32 hold_time = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_hold_time());
    }

    // optional int32 flags = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_flags());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CCSUsrMsg_Fade::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CCSUsrMsg_Fade::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CCSUsrMsg_Fade::GetClassData() const { return &_class_data_; }


void CCSUsrMsg_Fade::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CCSUsrMsg_Fade*>(&to_msg);
  auto& from = static_cast<const CCSUsrMsg_Fade&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CCSUsrMsg_Fade)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_clr()->::CMsgRGBA::MergeFrom(
          from._internal_clr());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.duration_ = from._impl_.duration_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.hold_time_ = from._impl_.hold_time_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.flags_ = from._impl_.flags_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CCSUsrMsg_Fade::CopyFrom(const CCSUsrMsg_Fade& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCSUsrMsg_Fade)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCSUsrMsg_Fade::IsInitialized() const {
  return true;
}

void CCSUsrMsg_Fade::InternalSwap(CCSUsrMsg_Fade* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CCSUsrMsg_Fade, _impl_.flags_)
      + sizeof(CCSUsrMsg_Fade::_impl_.flags_)
      - PROTOBUF_FIELD_OFFSET(CCSUsrMsg_Fade, _impl_.clr_)>(
          reinterpret_cast<char*>(&_impl_.clr_),
          reinterpret_cast<char*>(&other->_impl_.clr_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CCSUsrMsg_Fade::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cstrike15_5fusermessages_2eproto_getter, &descriptor_table_cstrike15_5fusermessages_2eproto_once,
      file_level_metadata_cstrike15_5fusermessages_2eproto[7]);
}

// ===================================================================

class CCSUsrMsg_Rumble::_Internal {
 public:
  using HasBits = decltype(std::declval<CCSUsrMsg_Rumble>()._impl_._has_bits_);
  static void set_has_index(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_data(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_flags(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CCSUsrMsg_Rumble::CCSUsrMsg_Rumble(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CCSUsrMsg_Rumble)
}
CCSUsrMsg_Rumble::CCSUsrMsg_Rumble(const CCSUsrMsg_Rumble& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CCSUsrMsg_Rumble* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.index_){}
    , decltype(_impl_.data_){}
    , decltype(_impl_.flags_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.index_, &from._impl_.index_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.flags_) -
    reinterpret_cast<char*>(&_impl_.index_)) + sizeof(_impl_.flags_));
  // @@protoc_insertion_point(copy_constructor:CCSUsrMsg_Rumble)
}

inline void CCSUsrMsg_Rumble::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.index_){0}
    , decltype(_impl_.data_){0}
    , decltype(_impl_.flags_){0}
  };
}

CCSUsrMsg_Rumble::~CCSUsrMsg_Rumble() {
  // @@protoc_insertion_point(destructor:CCSUsrMsg_Rumble)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CCSUsrMsg_Rumble::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CCSUsrMsg_Rumble::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CCSUsrMsg_Rumble::Clear() {
// @@protoc_insertion_point(message_clear_start:CCSUsrMsg_Rumble)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.index_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.flags_) -
        reinterpret_cast<char*>(&_impl_.index_)) + sizeof(_impl_.flags_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CCSUsrMsg_Rumble::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_index(&has_bits);
          _impl_.index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_data(&has_bits);
          _impl_.data_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 flags = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_flags(&has_bits);
          _impl_.flags_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CCSUsrMsg_Rumble::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCSUsrMsg_Rumble)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 index = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_index(), target);
  }

  // optional int32 data = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_data(), target);
  }

  // optional int32 flags = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_flags(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCSUsrMsg_Rumble)
  return target;
}

size_t CCSUsrMsg_Rumble::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCSUsrMsg_Rumble)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional int32 index = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_index());
    }

    // optional int32 data = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_data());
    }

    // optional int32 flags = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_flags());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CCSUsrMsg_Rumble::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CCSUsrMsg_Rumble::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CCSUsrMsg_Rumble::GetClassData() const { return &_class_data_; }


void CCSUsrMsg_Rumble::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CCSUsrMsg_Rumble*>(&to_msg);
  auto& from = static_cast<const CCSUsrMsg_Rumble&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CCSUsrMsg_Rumble)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.index_ = from._impl_.index_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.data_ = from._impl_.data_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.flags_ = from._impl_.flags_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CCSUsrMsg_Rumble::CopyFrom(const CCSUsrMsg_Rumble& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCSUsrMsg_Rumble)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCSUsrMsg_Rumble::IsInitialized() const {
  return true;
}

void CCSUsrMsg_Rumble::InternalSwap(CCSUsrMsg_Rumble* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CCSUsrMsg_Rumble, _impl_.flags_)
      + sizeof(CCSUsrMsg_Rumble::_impl_.flags_)
      - PROTOBUF_FIELD_OFFSET(CCSUsrMsg_Rumble, _impl_.index_)>(
          reinterpret_cast<char*>(&_impl_.index_),
          reinterpret_cast<char*>(&other->_impl_.index_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CCSUsrMsg_Rumble::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cstrike15_5fusermessages_2eproto_getter, &descriptor_table_cstrike15_5fusermessages_2eproto_once,
      file_level_metadata_cstrike15_5fusermessages_2eproto[8]);
}

// ===================================================================

class CCSUsrMsg_CloseCaption::_Internal {
 public:
  using HasBits = decltype(std::declval<CCSUsrMsg_CloseCaption>()._impl_._has_bits_);
  static void set_has_hash(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_duration(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_from_player(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_cctoken(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CCSUsrMsg_CloseCaption::CCSUsrMsg_CloseCaption(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CCSUsrMsg_CloseCaption)
}
CCSUsrMsg_CloseCaption::CCSUsrMsg_CloseCaption(const CCSUsrMsg_CloseCaption& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CCSUsrMsg_CloseCaption* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.cctoken_){}
    , decltype(_impl_.hash_){}
    , decltype(_impl_.duration_){}
    , decltype(_impl_.from_player_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.cctoken_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.cctoken_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_cctoken()) {
    _this->_impl_.cctoken_.Set(from._internal_cctoken(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.hash_, &from._impl_.hash_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.from_player_) -
    reinterpret_cast<char*>(&_impl_.hash_)) + sizeof(_impl_.from_player_));
  // @@protoc_insertion_point(copy_constructor:CCSUsrMsg_CloseCaption)
}

inline void CCSUsrMsg_CloseCaption::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.cctoken_){}
    , decltype(_impl_.hash_){0u}
    , decltype(_impl_.duration_){0}
    , decltype(_impl_.from_player_){false}
  };
  _impl_.cctoken_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.cctoken_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CCSUsrMsg_CloseCaption::~CCSUsrMsg_CloseCaption() {
  // @@protoc_insertion_point(destructor:CCSUsrMsg_CloseCaption)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CCSUsrMsg_CloseCaption::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.cctoken_.Destroy();
}

void CCSUsrMsg_CloseCaption::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CCSUsrMsg_CloseCaption::Clear() {
// @@protoc_insertion_point(message_clear_start:CCSUsrMsg_CloseCaption)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.cctoken_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&_impl_.hash_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.from_player_) -
        reinterpret_cast<char*>(&_impl_.hash_)) + sizeof(_impl_.from_player_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CCSUsrMsg_CloseCaption::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 hash = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_hash(&has_bits);
          _impl_.hash_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 duration = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_duration(&has_bits);
          _impl_.duration_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool from_player = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_from_player(&has_bits);
          _impl_.from_player_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string cctoken = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_cctoken();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CCSUsrMsg_CloseCaption.cctoken");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CCSUsrMsg_CloseCaption::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCSUsrMsg_CloseCaption)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 hash = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_hash(), target);
  }

  // optional int32 duration = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_duration(), target);
  }

  // optional bool from_player = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_from_player(), target);
  }

  // optional string cctoken = 4;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_cctoken().data(), static_cast<int>(this->_internal_cctoken().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CCSUsrMsg_CloseCaption.cctoken");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_cctoken(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCSUsrMsg_CloseCaption)
  return target;
}

size_t CCSUsrMsg_CloseCaption::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCSUsrMsg_CloseCaption)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string cctoken = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_cctoken());
    }

    // optional uint32 hash = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_hash());
    }

    // optional int32 duration = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_duration());
    }

    // optional bool from_player = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CCSUsrMsg_CloseCaption::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CCSUsrMsg_CloseCaption::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CCSUsrMsg_CloseCaption::GetClassData() const { return &_class_data_; }


void CCSUsrMsg_CloseCaption::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CCSUsrMsg_CloseCaption*>(&to_msg);
  auto& from = static_cast<const CCSUsrMsg_CloseCaption&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CCSUsrMsg_CloseCaption)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_cctoken(from._internal_cctoken());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.hash_ = from._impl_.hash_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.duration_ = from._impl_.duration_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.from_player_ = from._impl_.from_player_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CCSUsrMsg_CloseCaption::CopyFrom(const CCSUsrMsg_CloseCaption& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCSUsrMsg_CloseCaption)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCSUsrMsg_CloseCaption::IsInitialized() const {
  return true;
}

void CCSUsrMsg_CloseCaption::InternalSwap(CCSUsrMsg_CloseCaption* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.cctoken_, lhs_arena,
      &other->_impl_.cctoken_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CCSUsrMsg_CloseCaption, _impl_.from_player_)
      + sizeof(CCSUsrMsg_CloseCaption::_impl_.from_player_)
      - PROTOBUF_FIELD_OFFSET(CCSUsrMsg_CloseCaption, _impl_.hash_)>(
          reinterpret_cast<char*>(&_impl_.hash_),
          reinterpret_cast<char*>(&other->_impl_.hash_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CCSUsrMsg_CloseCaption::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cstrike15_5fusermessages_2eproto_getter, &descriptor_table_cstrike15_5fusermessages_2eproto_once,
      file_level_metadata_cstrike15_5fusermessages_2eproto[9]);
}

// ===================================================================

class CCSUsrMsg_CloseCaptionDirect::_Internal {
 public:
  using HasBits = decltype(std::declval<CCSUsrMsg_CloseCaptionDirect>()._impl_._has_bits_);
  static void set_has_hash(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_duration(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_from_player(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CCSUsrMsg_CloseCaptionDirect::CCSUsrMsg_CloseCaptionDirect(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CCSUsrMsg_CloseCaptionDirect)
}
CCSUsrMsg_CloseCaptionDirect::CCSUsrMsg_CloseCaptionDirect(const CCSUsrMsg_CloseCaptionDirect& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CCSUsrMsg_CloseCaptionDirect* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.hash_){}
    , decltype(_impl_.duration_){}
    , decltype(_impl_.from_player_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.hash_, &from._impl_.hash_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.from_player_) -
    reinterpret_cast<char*>(&_impl_.hash_)) + sizeof(_impl_.from_player_));
  // @@protoc_insertion_point(copy_constructor:CCSUsrMsg_CloseCaptionDirect)
}

inline void CCSUsrMsg_CloseCaptionDirect::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.hash_){0u}
    , decltype(_impl_.duration_){0}
    , decltype(_impl_.from_player_){false}
  };
}

CCSUsrMsg_CloseCaptionDirect::~CCSUsrMsg_CloseCaptionDirect() {
  // @@protoc_insertion_point(destructor:CCSUsrMsg_CloseCaptionDirect)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CCSUsrMsg_CloseCaptionDirect::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CCSUsrMsg_CloseCaptionDirect::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CCSUsrMsg_CloseCaptionDirect::Clear() {
// @@protoc_insertion_point(message_clear_start:CCSUsrMsg_CloseCaptionDirect)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.hash_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.from_player_) -
        reinterpret_cast<char*>(&_impl_.hash_)) + sizeof(_impl_.from_player_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CCSUsrMsg_CloseCaptionDirect::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 hash = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_hash(&has_bits);
          _impl_.hash_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 duration = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_duration(&has_bits);
          _impl_.duration_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool from_player = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_from_player(&has_bits);
          _impl_.from_player_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CCSUsrMsg_CloseCaptionDirect::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCSUsrMsg_CloseCaptionDirect)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 hash = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_hash(), target);
  }

  // optional int32 duration = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_duration(), target);
  }

  // optional bool from_player = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_from_player(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCSUsrMsg_CloseCaptionDirect)
  return target;
}

size_t CCSUsrMsg_CloseCaptionDirect::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCSUsrMsg_CloseCaptionDirect)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint32 hash = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_hash());
    }

    // optional int32 duration = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_duration());
    }

    // optional bool from_player = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CCSUsrMsg_CloseCaptionDirect::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CCSUsrMsg_CloseCaptionDirect::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CCSUsrMsg_CloseCaptionDirect::GetClassData() const { return &_class_data_; }


void CCSUsrMsg_CloseCaptionDirect::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CCSUsrMsg_CloseCaptionDirect*>(&to_msg);
  auto& from = static_cast<const CCSUsrMsg_CloseCaptionDirect&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CCSUsrMsg_CloseCaptionDirect)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.hash_ = from._impl_.hash_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.duration_ = from._impl_.duration_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.from_player_ = from._impl_.from_player_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CCSUsrMsg_CloseCaptionDirect::CopyFrom(const CCSUsrMsg_CloseCaptionDirect& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCSUsrMsg_CloseCaptionDirect)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCSUsrMsg_CloseCaptionDirect::IsInitialized() const {
  return true;
}

void CCSUsrMsg_CloseCaptionDirect::InternalSwap(CCSUsrMsg_CloseCaptionDirect* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CCSUsrMsg_CloseCaptionDirect, _impl_.from_player_)
      + sizeof(CCSUsrMsg_CloseCaptionDirect::_impl_.from_player_)
      - PROTOBUF_FIELD_OFFSET(CCSUsrMsg_CloseCaptionDirect, _impl_.hash_)>(
          reinterpret_cast<char*>(&_impl_.hash_),
          reinterpret_cast<char*>(&other->_impl_.hash_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CCSUsrMsg_CloseCaptionDirect::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cstrike15_5fusermessages_2eproto_getter, &descriptor_table_cstrike15_5fusermessages_2eproto_once,
      file_level_metadata_cstrike15_5fusermessages_2eproto[10]);
}

// ===================================================================

class CCSUsrMsg_SendAudio::_Internal {
 public:
  using HasBits = decltype(std::declval<CCSUsrMsg_SendAudio>()._impl_._has_bits_);
  static void set_has_radio_sound(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CCSUsrMsg_SendAudio::CCSUsrMsg_SendAudio(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CCSUsrMsg_SendAudio)
}
CCSUsrMsg_SendAudio::CCSUsrMsg_SendAudio(const CCSUsrMsg_SendAudio& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CCSUsrMsg_SendAudio* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.radio_sound_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.radio_sound_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.radio_sound_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_radio_sound()) {
    _this->_impl_.radio_sound_.Set(from._internal_radio_sound(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:CCSUsrMsg_SendAudio)
}

inline void CCSUsrMsg_SendAudio::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.radio_sound_){}
  };
  _impl_.radio_sound_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.radio_sound_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CCSUsrMsg_SendAudio::~CCSUsrMsg_SendAudio() {
  // @@protoc_insertion_point(destructor:CCSUsrMsg_SendAudio)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CCSUsrMsg_SendAudio::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.radio_sound_.Destroy();
}

void CCSUsrMsg_SendAudio::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CCSUsrMsg_SendAudio::Clear() {
// @@protoc_insertion_point(message_clear_start:CCSUsrMsg_SendAudio)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.radio_sound_.ClearNonDefaultToEmpty();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CCSUsrMsg_SendAudio::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string radio_sound = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_radio_sound();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CCSUsrMsg_SendAudio.radio_sound");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CCSUsrMsg_SendAudio::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCSUsrMsg_SendAudio)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string radio_sound = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_radio_sound().data(), static_cast<int>(this->_internal_radio_sound().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CCSUsrMsg_SendAudio.radio_sound");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_radio_sound(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCSUsrMsg_SendAudio)
  return target;
}

size_t CCSUsrMsg_SendAudio::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCSUsrMsg_SendAudio)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string radio_sound = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_radio_sound());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CCSUsrMsg_SendAudio::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CCSUsrMsg_SendAudio::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CCSUsrMsg_SendAudio::GetClassData() const { return &_class_data_; }


void CCSUsrMsg_SendAudio::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CCSUsrMsg_SendAudio*>(&to_msg);
  auto& from = static_cast<const CCSUsrMsg_SendAudio&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CCSUsrMsg_SendAudio)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_radio_sound()) {
    _this->_internal_set_radio_sound(from._internal_radio_sound());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CCSUsrMsg_SendAudio::CopyFrom(const CCSUsrMsg_SendAudio& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCSUsrMsg_SendAudio)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCSUsrMsg_SendAudio::IsInitialized() const {
  return true;
}

void CCSUsrMsg_SendAudio::InternalSwap(CCSUsrMsg_SendAudio* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.radio_sound_, lhs_arena,
      &other->_impl_.radio_sound_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata CCSUsrMsg_SendAudio::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cstrike15_5fusermessages_2eproto_getter, &descriptor_table_cstrike15_5fusermessages_2eproto_once,
      file_level_metadata_cstrike15_5fusermessages_2eproto[11]);
}

// ===================================================================

class CCSUsrMsg_RawAudio::_Internal {
 public:
  using HasBits = decltype(std::declval<CCSUsrMsg_RawAudio>()._impl_._has_bits_);
  static void set_has_pitch(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_entidx(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_duration(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_voice_filename(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CCSUsrMsg_RawAudio::CCSUsrMsg_RawAudio(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CCSUsrMsg_RawAudio)
}
CCSUsrMsg_RawAudio::CCSUsrMsg_RawAudio(const CCSUsrMsg_RawAudio& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CCSUsrMsg_RawAudio* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.voice_filename_){}
    , decltype(_impl_.pitch_){}
    , decltype(_impl_.duration_){}
    , decltype(_impl_.entidx_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.voice_filename_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.voice_filename_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_voice_filename()) {
    _this->_impl_.voice_filename_.Set(from._internal_voice_filename(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.pitch_, &from._impl_.pitch_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.entidx_) -
    reinterpret_cast<char*>(&_impl_.pitch_)) + sizeof(_impl_.entidx_));
  // @@protoc_insertion_point(copy_constructor:CCSUsrMsg_RawAudio)
}

inline void CCSUsrMsg_RawAudio::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.voice_filename_){}
    , decltype(_impl_.pitch_){0}
    , decltype(_impl_.duration_){0}
    , decltype(_impl_.entidx_){-1}
  };
  _impl_.voice_filename_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.voice_filename_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CCSUsrMsg_RawAudio::~CCSUsrMsg_RawAudio() {
  // @@protoc_insertion_point(destructor:CCSUsrMsg_RawAudio)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CCSUsrMsg_RawAudio::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.voice_filename_.Destroy();
}

void CCSUsrMsg_RawAudio::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CCSUsrMsg_RawAudio::Clear() {
// @@protoc_insertion_point(message_clear_start:CCSUsrMsg_RawAudio)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.voice_filename_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&_impl_.pitch_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.duration_) -
        reinterpret_cast<char*>(&_impl_.pitch_)) + sizeof(_impl_.duration_));
    _impl_.entidx_ = -1;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CCSUsrMsg_RawAudio::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 pitch = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_pitch(&has_bits);
          _impl_.pitch_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 entidx = 2 [default = -1];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_entidx(&has_bits);
          _impl_.entidx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float duration = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _Internal::set_has_duration(&has_bits);
          _impl_.duration_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional string voice_filename = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_voice_filename();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CCSUsrMsg_RawAudio.voice_filename");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CCSUsrMsg_RawAudio::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCSUsrMsg_RawAudio)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 pitch = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_pitch(), target);
  }

  // optional int32 entidx = 2 [default = -1];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_entidx(), target);
  }

  // optional float duration = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_duration(), target);
  }

  // optional string voice_filename = 4;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_voice_filename().data(), static_cast<int>(this->_internal_voice_filename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CCSUsrMsg_RawAudio.voice_filename");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_voice_filename(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCSUsrMsg_RawAudio)
  return target;
}

size_t CCSUsrMsg_RawAudio::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCSUsrMsg_RawAudio)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string voice_filename = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_voice_filename());
    }

    // optional int32 pitch = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_pitch());
    }

    // optional float duration = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

    // optional int32 entidx = 2 [default = -1];
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_entidx());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CCSUsrMsg_RawAudio::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CCSUsrMsg_RawAudio::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CCSUsrMsg_RawAudio::GetClassData() const { return &_class_data_; }


void CCSUsrMsg_RawAudio::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CCSUsrMsg_RawAudio*>(&to_msg);
  auto& from = static_cast<const CCSUsrMsg_RawAudio&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CCSUsrMsg_RawAudio)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_voice_filename(from._internal_voice_filename());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.pitch_ = from._impl_.pitch_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.duration_ = from._impl_.duration_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.entidx_ = from._impl_.entidx_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CCSUsrMsg_RawAudio::CopyFrom(const CCSUsrMsg_RawAudio& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCSUsrMsg_RawAudio)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCSUsrMsg_RawAudio::IsInitialized() const {
  return true;
}

void CCSUsrMsg_RawAudio::InternalSwap(CCSUsrMsg_RawAudio* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.voice_filename_, lhs_arena,
      &other->_impl_.voice_filename_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CCSUsrMsg_RawAudio, _impl_.duration_)
      + sizeof(CCSUsrMsg_RawAudio::_impl_.duration_)
      - PROTOBUF_FIELD_OFFSET(CCSUsrMsg_RawAudio, _impl_.pitch_)>(
          reinterpret_cast<char*>(&_impl_.pitch_),
          reinterpret_cast<char*>(&other->_impl_.pitch_));
  swap(_impl_.entidx_, other->_impl_.entidx_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CCSUsrMsg_RawAudio::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cstrike15_5fusermessages_2eproto_getter, &descriptor_table_cstrike15_5fusermessages_2eproto_once,
      file_level_metadata_cstrike15_5fusermessages_2eproto[12]);
}

// ===================================================================

class CCSUsrMsg_VoiceMask_PlayerMask::_Internal {
 public:
  using HasBits = decltype(std::declval<CCSUsrMsg_VoiceMask_PlayerMask>()._impl_._has_bits_);
  static void set_has_game_rules_mask(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_ban_masks(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CCSUsrMsg_VoiceMask_PlayerMask::CCSUsrMsg_VoiceMask_PlayerMask(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CCSUsrMsg_VoiceMask.PlayerMask)
}
CCSUsrMsg_VoiceMask_PlayerMask::CCSUsrMsg_VoiceMask_PlayerMask(const CCSUsrMsg_VoiceMask_PlayerMask& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CCSUsrMsg_VoiceMask_PlayerMask* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.game_rules_mask_){}
    , decltype(_impl_.ban_masks_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.game_rules_mask_, &from._impl_.game_rules_mask_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.ban_masks_) -
    reinterpret_cast<char*>(&_impl_.game_rules_mask_)) + sizeof(_impl_.ban_masks_));
  // @@protoc_insertion_point(copy_constructor:CCSUsrMsg_VoiceMask.PlayerMask)
}

inline void CCSUsrMsg_VoiceMask_PlayerMask::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.game_rules_mask_){0}
    , decltype(_impl_.ban_masks_){0}
  };
}

CCSUsrMsg_VoiceMask_PlayerMask::~CCSUsrMsg_VoiceMask_PlayerMask() {
  // @@protoc_insertion_point(destructor:CCSUsrMsg_VoiceMask.PlayerMask)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CCSUsrMsg_VoiceMask_PlayerMask::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CCSUsrMsg_VoiceMask_PlayerMask::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CCSUsrMsg_VoiceMask_PlayerMask::Clear() {
// @@protoc_insertion_point(message_clear_start:CCSUsrMsg_VoiceMask.PlayerMask)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.game_rules_mask_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.ban_masks_) -
        reinterpret_cast<char*>(&_impl_.game_rules_mask_)) + sizeof(_impl_.ban_masks_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CCSUsrMsg_VoiceMask_PlayerMask::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 game_rules_mask = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_game_rules_mask(&has_bits);
          _impl_.game_rules_mask_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 ban_masks = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_ban_masks(&has_bits);
          _impl_.ban_masks_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CCSUsrMsg_VoiceMask_PlayerMask::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCSUsrMsg_VoiceMask.PlayerMask)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 game_rules_mask = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_game_rules_mask(), target);
  }

  // optional int32 ban_masks = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_ban_masks(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCSUsrMsg_VoiceMask.PlayerMask)
  return target;
}

size_t CCSUsrMsg_VoiceMask_PlayerMask::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCSUsrMsg_VoiceMask.PlayerMask)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int32 game_rules_mask = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_game_rules_mask());
    }

    // optional int32 ban_masks = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_ban_masks());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CCSUsrMsg_VoiceMask_PlayerMask::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CCSUsrMsg_VoiceMask_PlayerMask::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CCSUsrMsg_VoiceMask_PlayerMask::GetClassData() const { return &_class_data_; }


void CCSUsrMsg_VoiceMask_PlayerMask::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CCSUsrMsg_VoiceMask_PlayerMask*>(&to_msg);
  auto& from = static_cast<const CCSUsrMsg_VoiceMask_PlayerMask&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CCSUsrMsg_VoiceMask.PlayerMask)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.game_rules_mask_ = from._impl_.game_rules_mask_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.ban_masks_ = from._impl_.ban_masks_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CCSUsrMsg_VoiceMask_PlayerMask::CopyFrom(const CCSUsrMsg_VoiceMask_PlayerMask& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCSUsrMsg_VoiceMask.PlayerMask)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCSUsrMsg_VoiceMask_PlayerMask::IsInitialized() const {
  return true;
}

void CCSUsrMsg_VoiceMask_PlayerMask::InternalSwap(CCSUsrMsg_VoiceMask_PlayerMask* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CCSUsrMsg_VoiceMask_PlayerMask, _impl_.ban_masks_)
      + sizeof(CCSUsrMsg_VoiceMask_PlayerMask::_impl_.ban_masks_)
      - PROTOBUF_FIELD_OFFSET(CCSUsrMsg_VoiceMask_PlayerMask, _impl_.game_rules_mask_)>(
          reinterpret_cast<char*>(&_impl_.game_rules_mask_),
          reinterpret_cast<char*>(&other->_impl_.game_rules_mask_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CCSUsrMsg_VoiceMask_PlayerMask::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cstrike15_5fusermessages_2eproto_getter, &descriptor_table_cstrike15_5fusermessages_2eproto_once,
      file_level_metadata_cstrike15_5fusermessages_2eproto[13]);
}

// ===================================================================

class CCSUsrMsg_VoiceMask::_Internal {
 public:
  using HasBits = decltype(std::declval<CCSUsrMsg_VoiceMask>()._impl_._has_bits_);
  static void set_has_player_mod_enable(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CCSUsrMsg_VoiceMask::CCSUsrMsg_VoiceMask(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CCSUsrMsg_VoiceMask)
}
CCSUsrMsg_VoiceMask::CCSUsrMsg_VoiceMask(const CCSUsrMsg_VoiceMask& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CCSUsrMsg_VoiceMask* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.player_masks_){from._impl_.player_masks_}
    , decltype(_impl_.player_mod_enable_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.player_mod_enable_ = from._impl_.player_mod_enable_;
  // @@protoc_insertion_point(copy_constructor:CCSUsrMsg_VoiceMask)
}

inline void CCSUsrMsg_VoiceMask::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.player_masks_){arena}
    , decltype(_impl_.player_mod_enable_){false}
  };
}

CCSUsrMsg_VoiceMask::~CCSUsrMsg_VoiceMask() {
  // @@protoc_insertion_point(destructor:CCSUsrMsg_VoiceMask)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CCSUsrMsg_VoiceMask::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.player_masks_.~RepeatedPtrField();
}

void CCSUsrMsg_VoiceMask::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CCSUsrMsg_VoiceMask::Clear() {
// @@protoc_insertion_point(message_clear_start:CCSUsrMsg_VoiceMask)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.player_masks_.Clear();
  _impl_.player_mod_enable_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CCSUsrMsg_VoiceMask::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .CCSUsrMsg_VoiceMask.PlayerMask player_masks = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_player_masks(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional bool player_mod_enable = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_player_mod_enable(&has_bits);
          _impl_.player_mod_enable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CCSUsrMsg_VoiceMask::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCSUsrMsg_VoiceMask)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CCSUsrMsg_VoiceMask.PlayerMask player_masks = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_player_masks_size()); i < n; i++) {
    const auto& repfield = this->_internal_player_masks(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool player_mod_enable = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_player_mod_enable(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCSUsrMsg_VoiceMask)
  return target;
}

size_t CCSUsrMsg_VoiceMask::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCSUsrMsg_VoiceMask)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CCSUsrMsg_VoiceMask.PlayerMask player_masks = 1;
  total_size += 1UL * this->_internal_player_masks_size();
  for (const auto& msg : this->_impl_.player_masks_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional bool player_mod_enable = 2;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CCSUsrMsg_VoiceMask::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CCSUsrMsg_VoiceMask::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CCSUsrMsg_VoiceMask::GetClassData() const { return &_class_data_; }


void CCSUsrMsg_VoiceMask::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CCSUsrMsg_VoiceMask*>(&to_msg);
  auto& from = static_cast<const CCSUsrMsg_VoiceMask&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CCSUsrMsg_VoiceMask)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.player_masks_.MergeFrom(from._impl_.player_masks_);
  if (from._internal_has_player_mod_enable()) {
    _this->_internal_set_player_mod_enable(from._internal_player_mod_enable());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CCSUsrMsg_VoiceMask::CopyFrom(const CCSUsrMsg_VoiceMask& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCSUsrMsg_VoiceMask)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCSUsrMsg_VoiceMask::IsInitialized() const {
  return true;
}

void CCSUsrMsg_VoiceMask::InternalSwap(CCSUsrMsg_VoiceMask* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.player_masks_.InternalSwap(&other->_impl_.player_masks_);
  swap(_impl_.player_mod_enable_, other->_impl_.player_mod_enable_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CCSUsrMsg_VoiceMask::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cstrike15_5fusermessages_2eproto_getter, &descriptor_table_cstrike15_5fusermessages_2eproto_once,
      file_level_metadata_cstrike15_5fusermessages_2eproto[14]);
}

// ===================================================================

class CCSUsrMsg_Damage::_Internal {
 public:
  using HasBits = decltype(std::declval<CCSUsrMsg_Damage>()._impl_._has_bits_);
  static void set_has_amount(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::CMsgVector& inflictor_world_pos(const CCSUsrMsg_Damage* msg);
  static void set_has_inflictor_world_pos(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_victim_entindex(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::CMsgVector&
CCSUsrMsg_Damage::_Internal::inflictor_world_pos(const CCSUsrMsg_Damage* msg) {
  return *msg->_impl_.inflictor_world_pos_;
}
void CCSUsrMsg_Damage::clear_inflictor_world_pos() {
  if (_impl_.inflictor_world_pos_ != nullptr) _impl_.inflictor_world_pos_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
CCSUsrMsg_Damage::CCSUsrMsg_Damage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CCSUsrMsg_Damage)
}
CCSUsrMsg_Damage::CCSUsrMsg_Damage(const CCSUsrMsg_Damage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CCSUsrMsg_Damage* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.inflictor_world_pos_){nullptr}
    , decltype(_impl_.amount_){}
    , decltype(_impl_.victim_entindex_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_inflictor_world_pos()) {
    _this->_impl_.inflictor_world_pos_ = new ::CMsgVector(*from._impl_.inflictor_world_pos_);
  }
  ::memcpy(&_impl_.amount_, &from._impl_.amount_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.victim_entindex_) -
    reinterpret_cast<char*>(&_impl_.amount_)) + sizeof(_impl_.victim_entindex_));
  // @@protoc_insertion_point(copy_constructor:CCSUsrMsg_Damage)
}

inline void CCSUsrMsg_Damage::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.inflictor_world_pos_){nullptr}
    , decltype(_impl_.amount_){0}
    , decltype(_impl_.victim_entindex_){-1}
  };
}

CCSUsrMsg_Damage::~CCSUsrMsg_Damage() {
  // @@protoc_insertion_point(destructor:CCSUsrMsg_Damage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CCSUsrMsg_Damage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.inflictor_world_pos_;
}

void CCSUsrMsg_Damage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CCSUsrMsg_Damage::Clear() {
// @@protoc_insertion_point(message_clear_start:CCSUsrMsg_Damage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.inflictor_world_pos_ != nullptr);
    _impl_.inflictor_world_pos_->Clear();
  }
  if (cached_has_bits & 0x00000006u) {
    _impl_.amount_ = 0;
    _impl_.victim_entindex_ = -1;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CCSUsrMsg_Damage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 amount = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_amount(&has_bits);
          _impl_.amount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .CMsgVector inflictor_world_pos = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_inflictor_world_pos(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 victim_entindex = 3 [default = -1];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_victim_entindex(&has_bits);
          _impl_.victim_entindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CCSUsrMsg_Damage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCSUsrMsg_Damage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 amount = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_amount(), target);
  }

  // optional .CMsgVector inflictor_world_pos = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::inflictor_world_pos(this),
        _Internal::inflictor_world_pos(this).GetCachedSize(), target, stream);
  }

  // optional int32 victim_entindex = 3 [default = -1];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_victim_entindex(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCSUsrMsg_Damage)
  return target;
}

size_t CCSUsrMsg_Damage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCSUsrMsg_Damage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .CMsgVector inflictor_world_pos = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.inflictor_world_pos_);
    }

    // optional int32 amount = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_amount());
    }

    // optional int32 victim_entindex = 3 [default = -1];
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_victim_entindex());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CCSUsrMsg_Damage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CCSUsrMsg_Damage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CCSUsrMsg_Damage::GetClassData() const { return &_class_data_; }


void CCSUsrMsg_Damage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CCSUsrMsg_Damage*>(&to_msg);
  auto& from = static_cast<const CCSUsrMsg_Damage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CCSUsrMsg_Damage)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_inflictor_world_pos()->::CMsgVector::MergeFrom(
          from._internal_inflictor_world_pos());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.amount_ = from._impl_.amount_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.victim_entindex_ = from._impl_.victim_entindex_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CCSUsrMsg_Damage::CopyFrom(const CCSUsrMsg_Damage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCSUsrMsg_Damage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCSUsrMsg_Damage::IsInitialized() const {
  return true;
}

void CCSUsrMsg_Damage::InternalSwap(CCSUsrMsg_Damage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CCSUsrMsg_Damage, _impl_.amount_)
      + sizeof(CCSUsrMsg_Damage::_impl_.amount_)
      - PROTOBUF_FIELD_OFFSET(CCSUsrMsg_Damage, _impl_.inflictor_world_pos_)>(
          reinterpret_cast<char*>(&_impl_.inflictor_world_pos_),
          reinterpret_cast<char*>(&other->_impl_.inflictor_world_pos_));
  swap(_impl_.victim_entindex_, other->_impl_.victim_entindex_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CCSUsrMsg_Damage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cstrike15_5fusermessages_2eproto_getter, &descriptor_table_cstrike15_5fusermessages_2eproto_once,
      file_level_metadata_cstrike15_5fusermessages_2eproto[15]);
}

// ===================================================================

class CCSUsrMsg_RadioText::_Internal {
 public:
  using HasBits = decltype(std::declval<CCSUsrMsg_RadioText>()._impl_._has_bits_);
  static void set_has_msg_dst(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_client(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_msg_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CCSUsrMsg_RadioText::CCSUsrMsg_RadioText(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CCSUsrMsg_RadioText)
}
CCSUsrMsg_RadioText::CCSUsrMsg_RadioText(const CCSUsrMsg_RadioText& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CCSUsrMsg_RadioText* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.params_){from._impl_.params_}
    , decltype(_impl_.msg_name_){}
    , decltype(_impl_.msg_dst_){}
    , decltype(_impl_.client_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.msg_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.msg_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_msg_name()) {
    _this->_impl_.msg_name_.Set(from._internal_msg_name(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.msg_dst_, &from._impl_.msg_dst_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.client_) -
    reinterpret_cast<char*>(&_impl_.msg_dst_)) + sizeof(_impl_.client_));
  // @@protoc_insertion_point(copy_constructor:CCSUsrMsg_RadioText)
}

inline void CCSUsrMsg_RadioText::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.params_){arena}
    , decltype(_impl_.msg_name_){}
    , decltype(_impl_.msg_dst_){0}
    , decltype(_impl_.client_){-1}
  };
  _impl_.msg_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.msg_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CCSUsrMsg_RadioText::~CCSUsrMsg_RadioText() {
  // @@protoc_insertion_point(destructor:CCSUsrMsg_RadioText)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CCSUsrMsg_RadioText::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.params_.~RepeatedPtrField();
  _impl_.msg_name_.Destroy();
}

void CCSUsrMsg_RadioText::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CCSUsrMsg_RadioText::Clear() {
// @@protoc_insertion_point(message_clear_start:CCSUsrMsg_RadioText)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.params_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.msg_name_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    _impl_.msg_dst_ = 0;
    _impl_.client_ = -1;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CCSUsrMsg_RadioText::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 msg_dst = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_msg_dst(&has_bits);
          _impl_.msg_dst_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 client = 2 [default = -1];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_client(&has_bits);
          _impl_.client_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string msg_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_msg_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CCSUsrMsg_RadioText.msg_name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // repeated string params = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_params();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            #ifndef NDEBUG
            ::_pbi::VerifyUTF8(str, "CCSUsrMsg_RadioText.params");
            #endif  // !NDEBUG
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CCSUsrMsg_RadioText::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCSUsrMsg_RadioText)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 msg_dst = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_msg_dst(), target);
  }

  // optional int32 client = 2 [default = -1];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_client(), target);
  }

  // optional string msg_name = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_msg_name().data(), static_cast<int>(this->_internal_msg_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CCSUsrMsg_RadioText.msg_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_msg_name(), target);
  }

  // repeated string params = 4;
  for (int i = 0, n = this->_internal_params_size(); i < n; i++) {
    const auto& s = this->_internal_params(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CCSUsrMsg_RadioText.params");
    target = stream->WriteString(4, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCSUsrMsg_RadioText)
  return target;
}

size_t CCSUsrMsg_RadioText::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCSUsrMsg_RadioText)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string params = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.params_.size());
  for (int i = 0, n = _impl_.params_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.params_.Get(i));
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string msg_name = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_msg_name());
    }

    // optional int32 msg_dst = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_msg_dst());
    }

    // optional int32 client = 2 [default = -1];
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_client());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CCSUsrMsg_RadioText::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CCSUsrMsg_RadioText::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CCSUsrMsg_RadioText::GetClassData() const { return &_class_data_; }


void CCSUsrMsg_RadioText::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CCSUsrMsg_RadioText*>(&to_msg);
  auto& from = static_cast<const CCSUsrMsg_RadioText&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CCSUsrMsg_RadioText)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.params_.MergeFrom(from._impl_.params_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_msg_name(from._internal_msg_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.msg_dst_ = from._impl_.msg_dst_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.client_ = from._impl_.client_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CCSUsrMsg_RadioText::CopyFrom(const CCSUsrMsg_RadioText& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCSUsrMsg_RadioText)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCSUsrMsg_RadioText::IsInitialized() const {
  return true;
}

void CCSUsrMsg_RadioText::InternalSwap(CCSUsrMsg_RadioText* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.params_.InternalSwap(&other->_impl_.params_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.msg_name_, lhs_arena,
      &other->_impl_.msg_name_, rhs_arena
  );
  swap(_impl_.msg_dst_, other->_impl_.msg_dst_);
  swap(_impl_.client_, other->_impl_.client_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CCSUsrMsg_RadioText::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cstrike15_5fusermessages_2eproto_getter, &descriptor_table_cstrike15_5fusermessages_2eproto_once,
      file_level_metadata_cstrike15_5fusermessages_2eproto[16]);
}

// ===================================================================

class CCSUsrMsg_HintText::_Internal {
 public:
  using HasBits = decltype(std::declval<CCSUsrMsg_HintText>()._impl_._has_bits_);
  static void set_has_message(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CCSUsrMsg_HintText::CCSUsrMsg_HintText(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CCSUsrMsg_HintText)
}
CCSUsrMsg_HintText::CCSUsrMsg_HintText(const CCSUsrMsg_HintText& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CCSUsrMsg_HintText* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.message_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_message()) {
    _this->_impl_.message_.Set(from._internal_message(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:CCSUsrMsg_HintText)
}

inline void CCSUsrMsg_HintText::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.message_){}
  };
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CCSUsrMsg_HintText::~CCSUsrMsg_HintText() {
  // @@protoc_insertion_point(destructor:CCSUsrMsg_HintText)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CCSUsrMsg_HintText::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.message_.Destroy();
}

void CCSUsrMsg_HintText::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CCSUsrMsg_HintText::Clear() {
// @@protoc_insertion_point(message_clear_start:CCSUsrMsg_HintText)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.message_.ClearNonDefaultToEmpty();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CCSUsrMsg_HintText::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string message = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_message();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CCSUsrMsg_HintText.message");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CCSUsrMsg_HintText::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCSUsrMsg_HintText)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string message = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CCSUsrMsg_HintText.message");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCSUsrMsg_HintText)
  return target;
}

size_t CCSUsrMsg_HintText::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCSUsrMsg_HintText)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string message = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CCSUsrMsg_HintText::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CCSUsrMsg_HintText::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CCSUsrMsg_HintText::GetClassData() const { return &_class_data_; }


void CCSUsrMsg_HintText::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CCSUsrMsg_HintText*>(&to_msg);
  auto& from = static_cast<const CCSUsrMsg_HintText&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CCSUsrMsg_HintText)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_message()) {
    _this->_internal_set_message(from._internal_message());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CCSUsrMsg_HintText::CopyFrom(const CCSUsrMsg_HintText& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCSUsrMsg_HintText)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCSUsrMsg_HintText::IsInitialized() const {
  return true;
}

void CCSUsrMsg_HintText::InternalSwap(CCSUsrMsg_HintText* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.message_, lhs_arena,
      &other->_impl_.message_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata CCSUsrMsg_HintText::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cstrike15_5fusermessages_2eproto_getter, &descriptor_table_cstrike15_5fusermessages_2eproto_once,
      file_level_metadata_cstrike15_5fusermessages_2eproto[17]);
}

// ===================================================================

class CCSUsrMsg_KeyHintText::_Internal {
 public:
};

CCSUsrMsg_KeyHintText::CCSUsrMsg_KeyHintText(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CCSUsrMsg_KeyHintText)
}
CCSUsrMsg_KeyHintText::CCSUsrMsg_KeyHintText(const CCSUsrMsg_KeyHintText& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CCSUsrMsg_KeyHintText* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.messages_){from._impl_.messages_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CCSUsrMsg_KeyHintText)
}

inline void CCSUsrMsg_KeyHintText::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.messages_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CCSUsrMsg_KeyHintText::~CCSUsrMsg_KeyHintText() {
  // @@protoc_insertion_point(destructor:CCSUsrMsg_KeyHintText)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CCSUsrMsg_KeyHintText::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.messages_.~RepeatedPtrField();
}

void CCSUsrMsg_KeyHintText::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CCSUsrMsg_KeyHintText::Clear() {
// @@protoc_insertion_point(message_clear_start:CCSUsrMsg_KeyHintText)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.messages_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CCSUsrMsg_KeyHintText::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated string messages = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_messages();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            #ifndef NDEBUG
            ::_pbi::VerifyUTF8(str, "CCSUsrMsg_KeyHintText.messages");
            #endif  // !NDEBUG
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CCSUsrMsg_KeyHintText::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCSUsrMsg_KeyHintText)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string messages = 1;
  for (int i = 0, n = this->_internal_messages_size(); i < n; i++) {
    const auto& s = this->_internal_messages(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CCSUsrMsg_KeyHintText.messages");
    target = stream->WriteString(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCSUsrMsg_KeyHintText)
  return target;
}

size_t CCSUsrMsg_KeyHintText::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCSUsrMsg_KeyHintText)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string messages = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.messages_.size());
  for (int i = 0, n = _impl_.messages_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.messages_.Get(i));
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CCSUsrMsg_KeyHintText::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CCSUsrMsg_KeyHintText::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CCSUsrMsg_KeyHintText::GetClassData() const { return &_class_data_; }


void CCSUsrMsg_KeyHintText::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CCSUsrMsg_KeyHintText*>(&to_msg);
  auto& from = static_cast<const CCSUsrMsg_KeyHintText&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CCSUsrMsg_KeyHintText)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.messages_.MergeFrom(from._impl_.messages_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CCSUsrMsg_KeyHintText::CopyFrom(const CCSUsrMsg_KeyHintText& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCSUsrMsg_KeyHintText)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCSUsrMsg_KeyHintText::IsInitialized() const {
  return true;
}

void CCSUsrMsg_KeyHintText::InternalSwap(CCSUsrMsg_KeyHintText* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.messages_.InternalSwap(&other->_impl_.messages_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CCSUsrMsg_KeyHintText::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cstrike15_5fusermessages_2eproto_getter, &descriptor_table_cstrike15_5fusermessages_2eproto_once,
      file_level_metadata_cstrike15_5fusermessages_2eproto[18]);
}

// ===================================================================

class CCSUsrMsg_ProcessSpottedEntityUpdate_SpottedEntityUpdate::_Internal {
 public:
  using HasBits = decltype(std::declval<CCSUsrMsg_ProcessSpottedEntityUpdate_SpottedEntityUpdate>()._impl_._has_bits_);
  static void set_has_entity_idx(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_class_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_origin_x(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_origin_y(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_origin_z(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_angle_y(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_defuser(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_player_has_defuser(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_player_has_c4(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
};

CCSUsrMsg_ProcessSpottedEntityUpdate_SpottedEntityUpdate::CCSUsrMsg_ProcessSpottedEntityUpdate_SpottedEntityUpdate(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CCSUsrMsg_ProcessSpottedEntityUpdate.SpottedEntityUpdate)
}
CCSUsrMsg_ProcessSpottedEntityUpdate_SpottedEntityUpdate::CCSUsrMsg_ProcessSpottedEntityUpdate_SpottedEntityUpdate(const CCSUsrMsg_ProcessSpottedEntityUpdate_SpottedEntityUpdate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CCSUsrMsg_ProcessSpottedEntityUpdate_SpottedEntityUpdate* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.class_id_){}
    , decltype(_impl_.origin_x_){}
    , decltype(_impl_.origin_y_){}
    , decltype(_impl_.origin_z_){}
    , decltype(_impl_.angle_y_){}
    , decltype(_impl_.defuser_){}
    , decltype(_impl_.player_has_defuser_){}
    , decltype(_impl_.player_has_c4_){}
    , decltype(_impl_.entity_idx_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.class_id_, &from._impl_.class_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.entity_idx_) -
    reinterpret_cast<char*>(&_impl_.class_id_)) + sizeof(_impl_.entity_idx_));
  // @@protoc_insertion_point(copy_constructor:CCSUsrMsg_ProcessSpottedEntityUpdate.SpottedEntityUpdate)
}

inline void CCSUsrMsg_ProcessSpottedEntityUpdate_SpottedEntityUpdate::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.class_id_){0}
    , decltype(_impl_.origin_x_){0}
    , decltype(_impl_.origin_y_){0}
    , decltype(_impl_.origin_z_){0}
    , decltype(_impl_.angle_y_){0}
    , decltype(_impl_.defuser_){false}
    , decltype(_impl_.player_has_defuser_){false}
    , decltype(_impl_.player_has_c4_){false}
    , decltype(_impl_.entity_idx_){-1}
  };
}

CCSUsrMsg_ProcessSpottedEntityUpdate_SpottedEntityUpdate::~CCSUsrMsg_ProcessSpottedEntityUpdate_SpottedEntityUpdate() {
  // @@protoc_insertion_point(destructor:CCSUsrMsg_ProcessSpottedEntityUpdate.SpottedEntityUpdate)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CCSUsrMsg_ProcessSpottedEntityUpdate_SpottedEntityUpdate::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CCSUsrMsg_ProcessSpottedEntityUpdate_SpottedEntityUpdate::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CCSUsrMsg_ProcessSpottedEntityUpdate_SpottedEntityUpdate::Clear() {
// @@protoc_insertion_point(message_clear_start:CCSUsrMsg_ProcessSpottedEntityUpdate.SpottedEntityUpdate)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&_impl_.class_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.player_has_c4_) -
        reinterpret_cast<char*>(&_impl_.class_id_)) + sizeof(_impl_.player_has_c4_));
  }
  _impl_.entity_idx_ = -1;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CCSUsrMsg_ProcessSpottedEntityUpdate_SpottedEntityUpdate::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 entity_idx = 1 [default = -1];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_entity_idx(&has_bits);
          _impl_.entity_idx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 class_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_class_id(&has_bits);
          _impl_.class_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 origin_x = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_origin_x(&has_bits);
          _impl_.origin_x_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 origin_y = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_origin_y(&has_bits);
          _impl_.origin_y_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 origin_z = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_origin_z(&has_bits);
          _impl_.origin_z_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 angle_y = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_angle_y(&has_bits);
          _impl_.angle_y_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool defuser = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_defuser(&has_bits);
          _impl_.defuser_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool player_has_defuser = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_player_has_defuser(&has_bits);
          _impl_.player_has_defuser_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool player_has_c4 = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_player_has_c4(&has_bits);
          _impl_.player_has_c4_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CCSUsrMsg_ProcessSpottedEntityUpdate_SpottedEntityUpdate::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCSUsrMsg_ProcessSpottedEntityUpdate.SpottedEntityUpdate)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 entity_idx = 1 [default = -1];
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_entity_idx(), target);
  }

  // optional int32 class_id = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_class_id(), target);
  }

  // optional int32 origin_x = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_origin_x(), target);
  }

  // optional int32 origin_y = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_origin_y(), target);
  }

  // optional int32 origin_z = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_origin_z(), target);
  }

  // optional int32 angle_y = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(6, this->_internal_angle_y(), target);
  }

  // optional bool defuser = 7;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(7, this->_internal_defuser(), target);
  }

  // optional bool player_has_defuser = 8;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(8, this->_internal_player_has_defuser(), target);
  }

  // optional bool player_has_c4 = 9;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(9, this->_internal_player_has_c4(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCSUsrMsg_ProcessSpottedEntityUpdate.SpottedEntityUpdate)
  return target;
}

size_t CCSUsrMsg_ProcessSpottedEntityUpdate_SpottedEntityUpdate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCSUsrMsg_ProcessSpottedEntityUpdate.SpottedEntityUpdate)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional int32 class_id = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_class_id());
    }

    // optional int32 origin_x = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_origin_x());
    }

    // optional int32 origin_y = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_origin_y());
    }

    // optional int32 origin_z = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_origin_z());
    }

    // optional int32 angle_y = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_angle_y());
    }

    // optional bool defuser = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional bool player_has_defuser = 8;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

    // optional bool player_has_c4 = 9;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  // optional int32 entity_idx = 1 [default = -1];
  if (cached_has_bits & 0x00000100u) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_entity_idx());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CCSUsrMsg_ProcessSpottedEntityUpdate_SpottedEntityUpdate::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CCSUsrMsg_ProcessSpottedEntityUpdate_SpottedEntityUpdate::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CCSUsrMsg_ProcessSpottedEntityUpdate_SpottedEntityUpdate::GetClassData() const { return &_class_data_; }


void CCSUsrMsg_ProcessSpottedEntityUpdate_SpottedEntityUpdate::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CCSUsrMsg_ProcessSpottedEntityUpdate_SpottedEntityUpdate*>(&to_msg);
  auto& from = static_cast<const CCSUsrMsg_ProcessSpottedEntityUpdate_SpottedEntityUpdate&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CCSUsrMsg_ProcessSpottedEntityUpdate.SpottedEntityUpdate)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.class_id_ = from._impl_.class_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.origin_x_ = from._impl_.origin_x_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.origin_y_ = from._impl_.origin_y_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.origin_z_ = from._impl_.origin_z_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.angle_y_ = from._impl_.angle_y_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.defuser_ = from._impl_.defuser_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.player_has_defuser_ = from._impl_.player_has_defuser_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.player_has_c4_ = from._impl_.player_has_c4_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    _this->_internal_set_entity_idx(from._internal_entity_idx());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CCSUsrMsg_ProcessSpottedEntityUpdate_SpottedEntityUpdate::CopyFrom(const CCSUsrMsg_ProcessSpottedEntityUpdate_SpottedEntityUpdate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCSUsrMsg_ProcessSpottedEntityUpdate.SpottedEntityUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCSUsrMsg_ProcessSpottedEntityUpdate_SpottedEntityUpdate::IsInitialized() const {
  return true;
}

void CCSUsrMsg_ProcessSpottedEntityUpdate_SpottedEntityUpdate::InternalSwap(CCSUsrMsg_ProcessSpottedEntityUpdate_SpottedEntityUpdate* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CCSUsrMsg_ProcessSpottedEntityUpdate_SpottedEntityUpdate, _impl_.player_has_c4_)
      + sizeof(CCSUsrMsg_ProcessSpottedEntityUpdate_SpottedEntityUpdate::_impl_.player_has_c4_)
      - PROTOBUF_FIELD_OFFSET(CCSUsrMsg_ProcessSpottedEntityUpdate_SpottedEntityUpdate, _impl_.class_id_)>(
          reinterpret_cast<char*>(&_impl_.class_id_),
          reinterpret_cast<char*>(&other->_impl_.class_id_));
  swap(_impl_.entity_idx_, other->_impl_.entity_idx_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CCSUsrMsg_ProcessSpottedEntityUpdate_SpottedEntityUpdate::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cstrike15_5fusermessages_2eproto_getter, &descriptor_table_cstrike15_5fusermessages_2eproto_once,
      file_level_metadata_cstrike15_5fusermessages_2eproto[19]);
}

// ===================================================================

class CCSUsrMsg_ProcessSpottedEntityUpdate::_Internal {
 public:
  using HasBits = decltype(std::declval<CCSUsrMsg_ProcessSpottedEntityUpdate>()._impl_._has_bits_);
  static void set_has_new_update(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CCSUsrMsg_ProcessSpottedEntityUpdate::CCSUsrMsg_ProcessSpottedEntityUpdate(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CCSUsrMsg_ProcessSpottedEntityUpdate)
}
CCSUsrMsg_ProcessSpottedEntityUpdate::CCSUsrMsg_ProcessSpottedEntityUpdate(const CCSUsrMsg_ProcessSpottedEntityUpdate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CCSUsrMsg_ProcessSpottedEntityUpdate* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.entity_updates_){from._impl_.entity_updates_}
    , decltype(_impl_.new_update_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.new_update_ = from._impl_.new_update_;
  // @@protoc_insertion_point(copy_constructor:CCSUsrMsg_ProcessSpottedEntityUpdate)
}

inline void CCSUsrMsg_ProcessSpottedEntityUpdate::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.entity_updates_){arena}
    , decltype(_impl_.new_update_){false}
  };
}

CCSUsrMsg_ProcessSpottedEntityUpdate::~CCSUsrMsg_ProcessSpottedEntityUpdate() {
  // @@protoc_insertion_point(destructor:CCSUsrMsg_ProcessSpottedEntityUpdate)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CCSUsrMsg_ProcessSpottedEntityUpdate::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.entity_updates_.~RepeatedPtrField();
}

void CCSUsrMsg_ProcessSpottedEntityUpdate::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CCSUsrMsg_ProcessSpottedEntityUpdate::Clear() {
// @@protoc_insertion_point(message_clear_start:CCSUsrMsg_ProcessSpottedEntityUpdate)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.entity_updates_.Clear();
  _impl_.new_update_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CCSUsrMsg_ProcessSpottedEntityUpdate::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool new_update = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_new_update(&has_bits);
          _impl_.new_update_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .CCSUsrMsg_ProcessSpottedEntityUpdate.SpottedEntityUpdate entity_updates = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_entity_updates(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CCSUsrMsg_ProcessSpottedEntityUpdate::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCSUsrMsg_ProcessSpottedEntityUpdate)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool new_update = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_new_update(), target);
  }

  // repeated .CCSUsrMsg_ProcessSpottedEntityUpdate.SpottedEntityUpdate entity_updates = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_entity_updates_size()); i < n; i++) {
    const auto& repfield = this->_internal_entity_updates(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCSUsrMsg_ProcessSpottedEntityUpdate)
  return target;
}

size_t CCSUsrMsg_ProcessSpottedEntityUpdate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCSUsrMsg_ProcessSpottedEntityUpdate)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CCSUsrMsg_ProcessSpottedEntityUpdate.SpottedEntityUpdate entity_updates = 2;
  total_size += 1UL * this->_internal_entity_updates_size();
  for (const auto& msg : this->_impl_.entity_updates_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional bool new_update = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CCSUsrMsg_ProcessSpottedEntityUpdate::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CCSUsrMsg_ProcessSpottedEntityUpdate::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CCSUsrMsg_ProcessSpottedEntityUpdate::GetClassData() const { return &_class_data_; }


void CCSUsrMsg_ProcessSpottedEntityUpdate::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CCSUsrMsg_ProcessSpottedEntityUpdate*>(&to_msg);
  auto& from = static_cast<const CCSUsrMsg_ProcessSpottedEntityUpdate&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CCSUsrMsg_ProcessSpottedEntityUpdate)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.entity_updates_.MergeFrom(from._impl_.entity_updates_);
  if (from._internal_has_new_update()) {
    _this->_internal_set_new_update(from._internal_new_update());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CCSUsrMsg_ProcessSpottedEntityUpdate::CopyFrom(const CCSUsrMsg_ProcessSpottedEntityUpdate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCSUsrMsg_ProcessSpottedEntityUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCSUsrMsg_ProcessSpottedEntityUpdate::IsInitialized() const {
  return true;
}

void CCSUsrMsg_ProcessSpottedEntityUpdate::InternalSwap(CCSUsrMsg_ProcessSpottedEntityUpdate* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.entity_updates_.InternalSwap(&other->_impl_.entity_updates_);
  swap(_impl_.new_update_, other->_impl_.new_update_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CCSUsrMsg_ProcessSpottedEntityUpdate::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cstrike15_5fusermessages_2eproto_getter, &descriptor_table_cstrike15_5fusermessages_2eproto_once,
      file_level_metadata_cstrike15_5fusermessages_2eproto[20]);
}

// ===================================================================

class CCSUsrMsg_SendPlayerItemDrops::_Internal {
 public:
};

void CCSUsrMsg_SendPlayerItemDrops::clear_entity_updates() {
  _impl_.entity_updates_.Clear();
}
CCSUsrMsg_SendPlayerItemDrops::CCSUsrMsg_SendPlayerItemDrops(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CCSUsrMsg_SendPlayerItemDrops)
}
CCSUsrMsg_SendPlayerItemDrops::CCSUsrMsg_SendPlayerItemDrops(const CCSUsrMsg_SendPlayerItemDrops& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CCSUsrMsg_SendPlayerItemDrops* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.entity_updates_){from._impl_.entity_updates_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CCSUsrMsg_SendPlayerItemDrops)
}

inline void CCSUsrMsg_SendPlayerItemDrops::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.entity_updates_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CCSUsrMsg_SendPlayerItemDrops::~CCSUsrMsg_SendPlayerItemDrops() {
  // @@protoc_insertion_point(destructor:CCSUsrMsg_SendPlayerItemDrops)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CCSUsrMsg_SendPlayerItemDrops::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.entity_updates_.~RepeatedPtrField();
}

void CCSUsrMsg_SendPlayerItemDrops::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CCSUsrMsg_SendPlayerItemDrops::Clear() {
// @@protoc_insertion_point(message_clear_start:CCSUsrMsg_SendPlayerItemDrops)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.entity_updates_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CCSUsrMsg_SendPlayerItemDrops::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .CEconItemPreviewDataBlock entity_updates = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_entity_updates(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CCSUsrMsg_SendPlayerItemDrops::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCSUsrMsg_SendPlayerItemDrops)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CEconItemPreviewDataBlock entity_updates = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_entity_updates_size()); i < n; i++) {
    const auto& repfield = this->_internal_entity_updates(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCSUsrMsg_SendPlayerItemDrops)
  return target;
}

size_t CCSUsrMsg_SendPlayerItemDrops::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCSUsrMsg_SendPlayerItemDrops)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CEconItemPreviewDataBlock entity_updates = 1;
  total_size += 1UL * this->_internal_entity_updates_size();
  for (const auto& msg : this->_impl_.entity_updates_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CCSUsrMsg_SendPlayerItemDrops::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CCSUsrMsg_SendPlayerItemDrops::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CCSUsrMsg_SendPlayerItemDrops::GetClassData() const { return &_class_data_; }


void CCSUsrMsg_SendPlayerItemDrops::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CCSUsrMsg_SendPlayerItemDrops*>(&to_msg);
  auto& from = static_cast<const CCSUsrMsg_SendPlayerItemDrops&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CCSUsrMsg_SendPlayerItemDrops)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.entity_updates_.MergeFrom(from._impl_.entity_updates_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CCSUsrMsg_SendPlayerItemDrops::CopyFrom(const CCSUsrMsg_SendPlayerItemDrops& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCSUsrMsg_SendPlayerItemDrops)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCSUsrMsg_SendPlayerItemDrops::IsInitialized() const {
  return true;
}

void CCSUsrMsg_SendPlayerItemDrops::InternalSwap(CCSUsrMsg_SendPlayerItemDrops* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.entity_updates_.InternalSwap(&other->_impl_.entity_updates_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CCSUsrMsg_SendPlayerItemDrops::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cstrike15_5fusermessages_2eproto_getter, &descriptor_table_cstrike15_5fusermessages_2eproto_once,
      file_level_metadata_cstrike15_5fusermessages_2eproto[21]);
}

// ===================================================================

class CCSUsrMsg_SendPlayerItemFound::_Internal {
 public:
  using HasBits = decltype(std::declval<CCSUsrMsg_SendPlayerItemFound>()._impl_._has_bits_);
  static const ::CEconItemPreviewDataBlock& iteminfo(const CCSUsrMsg_SendPlayerItemFound* msg);
  static void set_has_iteminfo(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_playerslot(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::CEconItemPreviewDataBlock&
CCSUsrMsg_SendPlayerItemFound::_Internal::iteminfo(const CCSUsrMsg_SendPlayerItemFound* msg) {
  return *msg->_impl_.iteminfo_;
}
void CCSUsrMsg_SendPlayerItemFound::clear_iteminfo() {
  if (_impl_.iteminfo_ != nullptr) _impl_.iteminfo_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
CCSUsrMsg_SendPlayerItemFound::CCSUsrMsg_SendPlayerItemFound(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CCSUsrMsg_SendPlayerItemFound)
}
CCSUsrMsg_SendPlayerItemFound::CCSUsrMsg_SendPlayerItemFound(const CCSUsrMsg_SendPlayerItemFound& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CCSUsrMsg_SendPlayerItemFound* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.iteminfo_){nullptr}
    , decltype(_impl_.playerslot_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_iteminfo()) {
    _this->_impl_.iteminfo_ = new ::CEconItemPreviewDataBlock(*from._impl_.iteminfo_);
  }
  _this->_impl_.playerslot_ = from._impl_.playerslot_;
  // @@protoc_insertion_point(copy_constructor:CCSUsrMsg_SendPlayerItemFound)
}

inline void CCSUsrMsg_SendPlayerItemFound::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.iteminfo_){nullptr}
    , decltype(_impl_.playerslot_){-1}
  };
}

CCSUsrMsg_SendPlayerItemFound::~CCSUsrMsg_SendPlayerItemFound() {
  // @@protoc_insertion_point(destructor:CCSUsrMsg_SendPlayerItemFound)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CCSUsrMsg_SendPlayerItemFound::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.iteminfo_;
}

void CCSUsrMsg_SendPlayerItemFound::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CCSUsrMsg_SendPlayerItemFound::Clear() {
// @@protoc_insertion_point(message_clear_start:CCSUsrMsg_SendPlayerItemFound)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.iteminfo_ != nullptr);
      _impl_.iteminfo_->Clear();
    }
    _impl_.playerslot_ = -1;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CCSUsrMsg_SendPlayerItemFound::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .CEconItemPreviewDataBlock iteminfo = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_iteminfo(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 playerslot = 2 [default = -1];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_playerslot(&has_bits);
          _impl_.playerslot_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CCSUsrMsg_SendPlayerItemFound::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCSUsrMsg_SendPlayerItemFound)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .CEconItemPreviewDataBlock iteminfo = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::iteminfo(this),
        _Internal::iteminfo(this).GetCachedSize(), target, stream);
  }

  // optional int32 playerslot = 2 [default = -1];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_playerslot(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCSUsrMsg_SendPlayerItemFound)
  return target;
}

size_t CCSUsrMsg_SendPlayerItemFound::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCSUsrMsg_SendPlayerItemFound)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .CEconItemPreviewDataBlock iteminfo = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.iteminfo_);
    }

    // optional int32 playerslot = 2 [default = -1];
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_playerslot());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CCSUsrMsg_SendPlayerItemFound::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CCSUsrMsg_SendPlayerItemFound::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CCSUsrMsg_SendPlayerItemFound::GetClassData() const { return &_class_data_; }


void CCSUsrMsg_SendPlayerItemFound::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CCSUsrMsg_SendPlayerItemFound*>(&to_msg);
  auto& from = static_cast<const CCSUsrMsg_SendPlayerItemFound&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CCSUsrMsg_SendPlayerItemFound)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_iteminfo()->::CEconItemPreviewDataBlock::MergeFrom(
          from._internal_iteminfo());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.playerslot_ = from._impl_.playerslot_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CCSUsrMsg_SendPlayerItemFound::CopyFrom(const CCSUsrMsg_SendPlayerItemFound& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCSUsrMsg_SendPlayerItemFound)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCSUsrMsg_SendPlayerItemFound::IsInitialized() const {
  return true;
}

void CCSUsrMsg_SendPlayerItemFound::InternalSwap(CCSUsrMsg_SendPlayerItemFound* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.iteminfo_, other->_impl_.iteminfo_);
  swap(_impl_.playerslot_, other->_impl_.playerslot_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CCSUsrMsg_SendPlayerItemFound::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cstrike15_5fusermessages_2eproto_getter, &descriptor_table_cstrike15_5fusermessages_2eproto_once,
      file_level_metadata_cstrike15_5fusermessages_2eproto[22]);
}

// ===================================================================

class CCSUsrMsg_ReloadEffect::_Internal {
 public:
  using HasBits = decltype(std::declval<CCSUsrMsg_ReloadEffect>()._impl_._has_bits_);
  static void set_has_entidx(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_actanim(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_origin_x(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_origin_y(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_origin_z(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

CCSUsrMsg_ReloadEffect::CCSUsrMsg_ReloadEffect(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CCSUsrMsg_ReloadEffect)
}
CCSUsrMsg_ReloadEffect::CCSUsrMsg_ReloadEffect(const CCSUsrMsg_ReloadEffect& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CCSUsrMsg_ReloadEffect* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.actanim_){}
    , decltype(_impl_.origin_x_){}
    , decltype(_impl_.origin_y_){}
    , decltype(_impl_.origin_z_){}
    , decltype(_impl_.entidx_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.actanim_, &from._impl_.actanim_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.entidx_) -
    reinterpret_cast<char*>(&_impl_.actanim_)) + sizeof(_impl_.entidx_));
  // @@protoc_insertion_point(copy_constructor:CCSUsrMsg_ReloadEffect)
}

inline void CCSUsrMsg_ReloadEffect::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.actanim_){0}
    , decltype(_impl_.origin_x_){0}
    , decltype(_impl_.origin_y_){0}
    , decltype(_impl_.origin_z_){0}
    , decltype(_impl_.entidx_){-1}
  };
}

CCSUsrMsg_ReloadEffect::~CCSUsrMsg_ReloadEffect() {
  // @@protoc_insertion_point(destructor:CCSUsrMsg_ReloadEffect)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CCSUsrMsg_ReloadEffect::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CCSUsrMsg_ReloadEffect::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CCSUsrMsg_ReloadEffect::Clear() {
// @@protoc_insertion_point(message_clear_start:CCSUsrMsg_ReloadEffect)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&_impl_.actanim_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.origin_z_) -
        reinterpret_cast<char*>(&_impl_.actanim_)) + sizeof(_impl_.origin_z_));
    _impl_.entidx_ = -1;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CCSUsrMsg_ReloadEffect::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 entidx = 1 [default = -1];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_entidx(&has_bits);
          _impl_.entidx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 actanim = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_actanim(&has_bits);
          _impl_.actanim_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float origin_x = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _Internal::set_has_origin_x(&has_bits);
          _impl_.origin_x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float origin_y = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          _Internal::set_has_origin_y(&has_bits);
          _impl_.origin_y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float origin_z = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 45)) {
          _Internal::set_has_origin_z(&has_bits);
          _impl_.origin_z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CCSUsrMsg_ReloadEffect::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCSUsrMsg_ReloadEffect)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 entidx = 1 [default = -1];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_entidx(), target);
  }

  // optional int32 actanim = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_actanim(), target);
  }

  // optional float origin_x = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_origin_x(), target);
  }

  // optional float origin_y = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(4, this->_internal_origin_y(), target);
  }

  // optional float origin_z = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(5, this->_internal_origin_z(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCSUsrMsg_ReloadEffect)
  return target;
}

size_t CCSUsrMsg_ReloadEffect::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCSUsrMsg_ReloadEffect)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional int32 actanim = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_actanim());
    }

    // optional float origin_x = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional float origin_y = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

    // optional float origin_z = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

    // optional int32 entidx = 1 [default = -1];
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_entidx());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CCSUsrMsg_ReloadEffect::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CCSUsrMsg_ReloadEffect::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CCSUsrMsg_ReloadEffect::GetClassData() const { return &_class_data_; }


void CCSUsrMsg_ReloadEffect::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CCSUsrMsg_ReloadEffect*>(&to_msg);
  auto& from = static_cast<const CCSUsrMsg_ReloadEffect&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CCSUsrMsg_ReloadEffect)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.actanim_ = from._impl_.actanim_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.origin_x_ = from._impl_.origin_x_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.origin_y_ = from._impl_.origin_y_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.origin_z_ = from._impl_.origin_z_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.entidx_ = from._impl_.entidx_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CCSUsrMsg_ReloadEffect::CopyFrom(const CCSUsrMsg_ReloadEffect& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCSUsrMsg_ReloadEffect)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCSUsrMsg_ReloadEffect::IsInitialized() const {
  return true;
}

void CCSUsrMsg_ReloadEffect::InternalSwap(CCSUsrMsg_ReloadEffect* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CCSUsrMsg_ReloadEffect, _impl_.origin_z_)
      + sizeof(CCSUsrMsg_ReloadEffect::_impl_.origin_z_)
      - PROTOBUF_FIELD_OFFSET(CCSUsrMsg_ReloadEffect, _impl_.actanim_)>(
          reinterpret_cast<char*>(&_impl_.actanim_),
          reinterpret_cast<char*>(&other->_impl_.actanim_));
  swap(_impl_.entidx_, other->_impl_.entidx_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CCSUsrMsg_ReloadEffect::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cstrike15_5fusermessages_2eproto_getter, &descriptor_table_cstrike15_5fusermessages_2eproto_once,
      file_level_metadata_cstrike15_5fusermessages_2eproto[23]);
}

// ===================================================================

class CCSUsrMsg_WeaponSound::_Internal {
 public:
  using HasBits = decltype(std::declval<CCSUsrMsg_WeaponSound>()._impl_._has_bits_);
  static void set_has_entidx(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_origin_x(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_origin_y(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_origin_z(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_sound(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_game_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_source_soundscapeid(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

CCSUsrMsg_WeaponSound::CCSUsrMsg_WeaponSound(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CCSUsrMsg_WeaponSound)
}
CCSUsrMsg_WeaponSound::CCSUsrMsg_WeaponSound(const CCSUsrMsg_WeaponSound& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CCSUsrMsg_WeaponSound* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.sound_){}
    , decltype(_impl_.origin_x_){}
    , decltype(_impl_.origin_y_){}
    , decltype(_impl_.origin_z_){}
    , decltype(_impl_.game_timestamp_){}
    , decltype(_impl_.source_soundscapeid_){}
    , decltype(_impl_.entidx_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.sound_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sound_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_sound()) {
    _this->_impl_.sound_.Set(from._internal_sound(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.origin_x_, &from._impl_.origin_x_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.entidx_) -
    reinterpret_cast<char*>(&_impl_.origin_x_)) + sizeof(_impl_.entidx_));
  // @@protoc_insertion_point(copy_constructor:CCSUsrMsg_WeaponSound)
}

inline void CCSUsrMsg_WeaponSound::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.sound_){}
    , decltype(_impl_.origin_x_){0}
    , decltype(_impl_.origin_y_){0}
    , decltype(_impl_.origin_z_){0}
    , decltype(_impl_.game_timestamp_){0}
    , decltype(_impl_.source_soundscapeid_){0u}
    , decltype(_impl_.entidx_){-1}
  };
  _impl_.sound_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sound_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CCSUsrMsg_WeaponSound::~CCSUsrMsg_WeaponSound() {
  // @@protoc_insertion_point(destructor:CCSUsrMsg_WeaponSound)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CCSUsrMsg_WeaponSound::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.sound_.Destroy();
}

void CCSUsrMsg_WeaponSound::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CCSUsrMsg_WeaponSound::Clear() {
// @@protoc_insertion_point(message_clear_start:CCSUsrMsg_WeaponSound)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.sound_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000007eu) {
    ::memset(&_impl_.origin_x_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.source_soundscapeid_) -
        reinterpret_cast<char*>(&_impl_.origin_x_)) + sizeof(_impl_.source_soundscapeid_));
    _impl_.entidx_ = -1;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CCSUsrMsg_WeaponSound::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 entidx = 1 [default = -1];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_entidx(&has_bits);
          _impl_.entidx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float origin_x = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _Internal::set_has_origin_x(&has_bits);
          _impl_.origin_x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float origin_y = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _Internal::set_has_origin_y(&has_bits);
          _impl_.origin_y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float origin_z = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          _Internal::set_has_origin_z(&has_bits);
          _impl_.origin_z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional string sound = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_sound();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CCSUsrMsg_WeaponSound.sound");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional float game_timestamp = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 53)) {
          _Internal::set_has_game_timestamp(&has_bits);
          _impl_.game_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional fixed32 source_soundscapeid = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 61)) {
          _Internal::set_has_source_soundscapeid(&has_bits);
          _impl_.source_soundscapeid_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint32_t>(ptr);
          ptr += sizeof(uint32_t);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CCSUsrMsg_WeaponSound::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCSUsrMsg_WeaponSound)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 entidx = 1 [default = -1];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_entidx(), target);
  }

  // optional float origin_x = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_origin_x(), target);
  }

  // optional float origin_y = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_origin_y(), target);
  }

  // optional float origin_z = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(4, this->_internal_origin_z(), target);
  }

  // optional string sound = 5;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_sound().data(), static_cast<int>(this->_internal_sound().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CCSUsrMsg_WeaponSound.sound");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_sound(), target);
  }

  // optional float game_timestamp = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(6, this->_internal_game_timestamp(), target);
  }

  // optional fixed32 source_soundscapeid = 7;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed32ToArray(7, this->_internal_source_soundscapeid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCSUsrMsg_WeaponSound)
  return target;
}

size_t CCSUsrMsg_WeaponSound::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCSUsrMsg_WeaponSound)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional string sound = 5;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_sound());
    }

    // optional float origin_x = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional float origin_y = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

    // optional float origin_z = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

    // optional float game_timestamp = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 4;
    }

    // optional fixed32 source_soundscapeid = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 4;
    }

    // optional int32 entidx = 1 [default = -1];
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_entidx());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CCSUsrMsg_WeaponSound::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CCSUsrMsg_WeaponSound::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CCSUsrMsg_WeaponSound::GetClassData() const { return &_class_data_; }


void CCSUsrMsg_WeaponSound::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CCSUsrMsg_WeaponSound*>(&to_msg);
  auto& from = static_cast<const CCSUsrMsg_WeaponSound&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CCSUsrMsg_WeaponSound)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_sound(from._internal_sound());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.origin_x_ = from._impl_.origin_x_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.origin_y_ = from._impl_.origin_y_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.origin_z_ = from._impl_.origin_z_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.game_timestamp_ = from._impl_.game_timestamp_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.source_soundscapeid_ = from._impl_.source_soundscapeid_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.entidx_ = from._impl_.entidx_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CCSUsrMsg_WeaponSound::CopyFrom(const CCSUsrMsg_WeaponSound& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCSUsrMsg_WeaponSound)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCSUsrMsg_WeaponSound::IsInitialized() const {
  return true;
}

void CCSUsrMsg_WeaponSound::InternalSwap(CCSUsrMsg_WeaponSound* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.sound_, lhs_arena,
      &other->_impl_.sound_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CCSUsrMsg_WeaponSound, _impl_.source_soundscapeid_)
      + sizeof(CCSUsrMsg_WeaponSound::_impl_.source_soundscapeid_)
      - PROTOBUF_FIELD_OFFSET(CCSUsrMsg_WeaponSound, _impl_.origin_x_)>(
          reinterpret_cast<char*>(&_impl_.origin_x_),
          reinterpret_cast<char*>(&other->_impl_.origin_x_));
  swap(_impl_.entidx_, other->_impl_.entidx_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CCSUsrMsg_WeaponSound::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cstrike15_5fusermessages_2eproto_getter, &descriptor_table_cstrike15_5fusermessages_2eproto_once,
      file_level_metadata_cstrike15_5fusermessages_2eproto[24]);
}

// ===================================================================

class CCSUsrMsg_UpdateScreenHealthBar::_Internal {
 public:
  using HasBits = decltype(std::declval<CCSUsrMsg_UpdateScreenHealthBar>()._impl_._has_bits_);
  static void set_has_entidx(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_healthratio_old(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_healthratio_new(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_style(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CCSUsrMsg_UpdateScreenHealthBar::CCSUsrMsg_UpdateScreenHealthBar(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CCSUsrMsg_UpdateScreenHealthBar)
}
CCSUsrMsg_UpdateScreenHealthBar::CCSUsrMsg_UpdateScreenHealthBar(const CCSUsrMsg_UpdateScreenHealthBar& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CCSUsrMsg_UpdateScreenHealthBar* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.healthratio_old_){}
    , decltype(_impl_.healthratio_new_){}
    , decltype(_impl_.style_){}
    , decltype(_impl_.entidx_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.healthratio_old_, &from._impl_.healthratio_old_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.entidx_) -
    reinterpret_cast<char*>(&_impl_.healthratio_old_)) + sizeof(_impl_.entidx_));
  // @@protoc_insertion_point(copy_constructor:CCSUsrMsg_UpdateScreenHealthBar)
}

inline void CCSUsrMsg_UpdateScreenHealthBar::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.healthratio_old_){0}
    , decltype(_impl_.healthratio_new_){0}
    , decltype(_impl_.style_){0}
    , decltype(_impl_.entidx_){-1}
  };
}

CCSUsrMsg_UpdateScreenHealthBar::~CCSUsrMsg_UpdateScreenHealthBar() {
  // @@protoc_insertion_point(destructor:CCSUsrMsg_UpdateScreenHealthBar)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CCSUsrMsg_UpdateScreenHealthBar::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CCSUsrMsg_UpdateScreenHealthBar::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CCSUsrMsg_UpdateScreenHealthBar::Clear() {
// @@protoc_insertion_point(message_clear_start:CCSUsrMsg_UpdateScreenHealthBar)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&_impl_.healthratio_old_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.style_) -
        reinterpret_cast<char*>(&_impl_.healthratio_old_)) + sizeof(_impl_.style_));
    _impl_.entidx_ = -1;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CCSUsrMsg_UpdateScreenHealthBar::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 entidx = 1 [default = -1];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_entidx(&has_bits);
          _impl_.entidx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float healthratio_old = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _Internal::set_has_healthratio_old(&has_bits);
          _impl_.healthratio_old_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float healthratio_new = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _Internal::set_has_healthratio_new(&has_bits);
          _impl_.healthratio_new_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional int32 style = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_style(&has_bits);
          _impl_.style_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CCSUsrMsg_UpdateScreenHealthBar::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCSUsrMsg_UpdateScreenHealthBar)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 entidx = 1 [default = -1];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_entidx(), target);
  }

  // optional float healthratio_old = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_healthratio_old(), target);
  }

  // optional float healthratio_new = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_healthratio_new(), target);
  }

  // optional int32 style = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_style(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCSUsrMsg_UpdateScreenHealthBar)
  return target;
}

size_t CCSUsrMsg_UpdateScreenHealthBar::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCSUsrMsg_UpdateScreenHealthBar)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional float healthratio_old = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 4;
    }

    // optional float healthratio_new = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional int32 style = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_style());
    }

    // optional int32 entidx = 1 [default = -1];
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_entidx());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CCSUsrMsg_UpdateScreenHealthBar::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CCSUsrMsg_UpdateScreenHealthBar::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CCSUsrMsg_UpdateScreenHealthBar::GetClassData() const { return &_class_data_; }


void CCSUsrMsg_UpdateScreenHealthBar::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CCSUsrMsg_UpdateScreenHealthBar*>(&to_msg);
  auto& from = static_cast<const CCSUsrMsg_UpdateScreenHealthBar&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CCSUsrMsg_UpdateScreenHealthBar)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.healthratio_old_ = from._impl_.healthratio_old_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.healthratio_new_ = from._impl_.healthratio_new_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.style_ = from._impl_.style_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.entidx_ = from._impl_.entidx_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CCSUsrMsg_UpdateScreenHealthBar::CopyFrom(const CCSUsrMsg_UpdateScreenHealthBar& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCSUsrMsg_UpdateScreenHealthBar)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCSUsrMsg_UpdateScreenHealthBar::IsInitialized() const {
  return true;
}

void CCSUsrMsg_UpdateScreenHealthBar::InternalSwap(CCSUsrMsg_UpdateScreenHealthBar* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CCSUsrMsg_UpdateScreenHealthBar, _impl_.style_)
      + sizeof(CCSUsrMsg_UpdateScreenHealthBar::_impl_.style_)
      - PROTOBUF_FIELD_OFFSET(CCSUsrMsg_UpdateScreenHealthBar, _impl_.healthratio_old_)>(
          reinterpret_cast<char*>(&_impl_.healthratio_old_),
          reinterpret_cast<char*>(&other->_impl_.healthratio_old_));
  swap(_impl_.entidx_, other->_impl_.entidx_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CCSUsrMsg_UpdateScreenHealthBar::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cstrike15_5fusermessages_2eproto_getter, &descriptor_table_cstrike15_5fusermessages_2eproto_once,
      file_level_metadata_cstrike15_5fusermessages_2eproto[25]);
}

// ===================================================================

class CCSUsrMsg_EntityOutlineHighlight::_Internal {
 public:
  using HasBits = decltype(std::declval<CCSUsrMsg_EntityOutlineHighlight>()._impl_._has_bits_);
  static void set_has_entidx(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_removehighlight(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CCSUsrMsg_EntityOutlineHighlight::CCSUsrMsg_EntityOutlineHighlight(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CCSUsrMsg_EntityOutlineHighlight)
}
CCSUsrMsg_EntityOutlineHighlight::CCSUsrMsg_EntityOutlineHighlight(const CCSUsrMsg_EntityOutlineHighlight& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CCSUsrMsg_EntityOutlineHighlight* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.removehighlight_){}
    , decltype(_impl_.entidx_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.removehighlight_, &from._impl_.removehighlight_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.entidx_) -
    reinterpret_cast<char*>(&_impl_.removehighlight_)) + sizeof(_impl_.entidx_));
  // @@protoc_insertion_point(copy_constructor:CCSUsrMsg_EntityOutlineHighlight)
}

inline void CCSUsrMsg_EntityOutlineHighlight::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.removehighlight_){false}
    , decltype(_impl_.entidx_){-1}
  };
}

CCSUsrMsg_EntityOutlineHighlight::~CCSUsrMsg_EntityOutlineHighlight() {
  // @@protoc_insertion_point(destructor:CCSUsrMsg_EntityOutlineHighlight)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CCSUsrMsg_EntityOutlineHighlight::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CCSUsrMsg_EntityOutlineHighlight::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CCSUsrMsg_EntityOutlineHighlight::Clear() {
// @@protoc_insertion_point(message_clear_start:CCSUsrMsg_EntityOutlineHighlight)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    _impl_.removehighlight_ = false;
    _impl_.entidx_ = -1;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CCSUsrMsg_EntityOutlineHighlight::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 entidx = 1 [default = -1];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_entidx(&has_bits);
          _impl_.entidx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool removehighlight = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_removehighlight(&has_bits);
          _impl_.removehighlight_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CCSUsrMsg_EntityOutlineHighlight::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCSUsrMsg_EntityOutlineHighlight)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 entidx = 1 [default = -1];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_entidx(), target);
  }

  // optional bool removehighlight = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_removehighlight(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCSUsrMsg_EntityOutlineHighlight)
  return target;
}

size_t CCSUsrMsg_EntityOutlineHighlight::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCSUsrMsg_EntityOutlineHighlight)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional bool removehighlight = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 1;
    }

    // optional int32 entidx = 1 [default = -1];
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_entidx());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CCSUsrMsg_EntityOutlineHighlight::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CCSUsrMsg_EntityOutlineHighlight::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CCSUsrMsg_EntityOutlineHighlight::GetClassData() const { return &_class_data_; }


void CCSUsrMsg_EntityOutlineHighlight::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CCSUsrMsg_EntityOutlineHighlight*>(&to_msg);
  auto& from = static_cast<const CCSUsrMsg_EntityOutlineHighlight&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CCSUsrMsg_EntityOutlineHighlight)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.removehighlight_ = from._impl_.removehighlight_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.entidx_ = from._impl_.entidx_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CCSUsrMsg_EntityOutlineHighlight::CopyFrom(const CCSUsrMsg_EntityOutlineHighlight& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCSUsrMsg_EntityOutlineHighlight)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCSUsrMsg_EntityOutlineHighlight::IsInitialized() const {
  return true;
}

void CCSUsrMsg_EntityOutlineHighlight::InternalSwap(CCSUsrMsg_EntityOutlineHighlight* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.removehighlight_, other->_impl_.removehighlight_);
  swap(_impl_.entidx_, other->_impl_.entidx_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CCSUsrMsg_EntityOutlineHighlight::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cstrike15_5fusermessages_2eproto_getter, &descriptor_table_cstrike15_5fusermessages_2eproto_once,
      file_level_metadata_cstrike15_5fusermessages_2eproto[26]);
}

// ===================================================================

class CCSUsrMsg_AdjustMoney::_Internal {
 public:
  using HasBits = decltype(std::declval<CCSUsrMsg_AdjustMoney>()._impl_._has_bits_);
  static void set_has_amount(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CCSUsrMsg_AdjustMoney::CCSUsrMsg_AdjustMoney(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CCSUsrMsg_AdjustMoney)
}
CCSUsrMsg_AdjustMoney::CCSUsrMsg_AdjustMoney(const CCSUsrMsg_AdjustMoney& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CCSUsrMsg_AdjustMoney* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.amount_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.amount_ = from._impl_.amount_;
  // @@protoc_insertion_point(copy_constructor:CCSUsrMsg_AdjustMoney)
}

inline void CCSUsrMsg_AdjustMoney::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.amount_){0}
  };
}

CCSUsrMsg_AdjustMoney::~CCSUsrMsg_AdjustMoney() {
  // @@protoc_insertion_point(destructor:CCSUsrMsg_AdjustMoney)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CCSUsrMsg_AdjustMoney::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CCSUsrMsg_AdjustMoney::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CCSUsrMsg_AdjustMoney::Clear() {
// @@protoc_insertion_point(message_clear_start:CCSUsrMsg_AdjustMoney)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.amount_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CCSUsrMsg_AdjustMoney::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 amount = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_amount(&has_bits);
          _impl_.amount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CCSUsrMsg_AdjustMoney::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCSUsrMsg_AdjustMoney)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 amount = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_amount(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCSUsrMsg_AdjustMoney)
  return target;
}

size_t CCSUsrMsg_AdjustMoney::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCSUsrMsg_AdjustMoney)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int32 amount = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_amount());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CCSUsrMsg_AdjustMoney::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CCSUsrMsg_AdjustMoney::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CCSUsrMsg_AdjustMoney::GetClassData() const { return &_class_data_; }


void CCSUsrMsg_AdjustMoney::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CCSUsrMsg_AdjustMoney*>(&to_msg);
  auto& from = static_cast<const CCSUsrMsg_AdjustMoney&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CCSUsrMsg_AdjustMoney)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_amount()) {
    _this->_internal_set_amount(from._internal_amount());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CCSUsrMsg_AdjustMoney::CopyFrom(const CCSUsrMsg_AdjustMoney& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCSUsrMsg_AdjustMoney)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCSUsrMsg_AdjustMoney::IsInitialized() const {
  return true;
}

void CCSUsrMsg_AdjustMoney::InternalSwap(CCSUsrMsg_AdjustMoney* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.amount_, other->_impl_.amount_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CCSUsrMsg_AdjustMoney::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cstrike15_5fusermessages_2eproto_getter, &descriptor_table_cstrike15_5fusermessages_2eproto_once,
      file_level_metadata_cstrike15_5fusermessages_2eproto[27]);
}

// ===================================================================

class CCSUsrMsg_ReportHit::_Internal {
 public:
  using HasBits = decltype(std::declval<CCSUsrMsg_ReportHit>()._impl_._has_bits_);
  static void set_has_pos_x(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_pos_y(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_pos_z(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CCSUsrMsg_ReportHit::CCSUsrMsg_ReportHit(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CCSUsrMsg_ReportHit)
}
CCSUsrMsg_ReportHit::CCSUsrMsg_ReportHit(const CCSUsrMsg_ReportHit& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CCSUsrMsg_ReportHit* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.pos_x_){}
    , decltype(_impl_.pos_y_){}
    , decltype(_impl_.pos_z_){}
    , decltype(_impl_.timestamp_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.pos_x_, &from._impl_.pos_x_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.timestamp_) -
    reinterpret_cast<char*>(&_impl_.pos_x_)) + sizeof(_impl_.timestamp_));
  // @@protoc_insertion_point(copy_constructor:CCSUsrMsg_ReportHit)
}

inline void CCSUsrMsg_ReportHit::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.pos_x_){0}
    , decltype(_impl_.pos_y_){0}
    , decltype(_impl_.pos_z_){0}
    , decltype(_impl_.timestamp_){0}
  };
}

CCSUsrMsg_ReportHit::~CCSUsrMsg_ReportHit() {
  // @@protoc_insertion_point(destructor:CCSUsrMsg_ReportHit)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CCSUsrMsg_ReportHit::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CCSUsrMsg_ReportHit::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CCSUsrMsg_ReportHit::Clear() {
// @@protoc_insertion_point(message_clear_start:CCSUsrMsg_ReportHit)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&_impl_.pos_x_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.timestamp_) -
        reinterpret_cast<char*>(&_impl_.pos_x_)) + sizeof(_impl_.timestamp_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CCSUsrMsg_ReportHit::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional float pos_x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          _Internal::set_has_pos_x(&has_bits);
          _impl_.pos_x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float pos_y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _Internal::set_has_pos_y(&has_bits);
          _impl_.pos_y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float pos_z = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _Internal::set_has_pos_z(&has_bits);
          _impl_.pos_z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float timestamp = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          _Internal::set_has_timestamp(&has_bits);
          _impl_.timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CCSUsrMsg_ReportHit::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCSUsrMsg_ReportHit)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional float pos_x = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(1, this->_internal_pos_x(), target);
  }

  // optional float pos_y = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_pos_y(), target);
  }

  // optional float pos_z = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_pos_z(), target);
  }

  // optional float timestamp = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(4, this->_internal_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCSUsrMsg_ReportHit)
  return target;
}

size_t CCSUsrMsg_ReportHit::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCSUsrMsg_ReportHit)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional float pos_x = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 4;
    }

    // optional float pos_y = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional float pos_z = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

    // optional float timestamp = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CCSUsrMsg_ReportHit::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CCSUsrMsg_ReportHit::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CCSUsrMsg_ReportHit::GetClassData() const { return &_class_data_; }


void CCSUsrMsg_ReportHit::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CCSUsrMsg_ReportHit*>(&to_msg);
  auto& from = static_cast<const CCSUsrMsg_ReportHit&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CCSUsrMsg_ReportHit)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.pos_x_ = from._impl_.pos_x_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.pos_y_ = from._impl_.pos_y_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.pos_z_ = from._impl_.pos_z_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.timestamp_ = from._impl_.timestamp_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CCSUsrMsg_ReportHit::CopyFrom(const CCSUsrMsg_ReportHit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCSUsrMsg_ReportHit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCSUsrMsg_ReportHit::IsInitialized() const {
  return true;
}

void CCSUsrMsg_ReportHit::InternalSwap(CCSUsrMsg_ReportHit* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CCSUsrMsg_ReportHit, _impl_.timestamp_)
      + sizeof(CCSUsrMsg_ReportHit::_impl_.timestamp_)
      - PROTOBUF_FIELD_OFFSET(CCSUsrMsg_ReportHit, _impl_.pos_x_)>(
          reinterpret_cast<char*>(&_impl_.pos_x_),
          reinterpret_cast<char*>(&other->_impl_.pos_x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CCSUsrMsg_ReportHit::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cstrike15_5fusermessages_2eproto_getter, &descriptor_table_cstrike15_5fusermessages_2eproto_once,
      file_level_metadata_cstrike15_5fusermessages_2eproto[28]);
}

// ===================================================================

class CCSUsrMsg_KillCam::_Internal {
 public:
  using HasBits = decltype(std::declval<CCSUsrMsg_KillCam>()._impl_._has_bits_);
  static void set_has_obs_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_first_target(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_second_target(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CCSUsrMsg_KillCam::CCSUsrMsg_KillCam(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CCSUsrMsg_KillCam)
}
CCSUsrMsg_KillCam::CCSUsrMsg_KillCam(const CCSUsrMsg_KillCam& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CCSUsrMsg_KillCam* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.obs_mode_){}
    , decltype(_impl_.first_target_){}
    , decltype(_impl_.second_target_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.obs_mode_, &from._impl_.obs_mode_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.second_target_) -
    reinterpret_cast<char*>(&_impl_.obs_mode_)) + sizeof(_impl_.second_target_));
  // @@protoc_insertion_point(copy_constructor:CCSUsrMsg_KillCam)
}

inline void CCSUsrMsg_KillCam::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.obs_mode_){0}
    , decltype(_impl_.first_target_){-1}
    , decltype(_impl_.second_target_){-1}
  };
}

CCSUsrMsg_KillCam::~CCSUsrMsg_KillCam() {
  // @@protoc_insertion_point(destructor:CCSUsrMsg_KillCam)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CCSUsrMsg_KillCam::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CCSUsrMsg_KillCam::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CCSUsrMsg_KillCam::Clear() {
// @@protoc_insertion_point(message_clear_start:CCSUsrMsg_KillCam)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    _impl_.obs_mode_ = 0;
    _impl_.first_target_ = -1;
    _impl_.second_target_ = -1;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CCSUsrMsg_KillCam::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 obs_mode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_obs_mode(&has_bits);
          _impl_.obs_mode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 first_target = 2 [default = -1];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_first_target(&has_bits);
          _impl_.first_target_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 second_target = 3 [default = -1];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_second_target(&has_bits);
          _impl_.second_target_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CCSUsrMsg_KillCam::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCSUsrMsg_KillCam)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 obs_mode = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_obs_mode(), target);
  }

  // optional int32 first_target = 2 [default = -1];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_first_target(), target);
  }

  // optional int32 second_target = 3 [default = -1];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_second_target(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCSUsrMsg_KillCam)
  return target;
}

size_t CCSUsrMsg_KillCam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCSUsrMsg_KillCam)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional int32 obs_mode = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_obs_mode());
    }

    // optional int32 first_target = 2 [default = -1];
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_first_target());
    }

    // optional int32 second_target = 3 [default = -1];
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_second_target());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CCSUsrMsg_KillCam::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CCSUsrMsg_KillCam::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CCSUsrMsg_KillCam::GetClassData() const { return &_class_data_; }


void CCSUsrMsg_KillCam::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CCSUsrMsg_KillCam*>(&to_msg);
  auto& from = static_cast<const CCSUsrMsg_KillCam&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CCSUsrMsg_KillCam)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.obs_mode_ = from._impl_.obs_mode_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.first_target_ = from._impl_.first_target_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.second_target_ = from._impl_.second_target_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CCSUsrMsg_KillCam::CopyFrom(const CCSUsrMsg_KillCam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCSUsrMsg_KillCam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCSUsrMsg_KillCam::IsInitialized() const {
  return true;
}

void CCSUsrMsg_KillCam::InternalSwap(CCSUsrMsg_KillCam* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.obs_mode_, other->_impl_.obs_mode_);
  swap(_impl_.first_target_, other->_impl_.first_target_);
  swap(_impl_.second_target_, other->_impl_.second_target_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CCSUsrMsg_KillCam::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cstrike15_5fusermessages_2eproto_getter, &descriptor_table_cstrike15_5fusermessages_2eproto_once,
      file_level_metadata_cstrike15_5fusermessages_2eproto[29]);
}

// ===================================================================

class CCSUsrMsg_DesiredTimescale::_Internal {
 public:
  using HasBits = decltype(std::declval<CCSUsrMsg_DesiredTimescale>()._impl_._has_bits_);
  static void set_has_desired_timescale(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_duration_realtime_sec(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_interpolator_type(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_start_blend_time(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

CCSUsrMsg_DesiredTimescale::CCSUsrMsg_DesiredTimescale(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CCSUsrMsg_DesiredTimescale)
}
CCSUsrMsg_DesiredTimescale::CCSUsrMsg_DesiredTimescale(const CCSUsrMsg_DesiredTimescale& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CCSUsrMsg_DesiredTimescale* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.desired_timescale_){}
    , decltype(_impl_.duration_realtime_sec_){}
    , decltype(_impl_.interpolator_type_){}
    , decltype(_impl_.start_blend_time_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.desired_timescale_, &from._impl_.desired_timescale_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.start_blend_time_) -
    reinterpret_cast<char*>(&_impl_.desired_timescale_)) + sizeof(_impl_.start_blend_time_));
  // @@protoc_insertion_point(copy_constructor:CCSUsrMsg_DesiredTimescale)
}

inline void CCSUsrMsg_DesiredTimescale::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.desired_timescale_){0}
    , decltype(_impl_.duration_realtime_sec_){0}
    , decltype(_impl_.interpolator_type_){0}
    , decltype(_impl_.start_blend_time_){0}
  };
}

CCSUsrMsg_DesiredTimescale::~CCSUsrMsg_DesiredTimescale() {
  // @@protoc_insertion_point(destructor:CCSUsrMsg_DesiredTimescale)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CCSUsrMsg_DesiredTimescale::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CCSUsrMsg_DesiredTimescale::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CCSUsrMsg_DesiredTimescale::Clear() {
// @@protoc_insertion_point(message_clear_start:CCSUsrMsg_DesiredTimescale)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&_impl_.desired_timescale_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.start_blend_time_) -
        reinterpret_cast<char*>(&_impl_.desired_timescale_)) + sizeof(_impl_.start_blend_time_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CCSUsrMsg_DesiredTimescale::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional float desired_timescale = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          _Internal::set_has_desired_timescale(&has_bits);
          _impl_.desired_timescale_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float duration_realtime_sec = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _Internal::set_has_duration_realtime_sec(&has_bits);
          _impl_.duration_realtime_sec_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional int32 interpolator_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_interpolator_type(&has_bits);
          _impl_.interpolator_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float start_blend_time = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          _Internal::set_has_start_blend_time(&has_bits);
          _impl_.start_blend_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CCSUsrMsg_DesiredTimescale::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCSUsrMsg_DesiredTimescale)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional float desired_timescale = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(1, this->_internal_desired_timescale(), target);
  }

  // optional float duration_realtime_sec = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_duration_realtime_sec(), target);
  }

  // optional int32 interpolator_type = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_interpolator_type(), target);
  }

  // optional float start_blend_time = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(4, this->_internal_start_blend_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCSUsrMsg_DesiredTimescale)
  return target;
}

size_t CCSUsrMsg_DesiredTimescale::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCSUsrMsg_DesiredTimescale)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional float desired_timescale = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 4;
    }

    // optional float duration_realtime_sec = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional int32 interpolator_type = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_interpolator_type());
    }

    // optional float start_blend_time = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CCSUsrMsg_DesiredTimescale::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CCSUsrMsg_DesiredTimescale::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CCSUsrMsg_DesiredTimescale::GetClassData() const { return &_class_data_; }


void CCSUsrMsg_DesiredTimescale::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CCSUsrMsg_DesiredTimescale*>(&to_msg);
  auto& from = static_cast<const CCSUsrMsg_DesiredTimescale&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CCSUsrMsg_DesiredTimescale)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.desired_timescale_ = from._impl_.desired_timescale_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.duration_realtime_sec_ = from._impl_.duration_realtime_sec_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.interpolator_type_ = from._impl_.interpolator_type_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.start_blend_time_ = from._impl_.start_blend_time_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CCSUsrMsg_DesiredTimescale::CopyFrom(const CCSUsrMsg_DesiredTimescale& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCSUsrMsg_DesiredTimescale)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCSUsrMsg_DesiredTimescale::IsInitialized() const {
  return true;
}

void CCSUsrMsg_DesiredTimescale::InternalSwap(CCSUsrMsg_DesiredTimescale* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CCSUsrMsg_DesiredTimescale, _impl_.start_blend_time_)
      + sizeof(CCSUsrMsg_DesiredTimescale::_impl_.start_blend_time_)
      - PROTOBUF_FIELD_OFFSET(CCSUsrMsg_DesiredTimescale, _impl_.desired_timescale_)>(
          reinterpret_cast<char*>(&_impl_.desired_timescale_),
          reinterpret_cast<char*>(&other->_impl_.desired_timescale_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CCSUsrMsg_DesiredTimescale::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cstrike15_5fusermessages_2eproto_getter, &descriptor_table_cstrike15_5fusermessages_2eproto_once,
      file_level_metadata_cstrike15_5fusermessages_2eproto[30]);
}

// ===================================================================

class CCSUsrMsg_CurrentTimescale::_Internal {
 public:
  using HasBits = decltype(std::declval<CCSUsrMsg_CurrentTimescale>()._impl_._has_bits_);
  static void set_has_cur_timescale(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CCSUsrMsg_CurrentTimescale::CCSUsrMsg_CurrentTimescale(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CCSUsrMsg_CurrentTimescale)
}
CCSUsrMsg_CurrentTimescale::CCSUsrMsg_CurrentTimescale(const CCSUsrMsg_CurrentTimescale& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CCSUsrMsg_CurrentTimescale* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.cur_timescale_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.cur_timescale_ = from._impl_.cur_timescale_;
  // @@protoc_insertion_point(copy_constructor:CCSUsrMsg_CurrentTimescale)
}

inline void CCSUsrMsg_CurrentTimescale::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.cur_timescale_){0}
  };
}

CCSUsrMsg_CurrentTimescale::~CCSUsrMsg_CurrentTimescale() {
  // @@protoc_insertion_point(destructor:CCSUsrMsg_CurrentTimescale)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CCSUsrMsg_CurrentTimescale::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CCSUsrMsg_CurrentTimescale::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CCSUsrMsg_CurrentTimescale::Clear() {
// @@protoc_insertion_point(message_clear_start:CCSUsrMsg_CurrentTimescale)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.cur_timescale_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CCSUsrMsg_CurrentTimescale::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional float cur_timescale = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          _Internal::set_has_cur_timescale(&has_bits);
          _impl_.cur_timescale_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CCSUsrMsg_CurrentTimescale::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCSUsrMsg_CurrentTimescale)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional float cur_timescale = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(1, this->_internal_cur_timescale(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCSUsrMsg_CurrentTimescale)
  return target;
}

size_t CCSUsrMsg_CurrentTimescale::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCSUsrMsg_CurrentTimescale)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional float cur_timescale = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CCSUsrMsg_CurrentTimescale::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CCSUsrMsg_CurrentTimescale::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CCSUsrMsg_CurrentTimescale::GetClassData() const { return &_class_data_; }


void CCSUsrMsg_CurrentTimescale::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CCSUsrMsg_CurrentTimescale*>(&to_msg);
  auto& from = static_cast<const CCSUsrMsg_CurrentTimescale&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CCSUsrMsg_CurrentTimescale)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_cur_timescale()) {
    _this->_internal_set_cur_timescale(from._internal_cur_timescale());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CCSUsrMsg_CurrentTimescale::CopyFrom(const CCSUsrMsg_CurrentTimescale& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCSUsrMsg_CurrentTimescale)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCSUsrMsg_CurrentTimescale::IsInitialized() const {
  return true;
}

void CCSUsrMsg_CurrentTimescale::InternalSwap(CCSUsrMsg_CurrentTimescale* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.cur_timescale_, other->_impl_.cur_timescale_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CCSUsrMsg_CurrentTimescale::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cstrike15_5fusermessages_2eproto_getter, &descriptor_table_cstrike15_5fusermessages_2eproto_once,
      file_level_metadata_cstrike15_5fusermessages_2eproto[31]);
}

// ===================================================================

class CCSUsrMsg_AchievementEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<CCSUsrMsg_AchievementEvent>()._impl_._has_bits_);
  static void set_has_achievement(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_count(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_user_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CCSUsrMsg_AchievementEvent::CCSUsrMsg_AchievementEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CCSUsrMsg_AchievementEvent)
}
CCSUsrMsg_AchievementEvent::CCSUsrMsg_AchievementEvent(const CCSUsrMsg_AchievementEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CCSUsrMsg_AchievementEvent* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.achievement_){}
    , decltype(_impl_.count_){}
    , decltype(_impl_.user_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.achievement_, &from._impl_.achievement_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.user_id_) -
    reinterpret_cast<char*>(&_impl_.achievement_)) + sizeof(_impl_.user_id_));
  // @@protoc_insertion_point(copy_constructor:CCSUsrMsg_AchievementEvent)
}

inline void CCSUsrMsg_AchievementEvent::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.achievement_){0}
    , decltype(_impl_.count_){0}
    , decltype(_impl_.user_id_){0}
  };
}

CCSUsrMsg_AchievementEvent::~CCSUsrMsg_AchievementEvent() {
  // @@protoc_insertion_point(destructor:CCSUsrMsg_AchievementEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CCSUsrMsg_AchievementEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CCSUsrMsg_AchievementEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CCSUsrMsg_AchievementEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:CCSUsrMsg_AchievementEvent)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.achievement_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.user_id_) -
        reinterpret_cast<char*>(&_impl_.achievement_)) + sizeof(_impl_.user_id_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CCSUsrMsg_AchievementEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 achievement = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_achievement(&has_bits);
          _impl_.achievement_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_count(&has_bits);
          _impl_.count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 user_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_user_id(&has_bits);
          _impl_.user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CCSUsrMsg_AchievementEvent::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCSUsrMsg_AchievementEvent)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 achievement = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_achievement(), target);
  }

  // optional int32 count = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_count(), target);
  }

  // optional int32 user_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_user_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCSUsrMsg_AchievementEvent)
  return target;
}

size_t CCSUsrMsg_AchievementEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCSUsrMsg_AchievementEvent)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional int32 achievement = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_achievement());
    }

    // optional int32 count = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_count());
    }

    // optional int32 user_id = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_user_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CCSUsrMsg_AchievementEvent::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CCSUsrMsg_AchievementEvent::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CCSUsrMsg_AchievementEvent::GetClassData() const { return &_class_data_; }


void CCSUsrMsg_AchievementEvent::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CCSUsrMsg_AchievementEvent*>(&to_msg);
  auto& from = static_cast<const CCSUsrMsg_AchievementEvent&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CCSUsrMsg_AchievementEvent)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.achievement_ = from._impl_.achievement_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.count_ = from._impl_.count_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.user_id_ = from._impl_.user_id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CCSUsrMsg_AchievementEvent::CopyFrom(const CCSUsrMsg_AchievementEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCSUsrMsg_AchievementEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCSUsrMsg_AchievementEvent::IsInitialized() const {
  return true;
}

void CCSUsrMsg_AchievementEvent::InternalSwap(CCSUsrMsg_AchievementEvent* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CCSUsrMsg_AchievementEvent, _impl_.user_id_)
      + sizeof(CCSUsrMsg_AchievementEvent::_impl_.user_id_)
      - PROTOBUF_FIELD_OFFSET(CCSUsrMsg_AchievementEvent, _impl_.achievement_)>(
          reinterpret_cast<char*>(&_impl_.achievement_),
          reinterpret_cast<char*>(&other->_impl_.achievement_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CCSUsrMsg_AchievementEvent::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cstrike15_5fusermessages_2eproto_getter, &descriptor_table_cstrike15_5fusermessages_2eproto_once,
      file_level_metadata_cstrike15_5fusermessages_2eproto[32]);
}

// ===================================================================

class CCSUsrMsg_MatchEndConditions::_Internal {
 public:
  using HasBits = decltype(std::declval<CCSUsrMsg_MatchEndConditions>()._impl_._has_bits_);
  static void set_has_fraglimit(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_mp_maxrounds(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_mp_winlimit(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_mp_timelimit(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

CCSUsrMsg_MatchEndConditions::CCSUsrMsg_MatchEndConditions(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CCSUsrMsg_MatchEndConditions)
}
CCSUsrMsg_MatchEndConditions::CCSUsrMsg_MatchEndConditions(const CCSUsrMsg_MatchEndConditions& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CCSUsrMsg_MatchEndConditions* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.fraglimit_){}
    , decltype(_impl_.mp_maxrounds_){}
    , decltype(_impl_.mp_winlimit_){}
    , decltype(_impl_.mp_timelimit_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.fraglimit_, &from._impl_.fraglimit_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.mp_timelimit_) -
    reinterpret_cast<char*>(&_impl_.fraglimit_)) + sizeof(_impl_.mp_timelimit_));
  // @@protoc_insertion_point(copy_constructor:CCSUsrMsg_MatchEndConditions)
}

inline void CCSUsrMsg_MatchEndConditions::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.fraglimit_){0}
    , decltype(_impl_.mp_maxrounds_){0}
    , decltype(_impl_.mp_winlimit_){0}
    , decltype(_impl_.mp_timelimit_){0}
  };
}

CCSUsrMsg_MatchEndConditions::~CCSUsrMsg_MatchEndConditions() {
  // @@protoc_insertion_point(destructor:CCSUsrMsg_MatchEndConditions)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CCSUsrMsg_MatchEndConditions::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CCSUsrMsg_MatchEndConditions::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CCSUsrMsg_MatchEndConditions::Clear() {
// @@protoc_insertion_point(message_clear_start:CCSUsrMsg_MatchEndConditions)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&_impl_.fraglimit_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.mp_timelimit_) -
        reinterpret_cast<char*>(&_impl_.fraglimit_)) + sizeof(_impl_.mp_timelimit_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CCSUsrMsg_MatchEndConditions::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 fraglimit = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_fraglimit(&has_bits);
          _impl_.fraglimit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 mp_maxrounds = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_mp_maxrounds(&has_bits);
          _impl_.mp_maxrounds_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 mp_winlimit = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_mp_winlimit(&has_bits);
          _impl_.mp_winlimit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float mp_timelimit = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          _Internal::set_has_mp_timelimit(&has_bits);
          _impl_.mp_timelimit_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CCSUsrMsg_MatchEndConditions::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCSUsrMsg_MatchEndConditions)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 fraglimit = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_fraglimit(), target);
  }

  // optional int32 mp_maxrounds = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_mp_maxrounds(), target);
  }

  // optional int32 mp_winlimit = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_mp_winlimit(), target);
  }

  // optional float mp_timelimit = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(4, this->_internal_mp_timelimit(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCSUsrMsg_MatchEndConditions)
  return target;
}

size_t CCSUsrMsg_MatchEndConditions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCSUsrMsg_MatchEndConditions)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional int32 fraglimit = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_fraglimit());
    }

    // optional int32 mp_maxrounds = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_mp_maxrounds());
    }

    // optional int32 mp_winlimit = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_mp_winlimit());
    }

    // optional float mp_timelimit = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CCSUsrMsg_MatchEndConditions::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CCSUsrMsg_MatchEndConditions::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CCSUsrMsg_MatchEndConditions::GetClassData() const { return &_class_data_; }


void CCSUsrMsg_MatchEndConditions::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CCSUsrMsg_MatchEndConditions*>(&to_msg);
  auto& from = static_cast<const CCSUsrMsg_MatchEndConditions&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CCSUsrMsg_MatchEndConditions)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.fraglimit_ = from._impl_.fraglimit_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.mp_maxrounds_ = from._impl_.mp_maxrounds_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.mp_winlimit_ = from._impl_.mp_winlimit_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.mp_timelimit_ = from._impl_.mp_timelimit_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CCSUsrMsg_MatchEndConditions::CopyFrom(const CCSUsrMsg_MatchEndConditions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCSUsrMsg_MatchEndConditions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCSUsrMsg_MatchEndConditions::IsInitialized() const {
  return true;
}

void CCSUsrMsg_MatchEndConditions::InternalSwap(CCSUsrMsg_MatchEndConditions* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CCSUsrMsg_MatchEndConditions, _impl_.mp_timelimit_)
      + sizeof(CCSUsrMsg_MatchEndConditions::_impl_.mp_timelimit_)
      - PROTOBUF_FIELD_OFFSET(CCSUsrMsg_MatchEndConditions, _impl_.fraglimit_)>(
          reinterpret_cast<char*>(&_impl_.fraglimit_),
          reinterpret_cast<char*>(&other->_impl_.fraglimit_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CCSUsrMsg_MatchEndConditions::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cstrike15_5fusermessages_2eproto_getter, &descriptor_table_cstrike15_5fusermessages_2eproto_once,
      file_level_metadata_cstrike15_5fusermessages_2eproto[33]);
}

// ===================================================================

class CCSUsrMsg_PlayerStatsUpdate_Stat::_Internal {
 public:
  using HasBits = decltype(std::declval<CCSUsrMsg_PlayerStatsUpdate_Stat>()._impl_._has_bits_);
  static void set_has_idx(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_delta(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CCSUsrMsg_PlayerStatsUpdate_Stat::CCSUsrMsg_PlayerStatsUpdate_Stat(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CCSUsrMsg_PlayerStatsUpdate.Stat)
}
CCSUsrMsg_PlayerStatsUpdate_Stat::CCSUsrMsg_PlayerStatsUpdate_Stat(const CCSUsrMsg_PlayerStatsUpdate_Stat& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CCSUsrMsg_PlayerStatsUpdate_Stat* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.idx_){}
    , decltype(_impl_.delta_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.idx_, &from._impl_.idx_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.delta_) -
    reinterpret_cast<char*>(&_impl_.idx_)) + sizeof(_impl_.delta_));
  // @@protoc_insertion_point(copy_constructor:CCSUsrMsg_PlayerStatsUpdate.Stat)
}

inline void CCSUsrMsg_PlayerStatsUpdate_Stat::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.idx_){0}
    , decltype(_impl_.delta_){0}
  };
}

CCSUsrMsg_PlayerStatsUpdate_Stat::~CCSUsrMsg_PlayerStatsUpdate_Stat() {
  // @@protoc_insertion_point(destructor:CCSUsrMsg_PlayerStatsUpdate.Stat)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CCSUsrMsg_PlayerStatsUpdate_Stat::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CCSUsrMsg_PlayerStatsUpdate_Stat::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CCSUsrMsg_PlayerStatsUpdate_Stat::Clear() {
// @@protoc_insertion_point(message_clear_start:CCSUsrMsg_PlayerStatsUpdate.Stat)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.idx_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.delta_) -
        reinterpret_cast<char*>(&_impl_.idx_)) + sizeof(_impl_.delta_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CCSUsrMsg_PlayerStatsUpdate_Stat::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 idx = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_idx(&has_bits);
          _impl_.idx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 delta = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_delta(&has_bits);
          _impl_.delta_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CCSUsrMsg_PlayerStatsUpdate_Stat::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCSUsrMsg_PlayerStatsUpdate.Stat)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 idx = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_idx(), target);
  }

  // optional int32 delta = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_delta(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCSUsrMsg_PlayerStatsUpdate.Stat)
  return target;
}

size_t CCSUsrMsg_PlayerStatsUpdate_Stat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCSUsrMsg_PlayerStatsUpdate.Stat)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int32 idx = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_idx());
    }

    // optional int32 delta = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_delta());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CCSUsrMsg_PlayerStatsUpdate_Stat::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CCSUsrMsg_PlayerStatsUpdate_Stat::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CCSUsrMsg_PlayerStatsUpdate_Stat::GetClassData() const { return &_class_data_; }


void CCSUsrMsg_PlayerStatsUpdate_Stat::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CCSUsrMsg_PlayerStatsUpdate_Stat*>(&to_msg);
  auto& from = static_cast<const CCSUsrMsg_PlayerStatsUpdate_Stat&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CCSUsrMsg_PlayerStatsUpdate.Stat)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.idx_ = from._impl_.idx_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.delta_ = from._impl_.delta_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CCSUsrMsg_PlayerStatsUpdate_Stat::CopyFrom(const CCSUsrMsg_PlayerStatsUpdate_Stat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCSUsrMsg_PlayerStatsUpdate.Stat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCSUsrMsg_PlayerStatsUpdate_Stat::IsInitialized() const {
  return true;
}

void CCSUsrMsg_PlayerStatsUpdate_Stat::InternalSwap(CCSUsrMsg_PlayerStatsUpdate_Stat* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CCSUsrMsg_PlayerStatsUpdate_Stat, _impl_.delta_)
      + sizeof(CCSUsrMsg_PlayerStatsUpdate_Stat::_impl_.delta_)
      - PROTOBUF_FIELD_OFFSET(CCSUsrMsg_PlayerStatsUpdate_Stat, _impl_.idx_)>(
          reinterpret_cast<char*>(&_impl_.idx_),
          reinterpret_cast<char*>(&other->_impl_.idx_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CCSUsrMsg_PlayerStatsUpdate_Stat::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cstrike15_5fusermessages_2eproto_getter, &descriptor_table_cstrike15_5fusermessages_2eproto_once,
      file_level_metadata_cstrike15_5fusermessages_2eproto[34]);
}

// ===================================================================

class CCSUsrMsg_PlayerStatsUpdate::_Internal {
 public:
  using HasBits = decltype(std::declval<CCSUsrMsg_PlayerStatsUpdate>()._impl_._has_bits_);
  static void set_has_version(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_ehandle(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_crc(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CCSUsrMsg_PlayerStatsUpdate::CCSUsrMsg_PlayerStatsUpdate(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CCSUsrMsg_PlayerStatsUpdate)
}
CCSUsrMsg_PlayerStatsUpdate::CCSUsrMsg_PlayerStatsUpdate(const CCSUsrMsg_PlayerStatsUpdate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CCSUsrMsg_PlayerStatsUpdate* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.stats_){from._impl_.stats_}
    , decltype(_impl_.version_){}
    , decltype(_impl_.ehandle_){}
    , decltype(_impl_.crc_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.version_, &from._impl_.version_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.crc_) -
    reinterpret_cast<char*>(&_impl_.version_)) + sizeof(_impl_.crc_));
  // @@protoc_insertion_point(copy_constructor:CCSUsrMsg_PlayerStatsUpdate)
}

inline void CCSUsrMsg_PlayerStatsUpdate::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.stats_){arena}
    , decltype(_impl_.version_){0}
    , decltype(_impl_.ehandle_){0u}
    , decltype(_impl_.crc_){0}
  };
}

CCSUsrMsg_PlayerStatsUpdate::~CCSUsrMsg_PlayerStatsUpdate() {
  // @@protoc_insertion_point(destructor:CCSUsrMsg_PlayerStatsUpdate)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CCSUsrMsg_PlayerStatsUpdate::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.stats_.~RepeatedPtrField();
}

void CCSUsrMsg_PlayerStatsUpdate::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CCSUsrMsg_PlayerStatsUpdate::Clear() {
// @@protoc_insertion_point(message_clear_start:CCSUsrMsg_PlayerStatsUpdate)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.stats_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.version_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.crc_) -
        reinterpret_cast<char*>(&_impl_.version_)) + sizeof(_impl_.crc_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CCSUsrMsg_PlayerStatsUpdate::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 version = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_version(&has_bits);
          _impl_.version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .CCSUsrMsg_PlayerStatsUpdate.Stat stats = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_stats(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional uint32 ehandle = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_ehandle(&has_bits);
          _impl_.ehandle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 crc = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_crc(&has_bits);
          _impl_.crc_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CCSUsrMsg_PlayerStatsUpdate::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCSUsrMsg_PlayerStatsUpdate)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 version = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_version(), target);
  }

  // repeated .CCSUsrMsg_PlayerStatsUpdate.Stat stats = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_stats_size()); i < n; i++) {
    const auto& repfield = this->_internal_stats(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional uint32 ehandle = 5;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_ehandle(), target);
  }

  // optional int32 crc = 6;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(6, this->_internal_crc(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCSUsrMsg_PlayerStatsUpdate)
  return target;
}

size_t CCSUsrMsg_PlayerStatsUpdate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCSUsrMsg_PlayerStatsUpdate)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CCSUsrMsg_PlayerStatsUpdate.Stat stats = 4;
  total_size += 1UL * this->_internal_stats_size();
  for (const auto& msg : this->_impl_.stats_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional int32 version = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_version());
    }

    // optional uint32 ehandle = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_ehandle());
    }

    // optional int32 crc = 6;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_crc());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CCSUsrMsg_PlayerStatsUpdate::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CCSUsrMsg_PlayerStatsUpdate::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CCSUsrMsg_PlayerStatsUpdate::GetClassData() const { return &_class_data_; }


void CCSUsrMsg_PlayerStatsUpdate::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CCSUsrMsg_PlayerStatsUpdate*>(&to_msg);
  auto& from = static_cast<const CCSUsrMsg_PlayerStatsUpdate&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CCSUsrMsg_PlayerStatsUpdate)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.stats_.MergeFrom(from._impl_.stats_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.version_ = from._impl_.version_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.ehandle_ = from._impl_.ehandle_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.crc_ = from._impl_.crc_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CCSUsrMsg_PlayerStatsUpdate::CopyFrom(const CCSUsrMsg_PlayerStatsUpdate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCSUsrMsg_PlayerStatsUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCSUsrMsg_PlayerStatsUpdate::IsInitialized() const {
  return true;
}

void CCSUsrMsg_PlayerStatsUpdate::InternalSwap(CCSUsrMsg_PlayerStatsUpdate* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.stats_.InternalSwap(&other->_impl_.stats_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CCSUsrMsg_PlayerStatsUpdate, _impl_.crc_)
      + sizeof(CCSUsrMsg_PlayerStatsUpdate::_impl_.crc_)
      - PROTOBUF_FIELD_OFFSET(CCSUsrMsg_PlayerStatsUpdate, _impl_.version_)>(
          reinterpret_cast<char*>(&_impl_.version_),
          reinterpret_cast<char*>(&other->_impl_.version_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CCSUsrMsg_PlayerStatsUpdate::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cstrike15_5fusermessages_2eproto_getter, &descriptor_table_cstrike15_5fusermessages_2eproto_once,
      file_level_metadata_cstrike15_5fusermessages_2eproto[35]);
}

// ===================================================================

class CCSUsrMsg_QuestProgress::_Internal {
 public:
  using HasBits = decltype(std::declval<CCSUsrMsg_QuestProgress>()._impl_._has_bits_);
  static void set_has_quest_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_normal_points(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_bonus_points(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_is_event_quest(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

CCSUsrMsg_QuestProgress::CCSUsrMsg_QuestProgress(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CCSUsrMsg_QuestProgress)
}
CCSUsrMsg_QuestProgress::CCSUsrMsg_QuestProgress(const CCSUsrMsg_QuestProgress& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CCSUsrMsg_QuestProgress* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.quest_id_){}
    , decltype(_impl_.normal_points_){}
    , decltype(_impl_.bonus_points_){}
    , decltype(_impl_.is_event_quest_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.quest_id_, &from._impl_.quest_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.is_event_quest_) -
    reinterpret_cast<char*>(&_impl_.quest_id_)) + sizeof(_impl_.is_event_quest_));
  // @@protoc_insertion_point(copy_constructor:CCSUsrMsg_QuestProgress)
}

inline void CCSUsrMsg_QuestProgress::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.quest_id_){0u}
    , decltype(_impl_.normal_points_){0u}
    , decltype(_impl_.bonus_points_){0u}
    , decltype(_impl_.is_event_quest_){false}
  };
}

CCSUsrMsg_QuestProgress::~CCSUsrMsg_QuestProgress() {
  // @@protoc_insertion_point(destructor:CCSUsrMsg_QuestProgress)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CCSUsrMsg_QuestProgress::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CCSUsrMsg_QuestProgress::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CCSUsrMsg_QuestProgress::Clear() {
// @@protoc_insertion_point(message_clear_start:CCSUsrMsg_QuestProgress)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&_impl_.quest_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.is_event_quest_) -
        reinterpret_cast<char*>(&_impl_.quest_id_)) + sizeof(_impl_.is_event_quest_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CCSUsrMsg_QuestProgress::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 quest_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_quest_id(&has_bits);
          _impl_.quest_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 normal_points = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_normal_points(&has_bits);
          _impl_.normal_points_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 bonus_points = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_bonus_points(&has_bits);
          _impl_.bonus_points_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_event_quest = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_is_event_quest(&has_bits);
          _impl_.is_event_quest_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CCSUsrMsg_QuestProgress::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCSUsrMsg_QuestProgress)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 quest_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_quest_id(), target);
  }

  // optional uint32 normal_points = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_normal_points(), target);
  }

  // optional uint32 bonus_points = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_bonus_points(), target);
  }

  // optional bool is_event_quest = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_is_event_quest(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCSUsrMsg_QuestProgress)
  return target;
}

size_t CCSUsrMsg_QuestProgress::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCSUsrMsg_QuestProgress)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional uint32 quest_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_quest_id());
    }

    // optional uint32 normal_points = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_normal_points());
    }

    // optional uint32 bonus_points = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_bonus_points());
    }

    // optional bool is_event_quest = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CCSUsrMsg_QuestProgress::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CCSUsrMsg_QuestProgress::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CCSUsrMsg_QuestProgress::GetClassData() const { return &_class_data_; }


void CCSUsrMsg_QuestProgress::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CCSUsrMsg_QuestProgress*>(&to_msg);
  auto& from = static_cast<const CCSUsrMsg_QuestProgress&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CCSUsrMsg_QuestProgress)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.quest_id_ = from._impl_.quest_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.normal_points_ = from._impl_.normal_points_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.bonus_points_ = from._impl_.bonus_points_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.is_event_quest_ = from._impl_.is_event_quest_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CCSUsrMsg_QuestProgress::CopyFrom(const CCSUsrMsg_QuestProgress& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCSUsrMsg_QuestProgress)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCSUsrMsg_QuestProgress::IsInitialized() const {
  return true;
}

void CCSUsrMsg_QuestProgress::InternalSwap(CCSUsrMsg_QuestProgress* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CCSUsrMsg_QuestProgress, _impl_.is_event_quest_)
      + sizeof(CCSUsrMsg_QuestProgress::_impl_.is_event_quest_)
      - PROTOBUF_FIELD_OFFSET(CCSUsrMsg_QuestProgress, _impl_.quest_id_)>(
          reinterpret_cast<char*>(&_impl_.quest_id_),
          reinterpret_cast<char*>(&other->_impl_.quest_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CCSUsrMsg_QuestProgress::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cstrike15_5fusermessages_2eproto_getter, &descriptor_table_cstrike15_5fusermessages_2eproto_once,
      file_level_metadata_cstrike15_5fusermessages_2eproto[36]);
}

// ===================================================================

class CCSUsrMsg_ScoreLeaderboardData::_Internal {
 public:
  using HasBits = decltype(std::declval<CCSUsrMsg_ScoreLeaderboardData>()._impl_._has_bits_);
  static const ::ScoreLeaderboardData& data(const CCSUsrMsg_ScoreLeaderboardData* msg);
  static void set_has_data(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::ScoreLeaderboardData&
CCSUsrMsg_ScoreLeaderboardData::_Internal::data(const CCSUsrMsg_ScoreLeaderboardData* msg) {
  return *msg->_impl_.data_;
}
void CCSUsrMsg_ScoreLeaderboardData::clear_data() {
  if (_impl_.data_ != nullptr) _impl_.data_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
CCSUsrMsg_ScoreLeaderboardData::CCSUsrMsg_ScoreLeaderboardData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CCSUsrMsg_ScoreLeaderboardData)
}
CCSUsrMsg_ScoreLeaderboardData::CCSUsrMsg_ScoreLeaderboardData(const CCSUsrMsg_ScoreLeaderboardData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CCSUsrMsg_ScoreLeaderboardData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.data_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_data()) {
    _this->_impl_.data_ = new ::ScoreLeaderboardData(*from._impl_.data_);
  }
  // @@protoc_insertion_point(copy_constructor:CCSUsrMsg_ScoreLeaderboardData)
}

inline void CCSUsrMsg_ScoreLeaderboardData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.data_){nullptr}
  };
}

CCSUsrMsg_ScoreLeaderboardData::~CCSUsrMsg_ScoreLeaderboardData() {
  // @@protoc_insertion_point(destructor:CCSUsrMsg_ScoreLeaderboardData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CCSUsrMsg_ScoreLeaderboardData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.data_;
}

void CCSUsrMsg_ScoreLeaderboardData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CCSUsrMsg_ScoreLeaderboardData::Clear() {
// @@protoc_insertion_point(message_clear_start:CCSUsrMsg_ScoreLeaderboardData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.data_ != nullptr);
    _impl_.data_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CCSUsrMsg_ScoreLeaderboardData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .ScoreLeaderboardData data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_data(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CCSUsrMsg_ScoreLeaderboardData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCSUsrMsg_ScoreLeaderboardData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .ScoreLeaderboardData data = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::data(this),
        _Internal::data(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCSUsrMsg_ScoreLeaderboardData)
  return target;
}

size_t CCSUsrMsg_ScoreLeaderboardData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCSUsrMsg_ScoreLeaderboardData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .ScoreLeaderboardData data = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.data_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CCSUsrMsg_ScoreLeaderboardData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CCSUsrMsg_ScoreLeaderboardData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CCSUsrMsg_ScoreLeaderboardData::GetClassData() const { return &_class_data_; }


void CCSUsrMsg_ScoreLeaderboardData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CCSUsrMsg_ScoreLeaderboardData*>(&to_msg);
  auto& from = static_cast<const CCSUsrMsg_ScoreLeaderboardData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CCSUsrMsg_ScoreLeaderboardData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_data()) {
    _this->_internal_mutable_data()->::ScoreLeaderboardData::MergeFrom(
        from._internal_data());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CCSUsrMsg_ScoreLeaderboardData::CopyFrom(const CCSUsrMsg_ScoreLeaderboardData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCSUsrMsg_ScoreLeaderboardData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCSUsrMsg_ScoreLeaderboardData::IsInitialized() const {
  return true;
}

void CCSUsrMsg_ScoreLeaderboardData::InternalSwap(CCSUsrMsg_ScoreLeaderboardData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.data_, other->_impl_.data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CCSUsrMsg_ScoreLeaderboardData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cstrike15_5fusermessages_2eproto_getter, &descriptor_table_cstrike15_5fusermessages_2eproto_once,
      file_level_metadata_cstrike15_5fusermessages_2eproto[37]);
}

// ===================================================================

class CCSUsrMsg_PlayerDecalDigitalSignature::_Internal {
 public:
  using HasBits = decltype(std::declval<CCSUsrMsg_PlayerDecalDigitalSignature>()._impl_._has_bits_);
  static const ::PlayerDecalDigitalSignature& data(const CCSUsrMsg_PlayerDecalDigitalSignature* msg);
  static void set_has_data(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::PlayerDecalDigitalSignature&
CCSUsrMsg_PlayerDecalDigitalSignature::_Internal::data(const CCSUsrMsg_PlayerDecalDigitalSignature* msg) {
  return *msg->_impl_.data_;
}
void CCSUsrMsg_PlayerDecalDigitalSignature::clear_data() {
  if (_impl_.data_ != nullptr) _impl_.data_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
CCSUsrMsg_PlayerDecalDigitalSignature::CCSUsrMsg_PlayerDecalDigitalSignature(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CCSUsrMsg_PlayerDecalDigitalSignature)
}
CCSUsrMsg_PlayerDecalDigitalSignature::CCSUsrMsg_PlayerDecalDigitalSignature(const CCSUsrMsg_PlayerDecalDigitalSignature& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CCSUsrMsg_PlayerDecalDigitalSignature* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.data_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_data()) {
    _this->_impl_.data_ = new ::PlayerDecalDigitalSignature(*from._impl_.data_);
  }
  // @@protoc_insertion_point(copy_constructor:CCSUsrMsg_PlayerDecalDigitalSignature)
}

inline void CCSUsrMsg_PlayerDecalDigitalSignature::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.data_){nullptr}
  };
}

CCSUsrMsg_PlayerDecalDigitalSignature::~CCSUsrMsg_PlayerDecalDigitalSignature() {
  // @@protoc_insertion_point(destructor:CCSUsrMsg_PlayerDecalDigitalSignature)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CCSUsrMsg_PlayerDecalDigitalSignature::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.data_;
}

void CCSUsrMsg_PlayerDecalDigitalSignature::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CCSUsrMsg_PlayerDecalDigitalSignature::Clear() {
// @@protoc_insertion_point(message_clear_start:CCSUsrMsg_PlayerDecalDigitalSignature)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.data_ != nullptr);
    _impl_.data_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CCSUsrMsg_PlayerDecalDigitalSignature::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .PlayerDecalDigitalSignature data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_data(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CCSUsrMsg_PlayerDecalDigitalSignature::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCSUsrMsg_PlayerDecalDigitalSignature)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .PlayerDecalDigitalSignature data = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::data(this),
        _Internal::data(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCSUsrMsg_PlayerDecalDigitalSignature)
  return target;
}

size_t CCSUsrMsg_PlayerDecalDigitalSignature::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCSUsrMsg_PlayerDecalDigitalSignature)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .PlayerDecalDigitalSignature data = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.data_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CCSUsrMsg_PlayerDecalDigitalSignature::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CCSUsrMsg_PlayerDecalDigitalSignature::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CCSUsrMsg_PlayerDecalDigitalSignature::GetClassData() const { return &_class_data_; }


void CCSUsrMsg_PlayerDecalDigitalSignature::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CCSUsrMsg_PlayerDecalDigitalSignature*>(&to_msg);
  auto& from = static_cast<const CCSUsrMsg_PlayerDecalDigitalSignature&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CCSUsrMsg_PlayerDecalDigitalSignature)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_data()) {
    _this->_internal_mutable_data()->::PlayerDecalDigitalSignature::MergeFrom(
        from._internal_data());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CCSUsrMsg_PlayerDecalDigitalSignature::CopyFrom(const CCSUsrMsg_PlayerDecalDigitalSignature& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCSUsrMsg_PlayerDecalDigitalSignature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCSUsrMsg_PlayerDecalDigitalSignature::IsInitialized() const {
  return true;
}

void CCSUsrMsg_PlayerDecalDigitalSignature::InternalSwap(CCSUsrMsg_PlayerDecalDigitalSignature* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.data_, other->_impl_.data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CCSUsrMsg_PlayerDecalDigitalSignature::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cstrike15_5fusermessages_2eproto_getter, &descriptor_table_cstrike15_5fusermessages_2eproto_once,
      file_level_metadata_cstrike15_5fusermessages_2eproto[38]);
}

// ===================================================================

class CCSUsrMsg_XRankGet::_Internal {
 public:
  using HasBits = decltype(std::declval<CCSUsrMsg_XRankGet>()._impl_._has_bits_);
  static void set_has_mode_idx(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_controller(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CCSUsrMsg_XRankGet::CCSUsrMsg_XRankGet(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CCSUsrMsg_XRankGet)
}
CCSUsrMsg_XRankGet::CCSUsrMsg_XRankGet(const CCSUsrMsg_XRankGet& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CCSUsrMsg_XRankGet* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.mode_idx_){}
    , decltype(_impl_.controller_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.mode_idx_, &from._impl_.mode_idx_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.controller_) -
    reinterpret_cast<char*>(&_impl_.mode_idx_)) + sizeof(_impl_.controller_));
  // @@protoc_insertion_point(copy_constructor:CCSUsrMsg_XRankGet)
}

inline void CCSUsrMsg_XRankGet::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.mode_idx_){0}
    , decltype(_impl_.controller_){0}
  };
}

CCSUsrMsg_XRankGet::~CCSUsrMsg_XRankGet() {
  // @@protoc_insertion_point(destructor:CCSUsrMsg_XRankGet)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CCSUsrMsg_XRankGet::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CCSUsrMsg_XRankGet::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CCSUsrMsg_XRankGet::Clear() {
// @@protoc_insertion_point(message_clear_start:CCSUsrMsg_XRankGet)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.mode_idx_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.controller_) -
        reinterpret_cast<char*>(&_impl_.mode_idx_)) + sizeof(_impl_.controller_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CCSUsrMsg_XRankGet::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 mode_idx = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_mode_idx(&has_bits);
          _impl_.mode_idx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 controller = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_controller(&has_bits);
          _impl_.controller_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CCSUsrMsg_XRankGet::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCSUsrMsg_XRankGet)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 mode_idx = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_mode_idx(), target);
  }

  // optional int32 controller = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_controller(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCSUsrMsg_XRankGet)
  return target;
}

size_t CCSUsrMsg_XRankGet::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCSUsrMsg_XRankGet)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int32 mode_idx = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_mode_idx());
    }

    // optional int32 controller = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_controller());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CCSUsrMsg_XRankGet::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CCSUsrMsg_XRankGet::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CCSUsrMsg_XRankGet::GetClassData() const { return &_class_data_; }


void CCSUsrMsg_XRankGet::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CCSUsrMsg_XRankGet*>(&to_msg);
  auto& from = static_cast<const CCSUsrMsg_XRankGet&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CCSUsrMsg_XRankGet)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.mode_idx_ = from._impl_.mode_idx_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.controller_ = from._impl_.controller_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CCSUsrMsg_XRankGet::CopyFrom(const CCSUsrMsg_XRankGet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCSUsrMsg_XRankGet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCSUsrMsg_XRankGet::IsInitialized() const {
  return true;
}

void CCSUsrMsg_XRankGet::InternalSwap(CCSUsrMsg_XRankGet* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CCSUsrMsg_XRankGet, _impl_.controller_)
      + sizeof(CCSUsrMsg_XRankGet::_impl_.controller_)
      - PROTOBUF_FIELD_OFFSET(CCSUsrMsg_XRankGet, _impl_.mode_idx_)>(
          reinterpret_cast<char*>(&_impl_.mode_idx_),
          reinterpret_cast<char*>(&other->_impl_.mode_idx_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CCSUsrMsg_XRankGet::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cstrike15_5fusermessages_2eproto_getter, &descriptor_table_cstrike15_5fusermessages_2eproto_once,
      file_level_metadata_cstrike15_5fusermessages_2eproto[39]);
}

// ===================================================================

class CCSUsrMsg_XRankUpd::_Internal {
 public:
  using HasBits = decltype(std::declval<CCSUsrMsg_XRankUpd>()._impl_._has_bits_);
  static void set_has_mode_idx(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_controller(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_ranking(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CCSUsrMsg_XRankUpd::CCSUsrMsg_XRankUpd(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CCSUsrMsg_XRankUpd)
}
CCSUsrMsg_XRankUpd::CCSUsrMsg_XRankUpd(const CCSUsrMsg_XRankUpd& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CCSUsrMsg_XRankUpd* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.mode_idx_){}
    , decltype(_impl_.controller_){}
    , decltype(_impl_.ranking_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.mode_idx_, &from._impl_.mode_idx_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.ranking_) -
    reinterpret_cast<char*>(&_impl_.mode_idx_)) + sizeof(_impl_.ranking_));
  // @@protoc_insertion_point(copy_constructor:CCSUsrMsg_XRankUpd)
}

inline void CCSUsrMsg_XRankUpd::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.mode_idx_){0}
    , decltype(_impl_.controller_){0}
    , decltype(_impl_.ranking_){0}
  };
}

CCSUsrMsg_XRankUpd::~CCSUsrMsg_XRankUpd() {
  // @@protoc_insertion_point(destructor:CCSUsrMsg_XRankUpd)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CCSUsrMsg_XRankUpd::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CCSUsrMsg_XRankUpd::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CCSUsrMsg_XRankUpd::Clear() {
// @@protoc_insertion_point(message_clear_start:CCSUsrMsg_XRankUpd)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.mode_idx_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.ranking_) -
        reinterpret_cast<char*>(&_impl_.mode_idx_)) + sizeof(_impl_.ranking_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CCSUsrMsg_XRankUpd::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 mode_idx = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_mode_idx(&has_bits);
          _impl_.mode_idx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 controller = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_controller(&has_bits);
          _impl_.controller_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 ranking = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_ranking(&has_bits);
          _impl_.ranking_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CCSUsrMsg_XRankUpd::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCSUsrMsg_XRankUpd)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 mode_idx = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_mode_idx(), target);
  }

  // optional int32 controller = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_controller(), target);
  }

  // optional int32 ranking = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_ranking(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCSUsrMsg_XRankUpd)
  return target;
}

size_t CCSUsrMsg_XRankUpd::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCSUsrMsg_XRankUpd)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional int32 mode_idx = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_mode_idx());
    }

    // optional int32 controller = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_controller());
    }

    // optional int32 ranking = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_ranking());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CCSUsrMsg_XRankUpd::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CCSUsrMsg_XRankUpd::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CCSUsrMsg_XRankUpd::GetClassData() const { return &_class_data_; }


void CCSUsrMsg_XRankUpd::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CCSUsrMsg_XRankUpd*>(&to_msg);
  auto& from = static_cast<const CCSUsrMsg_XRankUpd&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CCSUsrMsg_XRankUpd)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.mode_idx_ = from._impl_.mode_idx_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.controller_ = from._impl_.controller_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.ranking_ = from._impl_.ranking_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CCSUsrMsg_XRankUpd::CopyFrom(const CCSUsrMsg_XRankUpd& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCSUsrMsg_XRankUpd)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCSUsrMsg_XRankUpd::IsInitialized() const {
  return true;
}

void CCSUsrMsg_XRankUpd::InternalSwap(CCSUsrMsg_XRankUpd* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CCSUsrMsg_XRankUpd, _impl_.ranking_)
      + sizeof(CCSUsrMsg_XRankUpd::_impl_.ranking_)
      - PROTOBUF_FIELD_OFFSET(CCSUsrMsg_XRankUpd, _impl_.mode_idx_)>(
          reinterpret_cast<char*>(&_impl_.mode_idx_),
          reinterpret_cast<char*>(&other->_impl_.mode_idx_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CCSUsrMsg_XRankUpd::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cstrike15_5fusermessages_2eproto_getter, &descriptor_table_cstrike15_5fusermessages_2eproto_once,
      file_level_metadata_cstrike15_5fusermessages_2eproto[40]);
}

// ===================================================================

class CCSUsrMsg_CallVoteFailed::_Internal {
 public:
  using HasBits = decltype(std::declval<CCSUsrMsg_CallVoteFailed>()._impl_._has_bits_);
  static void set_has_reason(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_time(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CCSUsrMsg_CallVoteFailed::CCSUsrMsg_CallVoteFailed(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CCSUsrMsg_CallVoteFailed)
}
CCSUsrMsg_CallVoteFailed::CCSUsrMsg_CallVoteFailed(const CCSUsrMsg_CallVoteFailed& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CCSUsrMsg_CallVoteFailed* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.reason_){}
    , decltype(_impl_.time_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.reason_, &from._impl_.reason_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.time_) -
    reinterpret_cast<char*>(&_impl_.reason_)) + sizeof(_impl_.time_));
  // @@protoc_insertion_point(copy_constructor:CCSUsrMsg_CallVoteFailed)
}

inline void CCSUsrMsg_CallVoteFailed::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.reason_){0}
    , decltype(_impl_.time_){0}
  };
}

CCSUsrMsg_CallVoteFailed::~CCSUsrMsg_CallVoteFailed() {
  // @@protoc_insertion_point(destructor:CCSUsrMsg_CallVoteFailed)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CCSUsrMsg_CallVoteFailed::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CCSUsrMsg_CallVoteFailed::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CCSUsrMsg_CallVoteFailed::Clear() {
// @@protoc_insertion_point(message_clear_start:CCSUsrMsg_CallVoteFailed)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.reason_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.time_) -
        reinterpret_cast<char*>(&_impl_.reason_)) + sizeof(_impl_.time_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CCSUsrMsg_CallVoteFailed::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 reason = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_reason(&has_bits);
          _impl_.reason_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 time = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_time(&has_bits);
          _impl_.time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CCSUsrMsg_CallVoteFailed::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCSUsrMsg_CallVoteFailed)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 reason = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_reason(), target);
  }

  // optional int32 time = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCSUsrMsg_CallVoteFailed)
  return target;
}

size_t CCSUsrMsg_CallVoteFailed::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCSUsrMsg_CallVoteFailed)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int32 reason = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_reason());
    }

    // optional int32 time = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_time());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CCSUsrMsg_CallVoteFailed::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CCSUsrMsg_CallVoteFailed::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CCSUsrMsg_CallVoteFailed::GetClassData() const { return &_class_data_; }


void CCSUsrMsg_CallVoteFailed::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CCSUsrMsg_CallVoteFailed*>(&to_msg);
  auto& from = static_cast<const CCSUsrMsg_CallVoteFailed&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CCSUsrMsg_CallVoteFailed)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.reason_ = from._impl_.reason_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.time_ = from._impl_.time_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CCSUsrMsg_CallVoteFailed::CopyFrom(const CCSUsrMsg_CallVoteFailed& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCSUsrMsg_CallVoteFailed)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCSUsrMsg_CallVoteFailed::IsInitialized() const {
  return true;
}

void CCSUsrMsg_CallVoteFailed::InternalSwap(CCSUsrMsg_CallVoteFailed* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CCSUsrMsg_CallVoteFailed, _impl_.time_)
      + sizeof(CCSUsrMsg_CallVoteFailed::_impl_.time_)
      - PROTOBUF_FIELD_OFFSET(CCSUsrMsg_CallVoteFailed, _impl_.reason_)>(
          reinterpret_cast<char*>(&_impl_.reason_),
          reinterpret_cast<char*>(&other->_impl_.reason_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CCSUsrMsg_CallVoteFailed::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cstrike15_5fusermessages_2eproto_getter, &descriptor_table_cstrike15_5fusermessages_2eproto_once,
      file_level_metadata_cstrike15_5fusermessages_2eproto[41]);
}

// ===================================================================

class CCSUsrMsg_VoteStart::_Internal {
 public:
  using HasBits = decltype(std::declval<CCSUsrMsg_VoteStart>()._impl_._has_bits_);
  static void set_has_team(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_player_slot(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_vote_type(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_disp_str(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_details_str(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_other_team_str(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_is_yes_no_vote(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_player_slot_target(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
};

CCSUsrMsg_VoteStart::CCSUsrMsg_VoteStart(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CCSUsrMsg_VoteStart)
}
CCSUsrMsg_VoteStart::CCSUsrMsg_VoteStart(const CCSUsrMsg_VoteStart& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CCSUsrMsg_VoteStart* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.disp_str_){}
    , decltype(_impl_.details_str_){}
    , decltype(_impl_.other_team_str_){}
    , decltype(_impl_.team_){}
    , decltype(_impl_.vote_type_){}
    , decltype(_impl_.is_yes_no_vote_){}
    , decltype(_impl_.player_slot_){}
    , decltype(_impl_.player_slot_target_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.disp_str_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.disp_str_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_disp_str()) {
    _this->_impl_.disp_str_.Set(from._internal_disp_str(), 
      _this->GetArenaForAllocation());
  }
  _impl_.details_str_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.details_str_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_details_str()) {
    _this->_impl_.details_str_.Set(from._internal_details_str(), 
      _this->GetArenaForAllocation());
  }
  _impl_.other_team_str_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.other_team_str_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_other_team_str()) {
    _this->_impl_.other_team_str_.Set(from._internal_other_team_str(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.team_, &from._impl_.team_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.player_slot_target_) -
    reinterpret_cast<char*>(&_impl_.team_)) + sizeof(_impl_.player_slot_target_));
  // @@protoc_insertion_point(copy_constructor:CCSUsrMsg_VoteStart)
}

inline void CCSUsrMsg_VoteStart::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.disp_str_){}
    , decltype(_impl_.details_str_){}
    , decltype(_impl_.other_team_str_){}
    , decltype(_impl_.team_){0}
    , decltype(_impl_.vote_type_){0}
    , decltype(_impl_.is_yes_no_vote_){false}
    , decltype(_impl_.player_slot_){-1}
    , decltype(_impl_.player_slot_target_){-1}
  };
  _impl_.disp_str_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.disp_str_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.details_str_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.details_str_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.other_team_str_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.other_team_str_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CCSUsrMsg_VoteStart::~CCSUsrMsg_VoteStart() {
  // @@protoc_insertion_point(destructor:CCSUsrMsg_VoteStart)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CCSUsrMsg_VoteStart::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.disp_str_.Destroy();
  _impl_.details_str_.Destroy();
  _impl_.other_team_str_.Destroy();
}

void CCSUsrMsg_VoteStart::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CCSUsrMsg_VoteStart::Clear() {
// @@protoc_insertion_point(message_clear_start:CCSUsrMsg_VoteStart)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.disp_str_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.details_str_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.other_team_str_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x000000f8u) {
    ::memset(&_impl_.team_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.is_yes_no_vote_) -
        reinterpret_cast<char*>(&_impl_.team_)) + sizeof(_impl_.is_yes_no_vote_));
    _impl_.player_slot_ = -1;
    _impl_.player_slot_target_ = -1;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CCSUsrMsg_VoteStart::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 team = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_team(&has_bits);
          _impl_.team_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 player_slot = 2 [default = -1];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_player_slot(&has_bits);
          _impl_.player_slot_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 vote_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_vote_type(&has_bits);
          _impl_.vote_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string disp_str = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_disp_str();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CCSUsrMsg_VoteStart.disp_str");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string details_str = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_details_str();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CCSUsrMsg_VoteStart.details_str");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string other_team_str = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_other_team_str();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CCSUsrMsg_VoteStart.other_team_str");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional bool is_yes_no_vote = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_is_yes_no_vote(&has_bits);
          _impl_.is_yes_no_vote_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 player_slot_target = 8 [default = -1];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_player_slot_target(&has_bits);
          _impl_.player_slot_target_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CCSUsrMsg_VoteStart::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCSUsrMsg_VoteStart)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 team = 1;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_team(), target);
  }

  // optional int32 player_slot = 2 [default = -1];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_player_slot(), target);
  }

  // optional int32 vote_type = 3;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_vote_type(), target);
  }

  // optional string disp_str = 4;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_disp_str().data(), static_cast<int>(this->_internal_disp_str().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CCSUsrMsg_VoteStart.disp_str");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_disp_str(), target);
  }

  // optional string details_str = 5;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_details_str().data(), static_cast<int>(this->_internal_details_str().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CCSUsrMsg_VoteStart.details_str");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_details_str(), target);
  }

  // optional string other_team_str = 6;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_other_team_str().data(), static_cast<int>(this->_internal_other_team_str().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CCSUsrMsg_VoteStart.other_team_str");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_other_team_str(), target);
  }

  // optional bool is_yes_no_vote = 7;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(7, this->_internal_is_yes_no_vote(), target);
  }

  // optional int32 player_slot_target = 8 [default = -1];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(8, this->_internal_player_slot_target(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCSUsrMsg_VoteStart)
  return target;
}

size_t CCSUsrMsg_VoteStart::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCSUsrMsg_VoteStart)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string disp_str = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_disp_str());
    }

    // optional string details_str = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_details_str());
    }

    // optional string other_team_str = 6;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_other_team_str());
    }

    // optional int32 team = 1;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_team());
    }

    // optional int32 vote_type = 3;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_vote_type());
    }

    // optional bool is_yes_no_vote = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional int32 player_slot = 2 [default = -1];
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_player_slot());
    }

    // optional int32 player_slot_target = 8 [default = -1];
    if (cached_has_bits & 0x00000080u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_player_slot_target());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CCSUsrMsg_VoteStart::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CCSUsrMsg_VoteStart::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CCSUsrMsg_VoteStart::GetClassData() const { return &_class_data_; }


void CCSUsrMsg_VoteStart::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CCSUsrMsg_VoteStart*>(&to_msg);
  auto& from = static_cast<const CCSUsrMsg_VoteStart&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CCSUsrMsg_VoteStart)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_disp_str(from._internal_disp_str());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_details_str(from._internal_details_str());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_other_team_str(from._internal_other_team_str());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.team_ = from._impl_.team_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.vote_type_ = from._impl_.vote_type_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.is_yes_no_vote_ = from._impl_.is_yes_no_vote_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.player_slot_ = from._impl_.player_slot_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.player_slot_target_ = from._impl_.player_slot_target_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CCSUsrMsg_VoteStart::CopyFrom(const CCSUsrMsg_VoteStart& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCSUsrMsg_VoteStart)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCSUsrMsg_VoteStart::IsInitialized() const {
  return true;
}

void CCSUsrMsg_VoteStart::InternalSwap(CCSUsrMsg_VoteStart* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.disp_str_, lhs_arena,
      &other->_impl_.disp_str_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.details_str_, lhs_arena,
      &other->_impl_.details_str_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.other_team_str_, lhs_arena,
      &other->_impl_.other_team_str_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CCSUsrMsg_VoteStart, _impl_.is_yes_no_vote_)
      + sizeof(CCSUsrMsg_VoteStart::_impl_.is_yes_no_vote_)
      - PROTOBUF_FIELD_OFFSET(CCSUsrMsg_VoteStart, _impl_.team_)>(
          reinterpret_cast<char*>(&_impl_.team_),
          reinterpret_cast<char*>(&other->_impl_.team_));
  swap(_impl_.player_slot_, other->_impl_.player_slot_);
  swap(_impl_.player_slot_target_, other->_impl_.player_slot_target_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CCSUsrMsg_VoteStart::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cstrike15_5fusermessages_2eproto_getter, &descriptor_table_cstrike15_5fusermessages_2eproto_once,
      file_level_metadata_cstrike15_5fusermessages_2eproto[42]);
}

// ===================================================================

class CCSUsrMsg_VotePass::_Internal {
 public:
  using HasBits = decltype(std::declval<CCSUsrMsg_VotePass>()._impl_._has_bits_);
  static void set_has_team(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_vote_type(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_disp_str(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_details_str(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CCSUsrMsg_VotePass::CCSUsrMsg_VotePass(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CCSUsrMsg_VotePass)
}
CCSUsrMsg_VotePass::CCSUsrMsg_VotePass(const CCSUsrMsg_VotePass& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CCSUsrMsg_VotePass* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.disp_str_){}
    , decltype(_impl_.details_str_){}
    , decltype(_impl_.team_){}
    , decltype(_impl_.vote_type_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.disp_str_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.disp_str_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_disp_str()) {
    _this->_impl_.disp_str_.Set(from._internal_disp_str(), 
      _this->GetArenaForAllocation());
  }
  _impl_.details_str_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.details_str_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_details_str()) {
    _this->_impl_.details_str_.Set(from._internal_details_str(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.team_, &from._impl_.team_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.vote_type_) -
    reinterpret_cast<char*>(&_impl_.team_)) + sizeof(_impl_.vote_type_));
  // @@protoc_insertion_point(copy_constructor:CCSUsrMsg_VotePass)
}

inline void CCSUsrMsg_VotePass::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.disp_str_){}
    , decltype(_impl_.details_str_){}
    , decltype(_impl_.team_){0}
    , decltype(_impl_.vote_type_){0}
  };
  _impl_.disp_str_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.disp_str_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.details_str_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.details_str_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CCSUsrMsg_VotePass::~CCSUsrMsg_VotePass() {
  // @@protoc_insertion_point(destructor:CCSUsrMsg_VotePass)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CCSUsrMsg_VotePass::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.disp_str_.Destroy();
  _impl_.details_str_.Destroy();
}

void CCSUsrMsg_VotePass::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CCSUsrMsg_VotePass::Clear() {
// @@protoc_insertion_point(message_clear_start:CCSUsrMsg_VotePass)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.disp_str_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.details_str_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000000cu) {
    ::memset(&_impl_.team_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.vote_type_) -
        reinterpret_cast<char*>(&_impl_.team_)) + sizeof(_impl_.vote_type_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CCSUsrMsg_VotePass::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 team = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_team(&has_bits);
          _impl_.team_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 vote_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_vote_type(&has_bits);
          _impl_.vote_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string disp_str = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_disp_str();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CCSUsrMsg_VotePass.disp_str");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string details_str = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_details_str();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CCSUsrMsg_VotePass.details_str");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CCSUsrMsg_VotePass::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCSUsrMsg_VotePass)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 team = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_team(), target);
  }

  // optional int32 vote_type = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_vote_type(), target);
  }

  // optional string disp_str = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_disp_str().data(), static_cast<int>(this->_internal_disp_str().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CCSUsrMsg_VotePass.disp_str");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_disp_str(), target);
  }

  // optional string details_str = 4;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_details_str().data(), static_cast<int>(this->_internal_details_str().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CCSUsrMsg_VotePass.details_str");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_details_str(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCSUsrMsg_VotePass)
  return target;
}

size_t CCSUsrMsg_VotePass::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCSUsrMsg_VotePass)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string disp_str = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_disp_str());
    }

    // optional string details_str = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_details_str());
    }

    // optional int32 team = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_team());
    }

    // optional int32 vote_type = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_vote_type());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CCSUsrMsg_VotePass::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CCSUsrMsg_VotePass::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CCSUsrMsg_VotePass::GetClassData() const { return &_class_data_; }


void CCSUsrMsg_VotePass::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CCSUsrMsg_VotePass*>(&to_msg);
  auto& from = static_cast<const CCSUsrMsg_VotePass&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CCSUsrMsg_VotePass)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_disp_str(from._internal_disp_str());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_details_str(from._internal_details_str());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.team_ = from._impl_.team_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.vote_type_ = from._impl_.vote_type_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CCSUsrMsg_VotePass::CopyFrom(const CCSUsrMsg_VotePass& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCSUsrMsg_VotePass)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCSUsrMsg_VotePass::IsInitialized() const {
  return true;
}

void CCSUsrMsg_VotePass::InternalSwap(CCSUsrMsg_VotePass* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.disp_str_, lhs_arena,
      &other->_impl_.disp_str_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.details_str_, lhs_arena,
      &other->_impl_.details_str_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CCSUsrMsg_VotePass, _impl_.vote_type_)
      + sizeof(CCSUsrMsg_VotePass::_impl_.vote_type_)
      - PROTOBUF_FIELD_OFFSET(CCSUsrMsg_VotePass, _impl_.team_)>(
          reinterpret_cast<char*>(&_impl_.team_),
          reinterpret_cast<char*>(&other->_impl_.team_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CCSUsrMsg_VotePass::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cstrike15_5fusermessages_2eproto_getter, &descriptor_table_cstrike15_5fusermessages_2eproto_once,
      file_level_metadata_cstrike15_5fusermessages_2eproto[43]);
}

// ===================================================================

class CCSUsrMsg_VoteFailed::_Internal {
 public:
  using HasBits = decltype(std::declval<CCSUsrMsg_VoteFailed>()._impl_._has_bits_);
  static void set_has_team(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_reason(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CCSUsrMsg_VoteFailed::CCSUsrMsg_VoteFailed(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CCSUsrMsg_VoteFailed)
}
CCSUsrMsg_VoteFailed::CCSUsrMsg_VoteFailed(const CCSUsrMsg_VoteFailed& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CCSUsrMsg_VoteFailed* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.team_){}
    , decltype(_impl_.reason_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.team_, &from._impl_.team_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.reason_) -
    reinterpret_cast<char*>(&_impl_.team_)) + sizeof(_impl_.reason_));
  // @@protoc_insertion_point(copy_constructor:CCSUsrMsg_VoteFailed)
}

inline void CCSUsrMsg_VoteFailed::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.team_){0}
    , decltype(_impl_.reason_){0}
  };
}

CCSUsrMsg_VoteFailed::~CCSUsrMsg_VoteFailed() {
  // @@protoc_insertion_point(destructor:CCSUsrMsg_VoteFailed)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CCSUsrMsg_VoteFailed::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CCSUsrMsg_VoteFailed::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CCSUsrMsg_VoteFailed::Clear() {
// @@protoc_insertion_point(message_clear_start:CCSUsrMsg_VoteFailed)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.team_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.reason_) -
        reinterpret_cast<char*>(&_impl_.team_)) + sizeof(_impl_.reason_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CCSUsrMsg_VoteFailed::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 team = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_team(&has_bits);
          _impl_.team_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 reason = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_reason(&has_bits);
          _impl_.reason_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CCSUsrMsg_VoteFailed::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCSUsrMsg_VoteFailed)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 team = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_team(), target);
  }

  // optional int32 reason = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_reason(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCSUsrMsg_VoteFailed)
  return target;
}

size_t CCSUsrMsg_VoteFailed::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCSUsrMsg_VoteFailed)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int32 team = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_team());
    }

    // optional int32 reason = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_reason());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CCSUsrMsg_VoteFailed::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CCSUsrMsg_VoteFailed::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CCSUsrMsg_VoteFailed::GetClassData() const { return &_class_data_; }


void CCSUsrMsg_VoteFailed::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CCSUsrMsg_VoteFailed*>(&to_msg);
  auto& from = static_cast<const CCSUsrMsg_VoteFailed&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CCSUsrMsg_VoteFailed)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.team_ = from._impl_.team_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.reason_ = from._impl_.reason_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CCSUsrMsg_VoteFailed::CopyFrom(const CCSUsrMsg_VoteFailed& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCSUsrMsg_VoteFailed)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCSUsrMsg_VoteFailed::IsInitialized() const {
  return true;
}

void CCSUsrMsg_VoteFailed::InternalSwap(CCSUsrMsg_VoteFailed* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CCSUsrMsg_VoteFailed, _impl_.reason_)
      + sizeof(CCSUsrMsg_VoteFailed::_impl_.reason_)
      - PROTOBUF_FIELD_OFFSET(CCSUsrMsg_VoteFailed, _impl_.team_)>(
          reinterpret_cast<char*>(&_impl_.team_),
          reinterpret_cast<char*>(&other->_impl_.team_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CCSUsrMsg_VoteFailed::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cstrike15_5fusermessages_2eproto_getter, &descriptor_table_cstrike15_5fusermessages_2eproto_once,
      file_level_metadata_cstrike15_5fusermessages_2eproto[44]);
}

// ===================================================================

class CCSUsrMsg_VoteSetup::_Internal {
 public:
};

CCSUsrMsg_VoteSetup::CCSUsrMsg_VoteSetup(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CCSUsrMsg_VoteSetup)
}
CCSUsrMsg_VoteSetup::CCSUsrMsg_VoteSetup(const CCSUsrMsg_VoteSetup& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CCSUsrMsg_VoteSetup* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.potential_issues_){from._impl_.potential_issues_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CCSUsrMsg_VoteSetup)
}

inline void CCSUsrMsg_VoteSetup::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.potential_issues_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CCSUsrMsg_VoteSetup::~CCSUsrMsg_VoteSetup() {
  // @@protoc_insertion_point(destructor:CCSUsrMsg_VoteSetup)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CCSUsrMsg_VoteSetup::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.potential_issues_.~RepeatedPtrField();
}

void CCSUsrMsg_VoteSetup::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CCSUsrMsg_VoteSetup::Clear() {
// @@protoc_insertion_point(message_clear_start:CCSUsrMsg_VoteSetup)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.potential_issues_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CCSUsrMsg_VoteSetup::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated string potential_issues = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_potential_issues();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            #ifndef NDEBUG
            ::_pbi::VerifyUTF8(str, "CCSUsrMsg_VoteSetup.potential_issues");
            #endif  // !NDEBUG
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CCSUsrMsg_VoteSetup::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCSUsrMsg_VoteSetup)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string potential_issues = 1;
  for (int i = 0, n = this->_internal_potential_issues_size(); i < n; i++) {
    const auto& s = this->_internal_potential_issues(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CCSUsrMsg_VoteSetup.potential_issues");
    target = stream->WriteString(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCSUsrMsg_VoteSetup)
  return target;
}

size_t CCSUsrMsg_VoteSetup::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCSUsrMsg_VoteSetup)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string potential_issues = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.potential_issues_.size());
  for (int i = 0, n = _impl_.potential_issues_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.potential_issues_.Get(i));
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CCSUsrMsg_VoteSetup::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CCSUsrMsg_VoteSetup::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CCSUsrMsg_VoteSetup::GetClassData() const { return &_class_data_; }


void CCSUsrMsg_VoteSetup::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CCSUsrMsg_VoteSetup*>(&to_msg);
  auto& from = static_cast<const CCSUsrMsg_VoteSetup&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CCSUsrMsg_VoteSetup)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.potential_issues_.MergeFrom(from._impl_.potential_issues_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CCSUsrMsg_VoteSetup::CopyFrom(const CCSUsrMsg_VoteSetup& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCSUsrMsg_VoteSetup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCSUsrMsg_VoteSetup::IsInitialized() const {
  return true;
}

void CCSUsrMsg_VoteSetup::InternalSwap(CCSUsrMsg_VoteSetup* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.potential_issues_.InternalSwap(&other->_impl_.potential_issues_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CCSUsrMsg_VoteSetup::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cstrike15_5fusermessages_2eproto_getter, &descriptor_table_cstrike15_5fusermessages_2eproto_once,
      file_level_metadata_cstrike15_5fusermessages_2eproto[45]);
}

// ===================================================================

class CCSUsrMsg_SendLastKillerDamageToClient::_Internal {
 public:
  using HasBits = decltype(std::declval<CCSUsrMsg_SendLastKillerDamageToClient>()._impl_._has_bits_);
  static void set_has_num_hits_given(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_damage_given(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_num_hits_taken(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_damage_taken(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_actual_damage_given(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_actual_damage_taken(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

CCSUsrMsg_SendLastKillerDamageToClient::CCSUsrMsg_SendLastKillerDamageToClient(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CCSUsrMsg_SendLastKillerDamageToClient)
}
CCSUsrMsg_SendLastKillerDamageToClient::CCSUsrMsg_SendLastKillerDamageToClient(const CCSUsrMsg_SendLastKillerDamageToClient& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CCSUsrMsg_SendLastKillerDamageToClient* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.num_hits_given_){}
    , decltype(_impl_.damage_given_){}
    , decltype(_impl_.num_hits_taken_){}
    , decltype(_impl_.damage_taken_){}
    , decltype(_impl_.actual_damage_given_){}
    , decltype(_impl_.actual_damage_taken_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.num_hits_given_, &from._impl_.num_hits_given_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.actual_damage_taken_) -
    reinterpret_cast<char*>(&_impl_.num_hits_given_)) + sizeof(_impl_.actual_damage_taken_));
  // @@protoc_insertion_point(copy_constructor:CCSUsrMsg_SendLastKillerDamageToClient)
}

inline void CCSUsrMsg_SendLastKillerDamageToClient::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.num_hits_given_){0}
    , decltype(_impl_.damage_given_){0}
    , decltype(_impl_.num_hits_taken_){0}
    , decltype(_impl_.damage_taken_){0}
    , decltype(_impl_.actual_damage_given_){0}
    , decltype(_impl_.actual_damage_taken_){0}
  };
}

CCSUsrMsg_SendLastKillerDamageToClient::~CCSUsrMsg_SendLastKillerDamageToClient() {
  // @@protoc_insertion_point(destructor:CCSUsrMsg_SendLastKillerDamageToClient)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CCSUsrMsg_SendLastKillerDamageToClient::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CCSUsrMsg_SendLastKillerDamageToClient::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CCSUsrMsg_SendLastKillerDamageToClient::Clear() {
// @@protoc_insertion_point(message_clear_start:CCSUsrMsg_SendLastKillerDamageToClient)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    ::memset(&_impl_.num_hits_given_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.actual_damage_taken_) -
        reinterpret_cast<char*>(&_impl_.num_hits_given_)) + sizeof(_impl_.actual_damage_taken_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CCSUsrMsg_SendLastKillerDamageToClient::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 num_hits_given = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_num_hits_given(&has_bits);
          _impl_.num_hits_given_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 damage_given = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_damage_given(&has_bits);
          _impl_.damage_given_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 num_hits_taken = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_num_hits_taken(&has_bits);
          _impl_.num_hits_taken_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 damage_taken = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_damage_taken(&has_bits);
          _impl_.damage_taken_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 actual_damage_given = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_actual_damage_given(&has_bits);
          _impl_.actual_damage_given_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 actual_damage_taken = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_actual_damage_taken(&has_bits);
          _impl_.actual_damage_taken_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CCSUsrMsg_SendLastKillerDamageToClient::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCSUsrMsg_SendLastKillerDamageToClient)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 num_hits_given = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_num_hits_given(), target);
  }

  // optional int32 damage_given = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_damage_given(), target);
  }

  // optional int32 num_hits_taken = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_num_hits_taken(), target);
  }

  // optional int32 damage_taken = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_damage_taken(), target);
  }

  // optional int32 actual_damage_given = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_actual_damage_given(), target);
  }

  // optional int32 actual_damage_taken = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(6, this->_internal_actual_damage_taken(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCSUsrMsg_SendLastKillerDamageToClient)
  return target;
}

size_t CCSUsrMsg_SendLastKillerDamageToClient::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCSUsrMsg_SendLastKillerDamageToClient)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional int32 num_hits_given = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_num_hits_given());
    }

    // optional int32 damage_given = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_damage_given());
    }

    // optional int32 num_hits_taken = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_num_hits_taken());
    }

    // optional int32 damage_taken = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_damage_taken());
    }

    // optional int32 actual_damage_given = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_actual_damage_given());
    }

    // optional int32 actual_damage_taken = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_actual_damage_taken());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CCSUsrMsg_SendLastKillerDamageToClient::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CCSUsrMsg_SendLastKillerDamageToClient::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CCSUsrMsg_SendLastKillerDamageToClient::GetClassData() const { return &_class_data_; }


void CCSUsrMsg_SendLastKillerDamageToClient::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CCSUsrMsg_SendLastKillerDamageToClient*>(&to_msg);
  auto& from = static_cast<const CCSUsrMsg_SendLastKillerDamageToClient&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CCSUsrMsg_SendLastKillerDamageToClient)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.num_hits_given_ = from._impl_.num_hits_given_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.damage_given_ = from._impl_.damage_given_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.num_hits_taken_ = from._impl_.num_hits_taken_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.damage_taken_ = from._impl_.damage_taken_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.actual_damage_given_ = from._impl_.actual_damage_given_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.actual_damage_taken_ = from._impl_.actual_damage_taken_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CCSUsrMsg_SendLastKillerDamageToClient::CopyFrom(const CCSUsrMsg_SendLastKillerDamageToClient& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCSUsrMsg_SendLastKillerDamageToClient)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCSUsrMsg_SendLastKillerDamageToClient::IsInitialized() const {
  return true;
}

void CCSUsrMsg_SendLastKillerDamageToClient::InternalSwap(CCSUsrMsg_SendLastKillerDamageToClient* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CCSUsrMsg_SendLastKillerDamageToClient, _impl_.actual_damage_taken_)
      + sizeof(CCSUsrMsg_SendLastKillerDamageToClient::_impl_.actual_damage_taken_)
      - PROTOBUF_FIELD_OFFSET(CCSUsrMsg_SendLastKillerDamageToClient, _impl_.num_hits_given_)>(
          reinterpret_cast<char*>(&_impl_.num_hits_given_),
          reinterpret_cast<char*>(&other->_impl_.num_hits_given_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CCSUsrMsg_SendLastKillerDamageToClient::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cstrike15_5fusermessages_2eproto_getter, &descriptor_table_cstrike15_5fusermessages_2eproto_once,
      file_level_metadata_cstrike15_5fusermessages_2eproto[46]);
}

// ===================================================================

class CCSUsrMsg_ServerRankUpdate_RankUpdate::_Internal {
 public:
  using HasBits = decltype(std::declval<CCSUsrMsg_ServerRankUpdate_RankUpdate>()._impl_._has_bits_);
  static void set_has_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_rank_old(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_rank_new(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_num_wins(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_rank_change(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_rank_type_id(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

CCSUsrMsg_ServerRankUpdate_RankUpdate::CCSUsrMsg_ServerRankUpdate_RankUpdate(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CCSUsrMsg_ServerRankUpdate.RankUpdate)
}
CCSUsrMsg_ServerRankUpdate_RankUpdate::CCSUsrMsg_ServerRankUpdate_RankUpdate(const CCSUsrMsg_ServerRankUpdate_RankUpdate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CCSUsrMsg_ServerRankUpdate_RankUpdate* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.account_id_){}
    , decltype(_impl_.rank_old_){}
    , decltype(_impl_.rank_new_){}
    , decltype(_impl_.num_wins_){}
    , decltype(_impl_.rank_change_){}
    , decltype(_impl_.rank_type_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.account_id_, &from._impl_.account_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.rank_type_id_) -
    reinterpret_cast<char*>(&_impl_.account_id_)) + sizeof(_impl_.rank_type_id_));
  // @@protoc_insertion_point(copy_constructor:CCSUsrMsg_ServerRankUpdate.RankUpdate)
}

inline void CCSUsrMsg_ServerRankUpdate_RankUpdate::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.account_id_){0}
    , decltype(_impl_.rank_old_){0}
    , decltype(_impl_.rank_new_){0}
    , decltype(_impl_.num_wins_){0}
    , decltype(_impl_.rank_change_){0}
    , decltype(_impl_.rank_type_id_){0}
  };
}

CCSUsrMsg_ServerRankUpdate_RankUpdate::~CCSUsrMsg_ServerRankUpdate_RankUpdate() {
  // @@protoc_insertion_point(destructor:CCSUsrMsg_ServerRankUpdate.RankUpdate)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CCSUsrMsg_ServerRankUpdate_RankUpdate::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CCSUsrMsg_ServerRankUpdate_RankUpdate::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CCSUsrMsg_ServerRankUpdate_RankUpdate::Clear() {
// @@protoc_insertion_point(message_clear_start:CCSUsrMsg_ServerRankUpdate.RankUpdate)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    ::memset(&_impl_.account_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.rank_type_id_) -
        reinterpret_cast<char*>(&_impl_.account_id_)) + sizeof(_impl_.rank_type_id_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CCSUsrMsg_ServerRankUpdate_RankUpdate::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 account_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_account_id(&has_bits);
          _impl_.account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 rank_old = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_rank_old(&has_bits);
          _impl_.rank_old_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 rank_new = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_rank_new(&has_bits);
          _impl_.rank_new_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 num_wins = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_num_wins(&has_bits);
          _impl_.num_wins_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float rank_change = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 45)) {
          _Internal::set_has_rank_change(&has_bits);
          _impl_.rank_change_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional int32 rank_type_id = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_rank_type_id(&has_bits);
          _impl_.rank_type_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CCSUsrMsg_ServerRankUpdate_RankUpdate::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCSUsrMsg_ServerRankUpdate.RankUpdate)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_account_id(), target);
  }

  // optional int32 rank_old = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_rank_old(), target);
  }

  // optional int32 rank_new = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_rank_new(), target);
  }

  // optional int32 num_wins = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_num_wins(), target);
  }

  // optional float rank_change = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(5, this->_internal_rank_change(), target);
  }

  // optional int32 rank_type_id = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(6, this->_internal_rank_type_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCSUsrMsg_ServerRankUpdate.RankUpdate)
  return target;
}

size_t CCSUsrMsg_ServerRankUpdate_RankUpdate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCSUsrMsg_ServerRankUpdate.RankUpdate)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional int32 account_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_account_id());
    }

    // optional int32 rank_old = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_rank_old());
    }

    // optional int32 rank_new = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_rank_new());
    }

    // optional int32 num_wins = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_num_wins());
    }

    // optional float rank_change = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 4;
    }

    // optional int32 rank_type_id = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_rank_type_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CCSUsrMsg_ServerRankUpdate_RankUpdate::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CCSUsrMsg_ServerRankUpdate_RankUpdate::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CCSUsrMsg_ServerRankUpdate_RankUpdate::GetClassData() const { return &_class_data_; }


void CCSUsrMsg_ServerRankUpdate_RankUpdate::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CCSUsrMsg_ServerRankUpdate_RankUpdate*>(&to_msg);
  auto& from = static_cast<const CCSUsrMsg_ServerRankUpdate_RankUpdate&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CCSUsrMsg_ServerRankUpdate.RankUpdate)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.account_id_ = from._impl_.account_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.rank_old_ = from._impl_.rank_old_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.rank_new_ = from._impl_.rank_new_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.num_wins_ = from._impl_.num_wins_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.rank_change_ = from._impl_.rank_change_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.rank_type_id_ = from._impl_.rank_type_id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CCSUsrMsg_ServerRankUpdate_RankUpdate::CopyFrom(const CCSUsrMsg_ServerRankUpdate_RankUpdate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCSUsrMsg_ServerRankUpdate.RankUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCSUsrMsg_ServerRankUpdate_RankUpdate::IsInitialized() const {
  return true;
}

void CCSUsrMsg_ServerRankUpdate_RankUpdate::InternalSwap(CCSUsrMsg_ServerRankUpdate_RankUpdate* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CCSUsrMsg_ServerRankUpdate_RankUpdate, _impl_.rank_type_id_)
      + sizeof(CCSUsrMsg_ServerRankUpdate_RankUpdate::_impl_.rank_type_id_)
      - PROTOBUF_FIELD_OFFSET(CCSUsrMsg_ServerRankUpdate_RankUpdate, _impl_.account_id_)>(
          reinterpret_cast<char*>(&_impl_.account_id_),
          reinterpret_cast<char*>(&other->_impl_.account_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CCSUsrMsg_ServerRankUpdate_RankUpdate::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cstrike15_5fusermessages_2eproto_getter, &descriptor_table_cstrike15_5fusermessages_2eproto_once,
      file_level_metadata_cstrike15_5fusermessages_2eproto[47]);
}

// ===================================================================

class CCSUsrMsg_ServerRankUpdate::_Internal {
 public:
};

CCSUsrMsg_ServerRankUpdate::CCSUsrMsg_ServerRankUpdate(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CCSUsrMsg_ServerRankUpdate)
}
CCSUsrMsg_ServerRankUpdate::CCSUsrMsg_ServerRankUpdate(const CCSUsrMsg_ServerRankUpdate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CCSUsrMsg_ServerRankUpdate* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.rank_update_){from._impl_.rank_update_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CCSUsrMsg_ServerRankUpdate)
}

inline void CCSUsrMsg_ServerRankUpdate::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.rank_update_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CCSUsrMsg_ServerRankUpdate::~CCSUsrMsg_ServerRankUpdate() {
  // @@protoc_insertion_point(destructor:CCSUsrMsg_ServerRankUpdate)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CCSUsrMsg_ServerRankUpdate::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.rank_update_.~RepeatedPtrField();
}

void CCSUsrMsg_ServerRankUpdate::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CCSUsrMsg_ServerRankUpdate::Clear() {
// @@protoc_insertion_point(message_clear_start:CCSUsrMsg_ServerRankUpdate)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.rank_update_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CCSUsrMsg_ServerRankUpdate::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .CCSUsrMsg_ServerRankUpdate.RankUpdate rank_update = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_rank_update(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CCSUsrMsg_ServerRankUpdate::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCSUsrMsg_ServerRankUpdate)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CCSUsrMsg_ServerRankUpdate.RankUpdate rank_update = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_rank_update_size()); i < n; i++) {
    const auto& repfield = this->_internal_rank_update(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCSUsrMsg_ServerRankUpdate)
  return target;
}

size_t CCSUsrMsg_ServerRankUpdate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCSUsrMsg_ServerRankUpdate)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CCSUsrMsg_ServerRankUpdate.RankUpdate rank_update = 1;
  total_size += 1UL * this->_internal_rank_update_size();
  for (const auto& msg : this->_impl_.rank_update_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CCSUsrMsg_ServerRankUpdate::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CCSUsrMsg_ServerRankUpdate::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CCSUsrMsg_ServerRankUpdate::GetClassData() const { return &_class_data_; }


void CCSUsrMsg_ServerRankUpdate::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CCSUsrMsg_ServerRankUpdate*>(&to_msg);
  auto& from = static_cast<const CCSUsrMsg_ServerRankUpdate&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CCSUsrMsg_ServerRankUpdate)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.rank_update_.MergeFrom(from._impl_.rank_update_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CCSUsrMsg_ServerRankUpdate::CopyFrom(const CCSUsrMsg_ServerRankUpdate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCSUsrMsg_ServerRankUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCSUsrMsg_ServerRankUpdate::IsInitialized() const {
  return true;
}

void CCSUsrMsg_ServerRankUpdate::InternalSwap(CCSUsrMsg_ServerRankUpdate* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.rank_update_.InternalSwap(&other->_impl_.rank_update_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CCSUsrMsg_ServerRankUpdate::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cstrike15_5fusermessages_2eproto_getter, &descriptor_table_cstrike15_5fusermessages_2eproto_once,
      file_level_metadata_cstrike15_5fusermessages_2eproto[48]);
}

// ===================================================================

class CCSUsrMsg_XpUpdate::_Internal {
 public:
  using HasBits = decltype(std::declval<CCSUsrMsg_XpUpdate>()._impl_._has_bits_);
  static const ::CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded& data(const CCSUsrMsg_XpUpdate* msg);
  static void set_has_data(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded&
CCSUsrMsg_XpUpdate::_Internal::data(const CCSUsrMsg_XpUpdate* msg) {
  return *msg->_impl_.data_;
}
void CCSUsrMsg_XpUpdate::clear_data() {
  if (_impl_.data_ != nullptr) _impl_.data_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
CCSUsrMsg_XpUpdate::CCSUsrMsg_XpUpdate(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CCSUsrMsg_XpUpdate)
}
CCSUsrMsg_XpUpdate::CCSUsrMsg_XpUpdate(const CCSUsrMsg_XpUpdate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CCSUsrMsg_XpUpdate* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.data_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_data()) {
    _this->_impl_.data_ = new ::CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded(*from._impl_.data_);
  }
  // @@protoc_insertion_point(copy_constructor:CCSUsrMsg_XpUpdate)
}

inline void CCSUsrMsg_XpUpdate::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.data_){nullptr}
  };
}

CCSUsrMsg_XpUpdate::~CCSUsrMsg_XpUpdate() {
  // @@protoc_insertion_point(destructor:CCSUsrMsg_XpUpdate)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CCSUsrMsg_XpUpdate::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.data_;
}

void CCSUsrMsg_XpUpdate::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CCSUsrMsg_XpUpdate::Clear() {
// @@protoc_insertion_point(message_clear_start:CCSUsrMsg_XpUpdate)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.data_ != nullptr);
    _impl_.data_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CCSUsrMsg_XpUpdate::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_data(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CCSUsrMsg_XpUpdate::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCSUsrMsg_XpUpdate)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded data = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::data(this),
        _Internal::data(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCSUsrMsg_XpUpdate)
  return target;
}

size_t CCSUsrMsg_XpUpdate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCSUsrMsg_XpUpdate)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded data = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.data_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CCSUsrMsg_XpUpdate::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CCSUsrMsg_XpUpdate::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CCSUsrMsg_XpUpdate::GetClassData() const { return &_class_data_; }


void CCSUsrMsg_XpUpdate::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CCSUsrMsg_XpUpdate*>(&to_msg);
  auto& from = static_cast<const CCSUsrMsg_XpUpdate&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CCSUsrMsg_XpUpdate)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_data()) {
    _this->_internal_mutable_data()->::CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded::MergeFrom(
        from._internal_data());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CCSUsrMsg_XpUpdate::CopyFrom(const CCSUsrMsg_XpUpdate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCSUsrMsg_XpUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCSUsrMsg_XpUpdate::IsInitialized() const {
  return true;
}

void CCSUsrMsg_XpUpdate::InternalSwap(CCSUsrMsg_XpUpdate* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.data_, other->_impl_.data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CCSUsrMsg_XpUpdate::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cstrike15_5fusermessages_2eproto_getter, &descriptor_table_cstrike15_5fusermessages_2eproto_once,
      file_level_metadata_cstrike15_5fusermessages_2eproto[49]);
}

// ===================================================================

class CCSUsrMsg_ItemPickup::_Internal {
 public:
  using HasBits = decltype(std::declval<CCSUsrMsg_ItemPickup>()._impl_._has_bits_);
  static void set_has_item(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CCSUsrMsg_ItemPickup::CCSUsrMsg_ItemPickup(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CCSUsrMsg_ItemPickup)
}
CCSUsrMsg_ItemPickup::CCSUsrMsg_ItemPickup(const CCSUsrMsg_ItemPickup& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CCSUsrMsg_ItemPickup* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.item_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.item_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.item_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_item()) {
    _this->_impl_.item_.Set(from._internal_item(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:CCSUsrMsg_ItemPickup)
}

inline void CCSUsrMsg_ItemPickup::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.item_){}
  };
  _impl_.item_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.item_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CCSUsrMsg_ItemPickup::~CCSUsrMsg_ItemPickup() {
  // @@protoc_insertion_point(destructor:CCSUsrMsg_ItemPickup)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CCSUsrMsg_ItemPickup::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.item_.Destroy();
}

void CCSUsrMsg_ItemPickup::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CCSUsrMsg_ItemPickup::Clear() {
// @@protoc_insertion_point(message_clear_start:CCSUsrMsg_ItemPickup)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.item_.ClearNonDefaultToEmpty();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CCSUsrMsg_ItemPickup::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string item = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_item();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CCSUsrMsg_ItemPickup.item");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CCSUsrMsg_ItemPickup::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCSUsrMsg_ItemPickup)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string item = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_item().data(), static_cast<int>(this->_internal_item().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CCSUsrMsg_ItemPickup.item");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_item(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCSUsrMsg_ItemPickup)
  return target;
}

size_t CCSUsrMsg_ItemPickup::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCSUsrMsg_ItemPickup)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string item = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_item());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CCSUsrMsg_ItemPickup::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CCSUsrMsg_ItemPickup::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CCSUsrMsg_ItemPickup::GetClassData() const { return &_class_data_; }


void CCSUsrMsg_ItemPickup::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CCSUsrMsg_ItemPickup*>(&to_msg);
  auto& from = static_cast<const CCSUsrMsg_ItemPickup&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CCSUsrMsg_ItemPickup)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_item()) {
    _this->_internal_set_item(from._internal_item());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CCSUsrMsg_ItemPickup::CopyFrom(const CCSUsrMsg_ItemPickup& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCSUsrMsg_ItemPickup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCSUsrMsg_ItemPickup::IsInitialized() const {
  return true;
}

void CCSUsrMsg_ItemPickup::InternalSwap(CCSUsrMsg_ItemPickup* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.item_, lhs_arena,
      &other->_impl_.item_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata CCSUsrMsg_ItemPickup::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cstrike15_5fusermessages_2eproto_getter, &descriptor_table_cstrike15_5fusermessages_2eproto_once,
      file_level_metadata_cstrike15_5fusermessages_2eproto[50]);
}

// ===================================================================

class CCSUsrMsg_ShowMenu::_Internal {
 public:
  using HasBits = decltype(std::declval<CCSUsrMsg_ShowMenu>()._impl_._has_bits_);
  static void set_has_bits_valid_slots(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_display_time(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_menu_string(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CCSUsrMsg_ShowMenu::CCSUsrMsg_ShowMenu(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CCSUsrMsg_ShowMenu)
}
CCSUsrMsg_ShowMenu::CCSUsrMsg_ShowMenu(const CCSUsrMsg_ShowMenu& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CCSUsrMsg_ShowMenu* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.menu_string_){}
    , decltype(_impl_.bits_valid_slots_){}
    , decltype(_impl_.display_time_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.menu_string_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.menu_string_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_menu_string()) {
    _this->_impl_.menu_string_.Set(from._internal_menu_string(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.bits_valid_slots_, &from._impl_.bits_valid_slots_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.display_time_) -
    reinterpret_cast<char*>(&_impl_.bits_valid_slots_)) + sizeof(_impl_.display_time_));
  // @@protoc_insertion_point(copy_constructor:CCSUsrMsg_ShowMenu)
}

inline void CCSUsrMsg_ShowMenu::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.menu_string_){}
    , decltype(_impl_.bits_valid_slots_){0}
    , decltype(_impl_.display_time_){0}
  };
  _impl_.menu_string_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.menu_string_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CCSUsrMsg_ShowMenu::~CCSUsrMsg_ShowMenu() {
  // @@protoc_insertion_point(destructor:CCSUsrMsg_ShowMenu)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CCSUsrMsg_ShowMenu::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.menu_string_.Destroy();
}

void CCSUsrMsg_ShowMenu::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CCSUsrMsg_ShowMenu::Clear() {
// @@protoc_insertion_point(message_clear_start:CCSUsrMsg_ShowMenu)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.menu_string_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&_impl_.bits_valid_slots_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.display_time_) -
        reinterpret_cast<char*>(&_impl_.bits_valid_slots_)) + sizeof(_impl_.display_time_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CCSUsrMsg_ShowMenu::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 bits_valid_slots = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_bits_valid_slots(&has_bits);
          _impl_.bits_valid_slots_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 display_time = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_display_time(&has_bits);
          _impl_.display_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string menu_string = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_menu_string();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CCSUsrMsg_ShowMenu.menu_string");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CCSUsrMsg_ShowMenu::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCSUsrMsg_ShowMenu)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 bits_valid_slots = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_bits_valid_slots(), target);
  }

  // optional int32 display_time = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_display_time(), target);
  }

  // optional string menu_string = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_menu_string().data(), static_cast<int>(this->_internal_menu_string().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CCSUsrMsg_ShowMenu.menu_string");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_menu_string(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCSUsrMsg_ShowMenu)
  return target;
}

size_t CCSUsrMsg_ShowMenu::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCSUsrMsg_ShowMenu)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string menu_string = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_menu_string());
    }

    // optional int32 bits_valid_slots = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_bits_valid_slots());
    }

    // optional int32 display_time = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_display_time());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CCSUsrMsg_ShowMenu::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CCSUsrMsg_ShowMenu::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CCSUsrMsg_ShowMenu::GetClassData() const { return &_class_data_; }


void CCSUsrMsg_ShowMenu::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CCSUsrMsg_ShowMenu*>(&to_msg);
  auto& from = static_cast<const CCSUsrMsg_ShowMenu&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CCSUsrMsg_ShowMenu)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_menu_string(from._internal_menu_string());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.bits_valid_slots_ = from._impl_.bits_valid_slots_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.display_time_ = from._impl_.display_time_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CCSUsrMsg_ShowMenu::CopyFrom(const CCSUsrMsg_ShowMenu& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCSUsrMsg_ShowMenu)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCSUsrMsg_ShowMenu::IsInitialized() const {
  return true;
}

void CCSUsrMsg_ShowMenu::InternalSwap(CCSUsrMsg_ShowMenu* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.menu_string_, lhs_arena,
      &other->_impl_.menu_string_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CCSUsrMsg_ShowMenu, _impl_.display_time_)
      + sizeof(CCSUsrMsg_ShowMenu::_impl_.display_time_)
      - PROTOBUF_FIELD_OFFSET(CCSUsrMsg_ShowMenu, _impl_.bits_valid_slots_)>(
          reinterpret_cast<char*>(&_impl_.bits_valid_slots_),
          reinterpret_cast<char*>(&other->_impl_.bits_valid_slots_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CCSUsrMsg_ShowMenu::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cstrike15_5fusermessages_2eproto_getter, &descriptor_table_cstrike15_5fusermessages_2eproto_once,
      file_level_metadata_cstrike15_5fusermessages_2eproto[51]);
}

// ===================================================================

class CCSUsrMsg_BarTime::_Internal {
 public:
  using HasBits = decltype(std::declval<CCSUsrMsg_BarTime>()._impl_._has_bits_);
  static void set_has_time(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CCSUsrMsg_BarTime::CCSUsrMsg_BarTime(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CCSUsrMsg_BarTime)
}
CCSUsrMsg_BarTime::CCSUsrMsg_BarTime(const CCSUsrMsg_BarTime& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CCSUsrMsg_BarTime* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.time_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.time_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.time_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_time()) {
    _this->_impl_.time_.Set(from._internal_time(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:CCSUsrMsg_BarTime)
}

inline void CCSUsrMsg_BarTime::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.time_){}
  };
  _impl_.time_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.time_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CCSUsrMsg_BarTime::~CCSUsrMsg_BarTime() {
  // @@protoc_insertion_point(destructor:CCSUsrMsg_BarTime)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CCSUsrMsg_BarTime::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.time_.Destroy();
}

void CCSUsrMsg_BarTime::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CCSUsrMsg_BarTime::Clear() {
// @@protoc_insertion_point(message_clear_start:CCSUsrMsg_BarTime)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.time_.ClearNonDefaultToEmpty();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CCSUsrMsg_BarTime::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string time = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_time();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CCSUsrMsg_BarTime.time");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CCSUsrMsg_BarTime::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCSUsrMsg_BarTime)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string time = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_time().data(), static_cast<int>(this->_internal_time().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CCSUsrMsg_BarTime.time");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCSUsrMsg_BarTime)
  return target;
}

size_t CCSUsrMsg_BarTime::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCSUsrMsg_BarTime)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string time = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_time());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CCSUsrMsg_BarTime::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CCSUsrMsg_BarTime::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CCSUsrMsg_BarTime::GetClassData() const { return &_class_data_; }


void CCSUsrMsg_BarTime::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CCSUsrMsg_BarTime*>(&to_msg);
  auto& from = static_cast<const CCSUsrMsg_BarTime&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CCSUsrMsg_BarTime)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_time()) {
    _this->_internal_set_time(from._internal_time());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CCSUsrMsg_BarTime::CopyFrom(const CCSUsrMsg_BarTime& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCSUsrMsg_BarTime)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCSUsrMsg_BarTime::IsInitialized() const {
  return true;
}

void CCSUsrMsg_BarTime::InternalSwap(CCSUsrMsg_BarTime* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.time_, lhs_arena,
      &other->_impl_.time_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata CCSUsrMsg_BarTime::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cstrike15_5fusermessages_2eproto_getter, &descriptor_table_cstrike15_5fusermessages_2eproto_once,
      file_level_metadata_cstrike15_5fusermessages_2eproto[52]);
}

// ===================================================================

class CCSUsrMsg_AmmoDenied::_Internal {
 public:
  using HasBits = decltype(std::declval<CCSUsrMsg_AmmoDenied>()._impl_._has_bits_);
  static void set_has_ammoidx(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CCSUsrMsg_AmmoDenied::CCSUsrMsg_AmmoDenied(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CCSUsrMsg_AmmoDenied)
}
CCSUsrMsg_AmmoDenied::CCSUsrMsg_AmmoDenied(const CCSUsrMsg_AmmoDenied& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CCSUsrMsg_AmmoDenied* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.ammoidx_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.ammoidx_ = from._impl_.ammoidx_;
  // @@protoc_insertion_point(copy_constructor:CCSUsrMsg_AmmoDenied)
}

inline void CCSUsrMsg_AmmoDenied::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.ammoidx_){0}
  };
}

CCSUsrMsg_AmmoDenied::~CCSUsrMsg_AmmoDenied() {
  // @@protoc_insertion_point(destructor:CCSUsrMsg_AmmoDenied)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CCSUsrMsg_AmmoDenied::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CCSUsrMsg_AmmoDenied::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CCSUsrMsg_AmmoDenied::Clear() {
// @@protoc_insertion_point(message_clear_start:CCSUsrMsg_AmmoDenied)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.ammoidx_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CCSUsrMsg_AmmoDenied::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 ammoidx = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_ammoidx(&has_bits);
          _impl_.ammoidx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CCSUsrMsg_AmmoDenied::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCSUsrMsg_AmmoDenied)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 ammoidx = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_ammoidx(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCSUsrMsg_AmmoDenied)
  return target;
}

size_t CCSUsrMsg_AmmoDenied::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCSUsrMsg_AmmoDenied)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int32 ammoidx = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_ammoidx());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CCSUsrMsg_AmmoDenied::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CCSUsrMsg_AmmoDenied::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CCSUsrMsg_AmmoDenied::GetClassData() const { return &_class_data_; }


void CCSUsrMsg_AmmoDenied::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CCSUsrMsg_AmmoDenied*>(&to_msg);
  auto& from = static_cast<const CCSUsrMsg_AmmoDenied&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CCSUsrMsg_AmmoDenied)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_ammoidx()) {
    _this->_internal_set_ammoidx(from._internal_ammoidx());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CCSUsrMsg_AmmoDenied::CopyFrom(const CCSUsrMsg_AmmoDenied& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCSUsrMsg_AmmoDenied)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCSUsrMsg_AmmoDenied::IsInitialized() const {
  return true;
}

void CCSUsrMsg_AmmoDenied::InternalSwap(CCSUsrMsg_AmmoDenied* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.ammoidx_, other->_impl_.ammoidx_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CCSUsrMsg_AmmoDenied::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cstrike15_5fusermessages_2eproto_getter, &descriptor_table_cstrike15_5fusermessages_2eproto_once,
      file_level_metadata_cstrike15_5fusermessages_2eproto[53]);
}

// ===================================================================

class CCSUsrMsg_MarkAchievement::_Internal {
 public:
  using HasBits = decltype(std::declval<CCSUsrMsg_MarkAchievement>()._impl_._has_bits_);
  static void set_has_achievement(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CCSUsrMsg_MarkAchievement::CCSUsrMsg_MarkAchievement(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CCSUsrMsg_MarkAchievement)
}
CCSUsrMsg_MarkAchievement::CCSUsrMsg_MarkAchievement(const CCSUsrMsg_MarkAchievement& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CCSUsrMsg_MarkAchievement* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.achievement_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.achievement_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.achievement_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_achievement()) {
    _this->_impl_.achievement_.Set(from._internal_achievement(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:CCSUsrMsg_MarkAchievement)
}

inline void CCSUsrMsg_MarkAchievement::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.achievement_){}
  };
  _impl_.achievement_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.achievement_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CCSUsrMsg_MarkAchievement::~CCSUsrMsg_MarkAchievement() {
  // @@protoc_insertion_point(destructor:CCSUsrMsg_MarkAchievement)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CCSUsrMsg_MarkAchievement::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.achievement_.Destroy();
}

void CCSUsrMsg_MarkAchievement::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CCSUsrMsg_MarkAchievement::Clear() {
// @@protoc_insertion_point(message_clear_start:CCSUsrMsg_MarkAchievement)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.achievement_.ClearNonDefaultToEmpty();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CCSUsrMsg_MarkAchievement::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string achievement = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_achievement();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CCSUsrMsg_MarkAchievement.achievement");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CCSUsrMsg_MarkAchievement::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCSUsrMsg_MarkAchievement)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string achievement = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_achievement().data(), static_cast<int>(this->_internal_achievement().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CCSUsrMsg_MarkAchievement.achievement");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_achievement(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCSUsrMsg_MarkAchievement)
  return target;
}

size_t CCSUsrMsg_MarkAchievement::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCSUsrMsg_MarkAchievement)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string achievement = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_achievement());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CCSUsrMsg_MarkAchievement::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CCSUsrMsg_MarkAchievement::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CCSUsrMsg_MarkAchievement::GetClassData() const { return &_class_data_; }


void CCSUsrMsg_MarkAchievement::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CCSUsrMsg_MarkAchievement*>(&to_msg);
  auto& from = static_cast<const CCSUsrMsg_MarkAchievement&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CCSUsrMsg_MarkAchievement)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_achievement()) {
    _this->_internal_set_achievement(from._internal_achievement());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CCSUsrMsg_MarkAchievement::CopyFrom(const CCSUsrMsg_MarkAchievement& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCSUsrMsg_MarkAchievement)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCSUsrMsg_MarkAchievement::IsInitialized() const {
  return true;
}

void CCSUsrMsg_MarkAchievement::InternalSwap(CCSUsrMsg_MarkAchievement* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.achievement_, lhs_arena,
      &other->_impl_.achievement_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata CCSUsrMsg_MarkAchievement::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cstrike15_5fusermessages_2eproto_getter, &descriptor_table_cstrike15_5fusermessages_2eproto_once,
      file_level_metadata_cstrike15_5fusermessages_2eproto[54]);
}

// ===================================================================

class CCSUsrMsg_MatchStatsUpdate::_Internal {
 public:
  using HasBits = decltype(std::declval<CCSUsrMsg_MatchStatsUpdate>()._impl_._has_bits_);
  static void set_has_update(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CCSUsrMsg_MatchStatsUpdate::CCSUsrMsg_MatchStatsUpdate(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CCSUsrMsg_MatchStatsUpdate)
}
CCSUsrMsg_MatchStatsUpdate::CCSUsrMsg_MatchStatsUpdate(const CCSUsrMsg_MatchStatsUpdate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CCSUsrMsg_MatchStatsUpdate* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.update_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.update_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.update_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_update()) {
    _this->_impl_.update_.Set(from._internal_update(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:CCSUsrMsg_MatchStatsUpdate)
}

inline void CCSUsrMsg_MatchStatsUpdate::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.update_){}
  };
  _impl_.update_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.update_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CCSUsrMsg_MatchStatsUpdate::~CCSUsrMsg_MatchStatsUpdate() {
  // @@protoc_insertion_point(destructor:CCSUsrMsg_MatchStatsUpdate)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CCSUsrMsg_MatchStatsUpdate::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.update_.Destroy();
}

void CCSUsrMsg_MatchStatsUpdate::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CCSUsrMsg_MatchStatsUpdate::Clear() {
// @@protoc_insertion_point(message_clear_start:CCSUsrMsg_MatchStatsUpdate)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.update_.ClearNonDefaultToEmpty();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CCSUsrMsg_MatchStatsUpdate::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string update = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_update();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CCSUsrMsg_MatchStatsUpdate.update");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CCSUsrMsg_MatchStatsUpdate::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCSUsrMsg_MatchStatsUpdate)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string update = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_update().data(), static_cast<int>(this->_internal_update().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CCSUsrMsg_MatchStatsUpdate.update");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_update(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCSUsrMsg_MatchStatsUpdate)
  return target;
}

size_t CCSUsrMsg_MatchStatsUpdate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCSUsrMsg_MatchStatsUpdate)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string update = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_update());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CCSUsrMsg_MatchStatsUpdate::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CCSUsrMsg_MatchStatsUpdate::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CCSUsrMsg_MatchStatsUpdate::GetClassData() const { return &_class_data_; }


void CCSUsrMsg_MatchStatsUpdate::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CCSUsrMsg_MatchStatsUpdate*>(&to_msg);
  auto& from = static_cast<const CCSUsrMsg_MatchStatsUpdate&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CCSUsrMsg_MatchStatsUpdate)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_update()) {
    _this->_internal_set_update(from._internal_update());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CCSUsrMsg_MatchStatsUpdate::CopyFrom(const CCSUsrMsg_MatchStatsUpdate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCSUsrMsg_MatchStatsUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCSUsrMsg_MatchStatsUpdate::IsInitialized() const {
  return true;
}

void CCSUsrMsg_MatchStatsUpdate::InternalSwap(CCSUsrMsg_MatchStatsUpdate* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.update_, lhs_arena,
      &other->_impl_.update_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata CCSUsrMsg_MatchStatsUpdate::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cstrike15_5fusermessages_2eproto_getter, &descriptor_table_cstrike15_5fusermessages_2eproto_once,
      file_level_metadata_cstrike15_5fusermessages_2eproto[55]);
}

// ===================================================================

class CCSUsrMsg_ItemDrop::_Internal {
 public:
  using HasBits = decltype(std::declval<CCSUsrMsg_ItemDrop>()._impl_._has_bits_);
  static void set_has_itemid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_death(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CCSUsrMsg_ItemDrop::CCSUsrMsg_ItemDrop(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CCSUsrMsg_ItemDrop)
}
CCSUsrMsg_ItemDrop::CCSUsrMsg_ItemDrop(const CCSUsrMsg_ItemDrop& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CCSUsrMsg_ItemDrop* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.itemid_){}
    , decltype(_impl_.death_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.itemid_, &from._impl_.itemid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.death_) -
    reinterpret_cast<char*>(&_impl_.itemid_)) + sizeof(_impl_.death_));
  // @@protoc_insertion_point(copy_constructor:CCSUsrMsg_ItemDrop)
}

inline void CCSUsrMsg_ItemDrop::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.itemid_){int64_t{0}}
    , decltype(_impl_.death_){false}
  };
}

CCSUsrMsg_ItemDrop::~CCSUsrMsg_ItemDrop() {
  // @@protoc_insertion_point(destructor:CCSUsrMsg_ItemDrop)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CCSUsrMsg_ItemDrop::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CCSUsrMsg_ItemDrop::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CCSUsrMsg_ItemDrop::Clear() {
// @@protoc_insertion_point(message_clear_start:CCSUsrMsg_ItemDrop)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.itemid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.death_) -
        reinterpret_cast<char*>(&_impl_.itemid_)) + sizeof(_impl_.death_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CCSUsrMsg_ItemDrop::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int64 itemid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_itemid(&has_bits);
          _impl_.itemid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool death = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_death(&has_bits);
          _impl_.death_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CCSUsrMsg_ItemDrop::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCSUsrMsg_ItemDrop)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int64 itemid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_itemid(), target);
  }

  // optional bool death = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_death(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCSUsrMsg_ItemDrop)
  return target;
}

size_t CCSUsrMsg_ItemDrop::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCSUsrMsg_ItemDrop)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int64 itemid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_itemid());
    }

    // optional bool death = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CCSUsrMsg_ItemDrop::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CCSUsrMsg_ItemDrop::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CCSUsrMsg_ItemDrop::GetClassData() const { return &_class_data_; }


void CCSUsrMsg_ItemDrop::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CCSUsrMsg_ItemDrop*>(&to_msg);
  auto& from = static_cast<const CCSUsrMsg_ItemDrop&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CCSUsrMsg_ItemDrop)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.itemid_ = from._impl_.itemid_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.death_ = from._impl_.death_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CCSUsrMsg_ItemDrop::CopyFrom(const CCSUsrMsg_ItemDrop& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCSUsrMsg_ItemDrop)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCSUsrMsg_ItemDrop::IsInitialized() const {
  return true;
}

void CCSUsrMsg_ItemDrop::InternalSwap(CCSUsrMsg_ItemDrop* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CCSUsrMsg_ItemDrop, _impl_.death_)
      + sizeof(CCSUsrMsg_ItemDrop::_impl_.death_)
      - PROTOBUF_FIELD_OFFSET(CCSUsrMsg_ItemDrop, _impl_.itemid_)>(
          reinterpret_cast<char*>(&_impl_.itemid_),
          reinterpret_cast<char*>(&other->_impl_.itemid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CCSUsrMsg_ItemDrop::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cstrike15_5fusermessages_2eproto_getter, &descriptor_table_cstrike15_5fusermessages_2eproto_once,
      file_level_metadata_cstrike15_5fusermessages_2eproto[56]);
}

// ===================================================================

class CCSUsrMsg_GlowPropTurnOff::_Internal {
 public:
  using HasBits = decltype(std::declval<CCSUsrMsg_GlowPropTurnOff>()._impl_._has_bits_);
  static void set_has_entidx(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CCSUsrMsg_GlowPropTurnOff::CCSUsrMsg_GlowPropTurnOff(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CCSUsrMsg_GlowPropTurnOff)
}
CCSUsrMsg_GlowPropTurnOff::CCSUsrMsg_GlowPropTurnOff(const CCSUsrMsg_GlowPropTurnOff& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CCSUsrMsg_GlowPropTurnOff* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.entidx_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.entidx_ = from._impl_.entidx_;
  // @@protoc_insertion_point(copy_constructor:CCSUsrMsg_GlowPropTurnOff)
}

inline void CCSUsrMsg_GlowPropTurnOff::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.entidx_){-1}
  };
}

CCSUsrMsg_GlowPropTurnOff::~CCSUsrMsg_GlowPropTurnOff() {
  // @@protoc_insertion_point(destructor:CCSUsrMsg_GlowPropTurnOff)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CCSUsrMsg_GlowPropTurnOff::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CCSUsrMsg_GlowPropTurnOff::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CCSUsrMsg_GlowPropTurnOff::Clear() {
// @@protoc_insertion_point(message_clear_start:CCSUsrMsg_GlowPropTurnOff)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.entidx_ = -1;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CCSUsrMsg_GlowPropTurnOff::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 entidx = 1 [default = -1];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_entidx(&has_bits);
          _impl_.entidx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CCSUsrMsg_GlowPropTurnOff::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCSUsrMsg_GlowPropTurnOff)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 entidx = 1 [default = -1];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_entidx(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCSUsrMsg_GlowPropTurnOff)
  return target;
}

size_t CCSUsrMsg_GlowPropTurnOff::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCSUsrMsg_GlowPropTurnOff)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int32 entidx = 1 [default = -1];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_entidx());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CCSUsrMsg_GlowPropTurnOff::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CCSUsrMsg_GlowPropTurnOff::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CCSUsrMsg_GlowPropTurnOff::GetClassData() const { return &_class_data_; }


void CCSUsrMsg_GlowPropTurnOff::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CCSUsrMsg_GlowPropTurnOff*>(&to_msg);
  auto& from = static_cast<const CCSUsrMsg_GlowPropTurnOff&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CCSUsrMsg_GlowPropTurnOff)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_entidx()) {
    _this->_internal_set_entidx(from._internal_entidx());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CCSUsrMsg_GlowPropTurnOff::CopyFrom(const CCSUsrMsg_GlowPropTurnOff& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCSUsrMsg_GlowPropTurnOff)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCSUsrMsg_GlowPropTurnOff::IsInitialized() const {
  return true;
}

void CCSUsrMsg_GlowPropTurnOff::InternalSwap(CCSUsrMsg_GlowPropTurnOff* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.entidx_, other->_impl_.entidx_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CCSUsrMsg_GlowPropTurnOff::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cstrike15_5fusermessages_2eproto_getter, &descriptor_table_cstrike15_5fusermessages_2eproto_once,
      file_level_metadata_cstrike15_5fusermessages_2eproto[57]);
}

// ===================================================================

class CCSUsrMsg_RoundBackupFilenames::_Internal {
 public:
  using HasBits = decltype(std::declval<CCSUsrMsg_RoundBackupFilenames>()._impl_._has_bits_);
  static void set_has_count(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_index(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_filename(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_nicename(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CCSUsrMsg_RoundBackupFilenames::CCSUsrMsg_RoundBackupFilenames(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CCSUsrMsg_RoundBackupFilenames)
}
CCSUsrMsg_RoundBackupFilenames::CCSUsrMsg_RoundBackupFilenames(const CCSUsrMsg_RoundBackupFilenames& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CCSUsrMsg_RoundBackupFilenames* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.filename_){}
    , decltype(_impl_.nicename_){}
    , decltype(_impl_.count_){}
    , decltype(_impl_.index_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.filename_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.filename_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_filename()) {
    _this->_impl_.filename_.Set(from._internal_filename(), 
      _this->GetArenaForAllocation());
  }
  _impl_.nicename_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.nicename_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_nicename()) {
    _this->_impl_.nicename_.Set(from._internal_nicename(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.count_, &from._impl_.count_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.index_) -
    reinterpret_cast<char*>(&_impl_.count_)) + sizeof(_impl_.index_));
  // @@protoc_insertion_point(copy_constructor:CCSUsrMsg_RoundBackupFilenames)
}

inline void CCSUsrMsg_RoundBackupFilenames::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.filename_){}
    , decltype(_impl_.nicename_){}
    , decltype(_impl_.count_){0}
    , decltype(_impl_.index_){0}
  };
  _impl_.filename_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.filename_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.nicename_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.nicename_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CCSUsrMsg_RoundBackupFilenames::~CCSUsrMsg_RoundBackupFilenames() {
  // @@protoc_insertion_point(destructor:CCSUsrMsg_RoundBackupFilenames)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CCSUsrMsg_RoundBackupFilenames::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.filename_.Destroy();
  _impl_.nicename_.Destroy();
}

void CCSUsrMsg_RoundBackupFilenames::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CCSUsrMsg_RoundBackupFilenames::Clear() {
// @@protoc_insertion_point(message_clear_start:CCSUsrMsg_RoundBackupFilenames)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.filename_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.nicename_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000000cu) {
    ::memset(&_impl_.count_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.index_) -
        reinterpret_cast<char*>(&_impl_.count_)) + sizeof(_impl_.index_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CCSUsrMsg_RoundBackupFilenames::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 count = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_count(&has_bits);
          _impl_.count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 index = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_index(&has_bits);
          _impl_.index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string filename = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_filename();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CCSUsrMsg_RoundBackupFilenames.filename");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string nicename = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_nicename();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CCSUsrMsg_RoundBackupFilenames.nicename");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CCSUsrMsg_RoundBackupFilenames::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCSUsrMsg_RoundBackupFilenames)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 count = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_count(), target);
  }

  // optional int32 index = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_index(), target);
  }

  // optional string filename = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_filename().data(), static_cast<int>(this->_internal_filename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CCSUsrMsg_RoundBackupFilenames.filename");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_filename(), target);
  }

  // optional string nicename = 4;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_nicename().data(), static_cast<int>(this->_internal_nicename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CCSUsrMsg_RoundBackupFilenames.nicename");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_nicename(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCSUsrMsg_RoundBackupFilenames)
  return target;
}

size_t CCSUsrMsg_RoundBackupFilenames::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCSUsrMsg_RoundBackupFilenames)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string filename = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_filename());
    }

    // optional string nicename = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_nicename());
    }

    // optional int32 count = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_count());
    }

    // optional int32 index = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_index());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CCSUsrMsg_RoundBackupFilenames::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CCSUsrMsg_RoundBackupFilenames::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CCSUsrMsg_RoundBackupFilenames::GetClassData() const { return &_class_data_; }


void CCSUsrMsg_RoundBackupFilenames::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CCSUsrMsg_RoundBackupFilenames*>(&to_msg);
  auto& from = static_cast<const CCSUsrMsg_RoundBackupFilenames&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CCSUsrMsg_RoundBackupFilenames)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_filename(from._internal_filename());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_nicename(from._internal_nicename());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.count_ = from._impl_.count_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.index_ = from._impl_.index_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CCSUsrMsg_RoundBackupFilenames::CopyFrom(const CCSUsrMsg_RoundBackupFilenames& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCSUsrMsg_RoundBackupFilenames)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCSUsrMsg_RoundBackupFilenames::IsInitialized() const {
  return true;
}

void CCSUsrMsg_RoundBackupFilenames::InternalSwap(CCSUsrMsg_RoundBackupFilenames* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.filename_, lhs_arena,
      &other->_impl_.filename_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.nicename_, lhs_arena,
      &other->_impl_.nicename_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CCSUsrMsg_RoundBackupFilenames, _impl_.index_)
      + sizeof(CCSUsrMsg_RoundBackupFilenames::_impl_.index_)
      - PROTOBUF_FIELD_OFFSET(CCSUsrMsg_RoundBackupFilenames, _impl_.count_)>(
          reinterpret_cast<char*>(&_impl_.count_),
          reinterpret_cast<char*>(&other->_impl_.count_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CCSUsrMsg_RoundBackupFilenames::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cstrike15_5fusermessages_2eproto_getter, &descriptor_table_cstrike15_5fusermessages_2eproto_once,
      file_level_metadata_cstrike15_5fusermessages_2eproto[58]);
}

// ===================================================================

class CCSUsrMsg_SSUI::_Internal {
 public:
  using HasBits = decltype(std::declval<CCSUsrMsg_SSUI>()._impl_._has_bits_);
  static void set_has_show(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_start_time(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_end_time(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CCSUsrMsg_SSUI::CCSUsrMsg_SSUI(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CCSUsrMsg_SSUI)
}
CCSUsrMsg_SSUI::CCSUsrMsg_SSUI(const CCSUsrMsg_SSUI& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CCSUsrMsg_SSUI* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.show_){}
    , decltype(_impl_.start_time_){}
    , decltype(_impl_.end_time_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.show_, &from._impl_.show_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.end_time_) -
    reinterpret_cast<char*>(&_impl_.show_)) + sizeof(_impl_.end_time_));
  // @@protoc_insertion_point(copy_constructor:CCSUsrMsg_SSUI)
}

inline void CCSUsrMsg_SSUI::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.show_){false}
    , decltype(_impl_.start_time_){0}
    , decltype(_impl_.end_time_){0}
  };
}

CCSUsrMsg_SSUI::~CCSUsrMsg_SSUI() {
  // @@protoc_insertion_point(destructor:CCSUsrMsg_SSUI)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CCSUsrMsg_SSUI::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CCSUsrMsg_SSUI::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CCSUsrMsg_SSUI::Clear() {
// @@protoc_insertion_point(message_clear_start:CCSUsrMsg_SSUI)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.show_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.end_time_) -
        reinterpret_cast<char*>(&_impl_.show_)) + sizeof(_impl_.end_time_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CCSUsrMsg_SSUI::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool show = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_show(&has_bits);
          _impl_.show_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float start_time = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _Internal::set_has_start_time(&has_bits);
          _impl_.start_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float end_time = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _Internal::set_has_end_time(&has_bits);
          _impl_.end_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CCSUsrMsg_SSUI::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCSUsrMsg_SSUI)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool show = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_show(), target);
  }

  // optional float start_time = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_start_time(), target);
  }

  // optional float end_time = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_end_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCSUsrMsg_SSUI)
  return target;
}

size_t CCSUsrMsg_SSUI::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCSUsrMsg_SSUI)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional bool show = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 1;
    }

    // optional float start_time = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional float end_time = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CCSUsrMsg_SSUI::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CCSUsrMsg_SSUI::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CCSUsrMsg_SSUI::GetClassData() const { return &_class_data_; }


void CCSUsrMsg_SSUI::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CCSUsrMsg_SSUI*>(&to_msg);
  auto& from = static_cast<const CCSUsrMsg_SSUI&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CCSUsrMsg_SSUI)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.show_ = from._impl_.show_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.start_time_ = from._impl_.start_time_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.end_time_ = from._impl_.end_time_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CCSUsrMsg_SSUI::CopyFrom(const CCSUsrMsg_SSUI& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCSUsrMsg_SSUI)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCSUsrMsg_SSUI::IsInitialized() const {
  return true;
}

void CCSUsrMsg_SSUI::InternalSwap(CCSUsrMsg_SSUI* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CCSUsrMsg_SSUI, _impl_.end_time_)
      + sizeof(CCSUsrMsg_SSUI::_impl_.end_time_)
      - PROTOBUF_FIELD_OFFSET(CCSUsrMsg_SSUI, _impl_.show_)>(
          reinterpret_cast<char*>(&_impl_.show_),
          reinterpret_cast<char*>(&other->_impl_.show_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CCSUsrMsg_SSUI::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cstrike15_5fusermessages_2eproto_getter, &descriptor_table_cstrike15_5fusermessages_2eproto_once,
      file_level_metadata_cstrike15_5fusermessages_2eproto[59]);
}

// ===================================================================

class CCSUsrMsg_SurvivalStats_Fact::_Internal {
 public:
  using HasBits = decltype(std::declval<CCSUsrMsg_SurvivalStats_Fact>()._impl_._has_bits_);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_display(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_interestingness(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

CCSUsrMsg_SurvivalStats_Fact::CCSUsrMsg_SurvivalStats_Fact(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CCSUsrMsg_SurvivalStats.Fact)
}
CCSUsrMsg_SurvivalStats_Fact::CCSUsrMsg_SurvivalStats_Fact(const CCSUsrMsg_SurvivalStats_Fact& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CCSUsrMsg_SurvivalStats_Fact* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.type_){}
    , decltype(_impl_.display_){}
    , decltype(_impl_.value_){}
    , decltype(_impl_.interestingness_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.type_, &from._impl_.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.interestingness_) -
    reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.interestingness_));
  // @@protoc_insertion_point(copy_constructor:CCSUsrMsg_SurvivalStats.Fact)
}

inline void CCSUsrMsg_SurvivalStats_Fact::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.type_){0}
    , decltype(_impl_.display_){0}
    , decltype(_impl_.value_){0}
    , decltype(_impl_.interestingness_){0}
  };
}

CCSUsrMsg_SurvivalStats_Fact::~CCSUsrMsg_SurvivalStats_Fact() {
  // @@protoc_insertion_point(destructor:CCSUsrMsg_SurvivalStats.Fact)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CCSUsrMsg_SurvivalStats_Fact::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CCSUsrMsg_SurvivalStats_Fact::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CCSUsrMsg_SurvivalStats_Fact::Clear() {
// @@protoc_insertion_point(message_clear_start:CCSUsrMsg_SurvivalStats.Fact)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&_impl_.type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.interestingness_) -
        reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.interestingness_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CCSUsrMsg_SurvivalStats_Fact::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_type(&has_bits);
          _impl_.type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 display = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_display(&has_bits);
          _impl_.display_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_value(&has_bits);
          _impl_.value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float interestingness = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          _Internal::set_has_interestingness(&has_bits);
          _impl_.interestingness_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CCSUsrMsg_SurvivalStats_Fact::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCSUsrMsg_SurvivalStats.Fact)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 type = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_type(), target);
  }

  // optional int32 display = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_display(), target);
  }

  // optional int32 value = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_value(), target);
  }

  // optional float interestingness = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(4, this->_internal_interestingness(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCSUsrMsg_SurvivalStats.Fact)
  return target;
}

size_t CCSUsrMsg_SurvivalStats_Fact::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCSUsrMsg_SurvivalStats.Fact)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional int32 type = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_type());
    }

    // optional int32 display = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_display());
    }

    // optional int32 value = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_value());
    }

    // optional float interestingness = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CCSUsrMsg_SurvivalStats_Fact::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CCSUsrMsg_SurvivalStats_Fact::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CCSUsrMsg_SurvivalStats_Fact::GetClassData() const { return &_class_data_; }


void CCSUsrMsg_SurvivalStats_Fact::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CCSUsrMsg_SurvivalStats_Fact*>(&to_msg);
  auto& from = static_cast<const CCSUsrMsg_SurvivalStats_Fact&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CCSUsrMsg_SurvivalStats.Fact)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.type_ = from._impl_.type_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.display_ = from._impl_.display_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.value_ = from._impl_.value_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.interestingness_ = from._impl_.interestingness_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CCSUsrMsg_SurvivalStats_Fact::CopyFrom(const CCSUsrMsg_SurvivalStats_Fact& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCSUsrMsg_SurvivalStats.Fact)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCSUsrMsg_SurvivalStats_Fact::IsInitialized() const {
  return true;
}

void CCSUsrMsg_SurvivalStats_Fact::InternalSwap(CCSUsrMsg_SurvivalStats_Fact* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CCSUsrMsg_SurvivalStats_Fact, _impl_.interestingness_)
      + sizeof(CCSUsrMsg_SurvivalStats_Fact::_impl_.interestingness_)
      - PROTOBUF_FIELD_OFFSET(CCSUsrMsg_SurvivalStats_Fact, _impl_.type_)>(
          reinterpret_cast<char*>(&_impl_.type_),
          reinterpret_cast<char*>(&other->_impl_.type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CCSUsrMsg_SurvivalStats_Fact::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cstrike15_5fusermessages_2eproto_getter, &descriptor_table_cstrike15_5fusermessages_2eproto_once,
      file_level_metadata_cstrike15_5fusermessages_2eproto[60]);
}

// ===================================================================

class CCSUsrMsg_SurvivalStats_Placement::_Internal {
 public:
  using HasBits = decltype(std::declval<CCSUsrMsg_SurvivalStats_Placement>()._impl_._has_bits_);
  static void set_has_xuid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_teamnumber(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_placement(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CCSUsrMsg_SurvivalStats_Placement::CCSUsrMsg_SurvivalStats_Placement(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CCSUsrMsg_SurvivalStats.Placement)
}
CCSUsrMsg_SurvivalStats_Placement::CCSUsrMsg_SurvivalStats_Placement(const CCSUsrMsg_SurvivalStats_Placement& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CCSUsrMsg_SurvivalStats_Placement* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.xuid_){}
    , decltype(_impl_.teamnumber_){}
    , decltype(_impl_.placement_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.xuid_, &from._impl_.xuid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.placement_) -
    reinterpret_cast<char*>(&_impl_.xuid_)) + sizeof(_impl_.placement_));
  // @@protoc_insertion_point(copy_constructor:CCSUsrMsg_SurvivalStats.Placement)
}

inline void CCSUsrMsg_SurvivalStats_Placement::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.xuid_){uint64_t{0u}}
    , decltype(_impl_.teamnumber_){0}
    , decltype(_impl_.placement_){0}
  };
}

CCSUsrMsg_SurvivalStats_Placement::~CCSUsrMsg_SurvivalStats_Placement() {
  // @@protoc_insertion_point(destructor:CCSUsrMsg_SurvivalStats.Placement)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CCSUsrMsg_SurvivalStats_Placement::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CCSUsrMsg_SurvivalStats_Placement::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CCSUsrMsg_SurvivalStats_Placement::Clear() {
// @@protoc_insertion_point(message_clear_start:CCSUsrMsg_SurvivalStats.Placement)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.xuid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.placement_) -
        reinterpret_cast<char*>(&_impl_.xuid_)) + sizeof(_impl_.placement_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CCSUsrMsg_SurvivalStats_Placement::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 xuid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_xuid(&has_bits);
          _impl_.xuid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 teamnumber = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_teamnumber(&has_bits);
          _impl_.teamnumber_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 placement = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_placement(&has_bits);
          _impl_.placement_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CCSUsrMsg_SurvivalStats_Placement::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCSUsrMsg_SurvivalStats.Placement)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint64 xuid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_xuid(), target);
  }

  // optional int32 teamnumber = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_teamnumber(), target);
  }

  // optional int32 placement = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_placement(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCSUsrMsg_SurvivalStats.Placement)
  return target;
}

size_t CCSUsrMsg_SurvivalStats_Placement::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCSUsrMsg_SurvivalStats.Placement)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint64 xuid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_xuid());
    }

    // optional int32 teamnumber = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_teamnumber());
    }

    // optional int32 placement = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_placement());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CCSUsrMsg_SurvivalStats_Placement::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CCSUsrMsg_SurvivalStats_Placement::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CCSUsrMsg_SurvivalStats_Placement::GetClassData() const { return &_class_data_; }


void CCSUsrMsg_SurvivalStats_Placement::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CCSUsrMsg_SurvivalStats_Placement*>(&to_msg);
  auto& from = static_cast<const CCSUsrMsg_SurvivalStats_Placement&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CCSUsrMsg_SurvivalStats.Placement)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.xuid_ = from._impl_.xuid_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.teamnumber_ = from._impl_.teamnumber_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.placement_ = from._impl_.placement_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CCSUsrMsg_SurvivalStats_Placement::CopyFrom(const CCSUsrMsg_SurvivalStats_Placement& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCSUsrMsg_SurvivalStats.Placement)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCSUsrMsg_SurvivalStats_Placement::IsInitialized() const {
  return true;
}

void CCSUsrMsg_SurvivalStats_Placement::InternalSwap(CCSUsrMsg_SurvivalStats_Placement* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CCSUsrMsg_SurvivalStats_Placement, _impl_.placement_)
      + sizeof(CCSUsrMsg_SurvivalStats_Placement::_impl_.placement_)
      - PROTOBUF_FIELD_OFFSET(CCSUsrMsg_SurvivalStats_Placement, _impl_.xuid_)>(
          reinterpret_cast<char*>(&_impl_.xuid_),
          reinterpret_cast<char*>(&other->_impl_.xuid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CCSUsrMsg_SurvivalStats_Placement::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cstrike15_5fusermessages_2eproto_getter, &descriptor_table_cstrike15_5fusermessages_2eproto_once,
      file_level_metadata_cstrike15_5fusermessages_2eproto[61]);
}

// ===================================================================

class CCSUsrMsg_SurvivalStats_Damage::_Internal {
 public:
  using HasBits = decltype(std::declval<CCSUsrMsg_SurvivalStats_Damage>()._impl_._has_bits_);
  static void set_has_xuid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_to(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_to_hits(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_from(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_from_hits(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

CCSUsrMsg_SurvivalStats_Damage::CCSUsrMsg_SurvivalStats_Damage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CCSUsrMsg_SurvivalStats.Damage)
}
CCSUsrMsg_SurvivalStats_Damage::CCSUsrMsg_SurvivalStats_Damage(const CCSUsrMsg_SurvivalStats_Damage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CCSUsrMsg_SurvivalStats_Damage* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.xuid_){}
    , decltype(_impl_.to_){}
    , decltype(_impl_.to_hits_){}
    , decltype(_impl_.from_){}
    , decltype(_impl_.from_hits_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.xuid_, &from._impl_.xuid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.from_hits_) -
    reinterpret_cast<char*>(&_impl_.xuid_)) + sizeof(_impl_.from_hits_));
  // @@protoc_insertion_point(copy_constructor:CCSUsrMsg_SurvivalStats.Damage)
}

inline void CCSUsrMsg_SurvivalStats_Damage::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.xuid_){uint64_t{0u}}
    , decltype(_impl_.to_){0}
    , decltype(_impl_.to_hits_){0}
    , decltype(_impl_.from_){0}
    , decltype(_impl_.from_hits_){0}
  };
}

CCSUsrMsg_SurvivalStats_Damage::~CCSUsrMsg_SurvivalStats_Damage() {
  // @@protoc_insertion_point(destructor:CCSUsrMsg_SurvivalStats.Damage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CCSUsrMsg_SurvivalStats_Damage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CCSUsrMsg_SurvivalStats_Damage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CCSUsrMsg_SurvivalStats_Damage::Clear() {
// @@protoc_insertion_point(message_clear_start:CCSUsrMsg_SurvivalStats.Damage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&_impl_.xuid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.from_hits_) -
        reinterpret_cast<char*>(&_impl_.xuid_)) + sizeof(_impl_.from_hits_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CCSUsrMsg_SurvivalStats_Damage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 xuid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_xuid(&has_bits);
          _impl_.xuid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 to = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_to(&has_bits);
          _impl_.to_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 to_hits = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_to_hits(&has_bits);
          _impl_.to_hits_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 from = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_from(&has_bits);
          _impl_.from_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 from_hits = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_from_hits(&has_bits);
          _impl_.from_hits_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CCSUsrMsg_SurvivalStats_Damage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCSUsrMsg_SurvivalStats.Damage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint64 xuid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_xuid(), target);
  }

  // optional int32 to = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_to(), target);
  }

  // optional int32 to_hits = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_to_hits(), target);
  }

  // optional int32 from = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_from(), target);
  }

  // optional int32 from_hits = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_from_hits(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCSUsrMsg_SurvivalStats.Damage)
  return target;
}

size_t CCSUsrMsg_SurvivalStats_Damage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCSUsrMsg_SurvivalStats.Damage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional uint64 xuid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_xuid());
    }

    // optional int32 to = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_to());
    }

    // optional int32 to_hits = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_to_hits());
    }

    // optional int32 from = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_from());
    }

    // optional int32 from_hits = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_from_hits());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CCSUsrMsg_SurvivalStats_Damage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CCSUsrMsg_SurvivalStats_Damage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CCSUsrMsg_SurvivalStats_Damage::GetClassData() const { return &_class_data_; }


void CCSUsrMsg_SurvivalStats_Damage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CCSUsrMsg_SurvivalStats_Damage*>(&to_msg);
  auto& from = static_cast<const CCSUsrMsg_SurvivalStats_Damage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CCSUsrMsg_SurvivalStats.Damage)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.xuid_ = from._impl_.xuid_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.to_ = from._impl_.to_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.to_hits_ = from._impl_.to_hits_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.from_ = from._impl_.from_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.from_hits_ = from._impl_.from_hits_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CCSUsrMsg_SurvivalStats_Damage::CopyFrom(const CCSUsrMsg_SurvivalStats_Damage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCSUsrMsg_SurvivalStats.Damage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCSUsrMsg_SurvivalStats_Damage::IsInitialized() const {
  return true;
}

void CCSUsrMsg_SurvivalStats_Damage::InternalSwap(CCSUsrMsg_SurvivalStats_Damage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CCSUsrMsg_SurvivalStats_Damage, _impl_.from_hits_)
      + sizeof(CCSUsrMsg_SurvivalStats_Damage::_impl_.from_hits_)
      - PROTOBUF_FIELD_OFFSET(CCSUsrMsg_SurvivalStats_Damage, _impl_.xuid_)>(
          reinterpret_cast<char*>(&_impl_.xuid_),
          reinterpret_cast<char*>(&other->_impl_.xuid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CCSUsrMsg_SurvivalStats_Damage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cstrike15_5fusermessages_2eproto_getter, &descriptor_table_cstrike15_5fusermessages_2eproto_once,
      file_level_metadata_cstrike15_5fusermessages_2eproto[62]);
}

// ===================================================================

class CCSUsrMsg_SurvivalStats::_Internal {
 public:
  using HasBits = decltype(std::declval<CCSUsrMsg_SurvivalStats>()._impl_._has_bits_);
  static void set_has_xuid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_ticknumber(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CCSUsrMsg_SurvivalStats::CCSUsrMsg_SurvivalStats(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CCSUsrMsg_SurvivalStats)
}
CCSUsrMsg_SurvivalStats::CCSUsrMsg_SurvivalStats(const CCSUsrMsg_SurvivalStats& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CCSUsrMsg_SurvivalStats* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.facts_){from._impl_.facts_}
    , decltype(_impl_.users_){from._impl_.users_}
    , decltype(_impl_.damages_){from._impl_.damages_}
    , decltype(_impl_.xuid_){}
    , decltype(_impl_.ticknumber_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.xuid_, &from._impl_.xuid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.ticknumber_) -
    reinterpret_cast<char*>(&_impl_.xuid_)) + sizeof(_impl_.ticknumber_));
  // @@protoc_insertion_point(copy_constructor:CCSUsrMsg_SurvivalStats)
}

inline void CCSUsrMsg_SurvivalStats::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.facts_){arena}
    , decltype(_impl_.users_){arena}
    , decltype(_impl_.damages_){arena}
    , decltype(_impl_.xuid_){uint64_t{0u}}
    , decltype(_impl_.ticknumber_){0}
  };
}

CCSUsrMsg_SurvivalStats::~CCSUsrMsg_SurvivalStats() {
  // @@protoc_insertion_point(destructor:CCSUsrMsg_SurvivalStats)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CCSUsrMsg_SurvivalStats::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.facts_.~RepeatedPtrField();
  _impl_.users_.~RepeatedPtrField();
  _impl_.damages_.~RepeatedPtrField();
}

void CCSUsrMsg_SurvivalStats::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CCSUsrMsg_SurvivalStats::Clear() {
// @@protoc_insertion_point(message_clear_start:CCSUsrMsg_SurvivalStats)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.facts_.Clear();
  _impl_.users_.Clear();
  _impl_.damages_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.xuid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.ticknumber_) -
        reinterpret_cast<char*>(&_impl_.xuid_)) + sizeof(_impl_.ticknumber_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CCSUsrMsg_SurvivalStats::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 xuid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_xuid(&has_bits);
          _impl_.xuid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .CCSUsrMsg_SurvivalStats.Fact facts = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_facts(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .CCSUsrMsg_SurvivalStats.Placement users = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_users(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional int32 ticknumber = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_ticknumber(&has_bits);
          _impl_.ticknumber_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .CCSUsrMsg_SurvivalStats.Damage damages = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_damages(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CCSUsrMsg_SurvivalStats::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCSUsrMsg_SurvivalStats)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint64 xuid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_xuid(), target);
  }

  // repeated .CCSUsrMsg_SurvivalStats.Fact facts = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_facts_size()); i < n; i++) {
    const auto& repfield = this->_internal_facts(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .CCSUsrMsg_SurvivalStats.Placement users = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_users_size()); i < n; i++) {
    const auto& repfield = this->_internal_users(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional int32 ticknumber = 4;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_ticknumber(), target);
  }

  // repeated .CCSUsrMsg_SurvivalStats.Damage damages = 5;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_damages_size()); i < n; i++) {
    const auto& repfield = this->_internal_damages(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCSUsrMsg_SurvivalStats)
  return target;
}

size_t CCSUsrMsg_SurvivalStats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCSUsrMsg_SurvivalStats)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CCSUsrMsg_SurvivalStats.Fact facts = 2;
  total_size += 1UL * this->_internal_facts_size();
  for (const auto& msg : this->_impl_.facts_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .CCSUsrMsg_SurvivalStats.Placement users = 3;
  total_size += 1UL * this->_internal_users_size();
  for (const auto& msg : this->_impl_.users_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .CCSUsrMsg_SurvivalStats.Damage damages = 5;
  total_size += 1UL * this->_internal_damages_size();
  for (const auto& msg : this->_impl_.damages_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint64 xuid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_xuid());
    }

    // optional int32 ticknumber = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_ticknumber());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CCSUsrMsg_SurvivalStats::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CCSUsrMsg_SurvivalStats::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CCSUsrMsg_SurvivalStats::GetClassData() const { return &_class_data_; }


void CCSUsrMsg_SurvivalStats::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CCSUsrMsg_SurvivalStats*>(&to_msg);
  auto& from = static_cast<const CCSUsrMsg_SurvivalStats&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CCSUsrMsg_SurvivalStats)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.facts_.MergeFrom(from._impl_.facts_);
  _this->_impl_.users_.MergeFrom(from._impl_.users_);
  _this->_impl_.damages_.MergeFrom(from._impl_.damages_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.xuid_ = from._impl_.xuid_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.ticknumber_ = from._impl_.ticknumber_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CCSUsrMsg_SurvivalStats::CopyFrom(const CCSUsrMsg_SurvivalStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCSUsrMsg_SurvivalStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCSUsrMsg_SurvivalStats::IsInitialized() const {
  return true;
}

void CCSUsrMsg_SurvivalStats::InternalSwap(CCSUsrMsg_SurvivalStats* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.facts_.InternalSwap(&other->_impl_.facts_);
  _impl_.users_.InternalSwap(&other->_impl_.users_);
  _impl_.damages_.InternalSwap(&other->_impl_.damages_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CCSUsrMsg_SurvivalStats, _impl_.ticknumber_)
      + sizeof(CCSUsrMsg_SurvivalStats::_impl_.ticknumber_)
      - PROTOBUF_FIELD_OFFSET(CCSUsrMsg_SurvivalStats, _impl_.xuid_)>(
          reinterpret_cast<char*>(&_impl_.xuid_),
          reinterpret_cast<char*>(&other->_impl_.xuid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CCSUsrMsg_SurvivalStats::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cstrike15_5fusermessages_2eproto_getter, &descriptor_table_cstrike15_5fusermessages_2eproto_once,
      file_level_metadata_cstrike15_5fusermessages_2eproto[63]);
}

// ===================================================================

class CCSUsrMsg_EndOfMatchAllPlayersData_Accolade::_Internal {
 public:
  using HasBits = decltype(std::declval<CCSUsrMsg_EndOfMatchAllPlayersData_Accolade>()._impl_._has_bits_);
  static void set_has_eaccolade(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_position(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CCSUsrMsg_EndOfMatchAllPlayersData_Accolade::CCSUsrMsg_EndOfMatchAllPlayersData_Accolade(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CCSUsrMsg_EndOfMatchAllPlayersData.Accolade)
}
CCSUsrMsg_EndOfMatchAllPlayersData_Accolade::CCSUsrMsg_EndOfMatchAllPlayersData_Accolade(const CCSUsrMsg_EndOfMatchAllPlayersData_Accolade& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CCSUsrMsg_EndOfMatchAllPlayersData_Accolade* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.eaccolade_){}
    , decltype(_impl_.value_){}
    , decltype(_impl_.position_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.eaccolade_, &from._impl_.eaccolade_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.position_) -
    reinterpret_cast<char*>(&_impl_.eaccolade_)) + sizeof(_impl_.position_));
  // @@protoc_insertion_point(copy_constructor:CCSUsrMsg_EndOfMatchAllPlayersData.Accolade)
}

inline void CCSUsrMsg_EndOfMatchAllPlayersData_Accolade::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.eaccolade_){0}
    , decltype(_impl_.value_){0}
    , decltype(_impl_.position_){0}
  };
}

CCSUsrMsg_EndOfMatchAllPlayersData_Accolade::~CCSUsrMsg_EndOfMatchAllPlayersData_Accolade() {
  // @@protoc_insertion_point(destructor:CCSUsrMsg_EndOfMatchAllPlayersData.Accolade)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CCSUsrMsg_EndOfMatchAllPlayersData_Accolade::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CCSUsrMsg_EndOfMatchAllPlayersData_Accolade::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CCSUsrMsg_EndOfMatchAllPlayersData_Accolade::Clear() {
// @@protoc_insertion_point(message_clear_start:CCSUsrMsg_EndOfMatchAllPlayersData.Accolade)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.eaccolade_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.position_) -
        reinterpret_cast<char*>(&_impl_.eaccolade_)) + sizeof(_impl_.position_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CCSUsrMsg_EndOfMatchAllPlayersData_Accolade::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 eaccolade = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_eaccolade(&has_bits);
          _impl_.eaccolade_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _Internal::set_has_value(&has_bits);
          _impl_.value_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional int32 position = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_position(&has_bits);
          _impl_.position_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CCSUsrMsg_EndOfMatchAllPlayersData_Accolade::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCSUsrMsg_EndOfMatchAllPlayersData.Accolade)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 eaccolade = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_eaccolade(), target);
  }

  // optional float value = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_value(), target);
  }

  // optional int32 position = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_position(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCSUsrMsg_EndOfMatchAllPlayersData.Accolade)
  return target;
}

size_t CCSUsrMsg_EndOfMatchAllPlayersData_Accolade::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCSUsrMsg_EndOfMatchAllPlayersData.Accolade)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional int32 eaccolade = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_eaccolade());
    }

    // optional float value = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional int32 position = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_position());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CCSUsrMsg_EndOfMatchAllPlayersData_Accolade::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CCSUsrMsg_EndOfMatchAllPlayersData_Accolade::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CCSUsrMsg_EndOfMatchAllPlayersData_Accolade::GetClassData() const { return &_class_data_; }


void CCSUsrMsg_EndOfMatchAllPlayersData_Accolade::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CCSUsrMsg_EndOfMatchAllPlayersData_Accolade*>(&to_msg);
  auto& from = static_cast<const CCSUsrMsg_EndOfMatchAllPlayersData_Accolade&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CCSUsrMsg_EndOfMatchAllPlayersData.Accolade)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.eaccolade_ = from._impl_.eaccolade_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.value_ = from._impl_.value_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.position_ = from._impl_.position_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CCSUsrMsg_EndOfMatchAllPlayersData_Accolade::CopyFrom(const CCSUsrMsg_EndOfMatchAllPlayersData_Accolade& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCSUsrMsg_EndOfMatchAllPlayersData.Accolade)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCSUsrMsg_EndOfMatchAllPlayersData_Accolade::IsInitialized() const {
  return true;
}

void CCSUsrMsg_EndOfMatchAllPlayersData_Accolade::InternalSwap(CCSUsrMsg_EndOfMatchAllPlayersData_Accolade* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CCSUsrMsg_EndOfMatchAllPlayersData_Accolade, _impl_.position_)
      + sizeof(CCSUsrMsg_EndOfMatchAllPlayersData_Accolade::_impl_.position_)
      - PROTOBUF_FIELD_OFFSET(CCSUsrMsg_EndOfMatchAllPlayersData_Accolade, _impl_.eaccolade_)>(
          reinterpret_cast<char*>(&_impl_.eaccolade_),
          reinterpret_cast<char*>(&other->_impl_.eaccolade_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CCSUsrMsg_EndOfMatchAllPlayersData_Accolade::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cstrike15_5fusermessages_2eproto_getter, &descriptor_table_cstrike15_5fusermessages_2eproto_once,
      file_level_metadata_cstrike15_5fusermessages_2eproto[64]);
}

// ===================================================================

class CCSUsrMsg_EndOfMatchAllPlayersData_PlayerData::_Internal {
 public:
  using HasBits = decltype(std::declval<CCSUsrMsg_EndOfMatchAllPlayersData_PlayerData>()._impl_._has_bits_);
  static void set_has_slot(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_xuid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_teamnumber(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::CCSUsrMsg_EndOfMatchAllPlayersData_Accolade& nomination(const CCSUsrMsg_EndOfMatchAllPlayersData_PlayerData* msg);
  static void set_has_nomination(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_playercolor(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_isbot(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

const ::CCSUsrMsg_EndOfMatchAllPlayersData_Accolade&
CCSUsrMsg_EndOfMatchAllPlayersData_PlayerData::_Internal::nomination(const CCSUsrMsg_EndOfMatchAllPlayersData_PlayerData* msg) {
  return *msg->_impl_.nomination_;
}
void CCSUsrMsg_EndOfMatchAllPlayersData_PlayerData::clear_items() {
  _impl_.items_.Clear();
}
CCSUsrMsg_EndOfMatchAllPlayersData_PlayerData::CCSUsrMsg_EndOfMatchAllPlayersData_PlayerData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CCSUsrMsg_EndOfMatchAllPlayersData.PlayerData)
}
CCSUsrMsg_EndOfMatchAllPlayersData_PlayerData::CCSUsrMsg_EndOfMatchAllPlayersData_PlayerData(const CCSUsrMsg_EndOfMatchAllPlayersData_PlayerData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CCSUsrMsg_EndOfMatchAllPlayersData_PlayerData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.items_){from._impl_.items_}
    , decltype(_impl_.name_){}
    , decltype(_impl_.nomination_){nullptr}
    , decltype(_impl_.xuid_){}
    , decltype(_impl_.teamnumber_){}
    , decltype(_impl_.playercolor_){}
    , decltype(_impl_.isbot_){}
    , decltype(_impl_.slot_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_nomination()) {
    _this->_impl_.nomination_ = new ::CCSUsrMsg_EndOfMatchAllPlayersData_Accolade(*from._impl_.nomination_);
  }
  ::memcpy(&_impl_.xuid_, &from._impl_.xuid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.slot_) -
    reinterpret_cast<char*>(&_impl_.xuid_)) + sizeof(_impl_.slot_));
  // @@protoc_insertion_point(copy_constructor:CCSUsrMsg_EndOfMatchAllPlayersData.PlayerData)
}

inline void CCSUsrMsg_EndOfMatchAllPlayersData_PlayerData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.items_){arena}
    , decltype(_impl_.name_){}
    , decltype(_impl_.nomination_){nullptr}
    , decltype(_impl_.xuid_){uint64_t{0u}}
    , decltype(_impl_.teamnumber_){0}
    , decltype(_impl_.playercolor_){0}
    , decltype(_impl_.isbot_){false}
    , decltype(_impl_.slot_){-1}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CCSUsrMsg_EndOfMatchAllPlayersData_PlayerData::~CCSUsrMsg_EndOfMatchAllPlayersData_PlayerData() {
  // @@protoc_insertion_point(destructor:CCSUsrMsg_EndOfMatchAllPlayersData.PlayerData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CCSUsrMsg_EndOfMatchAllPlayersData_PlayerData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.items_.~RepeatedPtrField();
  _impl_.name_.Destroy();
  if (this != internal_default_instance()) delete _impl_.nomination_;
}

void CCSUsrMsg_EndOfMatchAllPlayersData_PlayerData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CCSUsrMsg_EndOfMatchAllPlayersData_PlayerData::Clear() {
// @@protoc_insertion_point(message_clear_start:CCSUsrMsg_EndOfMatchAllPlayersData.PlayerData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.items_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.nomination_ != nullptr);
      _impl_.nomination_->Clear();
    }
  }
  if (cached_has_bits & 0x0000007cu) {
    ::memset(&_impl_.xuid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.isbot_) -
        reinterpret_cast<char*>(&_impl_.xuid_)) + sizeof(_impl_.isbot_));
    _impl_.slot_ = -1;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CCSUsrMsg_EndOfMatchAllPlayersData_PlayerData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 slot = 1 [default = -1];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_slot(&has_bits);
          _impl_.slot_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 xuid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_xuid(&has_bits);
          _impl_.xuid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CCSUsrMsg_EndOfMatchAllPlayersData.PlayerData.name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional int32 teamnumber = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_teamnumber(&has_bits);
          _impl_.teamnumber_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .CCSUsrMsg_EndOfMatchAllPlayersData.Accolade nomination = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_nomination(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .CEconItemPreviewDataBlock items = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_items(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional int32 playercolor = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_playercolor(&has_bits);
          _impl_.playercolor_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool isbot = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_isbot(&has_bits);
          _impl_.isbot_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CCSUsrMsg_EndOfMatchAllPlayersData_PlayerData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCSUsrMsg_EndOfMatchAllPlayersData.PlayerData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 slot = 1 [default = -1];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_slot(), target);
  }

  // optional uint64 xuid = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_xuid(), target);
  }

  // optional string name = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CCSUsrMsg_EndOfMatchAllPlayersData.PlayerData.name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_name(), target);
  }

  // optional int32 teamnumber = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_teamnumber(), target);
  }

  // optional .CCSUsrMsg_EndOfMatchAllPlayersData.Accolade nomination = 5;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::nomination(this),
        _Internal::nomination(this).GetCachedSize(), target, stream);
  }

  // repeated .CEconItemPreviewDataBlock items = 6;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_items_size()); i < n; i++) {
    const auto& repfield = this->_internal_items(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(6, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional int32 playercolor = 7;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(7, this->_internal_playercolor(), target);
  }

  // optional bool isbot = 8;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(8, this->_internal_isbot(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCSUsrMsg_EndOfMatchAllPlayersData.PlayerData)
  return target;
}

size_t CCSUsrMsg_EndOfMatchAllPlayersData_PlayerData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCSUsrMsg_EndOfMatchAllPlayersData.PlayerData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CEconItemPreviewDataBlock items = 6;
  total_size += 1UL * this->_internal_items_size();
  for (const auto& msg : this->_impl_.items_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional string name = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional .CCSUsrMsg_EndOfMatchAllPlayersData.Accolade nomination = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.nomination_);
    }

    // optional uint64 xuid = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_xuid());
    }

    // optional int32 teamnumber = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_teamnumber());
    }

    // optional int32 playercolor = 7;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_playercolor());
    }

    // optional bool isbot = 8;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional int32 slot = 1 [default = -1];
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_slot());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CCSUsrMsg_EndOfMatchAllPlayersData_PlayerData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CCSUsrMsg_EndOfMatchAllPlayersData_PlayerData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CCSUsrMsg_EndOfMatchAllPlayersData_PlayerData::GetClassData() const { return &_class_data_; }


void CCSUsrMsg_EndOfMatchAllPlayersData_PlayerData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CCSUsrMsg_EndOfMatchAllPlayersData_PlayerData*>(&to_msg);
  auto& from = static_cast<const CCSUsrMsg_EndOfMatchAllPlayersData_PlayerData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CCSUsrMsg_EndOfMatchAllPlayersData.PlayerData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.items_.MergeFrom(from._impl_.items_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_nomination()->::CCSUsrMsg_EndOfMatchAllPlayersData_Accolade::MergeFrom(
          from._internal_nomination());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.xuid_ = from._impl_.xuid_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.teamnumber_ = from._impl_.teamnumber_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.playercolor_ = from._impl_.playercolor_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.isbot_ = from._impl_.isbot_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.slot_ = from._impl_.slot_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CCSUsrMsg_EndOfMatchAllPlayersData_PlayerData::CopyFrom(const CCSUsrMsg_EndOfMatchAllPlayersData_PlayerData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCSUsrMsg_EndOfMatchAllPlayersData.PlayerData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCSUsrMsg_EndOfMatchAllPlayersData_PlayerData::IsInitialized() const {
  return true;
}

void CCSUsrMsg_EndOfMatchAllPlayersData_PlayerData::InternalSwap(CCSUsrMsg_EndOfMatchAllPlayersData_PlayerData* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.items_.InternalSwap(&other->_impl_.items_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CCSUsrMsg_EndOfMatchAllPlayersData_PlayerData, _impl_.isbot_)
      + sizeof(CCSUsrMsg_EndOfMatchAllPlayersData_PlayerData::_impl_.isbot_)
      - PROTOBUF_FIELD_OFFSET(CCSUsrMsg_EndOfMatchAllPlayersData_PlayerData, _impl_.nomination_)>(
          reinterpret_cast<char*>(&_impl_.nomination_),
          reinterpret_cast<char*>(&other->_impl_.nomination_));
  swap(_impl_.slot_, other->_impl_.slot_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CCSUsrMsg_EndOfMatchAllPlayersData_PlayerData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cstrike15_5fusermessages_2eproto_getter, &descriptor_table_cstrike15_5fusermessages_2eproto_once,
      file_level_metadata_cstrike15_5fusermessages_2eproto[65]);
}

// ===================================================================

class CCSUsrMsg_EndOfMatchAllPlayersData::_Internal {
 public:
  using HasBits = decltype(std::declval<CCSUsrMsg_EndOfMatchAllPlayersData>()._impl_._has_bits_);
  static void set_has_scene(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CCSUsrMsg_EndOfMatchAllPlayersData::CCSUsrMsg_EndOfMatchAllPlayersData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CCSUsrMsg_EndOfMatchAllPlayersData)
}
CCSUsrMsg_EndOfMatchAllPlayersData::CCSUsrMsg_EndOfMatchAllPlayersData(const CCSUsrMsg_EndOfMatchAllPlayersData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CCSUsrMsg_EndOfMatchAllPlayersData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.allplayerdata_){from._impl_.allplayerdata_}
    , decltype(_impl_.scene_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.scene_ = from._impl_.scene_;
  // @@protoc_insertion_point(copy_constructor:CCSUsrMsg_EndOfMatchAllPlayersData)
}

inline void CCSUsrMsg_EndOfMatchAllPlayersData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.allplayerdata_){arena}
    , decltype(_impl_.scene_){0}
  };
}

CCSUsrMsg_EndOfMatchAllPlayersData::~CCSUsrMsg_EndOfMatchAllPlayersData() {
  // @@protoc_insertion_point(destructor:CCSUsrMsg_EndOfMatchAllPlayersData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CCSUsrMsg_EndOfMatchAllPlayersData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.allplayerdata_.~RepeatedPtrField();
}

void CCSUsrMsg_EndOfMatchAllPlayersData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CCSUsrMsg_EndOfMatchAllPlayersData::Clear() {
// @@protoc_insertion_point(message_clear_start:CCSUsrMsg_EndOfMatchAllPlayersData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.allplayerdata_.Clear();
  _impl_.scene_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CCSUsrMsg_EndOfMatchAllPlayersData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .CCSUsrMsg_EndOfMatchAllPlayersData.PlayerData allplayerdata = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_allplayerdata(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional int32 scene = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_scene(&has_bits);
          _impl_.scene_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CCSUsrMsg_EndOfMatchAllPlayersData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCSUsrMsg_EndOfMatchAllPlayersData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CCSUsrMsg_EndOfMatchAllPlayersData.PlayerData allplayerdata = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_allplayerdata_size()); i < n; i++) {
    const auto& repfield = this->_internal_allplayerdata(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 scene = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_scene(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCSUsrMsg_EndOfMatchAllPlayersData)
  return target;
}

size_t CCSUsrMsg_EndOfMatchAllPlayersData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCSUsrMsg_EndOfMatchAllPlayersData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CCSUsrMsg_EndOfMatchAllPlayersData.PlayerData allplayerdata = 1;
  total_size += 1UL * this->_internal_allplayerdata_size();
  for (const auto& msg : this->_impl_.allplayerdata_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional int32 scene = 2;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_scene());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CCSUsrMsg_EndOfMatchAllPlayersData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CCSUsrMsg_EndOfMatchAllPlayersData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CCSUsrMsg_EndOfMatchAllPlayersData::GetClassData() const { return &_class_data_; }


void CCSUsrMsg_EndOfMatchAllPlayersData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CCSUsrMsg_EndOfMatchAllPlayersData*>(&to_msg);
  auto& from = static_cast<const CCSUsrMsg_EndOfMatchAllPlayersData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CCSUsrMsg_EndOfMatchAllPlayersData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.allplayerdata_.MergeFrom(from._impl_.allplayerdata_);
  if (from._internal_has_scene()) {
    _this->_internal_set_scene(from._internal_scene());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CCSUsrMsg_EndOfMatchAllPlayersData::CopyFrom(const CCSUsrMsg_EndOfMatchAllPlayersData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCSUsrMsg_EndOfMatchAllPlayersData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCSUsrMsg_EndOfMatchAllPlayersData::IsInitialized() const {
  return true;
}

void CCSUsrMsg_EndOfMatchAllPlayersData::InternalSwap(CCSUsrMsg_EndOfMatchAllPlayersData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.allplayerdata_.InternalSwap(&other->_impl_.allplayerdata_);
  swap(_impl_.scene_, other->_impl_.scene_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CCSUsrMsg_EndOfMatchAllPlayersData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cstrike15_5fusermessages_2eproto_getter, &descriptor_table_cstrike15_5fusermessages_2eproto_once,
      file_level_metadata_cstrike15_5fusermessages_2eproto[66]);
}

// ===================================================================

class CCSUsrMsg_RoundEndReportData_RerEvent_Victim::_Internal {
 public:
  using HasBits = decltype(std::declval<CCSUsrMsg_RoundEndReportData_RerEvent_Victim>()._impl_._has_bits_);
  static void set_has_team_number(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_playerslot(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_xuid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_color(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_is_bot(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_is_dead(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

CCSUsrMsg_RoundEndReportData_RerEvent_Victim::CCSUsrMsg_RoundEndReportData_RerEvent_Victim(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CCSUsrMsg_RoundEndReportData.RerEvent.Victim)
}
CCSUsrMsg_RoundEndReportData_RerEvent_Victim::CCSUsrMsg_RoundEndReportData_RerEvent_Victim(const CCSUsrMsg_RoundEndReportData_RerEvent_Victim& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CCSUsrMsg_RoundEndReportData_RerEvent_Victim* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.team_number_){}
    , decltype(_impl_.color_){}
    , decltype(_impl_.xuid_){}
    , decltype(_impl_.is_bot_){}
    , decltype(_impl_.is_dead_){}
    , decltype(_impl_.playerslot_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.team_number_, &from._impl_.team_number_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.playerslot_) -
    reinterpret_cast<char*>(&_impl_.team_number_)) + sizeof(_impl_.playerslot_));
  // @@protoc_insertion_point(copy_constructor:CCSUsrMsg_RoundEndReportData.RerEvent.Victim)
}

inline void CCSUsrMsg_RoundEndReportData_RerEvent_Victim::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.team_number_){0}
    , decltype(_impl_.color_){0}
    , decltype(_impl_.xuid_){uint64_t{0u}}
    , decltype(_impl_.is_bot_){false}
    , decltype(_impl_.is_dead_){false}
    , decltype(_impl_.playerslot_){-1}
  };
}

CCSUsrMsg_RoundEndReportData_RerEvent_Victim::~CCSUsrMsg_RoundEndReportData_RerEvent_Victim() {
  // @@protoc_insertion_point(destructor:CCSUsrMsg_RoundEndReportData.RerEvent.Victim)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CCSUsrMsg_RoundEndReportData_RerEvent_Victim::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CCSUsrMsg_RoundEndReportData_RerEvent_Victim::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CCSUsrMsg_RoundEndReportData_RerEvent_Victim::Clear() {
// @@protoc_insertion_point(message_clear_start:CCSUsrMsg_RoundEndReportData.RerEvent.Victim)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    ::memset(&_impl_.team_number_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.is_dead_) -
        reinterpret_cast<char*>(&_impl_.team_number_)) + sizeof(_impl_.is_dead_));
    _impl_.playerslot_ = -1;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CCSUsrMsg_RoundEndReportData_RerEvent_Victim::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 team_number = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_team_number(&has_bits);
          _impl_.team_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 playerslot = 2 [default = -1];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_playerslot(&has_bits);
          _impl_.playerslot_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 xuid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_xuid(&has_bits);
          _impl_.xuid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 color = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_color(&has_bits);
          _impl_.color_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_bot = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_is_bot(&has_bits);
          _impl_.is_bot_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_dead = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_is_dead(&has_bits);
          _impl_.is_dead_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CCSUsrMsg_RoundEndReportData_RerEvent_Victim::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCSUsrMsg_RoundEndReportData.RerEvent.Victim)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 team_number = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_team_number(), target);
  }

  // optional int32 playerslot = 2 [default = -1];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_playerslot(), target);
  }

  // optional uint64 xuid = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal_xuid(), target);
  }

  // optional int32 color = 4;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_color(), target);
  }

  // optional bool is_bot = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_is_bot(), target);
  }

  // optional bool is_dead = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(6, this->_internal_is_dead(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCSUsrMsg_RoundEndReportData.RerEvent.Victim)
  return target;
}

size_t CCSUsrMsg_RoundEndReportData_RerEvent_Victim::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCSUsrMsg_RoundEndReportData.RerEvent.Victim)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional int32 team_number = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_team_number());
    }

    // optional int32 color = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_color());
    }

    // optional uint64 xuid = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_xuid());
    }

    // optional bool is_bot = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional bool is_dead = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional int32 playerslot = 2 [default = -1];
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_playerslot());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CCSUsrMsg_RoundEndReportData_RerEvent_Victim::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CCSUsrMsg_RoundEndReportData_RerEvent_Victim::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CCSUsrMsg_RoundEndReportData_RerEvent_Victim::GetClassData() const { return &_class_data_; }


void CCSUsrMsg_RoundEndReportData_RerEvent_Victim::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CCSUsrMsg_RoundEndReportData_RerEvent_Victim*>(&to_msg);
  auto& from = static_cast<const CCSUsrMsg_RoundEndReportData_RerEvent_Victim&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CCSUsrMsg_RoundEndReportData.RerEvent.Victim)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.team_number_ = from._impl_.team_number_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.color_ = from._impl_.color_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.xuid_ = from._impl_.xuid_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.is_bot_ = from._impl_.is_bot_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.is_dead_ = from._impl_.is_dead_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.playerslot_ = from._impl_.playerslot_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CCSUsrMsg_RoundEndReportData_RerEvent_Victim::CopyFrom(const CCSUsrMsg_RoundEndReportData_RerEvent_Victim& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCSUsrMsg_RoundEndReportData.RerEvent.Victim)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCSUsrMsg_RoundEndReportData_RerEvent_Victim::IsInitialized() const {
  return true;
}

void CCSUsrMsg_RoundEndReportData_RerEvent_Victim::InternalSwap(CCSUsrMsg_RoundEndReportData_RerEvent_Victim* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CCSUsrMsg_RoundEndReportData_RerEvent_Victim, _impl_.is_dead_)
      + sizeof(CCSUsrMsg_RoundEndReportData_RerEvent_Victim::_impl_.is_dead_)
      - PROTOBUF_FIELD_OFFSET(CCSUsrMsg_RoundEndReportData_RerEvent_Victim, _impl_.team_number_)>(
          reinterpret_cast<char*>(&_impl_.team_number_),
          reinterpret_cast<char*>(&other->_impl_.team_number_));
  swap(_impl_.playerslot_, other->_impl_.playerslot_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CCSUsrMsg_RoundEndReportData_RerEvent_Victim::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cstrike15_5fusermessages_2eproto_getter, &descriptor_table_cstrike15_5fusermessages_2eproto_once,
      file_level_metadata_cstrike15_5fusermessages_2eproto[67]);
}

// ===================================================================

class CCSUsrMsg_RoundEndReportData_RerEvent_Objective::_Internal {
 public:
  using HasBits = decltype(std::declval<CCSUsrMsg_RoundEndReportData_RerEvent_Objective>()._impl_._has_bits_);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CCSUsrMsg_RoundEndReportData_RerEvent_Objective::CCSUsrMsg_RoundEndReportData_RerEvent_Objective(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CCSUsrMsg_RoundEndReportData.RerEvent.Objective)
}
CCSUsrMsg_RoundEndReportData_RerEvent_Objective::CCSUsrMsg_RoundEndReportData_RerEvent_Objective(const CCSUsrMsg_RoundEndReportData_RerEvent_Objective& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CCSUsrMsg_RoundEndReportData_RerEvent_Objective* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.type_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.type_ = from._impl_.type_;
  // @@protoc_insertion_point(copy_constructor:CCSUsrMsg_RoundEndReportData.RerEvent.Objective)
}

inline void CCSUsrMsg_RoundEndReportData_RerEvent_Objective::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.type_){0}
  };
}

CCSUsrMsg_RoundEndReportData_RerEvent_Objective::~CCSUsrMsg_RoundEndReportData_RerEvent_Objective() {
  // @@protoc_insertion_point(destructor:CCSUsrMsg_RoundEndReportData.RerEvent.Objective)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CCSUsrMsg_RoundEndReportData_RerEvent_Objective::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CCSUsrMsg_RoundEndReportData_RerEvent_Objective::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CCSUsrMsg_RoundEndReportData_RerEvent_Objective::Clear() {
// @@protoc_insertion_point(message_clear_start:CCSUsrMsg_RoundEndReportData.RerEvent.Objective)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.type_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CCSUsrMsg_RoundEndReportData_RerEvent_Objective::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_type(&has_bits);
          _impl_.type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CCSUsrMsg_RoundEndReportData_RerEvent_Objective::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCSUsrMsg_RoundEndReportData.RerEvent.Objective)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 type = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCSUsrMsg_RoundEndReportData.RerEvent.Objective)
  return target;
}

size_t CCSUsrMsg_RoundEndReportData_RerEvent_Objective::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCSUsrMsg_RoundEndReportData.RerEvent.Objective)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int32 type = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CCSUsrMsg_RoundEndReportData_RerEvent_Objective::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CCSUsrMsg_RoundEndReportData_RerEvent_Objective::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CCSUsrMsg_RoundEndReportData_RerEvent_Objective::GetClassData() const { return &_class_data_; }


void CCSUsrMsg_RoundEndReportData_RerEvent_Objective::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CCSUsrMsg_RoundEndReportData_RerEvent_Objective*>(&to_msg);
  auto& from = static_cast<const CCSUsrMsg_RoundEndReportData_RerEvent_Objective&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CCSUsrMsg_RoundEndReportData.RerEvent.Objective)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_type()) {
    _this->_internal_set_type(from._internal_type());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CCSUsrMsg_RoundEndReportData_RerEvent_Objective::CopyFrom(const CCSUsrMsg_RoundEndReportData_RerEvent_Objective& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCSUsrMsg_RoundEndReportData.RerEvent.Objective)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCSUsrMsg_RoundEndReportData_RerEvent_Objective::IsInitialized() const {
  return true;
}

void CCSUsrMsg_RoundEndReportData_RerEvent_Objective::InternalSwap(CCSUsrMsg_RoundEndReportData_RerEvent_Objective* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.type_, other->_impl_.type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CCSUsrMsg_RoundEndReportData_RerEvent_Objective::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cstrike15_5fusermessages_2eproto_getter, &descriptor_table_cstrike15_5fusermessages_2eproto_once,
      file_level_metadata_cstrike15_5fusermessages_2eproto[68]);
}

// ===================================================================

class CCSUsrMsg_RoundEndReportData_RerEvent_Damage::_Internal {
 public:
  using HasBits = decltype(std::declval<CCSUsrMsg_RoundEndReportData_RerEvent_Damage>()._impl_._has_bits_);
  static void set_has_other_playerslot(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_other_xuid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_health_removed(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_num_hits(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_return_health_removed(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_return_num_hits(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

CCSUsrMsg_RoundEndReportData_RerEvent_Damage::CCSUsrMsg_RoundEndReportData_RerEvent_Damage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CCSUsrMsg_RoundEndReportData.RerEvent.Damage)
}
CCSUsrMsg_RoundEndReportData_RerEvent_Damage::CCSUsrMsg_RoundEndReportData_RerEvent_Damage(const CCSUsrMsg_RoundEndReportData_RerEvent_Damage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CCSUsrMsg_RoundEndReportData_RerEvent_Damage* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.other_xuid_){}
    , decltype(_impl_.health_removed_){}
    , decltype(_impl_.num_hits_){}
    , decltype(_impl_.return_health_removed_){}
    , decltype(_impl_.return_num_hits_){}
    , decltype(_impl_.other_playerslot_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.other_xuid_, &from._impl_.other_xuid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.other_playerslot_) -
    reinterpret_cast<char*>(&_impl_.other_xuid_)) + sizeof(_impl_.other_playerslot_));
  // @@protoc_insertion_point(copy_constructor:CCSUsrMsg_RoundEndReportData.RerEvent.Damage)
}

inline void CCSUsrMsg_RoundEndReportData_RerEvent_Damage::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.other_xuid_){uint64_t{0u}}
    , decltype(_impl_.health_removed_){0}
    , decltype(_impl_.num_hits_){0}
    , decltype(_impl_.return_health_removed_){0}
    , decltype(_impl_.return_num_hits_){0}
    , decltype(_impl_.other_playerslot_){-1}
  };
}

CCSUsrMsg_RoundEndReportData_RerEvent_Damage::~CCSUsrMsg_RoundEndReportData_RerEvent_Damage() {
  // @@protoc_insertion_point(destructor:CCSUsrMsg_RoundEndReportData.RerEvent.Damage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CCSUsrMsg_RoundEndReportData_RerEvent_Damage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CCSUsrMsg_RoundEndReportData_RerEvent_Damage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CCSUsrMsg_RoundEndReportData_RerEvent_Damage::Clear() {
// @@protoc_insertion_point(message_clear_start:CCSUsrMsg_RoundEndReportData.RerEvent.Damage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    ::memset(&_impl_.other_xuid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.return_num_hits_) -
        reinterpret_cast<char*>(&_impl_.other_xuid_)) + sizeof(_impl_.return_num_hits_));
    _impl_.other_playerslot_ = -1;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CCSUsrMsg_RoundEndReportData_RerEvent_Damage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 other_playerslot = 1 [default = -1];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_other_playerslot(&has_bits);
          _impl_.other_playerslot_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 other_xuid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_other_xuid(&has_bits);
          _impl_.other_xuid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 health_removed = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_health_removed(&has_bits);
          _impl_.health_removed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 num_hits = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_num_hits(&has_bits);
          _impl_.num_hits_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 return_health_removed = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_return_health_removed(&has_bits);
          _impl_.return_health_removed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 return_num_hits = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_return_num_hits(&has_bits);
          _impl_.return_num_hits_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CCSUsrMsg_RoundEndReportData_RerEvent_Damage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCSUsrMsg_RoundEndReportData.RerEvent.Damage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 other_playerslot = 1 [default = -1];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_other_playerslot(), target);
  }

  // optional uint64 other_xuid = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_other_xuid(), target);
  }

  // optional int32 health_removed = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_health_removed(), target);
  }

  // optional int32 num_hits = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_num_hits(), target);
  }

  // optional int32 return_health_removed = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_return_health_removed(), target);
  }

  // optional int32 return_num_hits = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(6, this->_internal_return_num_hits(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCSUsrMsg_RoundEndReportData.RerEvent.Damage)
  return target;
}

size_t CCSUsrMsg_RoundEndReportData_RerEvent_Damage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCSUsrMsg_RoundEndReportData.RerEvent.Damage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional uint64 other_xuid = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_other_xuid());
    }

    // optional int32 health_removed = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_health_removed());
    }

    // optional int32 num_hits = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_num_hits());
    }

    // optional int32 return_health_removed = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_return_health_removed());
    }

    // optional int32 return_num_hits = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_return_num_hits());
    }

    // optional int32 other_playerslot = 1 [default = -1];
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_other_playerslot());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CCSUsrMsg_RoundEndReportData_RerEvent_Damage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CCSUsrMsg_RoundEndReportData_RerEvent_Damage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CCSUsrMsg_RoundEndReportData_RerEvent_Damage::GetClassData() const { return &_class_data_; }


void CCSUsrMsg_RoundEndReportData_RerEvent_Damage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CCSUsrMsg_RoundEndReportData_RerEvent_Damage*>(&to_msg);
  auto& from = static_cast<const CCSUsrMsg_RoundEndReportData_RerEvent_Damage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CCSUsrMsg_RoundEndReportData.RerEvent.Damage)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.other_xuid_ = from._impl_.other_xuid_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.health_removed_ = from._impl_.health_removed_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.num_hits_ = from._impl_.num_hits_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.return_health_removed_ = from._impl_.return_health_removed_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.return_num_hits_ = from._impl_.return_num_hits_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.other_playerslot_ = from._impl_.other_playerslot_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CCSUsrMsg_RoundEndReportData_RerEvent_Damage::CopyFrom(const CCSUsrMsg_RoundEndReportData_RerEvent_Damage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCSUsrMsg_RoundEndReportData.RerEvent.Damage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCSUsrMsg_RoundEndReportData_RerEvent_Damage::IsInitialized() const {
  return true;
}

void CCSUsrMsg_RoundEndReportData_RerEvent_Damage::InternalSwap(CCSUsrMsg_RoundEndReportData_RerEvent_Damage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CCSUsrMsg_RoundEndReportData_RerEvent_Damage, _impl_.return_num_hits_)
      + sizeof(CCSUsrMsg_RoundEndReportData_RerEvent_Damage::_impl_.return_num_hits_)
      - PROTOBUF_FIELD_OFFSET(CCSUsrMsg_RoundEndReportData_RerEvent_Damage, _impl_.other_xuid_)>(
          reinterpret_cast<char*>(&_impl_.other_xuid_),
          reinterpret_cast<char*>(&other->_impl_.other_xuid_));
  swap(_impl_.other_playerslot_, other->_impl_.other_playerslot_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CCSUsrMsg_RoundEndReportData_RerEvent_Damage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cstrike15_5fusermessages_2eproto_getter, &descriptor_table_cstrike15_5fusermessages_2eproto_once,
      file_level_metadata_cstrike15_5fusermessages_2eproto[69]);
}

// ===================================================================

class CCSUsrMsg_RoundEndReportData_RerEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<CCSUsrMsg_RoundEndReportData_RerEvent>()._impl_._has_bits_);
  static void set_has_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_terrorist_odds(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_ct_alive(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_t_alive(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::CCSUsrMsg_RoundEndReportData_RerEvent_Victim& victim_data(const CCSUsrMsg_RoundEndReportData_RerEvent* msg);
  static void set_has_victim_data(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::CCSUsrMsg_RoundEndReportData_RerEvent_Objective& objective_data(const CCSUsrMsg_RoundEndReportData_RerEvent* msg);
  static void set_has_objective_data(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::CCSUsrMsg_RoundEndReportData_RerEvent_Victim&
CCSUsrMsg_RoundEndReportData_RerEvent::_Internal::victim_data(const CCSUsrMsg_RoundEndReportData_RerEvent* msg) {
  return *msg->_impl_.victim_data_;
}
const ::CCSUsrMsg_RoundEndReportData_RerEvent_Objective&
CCSUsrMsg_RoundEndReportData_RerEvent::_Internal::objective_data(const CCSUsrMsg_RoundEndReportData_RerEvent* msg) {
  return *msg->_impl_.objective_data_;
}
CCSUsrMsg_RoundEndReportData_RerEvent::CCSUsrMsg_RoundEndReportData_RerEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CCSUsrMsg_RoundEndReportData.RerEvent)
}
CCSUsrMsg_RoundEndReportData_RerEvent::CCSUsrMsg_RoundEndReportData_RerEvent(const CCSUsrMsg_RoundEndReportData_RerEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CCSUsrMsg_RoundEndReportData_RerEvent* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.all_damage_data_){from._impl_.all_damage_data_}
    , decltype(_impl_.victim_data_){nullptr}
    , decltype(_impl_.objective_data_){nullptr}
    , decltype(_impl_.timestamp_){}
    , decltype(_impl_.terrorist_odds_){}
    , decltype(_impl_.ct_alive_){}
    , decltype(_impl_.t_alive_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_victim_data()) {
    _this->_impl_.victim_data_ = new ::CCSUsrMsg_RoundEndReportData_RerEvent_Victim(*from._impl_.victim_data_);
  }
  if (from._internal_has_objective_data()) {
    _this->_impl_.objective_data_ = new ::CCSUsrMsg_RoundEndReportData_RerEvent_Objective(*from._impl_.objective_data_);
  }
  ::memcpy(&_impl_.timestamp_, &from._impl_.timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.t_alive_) -
    reinterpret_cast<char*>(&_impl_.timestamp_)) + sizeof(_impl_.t_alive_));
  // @@protoc_insertion_point(copy_constructor:CCSUsrMsg_RoundEndReportData.RerEvent)
}

inline void CCSUsrMsg_RoundEndReportData_RerEvent::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.all_damage_data_){arena}
    , decltype(_impl_.victim_data_){nullptr}
    , decltype(_impl_.objective_data_){nullptr}
    , decltype(_impl_.timestamp_){0}
    , decltype(_impl_.terrorist_odds_){0}
    , decltype(_impl_.ct_alive_){0}
    , decltype(_impl_.t_alive_){0}
  };
}

CCSUsrMsg_RoundEndReportData_RerEvent::~CCSUsrMsg_RoundEndReportData_RerEvent() {
  // @@protoc_insertion_point(destructor:CCSUsrMsg_RoundEndReportData.RerEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CCSUsrMsg_RoundEndReportData_RerEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.all_damage_data_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.victim_data_;
  if (this != internal_default_instance()) delete _impl_.objective_data_;
}

void CCSUsrMsg_RoundEndReportData_RerEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CCSUsrMsg_RoundEndReportData_RerEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:CCSUsrMsg_RoundEndReportData.RerEvent)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.all_damage_data_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.victim_data_ != nullptr);
      _impl_.victim_data_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.objective_data_ != nullptr);
      _impl_.objective_data_->Clear();
    }
  }
  if (cached_has_bits & 0x0000003cu) {
    ::memset(&_impl_.timestamp_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.t_alive_) -
        reinterpret_cast<char*>(&_impl_.timestamp_)) + sizeof(_impl_.t_alive_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CCSUsrMsg_RoundEndReportData_RerEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional float timestamp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          _Internal::set_has_timestamp(&has_bits);
          _impl_.timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional int32 terrorist_odds = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_terrorist_odds(&has_bits);
          _impl_.terrorist_odds_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 ct_alive = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_ct_alive(&has_bits);
          _impl_.ct_alive_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 t_alive = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_t_alive(&has_bits);
          _impl_.t_alive_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .CCSUsrMsg_RoundEndReportData.RerEvent.Victim victim_data = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_victim_data(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .CCSUsrMsg_RoundEndReportData.RerEvent.Objective objective_data = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_objective_data(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .CCSUsrMsg_RoundEndReportData.RerEvent.Damage all_damage_data = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_all_damage_data(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CCSUsrMsg_RoundEndReportData_RerEvent::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCSUsrMsg_RoundEndReportData.RerEvent)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional float timestamp = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(1, this->_internal_timestamp(), target);
  }

  // optional int32 terrorist_odds = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_terrorist_odds(), target);
  }

  // optional int32 ct_alive = 3;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_ct_alive(), target);
  }

  // optional int32 t_alive = 4;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_t_alive(), target);
  }

  // optional .CCSUsrMsg_RoundEndReportData.RerEvent.Victim victim_data = 5;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::victim_data(this),
        _Internal::victim_data(this).GetCachedSize(), target, stream);
  }

  // optional .CCSUsrMsg_RoundEndReportData.RerEvent.Objective objective_data = 6;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::objective_data(this),
        _Internal::objective_data(this).GetCachedSize(), target, stream);
  }

  // repeated .CCSUsrMsg_RoundEndReportData.RerEvent.Damage all_damage_data = 7;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_all_damage_data_size()); i < n; i++) {
    const auto& repfield = this->_internal_all_damage_data(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(7, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCSUsrMsg_RoundEndReportData.RerEvent)
  return target;
}

size_t CCSUsrMsg_RoundEndReportData_RerEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCSUsrMsg_RoundEndReportData.RerEvent)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CCSUsrMsg_RoundEndReportData.RerEvent.Damage all_damage_data = 7;
  total_size += 1UL * this->_internal_all_damage_data_size();
  for (const auto& msg : this->_impl_.all_damage_data_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional .CCSUsrMsg_RoundEndReportData.RerEvent.Victim victim_data = 5;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.victim_data_);
    }

    // optional .CCSUsrMsg_RoundEndReportData.RerEvent.Objective objective_data = 6;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.objective_data_);
    }

    // optional float timestamp = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

    // optional int32 terrorist_odds = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_terrorist_odds());
    }

    // optional int32 ct_alive = 3;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_ct_alive());
    }

    // optional int32 t_alive = 4;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_t_alive());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CCSUsrMsg_RoundEndReportData_RerEvent::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CCSUsrMsg_RoundEndReportData_RerEvent::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CCSUsrMsg_RoundEndReportData_RerEvent::GetClassData() const { return &_class_data_; }


void CCSUsrMsg_RoundEndReportData_RerEvent::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CCSUsrMsg_RoundEndReportData_RerEvent*>(&to_msg);
  auto& from = static_cast<const CCSUsrMsg_RoundEndReportData_RerEvent&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CCSUsrMsg_RoundEndReportData.RerEvent)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.all_damage_data_.MergeFrom(from._impl_.all_damage_data_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_victim_data()->::CCSUsrMsg_RoundEndReportData_RerEvent_Victim::MergeFrom(
          from._internal_victim_data());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_objective_data()->::CCSUsrMsg_RoundEndReportData_RerEvent_Objective::MergeFrom(
          from._internal_objective_data());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.timestamp_ = from._impl_.timestamp_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.terrorist_odds_ = from._impl_.terrorist_odds_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.ct_alive_ = from._impl_.ct_alive_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.t_alive_ = from._impl_.t_alive_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CCSUsrMsg_RoundEndReportData_RerEvent::CopyFrom(const CCSUsrMsg_RoundEndReportData_RerEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCSUsrMsg_RoundEndReportData.RerEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCSUsrMsg_RoundEndReportData_RerEvent::IsInitialized() const {
  return true;
}

void CCSUsrMsg_RoundEndReportData_RerEvent::InternalSwap(CCSUsrMsg_RoundEndReportData_RerEvent* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.all_damage_data_.InternalSwap(&other->_impl_.all_damage_data_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CCSUsrMsg_RoundEndReportData_RerEvent, _impl_.t_alive_)
      + sizeof(CCSUsrMsg_RoundEndReportData_RerEvent::_impl_.t_alive_)
      - PROTOBUF_FIELD_OFFSET(CCSUsrMsg_RoundEndReportData_RerEvent, _impl_.victim_data_)>(
          reinterpret_cast<char*>(&_impl_.victim_data_),
          reinterpret_cast<char*>(&other->_impl_.victim_data_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CCSUsrMsg_RoundEndReportData_RerEvent::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cstrike15_5fusermessages_2eproto_getter, &descriptor_table_cstrike15_5fusermessages_2eproto_once,
      file_level_metadata_cstrike15_5fusermessages_2eproto[70]);
}

// ===================================================================

class CCSUsrMsg_RoundEndReportData_InitialConditions::_Internal {
 public:
  using HasBits = decltype(std::declval<CCSUsrMsg_RoundEndReportData_InitialConditions>()._impl_._has_bits_);
  static void set_has_ct_equip_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_t_equip_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_terrorist_odds(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CCSUsrMsg_RoundEndReportData_InitialConditions::CCSUsrMsg_RoundEndReportData_InitialConditions(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CCSUsrMsg_RoundEndReportData.InitialConditions)
}
CCSUsrMsg_RoundEndReportData_InitialConditions::CCSUsrMsg_RoundEndReportData_InitialConditions(const CCSUsrMsg_RoundEndReportData_InitialConditions& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CCSUsrMsg_RoundEndReportData_InitialConditions* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.ct_equip_value_){}
    , decltype(_impl_.t_equip_value_){}
    , decltype(_impl_.terrorist_odds_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.ct_equip_value_, &from._impl_.ct_equip_value_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.terrorist_odds_) -
    reinterpret_cast<char*>(&_impl_.ct_equip_value_)) + sizeof(_impl_.terrorist_odds_));
  // @@protoc_insertion_point(copy_constructor:CCSUsrMsg_RoundEndReportData.InitialConditions)
}

inline void CCSUsrMsg_RoundEndReportData_InitialConditions::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.ct_equip_value_){0}
    , decltype(_impl_.t_equip_value_){0}
    , decltype(_impl_.terrorist_odds_){0}
  };
}

CCSUsrMsg_RoundEndReportData_InitialConditions::~CCSUsrMsg_RoundEndReportData_InitialConditions() {
  // @@protoc_insertion_point(destructor:CCSUsrMsg_RoundEndReportData.InitialConditions)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CCSUsrMsg_RoundEndReportData_InitialConditions::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CCSUsrMsg_RoundEndReportData_InitialConditions::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CCSUsrMsg_RoundEndReportData_InitialConditions::Clear() {
// @@protoc_insertion_point(message_clear_start:CCSUsrMsg_RoundEndReportData.InitialConditions)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.ct_equip_value_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.terrorist_odds_) -
        reinterpret_cast<char*>(&_impl_.ct_equip_value_)) + sizeof(_impl_.terrorist_odds_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CCSUsrMsg_RoundEndReportData_InitialConditions::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 ct_equip_value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_ct_equip_value(&has_bits);
          _impl_.ct_equip_value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 t_equip_value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_t_equip_value(&has_bits);
          _impl_.t_equip_value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 terrorist_odds = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_terrorist_odds(&has_bits);
          _impl_.terrorist_odds_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CCSUsrMsg_RoundEndReportData_InitialConditions::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCSUsrMsg_RoundEndReportData.InitialConditions)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 ct_equip_value = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_ct_equip_value(), target);
  }

  // optional int32 t_equip_value = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_t_equip_value(), target);
  }

  // optional int32 terrorist_odds = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_terrorist_odds(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCSUsrMsg_RoundEndReportData.InitialConditions)
  return target;
}

size_t CCSUsrMsg_RoundEndReportData_InitialConditions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCSUsrMsg_RoundEndReportData.InitialConditions)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional int32 ct_equip_value = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_ct_equip_value());
    }

    // optional int32 t_equip_value = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_t_equip_value());
    }

    // optional int32 terrorist_odds = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_terrorist_odds());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CCSUsrMsg_RoundEndReportData_InitialConditions::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CCSUsrMsg_RoundEndReportData_InitialConditions::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CCSUsrMsg_RoundEndReportData_InitialConditions::GetClassData() const { return &_class_data_; }


void CCSUsrMsg_RoundEndReportData_InitialConditions::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CCSUsrMsg_RoundEndReportData_InitialConditions*>(&to_msg);
  auto& from = static_cast<const CCSUsrMsg_RoundEndReportData_InitialConditions&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CCSUsrMsg_RoundEndReportData.InitialConditions)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.ct_equip_value_ = from._impl_.ct_equip_value_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.t_equip_value_ = from._impl_.t_equip_value_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.terrorist_odds_ = from._impl_.terrorist_odds_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CCSUsrMsg_RoundEndReportData_InitialConditions::CopyFrom(const CCSUsrMsg_RoundEndReportData_InitialConditions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCSUsrMsg_RoundEndReportData.InitialConditions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCSUsrMsg_RoundEndReportData_InitialConditions::IsInitialized() const {
  return true;
}

void CCSUsrMsg_RoundEndReportData_InitialConditions::InternalSwap(CCSUsrMsg_RoundEndReportData_InitialConditions* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CCSUsrMsg_RoundEndReportData_InitialConditions, _impl_.terrorist_odds_)
      + sizeof(CCSUsrMsg_RoundEndReportData_InitialConditions::_impl_.terrorist_odds_)
      - PROTOBUF_FIELD_OFFSET(CCSUsrMsg_RoundEndReportData_InitialConditions, _impl_.ct_equip_value_)>(
          reinterpret_cast<char*>(&_impl_.ct_equip_value_),
          reinterpret_cast<char*>(&other->_impl_.ct_equip_value_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CCSUsrMsg_RoundEndReportData_InitialConditions::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cstrike15_5fusermessages_2eproto_getter, &descriptor_table_cstrike15_5fusermessages_2eproto_once,
      file_level_metadata_cstrike15_5fusermessages_2eproto[71]);
}

// ===================================================================

class CCSUsrMsg_RoundEndReportData::_Internal {
 public:
  using HasBits = decltype(std::declval<CCSUsrMsg_RoundEndReportData>()._impl_._has_bits_);
  static const ::CCSUsrMsg_RoundEndReportData_InitialConditions& init_conditions(const CCSUsrMsg_RoundEndReportData* msg);
  static void set_has_init_conditions(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::CCSUsrMsg_RoundEndReportData_InitialConditions&
CCSUsrMsg_RoundEndReportData::_Internal::init_conditions(const CCSUsrMsg_RoundEndReportData* msg) {
  return *msg->_impl_.init_conditions_;
}
CCSUsrMsg_RoundEndReportData::CCSUsrMsg_RoundEndReportData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CCSUsrMsg_RoundEndReportData)
}
CCSUsrMsg_RoundEndReportData::CCSUsrMsg_RoundEndReportData(const CCSUsrMsg_RoundEndReportData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CCSUsrMsg_RoundEndReportData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.all_rer_event_data_){from._impl_.all_rer_event_data_}
    , decltype(_impl_.init_conditions_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_init_conditions()) {
    _this->_impl_.init_conditions_ = new ::CCSUsrMsg_RoundEndReportData_InitialConditions(*from._impl_.init_conditions_);
  }
  // @@protoc_insertion_point(copy_constructor:CCSUsrMsg_RoundEndReportData)
}

inline void CCSUsrMsg_RoundEndReportData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.all_rer_event_data_){arena}
    , decltype(_impl_.init_conditions_){nullptr}
  };
}

CCSUsrMsg_RoundEndReportData::~CCSUsrMsg_RoundEndReportData() {
  // @@protoc_insertion_point(destructor:CCSUsrMsg_RoundEndReportData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CCSUsrMsg_RoundEndReportData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.all_rer_event_data_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.init_conditions_;
}

void CCSUsrMsg_RoundEndReportData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CCSUsrMsg_RoundEndReportData::Clear() {
// @@protoc_insertion_point(message_clear_start:CCSUsrMsg_RoundEndReportData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.all_rer_event_data_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.init_conditions_ != nullptr);
    _impl_.init_conditions_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CCSUsrMsg_RoundEndReportData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .CCSUsrMsg_RoundEndReportData.InitialConditions init_conditions = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_init_conditions(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .CCSUsrMsg_RoundEndReportData.RerEvent all_rer_event_data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_all_rer_event_data(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CCSUsrMsg_RoundEndReportData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCSUsrMsg_RoundEndReportData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .CCSUsrMsg_RoundEndReportData.InitialConditions init_conditions = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::init_conditions(this),
        _Internal::init_conditions(this).GetCachedSize(), target, stream);
  }

  // repeated .CCSUsrMsg_RoundEndReportData.RerEvent all_rer_event_data = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_all_rer_event_data_size()); i < n; i++) {
    const auto& repfield = this->_internal_all_rer_event_data(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCSUsrMsg_RoundEndReportData)
  return target;
}

size_t CCSUsrMsg_RoundEndReportData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCSUsrMsg_RoundEndReportData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CCSUsrMsg_RoundEndReportData.RerEvent all_rer_event_data = 2;
  total_size += 1UL * this->_internal_all_rer_event_data_size();
  for (const auto& msg : this->_impl_.all_rer_event_data_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional .CCSUsrMsg_RoundEndReportData.InitialConditions init_conditions = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.init_conditions_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CCSUsrMsg_RoundEndReportData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CCSUsrMsg_RoundEndReportData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CCSUsrMsg_RoundEndReportData::GetClassData() const { return &_class_data_; }


void CCSUsrMsg_RoundEndReportData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CCSUsrMsg_RoundEndReportData*>(&to_msg);
  auto& from = static_cast<const CCSUsrMsg_RoundEndReportData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CCSUsrMsg_RoundEndReportData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.all_rer_event_data_.MergeFrom(from._impl_.all_rer_event_data_);
  if (from._internal_has_init_conditions()) {
    _this->_internal_mutable_init_conditions()->::CCSUsrMsg_RoundEndReportData_InitialConditions::MergeFrom(
        from._internal_init_conditions());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CCSUsrMsg_RoundEndReportData::CopyFrom(const CCSUsrMsg_RoundEndReportData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCSUsrMsg_RoundEndReportData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCSUsrMsg_RoundEndReportData::IsInitialized() const {
  return true;
}

void CCSUsrMsg_RoundEndReportData::InternalSwap(CCSUsrMsg_RoundEndReportData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.all_rer_event_data_.InternalSwap(&other->_impl_.all_rer_event_data_);
  swap(_impl_.init_conditions_, other->_impl_.init_conditions_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CCSUsrMsg_RoundEndReportData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cstrike15_5fusermessages_2eproto_getter, &descriptor_table_cstrike15_5fusermessages_2eproto_once,
      file_level_metadata_cstrike15_5fusermessages_2eproto[72]);
}

// ===================================================================

class CCSUsrMsg_PostRoundDamageReport::_Internal {
 public:
  using HasBits = decltype(std::declval<CCSUsrMsg_PostRoundDamageReport>()._impl_._has_bits_);
  static void set_has_other_xuid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_given_kill_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_given_health_removed(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_given_num_hits(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_taken_kill_type(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_taken_health_removed(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_taken_num_hits(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

CCSUsrMsg_PostRoundDamageReport::CCSUsrMsg_PostRoundDamageReport(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CCSUsrMsg_PostRoundDamageReport)
}
CCSUsrMsg_PostRoundDamageReport::CCSUsrMsg_PostRoundDamageReport(const CCSUsrMsg_PostRoundDamageReport& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CCSUsrMsg_PostRoundDamageReport* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.other_xuid_){}
    , decltype(_impl_.given_kill_type_){}
    , decltype(_impl_.given_health_removed_){}
    , decltype(_impl_.given_num_hits_){}
    , decltype(_impl_.taken_kill_type_){}
    , decltype(_impl_.taken_health_removed_){}
    , decltype(_impl_.taken_num_hits_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.other_xuid_, &from._impl_.other_xuid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.taken_num_hits_) -
    reinterpret_cast<char*>(&_impl_.other_xuid_)) + sizeof(_impl_.taken_num_hits_));
  // @@protoc_insertion_point(copy_constructor:CCSUsrMsg_PostRoundDamageReport)
}

inline void CCSUsrMsg_PostRoundDamageReport::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.other_xuid_){uint64_t{0u}}
    , decltype(_impl_.given_kill_type_){0}
    , decltype(_impl_.given_health_removed_){0}
    , decltype(_impl_.given_num_hits_){0}
    , decltype(_impl_.taken_kill_type_){0}
    , decltype(_impl_.taken_health_removed_){0}
    , decltype(_impl_.taken_num_hits_){0}
  };
}

CCSUsrMsg_PostRoundDamageReport::~CCSUsrMsg_PostRoundDamageReport() {
  // @@protoc_insertion_point(destructor:CCSUsrMsg_PostRoundDamageReport)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CCSUsrMsg_PostRoundDamageReport::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CCSUsrMsg_PostRoundDamageReport::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CCSUsrMsg_PostRoundDamageReport::Clear() {
// @@protoc_insertion_point(message_clear_start:CCSUsrMsg_PostRoundDamageReport)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    ::memset(&_impl_.other_xuid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.taken_num_hits_) -
        reinterpret_cast<char*>(&_impl_.other_xuid_)) + sizeof(_impl_.taken_num_hits_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CCSUsrMsg_PostRoundDamageReport::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 other_xuid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_other_xuid(&has_bits);
          _impl_.other_xuid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 given_kill_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_given_kill_type(&has_bits);
          _impl_.given_kill_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 given_health_removed = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_given_health_removed(&has_bits);
          _impl_.given_health_removed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 given_num_hits = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_given_num_hits(&has_bits);
          _impl_.given_num_hits_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 taken_kill_type = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_taken_kill_type(&has_bits);
          _impl_.taken_kill_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 taken_health_removed = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_taken_health_removed(&has_bits);
          _impl_.taken_health_removed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 taken_num_hits = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_taken_num_hits(&has_bits);
          _impl_.taken_num_hits_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CCSUsrMsg_PostRoundDamageReport::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCSUsrMsg_PostRoundDamageReport)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint64 other_xuid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_other_xuid(), target);
  }

  // optional int32 given_kill_type = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_given_kill_type(), target);
  }

  // optional int32 given_health_removed = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_given_health_removed(), target);
  }

  // optional int32 given_num_hits = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_given_num_hits(), target);
  }

  // optional int32 taken_kill_type = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_taken_kill_type(), target);
  }

  // optional int32 taken_health_removed = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(6, this->_internal_taken_health_removed(), target);
  }

  // optional int32 taken_num_hits = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(7, this->_internal_taken_num_hits(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCSUsrMsg_PostRoundDamageReport)
  return target;
}

size_t CCSUsrMsg_PostRoundDamageReport::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCSUsrMsg_PostRoundDamageReport)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional uint64 other_xuid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_other_xuid());
    }

    // optional int32 given_kill_type = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_given_kill_type());
    }

    // optional int32 given_health_removed = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_given_health_removed());
    }

    // optional int32 given_num_hits = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_given_num_hits());
    }

    // optional int32 taken_kill_type = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_taken_kill_type());
    }

    // optional int32 taken_health_removed = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_taken_health_removed());
    }

    // optional int32 taken_num_hits = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_taken_num_hits());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CCSUsrMsg_PostRoundDamageReport::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CCSUsrMsg_PostRoundDamageReport::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CCSUsrMsg_PostRoundDamageReport::GetClassData() const { return &_class_data_; }


void CCSUsrMsg_PostRoundDamageReport::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CCSUsrMsg_PostRoundDamageReport*>(&to_msg);
  auto& from = static_cast<const CCSUsrMsg_PostRoundDamageReport&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CCSUsrMsg_PostRoundDamageReport)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.other_xuid_ = from._impl_.other_xuid_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.given_kill_type_ = from._impl_.given_kill_type_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.given_health_removed_ = from._impl_.given_health_removed_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.given_num_hits_ = from._impl_.given_num_hits_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.taken_kill_type_ = from._impl_.taken_kill_type_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.taken_health_removed_ = from._impl_.taken_health_removed_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.taken_num_hits_ = from._impl_.taken_num_hits_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CCSUsrMsg_PostRoundDamageReport::CopyFrom(const CCSUsrMsg_PostRoundDamageReport& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCSUsrMsg_PostRoundDamageReport)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCSUsrMsg_PostRoundDamageReport::IsInitialized() const {
  return true;
}

void CCSUsrMsg_PostRoundDamageReport::InternalSwap(CCSUsrMsg_PostRoundDamageReport* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CCSUsrMsg_PostRoundDamageReport, _impl_.taken_num_hits_)
      + sizeof(CCSUsrMsg_PostRoundDamageReport::_impl_.taken_num_hits_)
      - PROTOBUF_FIELD_OFFSET(CCSUsrMsg_PostRoundDamageReport, _impl_.other_xuid_)>(
          reinterpret_cast<char*>(&_impl_.other_xuid_),
          reinterpret_cast<char*>(&other->_impl_.other_xuid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CCSUsrMsg_PostRoundDamageReport::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cstrike15_5fusermessages_2eproto_getter, &descriptor_table_cstrike15_5fusermessages_2eproto_once,
      file_level_metadata_cstrike15_5fusermessages_2eproto[73]);
}

// ===================================================================

class CCSUsrMsg_CurrentRoundOdds::_Internal {
 public:
  using HasBits = decltype(std::declval<CCSUsrMsg_CurrentRoundOdds>()._impl_._has_bits_);
  static void set_has_odds(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CCSUsrMsg_CurrentRoundOdds::CCSUsrMsg_CurrentRoundOdds(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CCSUsrMsg_CurrentRoundOdds)
}
CCSUsrMsg_CurrentRoundOdds::CCSUsrMsg_CurrentRoundOdds(const CCSUsrMsg_CurrentRoundOdds& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CCSUsrMsg_CurrentRoundOdds* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.odds_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.odds_ = from._impl_.odds_;
  // @@protoc_insertion_point(copy_constructor:CCSUsrMsg_CurrentRoundOdds)
}

inline void CCSUsrMsg_CurrentRoundOdds::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.odds_){0}
  };
}

CCSUsrMsg_CurrentRoundOdds::~CCSUsrMsg_CurrentRoundOdds() {
  // @@protoc_insertion_point(destructor:CCSUsrMsg_CurrentRoundOdds)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CCSUsrMsg_CurrentRoundOdds::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CCSUsrMsg_CurrentRoundOdds::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CCSUsrMsg_CurrentRoundOdds::Clear() {
// @@protoc_insertion_point(message_clear_start:CCSUsrMsg_CurrentRoundOdds)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.odds_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CCSUsrMsg_CurrentRoundOdds::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 odds = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_odds(&has_bits);
          _impl_.odds_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CCSUsrMsg_CurrentRoundOdds::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCSUsrMsg_CurrentRoundOdds)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 odds = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_odds(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCSUsrMsg_CurrentRoundOdds)
  return target;
}

size_t CCSUsrMsg_CurrentRoundOdds::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCSUsrMsg_CurrentRoundOdds)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int32 odds = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_odds());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CCSUsrMsg_CurrentRoundOdds::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CCSUsrMsg_CurrentRoundOdds::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CCSUsrMsg_CurrentRoundOdds::GetClassData() const { return &_class_data_; }


void CCSUsrMsg_CurrentRoundOdds::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CCSUsrMsg_CurrentRoundOdds*>(&to_msg);
  auto& from = static_cast<const CCSUsrMsg_CurrentRoundOdds&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CCSUsrMsg_CurrentRoundOdds)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_odds()) {
    _this->_internal_set_odds(from._internal_odds());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CCSUsrMsg_CurrentRoundOdds::CopyFrom(const CCSUsrMsg_CurrentRoundOdds& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCSUsrMsg_CurrentRoundOdds)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCSUsrMsg_CurrentRoundOdds::IsInitialized() const {
  return true;
}

void CCSUsrMsg_CurrentRoundOdds::InternalSwap(CCSUsrMsg_CurrentRoundOdds* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.odds_, other->_impl_.odds_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CCSUsrMsg_CurrentRoundOdds::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cstrike15_5fusermessages_2eproto_getter, &descriptor_table_cstrike15_5fusermessages_2eproto_once,
      file_level_metadata_cstrike15_5fusermessages_2eproto[74]);
}

// ===================================================================

class CCSUsrMsg_DeepStats::_Internal {
 public:
  using HasBits = decltype(std::declval<CCSUsrMsg_DeepStats>()._impl_._has_bits_);
  static const ::CMsgGCCStrike15_ClientDeepStats& stats(const CCSUsrMsg_DeepStats* msg);
  static void set_has_stats(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::CMsgGCCStrike15_ClientDeepStats&
CCSUsrMsg_DeepStats::_Internal::stats(const CCSUsrMsg_DeepStats* msg) {
  return *msg->_impl_.stats_;
}
void CCSUsrMsg_DeepStats::clear_stats() {
  if (_impl_.stats_ != nullptr) _impl_.stats_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
CCSUsrMsg_DeepStats::CCSUsrMsg_DeepStats(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CCSUsrMsg_DeepStats)
}
CCSUsrMsg_DeepStats::CCSUsrMsg_DeepStats(const CCSUsrMsg_DeepStats& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CCSUsrMsg_DeepStats* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.stats_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_stats()) {
    _this->_impl_.stats_ = new ::CMsgGCCStrike15_ClientDeepStats(*from._impl_.stats_);
  }
  // @@protoc_insertion_point(copy_constructor:CCSUsrMsg_DeepStats)
}

inline void CCSUsrMsg_DeepStats::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.stats_){nullptr}
  };
}

CCSUsrMsg_DeepStats::~CCSUsrMsg_DeepStats() {
  // @@protoc_insertion_point(destructor:CCSUsrMsg_DeepStats)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CCSUsrMsg_DeepStats::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.stats_;
}

void CCSUsrMsg_DeepStats::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CCSUsrMsg_DeepStats::Clear() {
// @@protoc_insertion_point(message_clear_start:CCSUsrMsg_DeepStats)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.stats_ != nullptr);
    _impl_.stats_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CCSUsrMsg_DeepStats::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .CMsgGCCStrike15_ClientDeepStats stats = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_stats(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CCSUsrMsg_DeepStats::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCSUsrMsg_DeepStats)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .CMsgGCCStrike15_ClientDeepStats stats = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::stats(this),
        _Internal::stats(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCSUsrMsg_DeepStats)
  return target;
}

size_t CCSUsrMsg_DeepStats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCSUsrMsg_DeepStats)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .CMsgGCCStrike15_ClientDeepStats stats = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.stats_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CCSUsrMsg_DeepStats::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CCSUsrMsg_DeepStats::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CCSUsrMsg_DeepStats::GetClassData() const { return &_class_data_; }


void CCSUsrMsg_DeepStats::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CCSUsrMsg_DeepStats*>(&to_msg);
  auto& from = static_cast<const CCSUsrMsg_DeepStats&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CCSUsrMsg_DeepStats)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_stats()) {
    _this->_internal_mutable_stats()->::CMsgGCCStrike15_ClientDeepStats::MergeFrom(
        from._internal_stats());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CCSUsrMsg_DeepStats::CopyFrom(const CCSUsrMsg_DeepStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCSUsrMsg_DeepStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCSUsrMsg_DeepStats::IsInitialized() const {
  return true;
}

void CCSUsrMsg_DeepStats::InternalSwap(CCSUsrMsg_DeepStats* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.stats_, other->_impl_.stats_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CCSUsrMsg_DeepStats::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cstrike15_5fusermessages_2eproto_getter, &descriptor_table_cstrike15_5fusermessages_2eproto_once,
      file_level_metadata_cstrike15_5fusermessages_2eproto[75]);
}

// ===================================================================

class CCSUsrMsg_ShootInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<CCSUsrMsg_ShootInfo>()._impl_._has_bits_);
  static void set_has_frame_number(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::CMsgVector& shoot_pos(const CCSUsrMsg_ShootInfo* msg);
  static void set_has_shoot_pos(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::CMsgQAngle& shoot_dir(const CCSUsrMsg_ShootInfo* msg);
  static void set_has_shoot_dir(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::CMsgVector&
CCSUsrMsg_ShootInfo::_Internal::shoot_pos(const CCSUsrMsg_ShootInfo* msg) {
  return *msg->_impl_.shoot_pos_;
}
const ::CMsgQAngle&
CCSUsrMsg_ShootInfo::_Internal::shoot_dir(const CCSUsrMsg_ShootInfo* msg) {
  return *msg->_impl_.shoot_dir_;
}
void CCSUsrMsg_ShootInfo::clear_hitbox_transforms() {
  _impl_.hitbox_transforms_.Clear();
}
void CCSUsrMsg_ShootInfo::clear_shoot_pos() {
  if (_impl_.shoot_pos_ != nullptr) _impl_.shoot_pos_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void CCSUsrMsg_ShootInfo::clear_shoot_dir() {
  if (_impl_.shoot_dir_ != nullptr) _impl_.shoot_dir_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
CCSUsrMsg_ShootInfo::CCSUsrMsg_ShootInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CCSUsrMsg_ShootInfo)
}
CCSUsrMsg_ShootInfo::CCSUsrMsg_ShootInfo(const CCSUsrMsg_ShootInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CCSUsrMsg_ShootInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.hitbox_transforms_){from._impl_.hitbox_transforms_}
    , decltype(_impl_.shoot_pos_){nullptr}
    , decltype(_impl_.shoot_dir_){nullptr}
    , decltype(_impl_.frame_number_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_shoot_pos()) {
    _this->_impl_.shoot_pos_ = new ::CMsgVector(*from._impl_.shoot_pos_);
  }
  if (from._internal_has_shoot_dir()) {
    _this->_impl_.shoot_dir_ = new ::CMsgQAngle(*from._impl_.shoot_dir_);
  }
  _this->_impl_.frame_number_ = from._impl_.frame_number_;
  // @@protoc_insertion_point(copy_constructor:CCSUsrMsg_ShootInfo)
}

inline void CCSUsrMsg_ShootInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.hitbox_transforms_){arena}
    , decltype(_impl_.shoot_pos_){nullptr}
    , decltype(_impl_.shoot_dir_){nullptr}
    , decltype(_impl_.frame_number_){0}
  };
}

CCSUsrMsg_ShootInfo::~CCSUsrMsg_ShootInfo() {
  // @@protoc_insertion_point(destructor:CCSUsrMsg_ShootInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CCSUsrMsg_ShootInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.hitbox_transforms_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.shoot_pos_;
  if (this != internal_default_instance()) delete _impl_.shoot_dir_;
}

void CCSUsrMsg_ShootInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CCSUsrMsg_ShootInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:CCSUsrMsg_ShootInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.hitbox_transforms_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.shoot_pos_ != nullptr);
      _impl_.shoot_pos_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.shoot_dir_ != nullptr);
      _impl_.shoot_dir_->Clear();
    }
  }
  _impl_.frame_number_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CCSUsrMsg_ShootInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 frame_number = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_frame_number(&has_bits);
          _impl_.frame_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .CMsgTransform hitbox_transforms = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_hitbox_transforms(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .CMsgVector shoot_pos = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_shoot_pos(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .CMsgQAngle shoot_dir = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_shoot_dir(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CCSUsrMsg_ShootInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCSUsrMsg_ShootInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 frame_number = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_frame_number(), target);
  }

  // repeated .CMsgTransform hitbox_transforms = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_hitbox_transforms_size()); i < n; i++) {
    const auto& repfield = this->_internal_hitbox_transforms(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional .CMsgVector shoot_pos = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::shoot_pos(this),
        _Internal::shoot_pos(this).GetCachedSize(), target, stream);
  }

  // optional .CMsgQAngle shoot_dir = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::shoot_dir(this),
        _Internal::shoot_dir(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCSUsrMsg_ShootInfo)
  return target;
}

size_t CCSUsrMsg_ShootInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCSUsrMsg_ShootInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgTransform hitbox_transforms = 2;
  total_size += 1UL * this->_internal_hitbox_transforms_size();
  for (const auto& msg : this->_impl_.hitbox_transforms_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .CMsgVector shoot_pos = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.shoot_pos_);
    }

    // optional .CMsgQAngle shoot_dir = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.shoot_dir_);
    }

    // optional int32 frame_number = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_frame_number());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CCSUsrMsg_ShootInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CCSUsrMsg_ShootInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CCSUsrMsg_ShootInfo::GetClassData() const { return &_class_data_; }


void CCSUsrMsg_ShootInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CCSUsrMsg_ShootInfo*>(&to_msg);
  auto& from = static_cast<const CCSUsrMsg_ShootInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CCSUsrMsg_ShootInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.hitbox_transforms_.MergeFrom(from._impl_.hitbox_transforms_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_shoot_pos()->::CMsgVector::MergeFrom(
          from._internal_shoot_pos());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_shoot_dir()->::CMsgQAngle::MergeFrom(
          from._internal_shoot_dir());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.frame_number_ = from._impl_.frame_number_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CCSUsrMsg_ShootInfo::CopyFrom(const CCSUsrMsg_ShootInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCSUsrMsg_ShootInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCSUsrMsg_ShootInfo::IsInitialized() const {
  return true;
}

void CCSUsrMsg_ShootInfo::InternalSwap(CCSUsrMsg_ShootInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.hitbox_transforms_.InternalSwap(&other->_impl_.hitbox_transforms_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CCSUsrMsg_ShootInfo, _impl_.frame_number_)
      + sizeof(CCSUsrMsg_ShootInfo::_impl_.frame_number_)
      - PROTOBUF_FIELD_OFFSET(CCSUsrMsg_ShootInfo, _impl_.shoot_pos_)>(
          reinterpret_cast<char*>(&_impl_.shoot_pos_),
          reinterpret_cast<char*>(&other->_impl_.shoot_pos_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CCSUsrMsg_ShootInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cstrike15_5fusermessages_2eproto_getter, &descriptor_table_cstrike15_5fusermessages_2eproto_once,
      file_level_metadata_cstrike15_5fusermessages_2eproto[76]);
}

// ===================================================================

class CCSUsrMsg_ResetHud::_Internal {
 public:
  using HasBits = decltype(std::declval<CCSUsrMsg_ResetHud>()._impl_._has_bits_);
  static void set_has_reset(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CCSUsrMsg_ResetHud::CCSUsrMsg_ResetHud(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CCSUsrMsg_ResetHud)
}
CCSUsrMsg_ResetHud::CCSUsrMsg_ResetHud(const CCSUsrMsg_ResetHud& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CCSUsrMsg_ResetHud* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.reset_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.reset_ = from._impl_.reset_;
  // @@protoc_insertion_point(copy_constructor:CCSUsrMsg_ResetHud)
}

inline void CCSUsrMsg_ResetHud::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.reset_){false}
  };
}

CCSUsrMsg_ResetHud::~CCSUsrMsg_ResetHud() {
  // @@protoc_insertion_point(destructor:CCSUsrMsg_ResetHud)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CCSUsrMsg_ResetHud::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CCSUsrMsg_ResetHud::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CCSUsrMsg_ResetHud::Clear() {
// @@protoc_insertion_point(message_clear_start:CCSUsrMsg_ResetHud)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.reset_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CCSUsrMsg_ResetHud::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool reset = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_reset(&has_bits);
          _impl_.reset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CCSUsrMsg_ResetHud::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCSUsrMsg_ResetHud)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool reset = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_reset(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCSUsrMsg_ResetHud)
  return target;
}

size_t CCSUsrMsg_ResetHud::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCSUsrMsg_ResetHud)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool reset = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CCSUsrMsg_ResetHud::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CCSUsrMsg_ResetHud::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CCSUsrMsg_ResetHud::GetClassData() const { return &_class_data_; }


void CCSUsrMsg_ResetHud::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CCSUsrMsg_ResetHud*>(&to_msg);
  auto& from = static_cast<const CCSUsrMsg_ResetHud&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CCSUsrMsg_ResetHud)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_reset()) {
    _this->_internal_set_reset(from._internal_reset());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CCSUsrMsg_ResetHud::CopyFrom(const CCSUsrMsg_ResetHud& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCSUsrMsg_ResetHud)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCSUsrMsg_ResetHud::IsInitialized() const {
  return true;
}

void CCSUsrMsg_ResetHud::InternalSwap(CCSUsrMsg_ResetHud* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.reset_, other->_impl_.reset_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CCSUsrMsg_ResetHud::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cstrike15_5fusermessages_2eproto_getter, &descriptor_table_cstrike15_5fusermessages_2eproto_once,
      file_level_metadata_cstrike15_5fusermessages_2eproto[77]);
}

// ===================================================================

class CCSUsrMsg_GameTitle::_Internal {
 public:
  using HasBits = decltype(std::declval<CCSUsrMsg_GameTitle>()._impl_._has_bits_);
  static void set_has_dummy(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CCSUsrMsg_GameTitle::CCSUsrMsg_GameTitle(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CCSUsrMsg_GameTitle)
}
CCSUsrMsg_GameTitle::CCSUsrMsg_GameTitle(const CCSUsrMsg_GameTitle& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CCSUsrMsg_GameTitle* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.dummy_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.dummy_ = from._impl_.dummy_;
  // @@protoc_insertion_point(copy_constructor:CCSUsrMsg_GameTitle)
}

inline void CCSUsrMsg_GameTitle::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.dummy_){0}
  };
}

CCSUsrMsg_GameTitle::~CCSUsrMsg_GameTitle() {
  // @@protoc_insertion_point(destructor:CCSUsrMsg_GameTitle)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CCSUsrMsg_GameTitle::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CCSUsrMsg_GameTitle::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CCSUsrMsg_GameTitle::Clear() {
// @@protoc_insertion_point(message_clear_start:CCSUsrMsg_GameTitle)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.dummy_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CCSUsrMsg_GameTitle::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 dummy = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_dummy(&has_bits);
          _impl_.dummy_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CCSUsrMsg_GameTitle::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCSUsrMsg_GameTitle)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 dummy = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_dummy(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCSUsrMsg_GameTitle)
  return target;
}

size_t CCSUsrMsg_GameTitle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCSUsrMsg_GameTitle)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int32 dummy = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_dummy());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CCSUsrMsg_GameTitle::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CCSUsrMsg_GameTitle::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CCSUsrMsg_GameTitle::GetClassData() const { return &_class_data_; }


void CCSUsrMsg_GameTitle::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CCSUsrMsg_GameTitle*>(&to_msg);
  auto& from = static_cast<const CCSUsrMsg_GameTitle&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CCSUsrMsg_GameTitle)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_dummy()) {
    _this->_internal_set_dummy(from._internal_dummy());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CCSUsrMsg_GameTitle::CopyFrom(const CCSUsrMsg_GameTitle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCSUsrMsg_GameTitle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCSUsrMsg_GameTitle::IsInitialized() const {
  return true;
}

void CCSUsrMsg_GameTitle::InternalSwap(CCSUsrMsg_GameTitle* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.dummy_, other->_impl_.dummy_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CCSUsrMsg_GameTitle::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cstrike15_5fusermessages_2eproto_getter, &descriptor_table_cstrike15_5fusermessages_2eproto_once,
      file_level_metadata_cstrike15_5fusermessages_2eproto[78]);
}

// ===================================================================

class CCSUsrMsg_RequestState::_Internal {
 public:
  using HasBits = decltype(std::declval<CCSUsrMsg_RequestState>()._impl_._has_bits_);
  static void set_has_dummy(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CCSUsrMsg_RequestState::CCSUsrMsg_RequestState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CCSUsrMsg_RequestState)
}
CCSUsrMsg_RequestState::CCSUsrMsg_RequestState(const CCSUsrMsg_RequestState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CCSUsrMsg_RequestState* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.dummy_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.dummy_ = from._impl_.dummy_;
  // @@protoc_insertion_point(copy_constructor:CCSUsrMsg_RequestState)
}

inline void CCSUsrMsg_RequestState::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.dummy_){0}
  };
}

CCSUsrMsg_RequestState::~CCSUsrMsg_RequestState() {
  // @@protoc_insertion_point(destructor:CCSUsrMsg_RequestState)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CCSUsrMsg_RequestState::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CCSUsrMsg_RequestState::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CCSUsrMsg_RequestState::Clear() {
// @@protoc_insertion_point(message_clear_start:CCSUsrMsg_RequestState)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.dummy_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CCSUsrMsg_RequestState::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 dummy = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_dummy(&has_bits);
          _impl_.dummy_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CCSUsrMsg_RequestState::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCSUsrMsg_RequestState)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 dummy = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_dummy(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCSUsrMsg_RequestState)
  return target;
}

size_t CCSUsrMsg_RequestState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCSUsrMsg_RequestState)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int32 dummy = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_dummy());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CCSUsrMsg_RequestState::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CCSUsrMsg_RequestState::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CCSUsrMsg_RequestState::GetClassData() const { return &_class_data_; }


void CCSUsrMsg_RequestState::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CCSUsrMsg_RequestState*>(&to_msg);
  auto& from = static_cast<const CCSUsrMsg_RequestState&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CCSUsrMsg_RequestState)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_dummy()) {
    _this->_internal_set_dummy(from._internal_dummy());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CCSUsrMsg_RequestState::CopyFrom(const CCSUsrMsg_RequestState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCSUsrMsg_RequestState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCSUsrMsg_RequestState::IsInitialized() const {
  return true;
}

void CCSUsrMsg_RequestState::InternalSwap(CCSUsrMsg_RequestState* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.dummy_, other->_impl_.dummy_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CCSUsrMsg_RequestState::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cstrike15_5fusermessages_2eproto_getter, &descriptor_table_cstrike15_5fusermessages_2eproto_once,
      file_level_metadata_cstrike15_5fusermessages_2eproto[79]);
}

// ===================================================================

class CCSUsrMsg_StopSpectatorMode::_Internal {
 public:
  using HasBits = decltype(std::declval<CCSUsrMsg_StopSpectatorMode>()._impl_._has_bits_);
  static void set_has_dummy(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CCSUsrMsg_StopSpectatorMode::CCSUsrMsg_StopSpectatorMode(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CCSUsrMsg_StopSpectatorMode)
}
CCSUsrMsg_StopSpectatorMode::CCSUsrMsg_StopSpectatorMode(const CCSUsrMsg_StopSpectatorMode& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CCSUsrMsg_StopSpectatorMode* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.dummy_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.dummy_ = from._impl_.dummy_;
  // @@protoc_insertion_point(copy_constructor:CCSUsrMsg_StopSpectatorMode)
}

inline void CCSUsrMsg_StopSpectatorMode::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.dummy_){0}
  };
}

CCSUsrMsg_StopSpectatorMode::~CCSUsrMsg_StopSpectatorMode() {
  // @@protoc_insertion_point(destructor:CCSUsrMsg_StopSpectatorMode)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CCSUsrMsg_StopSpectatorMode::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CCSUsrMsg_StopSpectatorMode::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CCSUsrMsg_StopSpectatorMode::Clear() {
// @@protoc_insertion_point(message_clear_start:CCSUsrMsg_StopSpectatorMode)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.dummy_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CCSUsrMsg_StopSpectatorMode::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 dummy = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_dummy(&has_bits);
          _impl_.dummy_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CCSUsrMsg_StopSpectatorMode::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCSUsrMsg_StopSpectatorMode)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 dummy = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_dummy(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCSUsrMsg_StopSpectatorMode)
  return target;
}

size_t CCSUsrMsg_StopSpectatorMode::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCSUsrMsg_StopSpectatorMode)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int32 dummy = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_dummy());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CCSUsrMsg_StopSpectatorMode::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CCSUsrMsg_StopSpectatorMode::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CCSUsrMsg_StopSpectatorMode::GetClassData() const { return &_class_data_; }


void CCSUsrMsg_StopSpectatorMode::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CCSUsrMsg_StopSpectatorMode*>(&to_msg);
  auto& from = static_cast<const CCSUsrMsg_StopSpectatorMode&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CCSUsrMsg_StopSpectatorMode)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_dummy()) {
    _this->_internal_set_dummy(from._internal_dummy());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CCSUsrMsg_StopSpectatorMode::CopyFrom(const CCSUsrMsg_StopSpectatorMode& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCSUsrMsg_StopSpectatorMode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCSUsrMsg_StopSpectatorMode::IsInitialized() const {
  return true;
}

void CCSUsrMsg_StopSpectatorMode::InternalSwap(CCSUsrMsg_StopSpectatorMode* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.dummy_, other->_impl_.dummy_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CCSUsrMsg_StopSpectatorMode::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cstrike15_5fusermessages_2eproto_getter, &descriptor_table_cstrike15_5fusermessages_2eproto_once,
      file_level_metadata_cstrike15_5fusermessages_2eproto[80]);
}

// ===================================================================

class CCSUsrMsg_DisconnectToLobby::_Internal {
 public:
  using HasBits = decltype(std::declval<CCSUsrMsg_DisconnectToLobby>()._impl_._has_bits_);
  static void set_has_dummy(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CCSUsrMsg_DisconnectToLobby::CCSUsrMsg_DisconnectToLobby(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CCSUsrMsg_DisconnectToLobby)
}
CCSUsrMsg_DisconnectToLobby::CCSUsrMsg_DisconnectToLobby(const CCSUsrMsg_DisconnectToLobby& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CCSUsrMsg_DisconnectToLobby* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.dummy_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.dummy_ = from._impl_.dummy_;
  // @@protoc_insertion_point(copy_constructor:CCSUsrMsg_DisconnectToLobby)
}

inline void CCSUsrMsg_DisconnectToLobby::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.dummy_){0}
  };
}

CCSUsrMsg_DisconnectToLobby::~CCSUsrMsg_DisconnectToLobby() {
  // @@protoc_insertion_point(destructor:CCSUsrMsg_DisconnectToLobby)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CCSUsrMsg_DisconnectToLobby::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CCSUsrMsg_DisconnectToLobby::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CCSUsrMsg_DisconnectToLobby::Clear() {
// @@protoc_insertion_point(message_clear_start:CCSUsrMsg_DisconnectToLobby)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.dummy_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CCSUsrMsg_DisconnectToLobby::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 dummy = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_dummy(&has_bits);
          _impl_.dummy_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CCSUsrMsg_DisconnectToLobby::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCSUsrMsg_DisconnectToLobby)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 dummy = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_dummy(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCSUsrMsg_DisconnectToLobby)
  return target;
}

size_t CCSUsrMsg_DisconnectToLobby::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCSUsrMsg_DisconnectToLobby)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int32 dummy = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_dummy());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CCSUsrMsg_DisconnectToLobby::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CCSUsrMsg_DisconnectToLobby::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CCSUsrMsg_DisconnectToLobby::GetClassData() const { return &_class_data_; }


void CCSUsrMsg_DisconnectToLobby::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CCSUsrMsg_DisconnectToLobby*>(&to_msg);
  auto& from = static_cast<const CCSUsrMsg_DisconnectToLobby&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CCSUsrMsg_DisconnectToLobby)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_dummy()) {
    _this->_internal_set_dummy(from._internal_dummy());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CCSUsrMsg_DisconnectToLobby::CopyFrom(const CCSUsrMsg_DisconnectToLobby& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCSUsrMsg_DisconnectToLobby)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCSUsrMsg_DisconnectToLobby::IsInitialized() const {
  return true;
}

void CCSUsrMsg_DisconnectToLobby::InternalSwap(CCSUsrMsg_DisconnectToLobby* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.dummy_, other->_impl_.dummy_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CCSUsrMsg_DisconnectToLobby::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cstrike15_5fusermessages_2eproto_getter, &descriptor_table_cstrike15_5fusermessages_2eproto_once,
      file_level_metadata_cstrike15_5fusermessages_2eproto[81]);
}

// ===================================================================

class CCSUsrMsg_WarmupHasEnded::_Internal {
 public:
  using HasBits = decltype(std::declval<CCSUsrMsg_WarmupHasEnded>()._impl_._has_bits_);
  static void set_has_dummy(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CCSUsrMsg_WarmupHasEnded::CCSUsrMsg_WarmupHasEnded(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CCSUsrMsg_WarmupHasEnded)
}
CCSUsrMsg_WarmupHasEnded::CCSUsrMsg_WarmupHasEnded(const CCSUsrMsg_WarmupHasEnded& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CCSUsrMsg_WarmupHasEnded* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.dummy_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.dummy_ = from._impl_.dummy_;
  // @@protoc_insertion_point(copy_constructor:CCSUsrMsg_WarmupHasEnded)
}

inline void CCSUsrMsg_WarmupHasEnded::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.dummy_){0}
  };
}

CCSUsrMsg_WarmupHasEnded::~CCSUsrMsg_WarmupHasEnded() {
  // @@protoc_insertion_point(destructor:CCSUsrMsg_WarmupHasEnded)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CCSUsrMsg_WarmupHasEnded::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CCSUsrMsg_WarmupHasEnded::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CCSUsrMsg_WarmupHasEnded::Clear() {
// @@protoc_insertion_point(message_clear_start:CCSUsrMsg_WarmupHasEnded)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.dummy_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CCSUsrMsg_WarmupHasEnded::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 dummy = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_dummy(&has_bits);
          _impl_.dummy_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CCSUsrMsg_WarmupHasEnded::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCSUsrMsg_WarmupHasEnded)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 dummy = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_dummy(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCSUsrMsg_WarmupHasEnded)
  return target;
}

size_t CCSUsrMsg_WarmupHasEnded::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCSUsrMsg_WarmupHasEnded)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int32 dummy = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_dummy());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CCSUsrMsg_WarmupHasEnded::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CCSUsrMsg_WarmupHasEnded::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CCSUsrMsg_WarmupHasEnded::GetClassData() const { return &_class_data_; }


void CCSUsrMsg_WarmupHasEnded::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CCSUsrMsg_WarmupHasEnded*>(&to_msg);
  auto& from = static_cast<const CCSUsrMsg_WarmupHasEnded&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CCSUsrMsg_WarmupHasEnded)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_dummy()) {
    _this->_internal_set_dummy(from._internal_dummy());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CCSUsrMsg_WarmupHasEnded::CopyFrom(const CCSUsrMsg_WarmupHasEnded& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCSUsrMsg_WarmupHasEnded)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCSUsrMsg_WarmupHasEnded::IsInitialized() const {
  return true;
}

void CCSUsrMsg_WarmupHasEnded::InternalSwap(CCSUsrMsg_WarmupHasEnded* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.dummy_, other->_impl_.dummy_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CCSUsrMsg_WarmupHasEnded::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cstrike15_5fusermessages_2eproto_getter, &descriptor_table_cstrike15_5fusermessages_2eproto_once,
      file_level_metadata_cstrike15_5fusermessages_2eproto[82]);
}

// ===================================================================

class CCSUsrMsg_ClientInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<CCSUsrMsg_ClientInfo>()._impl_._has_bits_);
  static void set_has_dummy(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CCSUsrMsg_ClientInfo::CCSUsrMsg_ClientInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CCSUsrMsg_ClientInfo)
}
CCSUsrMsg_ClientInfo::CCSUsrMsg_ClientInfo(const CCSUsrMsg_ClientInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CCSUsrMsg_ClientInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.dummy_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.dummy_ = from._impl_.dummy_;
  // @@protoc_insertion_point(copy_constructor:CCSUsrMsg_ClientInfo)
}

inline void CCSUsrMsg_ClientInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.dummy_){0}
  };
}

CCSUsrMsg_ClientInfo::~CCSUsrMsg_ClientInfo() {
  // @@protoc_insertion_point(destructor:CCSUsrMsg_ClientInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CCSUsrMsg_ClientInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CCSUsrMsg_ClientInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CCSUsrMsg_ClientInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:CCSUsrMsg_ClientInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.dummy_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CCSUsrMsg_ClientInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 dummy = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_dummy(&has_bits);
          _impl_.dummy_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CCSUsrMsg_ClientInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCSUsrMsg_ClientInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 dummy = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_dummy(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCSUsrMsg_ClientInfo)
  return target;
}

size_t CCSUsrMsg_ClientInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCSUsrMsg_ClientInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int32 dummy = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_dummy());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CCSUsrMsg_ClientInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CCSUsrMsg_ClientInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CCSUsrMsg_ClientInfo::GetClassData() const { return &_class_data_; }


void CCSUsrMsg_ClientInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CCSUsrMsg_ClientInfo*>(&to_msg);
  auto& from = static_cast<const CCSUsrMsg_ClientInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CCSUsrMsg_ClientInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_dummy()) {
    _this->_internal_set_dummy(from._internal_dummy());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CCSUsrMsg_ClientInfo::CopyFrom(const CCSUsrMsg_ClientInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCSUsrMsg_ClientInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCSUsrMsg_ClientInfo::IsInitialized() const {
  return true;
}

void CCSUsrMsg_ClientInfo::InternalSwap(CCSUsrMsg_ClientInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.dummy_, other->_impl_.dummy_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CCSUsrMsg_ClientInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cstrike15_5fusermessages_2eproto_getter, &descriptor_table_cstrike15_5fusermessages_2eproto_once,
      file_level_metadata_cstrike15_5fusermessages_2eproto[83]);
}

// ===================================================================

class CCSUsrMsg_ServerRankRevealAll::_Internal {
 public:
  using HasBits = decltype(std::declval<CCSUsrMsg_ServerRankRevealAll>()._impl_._has_bits_);
  static void set_has_seconds_till_shutdown(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve& reservation(const CCSUsrMsg_ServerRankRevealAll* msg);
  static void set_has_reservation(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve&
CCSUsrMsg_ServerRankRevealAll::_Internal::reservation(const CCSUsrMsg_ServerRankRevealAll* msg) {
  return *msg->_impl_.reservation_;
}
void CCSUsrMsg_ServerRankRevealAll::clear_reservation() {
  if (_impl_.reservation_ != nullptr) _impl_.reservation_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
CCSUsrMsg_ServerRankRevealAll::CCSUsrMsg_ServerRankRevealAll(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CCSUsrMsg_ServerRankRevealAll)
}
CCSUsrMsg_ServerRankRevealAll::CCSUsrMsg_ServerRankRevealAll(const CCSUsrMsg_ServerRankRevealAll& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CCSUsrMsg_ServerRankRevealAll* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.reservation_){nullptr}
    , decltype(_impl_.seconds_till_shutdown_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_reservation()) {
    _this->_impl_.reservation_ = new ::CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve(*from._impl_.reservation_);
  }
  _this->_impl_.seconds_till_shutdown_ = from._impl_.seconds_till_shutdown_;
  // @@protoc_insertion_point(copy_constructor:CCSUsrMsg_ServerRankRevealAll)
}

inline void CCSUsrMsg_ServerRankRevealAll::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.reservation_){nullptr}
    , decltype(_impl_.seconds_till_shutdown_){0}
  };
}

CCSUsrMsg_ServerRankRevealAll::~CCSUsrMsg_ServerRankRevealAll() {
  // @@protoc_insertion_point(destructor:CCSUsrMsg_ServerRankRevealAll)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CCSUsrMsg_ServerRankRevealAll::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.reservation_;
}

void CCSUsrMsg_ServerRankRevealAll::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CCSUsrMsg_ServerRankRevealAll::Clear() {
// @@protoc_insertion_point(message_clear_start:CCSUsrMsg_ServerRankRevealAll)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.reservation_ != nullptr);
    _impl_.reservation_->Clear();
  }
  _impl_.seconds_till_shutdown_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CCSUsrMsg_ServerRankRevealAll::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 seconds_till_shutdown = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_seconds_till_shutdown(&has_bits);
          _impl_.seconds_till_shutdown_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve reservation = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_reservation(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CCSUsrMsg_ServerRankRevealAll::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCSUsrMsg_ServerRankRevealAll)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 seconds_till_shutdown = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_seconds_till_shutdown(), target);
  }

  // optional .CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve reservation = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::reservation(this),
        _Internal::reservation(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCSUsrMsg_ServerRankRevealAll)
  return target;
}

size_t CCSUsrMsg_ServerRankRevealAll::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCSUsrMsg_ServerRankRevealAll)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve reservation = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.reservation_);
    }

    // optional int32 seconds_till_shutdown = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_seconds_till_shutdown());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CCSUsrMsg_ServerRankRevealAll::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CCSUsrMsg_ServerRankRevealAll::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CCSUsrMsg_ServerRankRevealAll::GetClassData() const { return &_class_data_; }


void CCSUsrMsg_ServerRankRevealAll::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CCSUsrMsg_ServerRankRevealAll*>(&to_msg);
  auto& from = static_cast<const CCSUsrMsg_ServerRankRevealAll&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CCSUsrMsg_ServerRankRevealAll)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_reservation()->::CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::MergeFrom(
          from._internal_reservation());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.seconds_till_shutdown_ = from._impl_.seconds_till_shutdown_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CCSUsrMsg_ServerRankRevealAll::CopyFrom(const CCSUsrMsg_ServerRankRevealAll& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCSUsrMsg_ServerRankRevealAll)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCSUsrMsg_ServerRankRevealAll::IsInitialized() const {
  return true;
}

void CCSUsrMsg_ServerRankRevealAll::InternalSwap(CCSUsrMsg_ServerRankRevealAll* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CCSUsrMsg_ServerRankRevealAll, _impl_.seconds_till_shutdown_)
      + sizeof(CCSUsrMsg_ServerRankRevealAll::_impl_.seconds_till_shutdown_)
      - PROTOBUF_FIELD_OFFSET(CCSUsrMsg_ServerRankRevealAll, _impl_.reservation_)>(
          reinterpret_cast<char*>(&_impl_.reservation_),
          reinterpret_cast<char*>(&other->_impl_.reservation_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CCSUsrMsg_ServerRankRevealAll::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cstrike15_5fusermessages_2eproto_getter, &descriptor_table_cstrike15_5fusermessages_2eproto_once,
      file_level_metadata_cstrike15_5fusermessages_2eproto[84]);
}

// ===================================================================

class CCSUsrMsgPreMatchSayText::_Internal {
 public:
  using HasBits = decltype(std::declval<CCSUsrMsgPreMatchSayText>()._impl_._has_bits_);
  static void set_has_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_text(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_all_chat(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CCSUsrMsgPreMatchSayText::CCSUsrMsgPreMatchSayText(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CCSUsrMsgPreMatchSayText)
}
CCSUsrMsgPreMatchSayText::CCSUsrMsgPreMatchSayText(const CCSUsrMsgPreMatchSayText& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CCSUsrMsgPreMatchSayText* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.text_){}
    , decltype(_impl_.account_id_){}
    , decltype(_impl_.all_chat_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.text_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.text_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_text()) {
    _this->_impl_.text_.Set(from._internal_text(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.account_id_, &from._impl_.account_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.all_chat_) -
    reinterpret_cast<char*>(&_impl_.account_id_)) + sizeof(_impl_.all_chat_));
  // @@protoc_insertion_point(copy_constructor:CCSUsrMsgPreMatchSayText)
}

inline void CCSUsrMsgPreMatchSayText::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.text_){}
    , decltype(_impl_.account_id_){0u}
    , decltype(_impl_.all_chat_){false}
  };
  _impl_.text_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.text_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CCSUsrMsgPreMatchSayText::~CCSUsrMsgPreMatchSayText() {
  // @@protoc_insertion_point(destructor:CCSUsrMsgPreMatchSayText)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CCSUsrMsgPreMatchSayText::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.text_.Destroy();
}

void CCSUsrMsgPreMatchSayText::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CCSUsrMsgPreMatchSayText::Clear() {
// @@protoc_insertion_point(message_clear_start:CCSUsrMsgPreMatchSayText)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.text_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&_impl_.account_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.all_chat_) -
        reinterpret_cast<char*>(&_impl_.account_id_)) + sizeof(_impl_.all_chat_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CCSUsrMsgPreMatchSayText::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 account_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_account_id(&has_bits);
          _impl_.account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string text = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_text();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CCSUsrMsgPreMatchSayText.text");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional bool all_chat = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_all_chat(&has_bits);
          _impl_.all_chat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CCSUsrMsgPreMatchSayText::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCSUsrMsgPreMatchSayText)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_account_id(), target);
  }

  // optional string text = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_text().data(), static_cast<int>(this->_internal_text().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CCSUsrMsgPreMatchSayText.text");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_text(), target);
  }

  // optional bool all_chat = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_all_chat(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCSUsrMsgPreMatchSayText)
  return target;
}

size_t CCSUsrMsgPreMatchSayText::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCSUsrMsgPreMatchSayText)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string text = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_text());
    }

    // optional uint32 account_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_account_id());
    }

    // optional bool all_chat = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CCSUsrMsgPreMatchSayText::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CCSUsrMsgPreMatchSayText::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CCSUsrMsgPreMatchSayText::GetClassData() const { return &_class_data_; }


void CCSUsrMsgPreMatchSayText::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CCSUsrMsgPreMatchSayText*>(&to_msg);
  auto& from = static_cast<const CCSUsrMsgPreMatchSayText&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CCSUsrMsgPreMatchSayText)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_text(from._internal_text());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.account_id_ = from._impl_.account_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.all_chat_ = from._impl_.all_chat_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CCSUsrMsgPreMatchSayText::CopyFrom(const CCSUsrMsgPreMatchSayText& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCSUsrMsgPreMatchSayText)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCSUsrMsgPreMatchSayText::IsInitialized() const {
  return true;
}

void CCSUsrMsgPreMatchSayText::InternalSwap(CCSUsrMsgPreMatchSayText* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.text_, lhs_arena,
      &other->_impl_.text_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CCSUsrMsgPreMatchSayText, _impl_.all_chat_)
      + sizeof(CCSUsrMsgPreMatchSayText::_impl_.all_chat_)
      - PROTOBUF_FIELD_OFFSET(CCSUsrMsgPreMatchSayText, _impl_.account_id_)>(
          reinterpret_cast<char*>(&_impl_.account_id_),
          reinterpret_cast<char*>(&other->_impl_.account_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CCSUsrMsgPreMatchSayText::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cstrike15_5fusermessages_2eproto_getter, &descriptor_table_cstrike15_5fusermessages_2eproto_once,
      file_level_metadata_cstrike15_5fusermessages_2eproto[85]);
}

// ===================================================================

class CCSUsrMsg_CounterStrafe::_Internal {
 public:
  using HasBits = decltype(std::declval<CCSUsrMsg_CounterStrafe>()._impl_._has_bits_);
  static void set_has_press_to_release_ns(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_total_keys_down(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CCSUsrMsg_CounterStrafe::CCSUsrMsg_CounterStrafe(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CCSUsrMsg_CounterStrafe)
}
CCSUsrMsg_CounterStrafe::CCSUsrMsg_CounterStrafe(const CCSUsrMsg_CounterStrafe& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CCSUsrMsg_CounterStrafe* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.press_to_release_ns_){}
    , decltype(_impl_.total_keys_down_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.press_to_release_ns_, &from._impl_.press_to_release_ns_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.total_keys_down_) -
    reinterpret_cast<char*>(&_impl_.press_to_release_ns_)) + sizeof(_impl_.total_keys_down_));
  // @@protoc_insertion_point(copy_constructor:CCSUsrMsg_CounterStrafe)
}

inline void CCSUsrMsg_CounterStrafe::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.press_to_release_ns_){0}
    , decltype(_impl_.total_keys_down_){0}
  };
}

CCSUsrMsg_CounterStrafe::~CCSUsrMsg_CounterStrafe() {
  // @@protoc_insertion_point(destructor:CCSUsrMsg_CounterStrafe)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CCSUsrMsg_CounterStrafe::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CCSUsrMsg_CounterStrafe::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CCSUsrMsg_CounterStrafe::Clear() {
// @@protoc_insertion_point(message_clear_start:CCSUsrMsg_CounterStrafe)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.press_to_release_ns_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.total_keys_down_) -
        reinterpret_cast<char*>(&_impl_.press_to_release_ns_)) + sizeof(_impl_.total_keys_down_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CCSUsrMsg_CounterStrafe::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 press_to_release_ns = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_press_to_release_ns(&has_bits);
          _impl_.press_to_release_ns_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 total_keys_down = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_total_keys_down(&has_bits);
          _impl_.total_keys_down_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CCSUsrMsg_CounterStrafe::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCSUsrMsg_CounterStrafe)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 press_to_release_ns = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_press_to_release_ns(), target);
  }

  // optional int32 total_keys_down = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_total_keys_down(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCSUsrMsg_CounterStrafe)
  return target;
}

size_t CCSUsrMsg_CounterStrafe::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCSUsrMsg_CounterStrafe)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int32 press_to_release_ns = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_press_to_release_ns());
    }

    // optional int32 total_keys_down = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_total_keys_down());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CCSUsrMsg_CounterStrafe::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CCSUsrMsg_CounterStrafe::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CCSUsrMsg_CounterStrafe::GetClassData() const { return &_class_data_; }


void CCSUsrMsg_CounterStrafe::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CCSUsrMsg_CounterStrafe*>(&to_msg);
  auto& from = static_cast<const CCSUsrMsg_CounterStrafe&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CCSUsrMsg_CounterStrafe)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.press_to_release_ns_ = from._impl_.press_to_release_ns_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.total_keys_down_ = from._impl_.total_keys_down_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CCSUsrMsg_CounterStrafe::CopyFrom(const CCSUsrMsg_CounterStrafe& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCSUsrMsg_CounterStrafe)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCSUsrMsg_CounterStrafe::IsInitialized() const {
  return true;
}

void CCSUsrMsg_CounterStrafe::InternalSwap(CCSUsrMsg_CounterStrafe* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CCSUsrMsg_CounterStrafe, _impl_.total_keys_down_)
      + sizeof(CCSUsrMsg_CounterStrafe::_impl_.total_keys_down_)
      - PROTOBUF_FIELD_OFFSET(CCSUsrMsg_CounterStrafe, _impl_.press_to_release_ns_)>(
          reinterpret_cast<char*>(&_impl_.press_to_release_ns_),
          reinterpret_cast<char*>(&other->_impl_.press_to_release_ns_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CCSUsrMsg_CounterStrafe::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cstrike15_5fusermessages_2eproto_getter, &descriptor_table_cstrike15_5fusermessages_2eproto_once,
      file_level_metadata_cstrike15_5fusermessages_2eproto[86]);
}

// ===================================================================

class CCSUsrMsg_DamagePrediction::_Internal {
 public:
  using HasBits = decltype(std::declval<CCSUsrMsg_DamagePrediction>()._impl_._has_bits_);
  static void set_has_command_num(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_pellet_idx(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_victim_slot(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_victim_starting_health(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_victim_damage(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::CMsgVector& shoot_pos(const CCSUsrMsg_DamagePrediction* msg);
  static void set_has_shoot_pos(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::CMsgQAngle& shoot_dir(const CCSUsrMsg_DamagePrediction* msg);
  static void set_has_shoot_dir(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::CMsgQAngle& aim_punch(const CCSUsrMsg_DamagePrediction* msg);
  static void set_has_aim_punch(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::CMsgVector&
CCSUsrMsg_DamagePrediction::_Internal::shoot_pos(const CCSUsrMsg_DamagePrediction* msg) {
  return *msg->_impl_.shoot_pos_;
}
const ::CMsgQAngle&
CCSUsrMsg_DamagePrediction::_Internal::shoot_dir(const CCSUsrMsg_DamagePrediction* msg) {
  return *msg->_impl_.shoot_dir_;
}
const ::CMsgQAngle&
CCSUsrMsg_DamagePrediction::_Internal::aim_punch(const CCSUsrMsg_DamagePrediction* msg) {
  return *msg->_impl_.aim_punch_;
}
void CCSUsrMsg_DamagePrediction::clear_shoot_pos() {
  if (_impl_.shoot_pos_ != nullptr) _impl_.shoot_pos_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void CCSUsrMsg_DamagePrediction::clear_shoot_dir() {
  if (_impl_.shoot_dir_ != nullptr) _impl_.shoot_dir_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void CCSUsrMsg_DamagePrediction::clear_aim_punch() {
  if (_impl_.aim_punch_ != nullptr) _impl_.aim_punch_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
CCSUsrMsg_DamagePrediction::CCSUsrMsg_DamagePrediction(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CCSUsrMsg_DamagePrediction)
}
CCSUsrMsg_DamagePrediction::CCSUsrMsg_DamagePrediction(const CCSUsrMsg_DamagePrediction& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CCSUsrMsg_DamagePrediction* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.shoot_pos_){nullptr}
    , decltype(_impl_.shoot_dir_){nullptr}
    , decltype(_impl_.aim_punch_){nullptr}
    , decltype(_impl_.command_num_){}
    , decltype(_impl_.pellet_idx_){}
    , decltype(_impl_.victim_slot_){}
    , decltype(_impl_.victim_starting_health_){}
    , decltype(_impl_.victim_damage_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_shoot_pos()) {
    _this->_impl_.shoot_pos_ = new ::CMsgVector(*from._impl_.shoot_pos_);
  }
  if (from._internal_has_shoot_dir()) {
    _this->_impl_.shoot_dir_ = new ::CMsgQAngle(*from._impl_.shoot_dir_);
  }
  if (from._internal_has_aim_punch()) {
    _this->_impl_.aim_punch_ = new ::CMsgQAngle(*from._impl_.aim_punch_);
  }
  ::memcpy(&_impl_.command_num_, &from._impl_.command_num_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.victim_damage_) -
    reinterpret_cast<char*>(&_impl_.command_num_)) + sizeof(_impl_.victim_damage_));
  // @@protoc_insertion_point(copy_constructor:CCSUsrMsg_DamagePrediction)
}

inline void CCSUsrMsg_DamagePrediction::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.shoot_pos_){nullptr}
    , decltype(_impl_.shoot_dir_){nullptr}
    , decltype(_impl_.aim_punch_){nullptr}
    , decltype(_impl_.command_num_){0}
    , decltype(_impl_.pellet_idx_){0}
    , decltype(_impl_.victim_slot_){0}
    , decltype(_impl_.victim_starting_health_){0}
    , decltype(_impl_.victim_damage_){0}
  };
}

CCSUsrMsg_DamagePrediction::~CCSUsrMsg_DamagePrediction() {
  // @@protoc_insertion_point(destructor:CCSUsrMsg_DamagePrediction)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CCSUsrMsg_DamagePrediction::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.shoot_pos_;
  if (this != internal_default_instance()) delete _impl_.shoot_dir_;
  if (this != internal_default_instance()) delete _impl_.aim_punch_;
}

void CCSUsrMsg_DamagePrediction::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CCSUsrMsg_DamagePrediction::Clear() {
// @@protoc_insertion_point(message_clear_start:CCSUsrMsg_DamagePrediction)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.shoot_pos_ != nullptr);
      _impl_.shoot_pos_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.shoot_dir_ != nullptr);
      _impl_.shoot_dir_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.aim_punch_ != nullptr);
      _impl_.aim_punch_->Clear();
    }
  }
  if (cached_has_bits & 0x000000f8u) {
    ::memset(&_impl_.command_num_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.victim_damage_) -
        reinterpret_cast<char*>(&_impl_.command_num_)) + sizeof(_impl_.victim_damage_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CCSUsrMsg_DamagePrediction::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 command_num = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_command_num(&has_bits);
          _impl_.command_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 pellet_idx = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_pellet_idx(&has_bits);
          _impl_.pellet_idx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 victim_slot = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_victim_slot(&has_bits);
          _impl_.victim_slot_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 victim_starting_health = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_victim_starting_health(&has_bits);
          _impl_.victim_starting_health_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 victim_damage = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_victim_damage(&has_bits);
          _impl_.victim_damage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .CMsgVector shoot_pos = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_shoot_pos(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .CMsgQAngle shoot_dir = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_shoot_dir(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .CMsgQAngle aim_punch = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_aim_punch(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CCSUsrMsg_DamagePrediction::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCSUsrMsg_DamagePrediction)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 command_num = 1;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_command_num(), target);
  }

  // optional int32 pellet_idx = 2;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_pellet_idx(), target);
  }

  // optional int32 victim_slot = 3;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_victim_slot(), target);
  }

  // optional int32 victim_starting_health = 4;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_victim_starting_health(), target);
  }

  // optional int32 victim_damage = 5;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_victim_damage(), target);
  }

  // optional .CMsgVector shoot_pos = 6;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::shoot_pos(this),
        _Internal::shoot_pos(this).GetCachedSize(), target, stream);
  }

  // optional .CMsgQAngle shoot_dir = 7;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::shoot_dir(this),
        _Internal::shoot_dir(this).GetCachedSize(), target, stream);
  }

  // optional .CMsgQAngle aim_punch = 8;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::aim_punch(this),
        _Internal::aim_punch(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCSUsrMsg_DamagePrediction)
  return target;
}

size_t CCSUsrMsg_DamagePrediction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCSUsrMsg_DamagePrediction)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .CMsgVector shoot_pos = 6;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.shoot_pos_);
    }

    // optional .CMsgQAngle shoot_dir = 7;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.shoot_dir_);
    }

    // optional .CMsgQAngle aim_punch = 8;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.aim_punch_);
    }

    // optional int32 command_num = 1;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_command_num());
    }

    // optional int32 pellet_idx = 2;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_pellet_idx());
    }

    // optional int32 victim_slot = 3;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_victim_slot());
    }

    // optional int32 victim_starting_health = 4;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_victim_starting_health());
    }

    // optional int32 victim_damage = 5;
    if (cached_has_bits & 0x00000080u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_victim_damage());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CCSUsrMsg_DamagePrediction::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CCSUsrMsg_DamagePrediction::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CCSUsrMsg_DamagePrediction::GetClassData() const { return &_class_data_; }


void CCSUsrMsg_DamagePrediction::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CCSUsrMsg_DamagePrediction*>(&to_msg);
  auto& from = static_cast<const CCSUsrMsg_DamagePrediction&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CCSUsrMsg_DamagePrediction)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_shoot_pos()->::CMsgVector::MergeFrom(
          from._internal_shoot_pos());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_shoot_dir()->::CMsgQAngle::MergeFrom(
          from._internal_shoot_dir());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_aim_punch()->::CMsgQAngle::MergeFrom(
          from._internal_aim_punch());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.command_num_ = from._impl_.command_num_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.pellet_idx_ = from._impl_.pellet_idx_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.victim_slot_ = from._impl_.victim_slot_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.victim_starting_health_ = from._impl_.victim_starting_health_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.victim_damage_ = from._impl_.victim_damage_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CCSUsrMsg_DamagePrediction::CopyFrom(const CCSUsrMsg_DamagePrediction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCSUsrMsg_DamagePrediction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCSUsrMsg_DamagePrediction::IsInitialized() const {
  return true;
}

void CCSUsrMsg_DamagePrediction::InternalSwap(CCSUsrMsg_DamagePrediction* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CCSUsrMsg_DamagePrediction, _impl_.victim_damage_)
      + sizeof(CCSUsrMsg_DamagePrediction::_impl_.victim_damage_)
      - PROTOBUF_FIELD_OFFSET(CCSUsrMsg_DamagePrediction, _impl_.shoot_pos_)>(
          reinterpret_cast<char*>(&_impl_.shoot_pos_),
          reinterpret_cast<char*>(&other->_impl_.shoot_pos_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CCSUsrMsg_DamagePrediction::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cstrike15_5fusermessages_2eproto_getter, &descriptor_table_cstrike15_5fusermessages_2eproto_once,
      file_level_metadata_cstrike15_5fusermessages_2eproto[87]);
}

// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::CCSUsrMsg_VGUIMenu_Keys*
Arena::CreateMaybeMessage< ::CCSUsrMsg_VGUIMenu_Keys >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CCSUsrMsg_VGUIMenu_Keys >(arena);
}
template<> PROTOBUF_NOINLINE ::CCSUsrMsg_VGUIMenu*
Arena::CreateMaybeMessage< ::CCSUsrMsg_VGUIMenu >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CCSUsrMsg_VGUIMenu >(arena);
}
template<> PROTOBUF_NOINLINE ::CCSUsrMsg_Geiger*
Arena::CreateMaybeMessage< ::CCSUsrMsg_Geiger >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CCSUsrMsg_Geiger >(arena);
}
template<> PROTOBUF_NOINLINE ::CCSUsrMsg_Train*
Arena::CreateMaybeMessage< ::CCSUsrMsg_Train >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CCSUsrMsg_Train >(arena);
}
template<> PROTOBUF_NOINLINE ::CCSUsrMsg_HudText*
Arena::CreateMaybeMessage< ::CCSUsrMsg_HudText >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CCSUsrMsg_HudText >(arena);
}
template<> PROTOBUF_NOINLINE ::CCSUsrMsg_HudMsg*
Arena::CreateMaybeMessage< ::CCSUsrMsg_HudMsg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CCSUsrMsg_HudMsg >(arena);
}
template<> PROTOBUF_NOINLINE ::CCSUsrMsg_Shake*
Arena::CreateMaybeMessage< ::CCSUsrMsg_Shake >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CCSUsrMsg_Shake >(arena);
}
template<> PROTOBUF_NOINLINE ::CCSUsrMsg_Fade*
Arena::CreateMaybeMessage< ::CCSUsrMsg_Fade >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CCSUsrMsg_Fade >(arena);
}
template<> PROTOBUF_NOINLINE ::CCSUsrMsg_Rumble*
Arena::CreateMaybeMessage< ::CCSUsrMsg_Rumble >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CCSUsrMsg_Rumble >(arena);
}
template<> PROTOBUF_NOINLINE ::CCSUsrMsg_CloseCaption*
Arena::CreateMaybeMessage< ::CCSUsrMsg_CloseCaption >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CCSUsrMsg_CloseCaption >(arena);
}
template<> PROTOBUF_NOINLINE ::CCSUsrMsg_CloseCaptionDirect*
Arena::CreateMaybeMessage< ::CCSUsrMsg_CloseCaptionDirect >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CCSUsrMsg_CloseCaptionDirect >(arena);
}
template<> PROTOBUF_NOINLINE ::CCSUsrMsg_SendAudio*
Arena::CreateMaybeMessage< ::CCSUsrMsg_SendAudio >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CCSUsrMsg_SendAudio >(arena);
}
template<> PROTOBUF_NOINLINE ::CCSUsrMsg_RawAudio*
Arena::CreateMaybeMessage< ::CCSUsrMsg_RawAudio >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CCSUsrMsg_RawAudio >(arena);
}
template<> PROTOBUF_NOINLINE ::CCSUsrMsg_VoiceMask_PlayerMask*
Arena::CreateMaybeMessage< ::CCSUsrMsg_VoiceMask_PlayerMask >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CCSUsrMsg_VoiceMask_PlayerMask >(arena);
}
template<> PROTOBUF_NOINLINE ::CCSUsrMsg_VoiceMask*
Arena::CreateMaybeMessage< ::CCSUsrMsg_VoiceMask >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CCSUsrMsg_VoiceMask >(arena);
}
template<> PROTOBUF_NOINLINE ::CCSUsrMsg_Damage*
Arena::CreateMaybeMessage< ::CCSUsrMsg_Damage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CCSUsrMsg_Damage >(arena);
}
template<> PROTOBUF_NOINLINE ::CCSUsrMsg_RadioText*
Arena::CreateMaybeMessage< ::CCSUsrMsg_RadioText >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CCSUsrMsg_RadioText >(arena);
}
template<> PROTOBUF_NOINLINE ::CCSUsrMsg_HintText*
Arena::CreateMaybeMessage< ::CCSUsrMsg_HintText >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CCSUsrMsg_HintText >(arena);
}
template<> PROTOBUF_NOINLINE ::CCSUsrMsg_KeyHintText*
Arena::CreateMaybeMessage< ::CCSUsrMsg_KeyHintText >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CCSUsrMsg_KeyHintText >(arena);
}
template<> PROTOBUF_NOINLINE ::CCSUsrMsg_ProcessSpottedEntityUpdate_SpottedEntityUpdate*
Arena::CreateMaybeMessage< ::CCSUsrMsg_ProcessSpottedEntityUpdate_SpottedEntityUpdate >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CCSUsrMsg_ProcessSpottedEntityUpdate_SpottedEntityUpdate >(arena);
}
template<> PROTOBUF_NOINLINE ::CCSUsrMsg_ProcessSpottedEntityUpdate*
Arena::CreateMaybeMessage< ::CCSUsrMsg_ProcessSpottedEntityUpdate >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CCSUsrMsg_ProcessSpottedEntityUpdate >(arena);
}
template<> PROTOBUF_NOINLINE ::CCSUsrMsg_SendPlayerItemDrops*
Arena::CreateMaybeMessage< ::CCSUsrMsg_SendPlayerItemDrops >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CCSUsrMsg_SendPlayerItemDrops >(arena);
}
template<> PROTOBUF_NOINLINE ::CCSUsrMsg_SendPlayerItemFound*
Arena::CreateMaybeMessage< ::CCSUsrMsg_SendPlayerItemFound >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CCSUsrMsg_SendPlayerItemFound >(arena);
}
template<> PROTOBUF_NOINLINE ::CCSUsrMsg_ReloadEffect*
Arena::CreateMaybeMessage< ::CCSUsrMsg_ReloadEffect >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CCSUsrMsg_ReloadEffect >(arena);
}
template<> PROTOBUF_NOINLINE ::CCSUsrMsg_WeaponSound*
Arena::CreateMaybeMessage< ::CCSUsrMsg_WeaponSound >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CCSUsrMsg_WeaponSound >(arena);
}
template<> PROTOBUF_NOINLINE ::CCSUsrMsg_UpdateScreenHealthBar*
Arena::CreateMaybeMessage< ::CCSUsrMsg_UpdateScreenHealthBar >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CCSUsrMsg_UpdateScreenHealthBar >(arena);
}
template<> PROTOBUF_NOINLINE ::CCSUsrMsg_EntityOutlineHighlight*
Arena::CreateMaybeMessage< ::CCSUsrMsg_EntityOutlineHighlight >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CCSUsrMsg_EntityOutlineHighlight >(arena);
}
template<> PROTOBUF_NOINLINE ::CCSUsrMsg_AdjustMoney*
Arena::CreateMaybeMessage< ::CCSUsrMsg_AdjustMoney >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CCSUsrMsg_AdjustMoney >(arena);
}
template<> PROTOBUF_NOINLINE ::CCSUsrMsg_ReportHit*
Arena::CreateMaybeMessage< ::CCSUsrMsg_ReportHit >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CCSUsrMsg_ReportHit >(arena);
}
template<> PROTOBUF_NOINLINE ::CCSUsrMsg_KillCam*
Arena::CreateMaybeMessage< ::CCSUsrMsg_KillCam >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CCSUsrMsg_KillCam >(arena);
}
template<> PROTOBUF_NOINLINE ::CCSUsrMsg_DesiredTimescale*
Arena::CreateMaybeMessage< ::CCSUsrMsg_DesiredTimescale >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CCSUsrMsg_DesiredTimescale >(arena);
}
template<> PROTOBUF_NOINLINE ::CCSUsrMsg_CurrentTimescale*
Arena::CreateMaybeMessage< ::CCSUsrMsg_CurrentTimescale >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CCSUsrMsg_CurrentTimescale >(arena);
}
template<> PROTOBUF_NOINLINE ::CCSUsrMsg_AchievementEvent*
Arena::CreateMaybeMessage< ::CCSUsrMsg_AchievementEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CCSUsrMsg_AchievementEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::CCSUsrMsg_MatchEndConditions*
Arena::CreateMaybeMessage< ::CCSUsrMsg_MatchEndConditions >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CCSUsrMsg_MatchEndConditions >(arena);
}
template<> PROTOBUF_NOINLINE ::CCSUsrMsg_PlayerStatsUpdate_Stat*
Arena::CreateMaybeMessage< ::CCSUsrMsg_PlayerStatsUpdate_Stat >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CCSUsrMsg_PlayerStatsUpdate_Stat >(arena);
}
template<> PROTOBUF_NOINLINE ::CCSUsrMsg_PlayerStatsUpdate*
Arena::CreateMaybeMessage< ::CCSUsrMsg_PlayerStatsUpdate >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CCSUsrMsg_PlayerStatsUpdate >(arena);
}
template<> PROTOBUF_NOINLINE ::CCSUsrMsg_QuestProgress*
Arena::CreateMaybeMessage< ::CCSUsrMsg_QuestProgress >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CCSUsrMsg_QuestProgress >(arena);
}
template<> PROTOBUF_NOINLINE ::CCSUsrMsg_ScoreLeaderboardData*
Arena::CreateMaybeMessage< ::CCSUsrMsg_ScoreLeaderboardData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CCSUsrMsg_ScoreLeaderboardData >(arena);
}
template<> PROTOBUF_NOINLINE ::CCSUsrMsg_PlayerDecalDigitalSignature*
Arena::CreateMaybeMessage< ::CCSUsrMsg_PlayerDecalDigitalSignature >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CCSUsrMsg_PlayerDecalDigitalSignature >(arena);
}
template<> PROTOBUF_NOINLINE ::CCSUsrMsg_XRankGet*
Arena::CreateMaybeMessage< ::CCSUsrMsg_XRankGet >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CCSUsrMsg_XRankGet >(arena);
}
template<> PROTOBUF_NOINLINE ::CCSUsrMsg_XRankUpd*
Arena::CreateMaybeMessage< ::CCSUsrMsg_XRankUpd >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CCSUsrMsg_XRankUpd >(arena);
}
template<> PROTOBUF_NOINLINE ::CCSUsrMsg_CallVoteFailed*
Arena::CreateMaybeMessage< ::CCSUsrMsg_CallVoteFailed >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CCSUsrMsg_CallVoteFailed >(arena);
}
template<> PROTOBUF_NOINLINE ::CCSUsrMsg_VoteStart*
Arena::CreateMaybeMessage< ::CCSUsrMsg_VoteStart >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CCSUsrMsg_VoteStart >(arena);
}
template<> PROTOBUF_NOINLINE ::CCSUsrMsg_VotePass*
Arena::CreateMaybeMessage< ::CCSUsrMsg_VotePass >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CCSUsrMsg_VotePass >(arena);
}
template<> PROTOBUF_NOINLINE ::CCSUsrMsg_VoteFailed*
Arena::CreateMaybeMessage< ::CCSUsrMsg_VoteFailed >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CCSUsrMsg_VoteFailed >(arena);
}
template<> PROTOBUF_NOINLINE ::CCSUsrMsg_VoteSetup*
Arena::CreateMaybeMessage< ::CCSUsrMsg_VoteSetup >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CCSUsrMsg_VoteSetup >(arena);
}
template<> PROTOBUF_NOINLINE ::CCSUsrMsg_SendLastKillerDamageToClient*
Arena::CreateMaybeMessage< ::CCSUsrMsg_SendLastKillerDamageToClient >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CCSUsrMsg_SendLastKillerDamageToClient >(arena);
}
template<> PROTOBUF_NOINLINE ::CCSUsrMsg_ServerRankUpdate_RankUpdate*
Arena::CreateMaybeMessage< ::CCSUsrMsg_ServerRankUpdate_RankUpdate >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CCSUsrMsg_ServerRankUpdate_RankUpdate >(arena);
}
template<> PROTOBUF_NOINLINE ::CCSUsrMsg_ServerRankUpdate*
Arena::CreateMaybeMessage< ::CCSUsrMsg_ServerRankUpdate >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CCSUsrMsg_ServerRankUpdate >(arena);
}
template<> PROTOBUF_NOINLINE ::CCSUsrMsg_XpUpdate*
Arena::CreateMaybeMessage< ::CCSUsrMsg_XpUpdate >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CCSUsrMsg_XpUpdate >(arena);
}
template<> PROTOBUF_NOINLINE ::CCSUsrMsg_ItemPickup*
Arena::CreateMaybeMessage< ::CCSUsrMsg_ItemPickup >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CCSUsrMsg_ItemPickup >(arena);
}
template<> PROTOBUF_NOINLINE ::CCSUsrMsg_ShowMenu*
Arena::CreateMaybeMessage< ::CCSUsrMsg_ShowMenu >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CCSUsrMsg_ShowMenu >(arena);
}
template<> PROTOBUF_NOINLINE ::CCSUsrMsg_BarTime*
Arena::CreateMaybeMessage< ::CCSUsrMsg_BarTime >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CCSUsrMsg_BarTime >(arena);
}
template<> PROTOBUF_NOINLINE ::CCSUsrMsg_AmmoDenied*
Arena::CreateMaybeMessage< ::CCSUsrMsg_AmmoDenied >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CCSUsrMsg_AmmoDenied >(arena);
}
template<> PROTOBUF_NOINLINE ::CCSUsrMsg_MarkAchievement*
Arena::CreateMaybeMessage< ::CCSUsrMsg_MarkAchievement >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CCSUsrMsg_MarkAchievement >(arena);
}
template<> PROTOBUF_NOINLINE ::CCSUsrMsg_MatchStatsUpdate*
Arena::CreateMaybeMessage< ::CCSUsrMsg_MatchStatsUpdate >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CCSUsrMsg_MatchStatsUpdate >(arena);
}
template<> PROTOBUF_NOINLINE ::CCSUsrMsg_ItemDrop*
Arena::CreateMaybeMessage< ::CCSUsrMsg_ItemDrop >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CCSUsrMsg_ItemDrop >(arena);
}
template<> PROTOBUF_NOINLINE ::CCSUsrMsg_GlowPropTurnOff*
Arena::CreateMaybeMessage< ::CCSUsrMsg_GlowPropTurnOff >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CCSUsrMsg_GlowPropTurnOff >(arena);
}
template<> PROTOBUF_NOINLINE ::CCSUsrMsg_RoundBackupFilenames*
Arena::CreateMaybeMessage< ::CCSUsrMsg_RoundBackupFilenames >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CCSUsrMsg_RoundBackupFilenames >(arena);
}
template<> PROTOBUF_NOINLINE ::CCSUsrMsg_SSUI*
Arena::CreateMaybeMessage< ::CCSUsrMsg_SSUI >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CCSUsrMsg_SSUI >(arena);
}
template<> PROTOBUF_NOINLINE ::CCSUsrMsg_SurvivalStats_Fact*
Arena::CreateMaybeMessage< ::CCSUsrMsg_SurvivalStats_Fact >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CCSUsrMsg_SurvivalStats_Fact >(arena);
}
template<> PROTOBUF_NOINLINE ::CCSUsrMsg_SurvivalStats_Placement*
Arena::CreateMaybeMessage< ::CCSUsrMsg_SurvivalStats_Placement >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CCSUsrMsg_SurvivalStats_Placement >(arena);
}
template<> PROTOBUF_NOINLINE ::CCSUsrMsg_SurvivalStats_Damage*
Arena::CreateMaybeMessage< ::CCSUsrMsg_SurvivalStats_Damage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CCSUsrMsg_SurvivalStats_Damage >(arena);
}
template<> PROTOBUF_NOINLINE ::CCSUsrMsg_SurvivalStats*
Arena::CreateMaybeMessage< ::CCSUsrMsg_SurvivalStats >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CCSUsrMsg_SurvivalStats >(arena);
}
template<> PROTOBUF_NOINLINE ::CCSUsrMsg_EndOfMatchAllPlayersData_Accolade*
Arena::CreateMaybeMessage< ::CCSUsrMsg_EndOfMatchAllPlayersData_Accolade >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CCSUsrMsg_EndOfMatchAllPlayersData_Accolade >(arena);
}
template<> PROTOBUF_NOINLINE ::CCSUsrMsg_EndOfMatchAllPlayersData_PlayerData*
Arena::CreateMaybeMessage< ::CCSUsrMsg_EndOfMatchAllPlayersData_PlayerData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CCSUsrMsg_EndOfMatchAllPlayersData_PlayerData >(arena);
}
template<> PROTOBUF_NOINLINE ::CCSUsrMsg_EndOfMatchAllPlayersData*
Arena::CreateMaybeMessage< ::CCSUsrMsg_EndOfMatchAllPlayersData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CCSUsrMsg_EndOfMatchAllPlayersData >(arena);
}
template<> PROTOBUF_NOINLINE ::CCSUsrMsg_RoundEndReportData_RerEvent_Victim*
Arena::CreateMaybeMessage< ::CCSUsrMsg_RoundEndReportData_RerEvent_Victim >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CCSUsrMsg_RoundEndReportData_RerEvent_Victim >(arena);
}
template<> PROTOBUF_NOINLINE ::CCSUsrMsg_RoundEndReportData_RerEvent_Objective*
Arena::CreateMaybeMessage< ::CCSUsrMsg_RoundEndReportData_RerEvent_Objective >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CCSUsrMsg_RoundEndReportData_RerEvent_Objective >(arena);
}
template<> PROTOBUF_NOINLINE ::CCSUsrMsg_RoundEndReportData_RerEvent_Damage*
Arena::CreateMaybeMessage< ::CCSUsrMsg_RoundEndReportData_RerEvent_Damage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CCSUsrMsg_RoundEndReportData_RerEvent_Damage >(arena);
}
template<> PROTOBUF_NOINLINE ::CCSUsrMsg_RoundEndReportData_RerEvent*
Arena::CreateMaybeMessage< ::CCSUsrMsg_RoundEndReportData_RerEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CCSUsrMsg_RoundEndReportData_RerEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::CCSUsrMsg_RoundEndReportData_InitialConditions*
Arena::CreateMaybeMessage< ::CCSUsrMsg_RoundEndReportData_InitialConditions >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CCSUsrMsg_RoundEndReportData_InitialConditions >(arena);
}
template<> PROTOBUF_NOINLINE ::CCSUsrMsg_RoundEndReportData*
Arena::CreateMaybeMessage< ::CCSUsrMsg_RoundEndReportData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CCSUsrMsg_RoundEndReportData >(arena);
}
template<> PROTOBUF_NOINLINE ::CCSUsrMsg_PostRoundDamageReport*
Arena::CreateMaybeMessage< ::CCSUsrMsg_PostRoundDamageReport >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CCSUsrMsg_PostRoundDamageReport >(arena);
}
template<> PROTOBUF_NOINLINE ::CCSUsrMsg_CurrentRoundOdds*
Arena::CreateMaybeMessage< ::CCSUsrMsg_CurrentRoundOdds >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CCSUsrMsg_CurrentRoundOdds >(arena);
}
template<> PROTOBUF_NOINLINE ::CCSUsrMsg_DeepStats*
Arena::CreateMaybeMessage< ::CCSUsrMsg_DeepStats >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CCSUsrMsg_DeepStats >(arena);
}
template<> PROTOBUF_NOINLINE ::CCSUsrMsg_ShootInfo*
Arena::CreateMaybeMessage< ::CCSUsrMsg_ShootInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CCSUsrMsg_ShootInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::CCSUsrMsg_ResetHud*
Arena::CreateMaybeMessage< ::CCSUsrMsg_ResetHud >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CCSUsrMsg_ResetHud >(arena);
}
template<> PROTOBUF_NOINLINE ::CCSUsrMsg_GameTitle*
Arena::CreateMaybeMessage< ::CCSUsrMsg_GameTitle >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CCSUsrMsg_GameTitle >(arena);
}
template<> PROTOBUF_NOINLINE ::CCSUsrMsg_RequestState*
Arena::CreateMaybeMessage< ::CCSUsrMsg_RequestState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CCSUsrMsg_RequestState >(arena);
}
template<> PROTOBUF_NOINLINE ::CCSUsrMsg_StopSpectatorMode*
Arena::CreateMaybeMessage< ::CCSUsrMsg_StopSpectatorMode >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CCSUsrMsg_StopSpectatorMode >(arena);
}
template<> PROTOBUF_NOINLINE ::CCSUsrMsg_DisconnectToLobby*
Arena::CreateMaybeMessage< ::CCSUsrMsg_DisconnectToLobby >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CCSUsrMsg_DisconnectToLobby >(arena);
}
template<> PROTOBUF_NOINLINE ::CCSUsrMsg_WarmupHasEnded*
Arena::CreateMaybeMessage< ::CCSUsrMsg_WarmupHasEnded >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CCSUsrMsg_WarmupHasEnded >(arena);
}
template<> PROTOBUF_NOINLINE ::CCSUsrMsg_ClientInfo*
Arena::CreateMaybeMessage< ::CCSUsrMsg_ClientInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CCSUsrMsg_ClientInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::CCSUsrMsg_ServerRankRevealAll*
Arena::CreateMaybeMessage< ::CCSUsrMsg_ServerRankRevealAll >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CCSUsrMsg_ServerRankRevealAll >(arena);
}
template<> PROTOBUF_NOINLINE ::CCSUsrMsgPreMatchSayText*
Arena::CreateMaybeMessage< ::CCSUsrMsgPreMatchSayText >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CCSUsrMsgPreMatchSayText >(arena);
}
template<> PROTOBUF_NOINLINE ::CCSUsrMsg_CounterStrafe*
Arena::CreateMaybeMessage< ::CCSUsrMsg_CounterStrafe >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CCSUsrMsg_CounterStrafe >(arena);
}
template<> PROTOBUF_NOINLINE ::CCSUsrMsg_DamagePrediction*
Arena::CreateMaybeMessage< ::CCSUsrMsg_DamagePrediction >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CCSUsrMsg_DamagePrediction >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
