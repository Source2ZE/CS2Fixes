// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: valveextensions.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_valveextensions_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_valveextensions_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021008 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/descriptor.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_valveextensions_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_valveextensions_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_valveextensions_2eproto;
PROTOBUF_NAMESPACE_OPEN
PROTOBUF_NAMESPACE_CLOSE

enum EProtoDebugVisiblity : int {
  k_EProtoDebugVisibility_Always = 0,
  k_EProtoDebugVisibility_Server = 70,
  k_EProtoDebugVisibility_ValveServer = 80,
  k_EProtoDebugVisibility_GC = 90,
  k_EProtoDebugVisibility_Never = 100
};
bool EProtoDebugVisiblity_IsValid(int value);
constexpr EProtoDebugVisiblity EProtoDebugVisiblity_MIN = k_EProtoDebugVisibility_Always;
constexpr EProtoDebugVisiblity EProtoDebugVisiblity_MAX = k_EProtoDebugVisibility_Never;
constexpr int EProtoDebugVisiblity_ARRAYSIZE = EProtoDebugVisiblity_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EProtoDebugVisiblity_descriptor();
template<typename T>
inline const std::string& EProtoDebugVisiblity_Name(T enum_t_value) {
  static_assert(::std::is_same<T, EProtoDebugVisiblity>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function EProtoDebugVisiblity_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    EProtoDebugVisiblity_descriptor(), enum_t_value);
}
inline bool EProtoDebugVisiblity_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, EProtoDebugVisiblity* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<EProtoDebugVisiblity>(
    EProtoDebugVisiblity_descriptor(), name, value);
}
// ===================================================================


// ===================================================================

static const int kValveMapFieldFieldNumber = 61000;
extern ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::PROTOBUF_NAMESPACE_ID::FieldOptions,
    ::PROTOBUF_NAMESPACE_ID::internal::PrimitiveTypeTraits< bool >, 8, false >
  valve_map_field;
static const int kValveMapKeyFieldNumber = 61001;
extern ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::PROTOBUF_NAMESPACE_ID::FieldOptions,
    ::PROTOBUF_NAMESPACE_ID::internal::PrimitiveTypeTraits< bool >, 8, false >
  valve_map_key;
static const int kDiffEncodeFieldFieldNumber = 61002;
extern ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::PROTOBUF_NAMESPACE_ID::FieldOptions,
    ::PROTOBUF_NAMESPACE_ID::internal::PrimitiveTypeTraits< int32_t >, 5, false >
  diff_encode_field;
static const int kDeltaIgnoreFieldNumber = 61003;
extern ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::PROTOBUF_NAMESPACE_ID::FieldOptions,
    ::PROTOBUF_NAMESPACE_ID::internal::PrimitiveTypeTraits< bool >, 8, false >
  delta_ignore;
static const int kSteammlMaxEntriesFieldNumber = 61004;
extern ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::PROTOBUF_NAMESPACE_ID::FieldOptions,
    ::PROTOBUF_NAMESPACE_ID::internal::PrimitiveTypeTraits< uint32_t >, 13, false >
  steamml_max_entries;
static const int kSteammlIsTimestampFieldNumber = 61005;
extern ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::PROTOBUF_NAMESPACE_ID::FieldOptions,
    ::PROTOBUF_NAMESPACE_ID::internal::PrimitiveTypeTraits< bool >, 8, false >
  steamml_is_timestamp;
static const int kSteamlearnCountFieldNumber = 61006;
extern ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::PROTOBUF_NAMESPACE_ID::FieldOptions,
    ::PROTOBUF_NAMESPACE_ID::internal::PrimitiveTypeTraits< uint32_t >, 13, false >
  steamlearn_count;
static const int kDebugprintVisibilityFieldNumber = 61007;
extern ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::PROTOBUF_NAMESPACE_ID::FieldOptions,
    ::PROTOBUF_NAMESPACE_ID::internal::EnumTypeTraits< ::EProtoDebugVisiblity, ::EProtoDebugVisiblity_IsValid>, 14, false >
  debugprint_visibility;
static const int kSchemaFriendlyNameFieldNumber = 1000;
extern ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::PROTOBUF_NAMESPACE_ID::EnumValueOptions,
    ::PROTOBUF_NAMESPACE_ID::internal::StringTypeTraits, 9, false >
  schema_friendly_name;
static const int kSchemaDescriptionFieldNumber = 1001;
extern ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::PROTOBUF_NAMESPACE_ID::EnumValueOptions,
    ::PROTOBUF_NAMESPACE_ID::internal::StringTypeTraits, 9, false >
  schema_description;
static const int kSchemaSuppressEnumeratorFieldNumber = 1002;
extern ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::PROTOBUF_NAMESPACE_ID::EnumValueOptions,
    ::PROTOBUF_NAMESPACE_ID::internal::PrimitiveTypeTraits< bool >, 8, false >
  schema_suppress_enumerator;

// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)


PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::EProtoDebugVisiblity> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::EProtoDebugVisiblity>() {
  return ::EProtoDebugVisiblity_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_valveextensions_2eproto
