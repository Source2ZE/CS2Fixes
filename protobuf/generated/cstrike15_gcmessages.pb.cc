// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cstrike15_gcmessages.proto

#include "cstrike15_gcmessages.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

PROTOBUF_CONSTEXPR GameServerPing::GameServerPing(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.ping_)*/0
  , /*decltype(_impl_.ip_)*/0u
  , /*decltype(_impl_.instances_)*/0u} {}
struct GameServerPingDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GameServerPingDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GameServerPingDefaultTypeInternal() {}
  union {
    GameServerPing _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GameServerPingDefaultTypeInternal _GameServerPing_default_instance_;
PROTOBUF_CONSTEXPR DataCenterPing::DataCenterPing(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.data_center_id_)*/0u
  , /*decltype(_impl_.ping_)*/0} {}
struct DataCenterPingDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DataCenterPingDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DataCenterPingDefaultTypeInternal() {}
  union {
    DataCenterPing _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DataCenterPingDefaultTypeInternal _DataCenterPing_default_instance_;
PROTOBUF_CONSTEXPR DetailedSearchStatistic::DetailedSearchStatistic(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.game_type_)*/0u
  , /*decltype(_impl_.search_time_avg_)*/0u
  , /*decltype(_impl_.players_searching_)*/0u} {}
struct DetailedSearchStatisticDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DetailedSearchStatisticDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DetailedSearchStatisticDefaultTypeInternal() {}
  union {
    DetailedSearchStatistic _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DetailedSearchStatisticDefaultTypeInternal _DetailedSearchStatistic_default_instance_;
PROTOBUF_CONSTEXPR TournamentPlayer::TournamentPlayer(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.player_nick_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.player_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.player_flag_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.player_location_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.player_desc_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.account_id_)*/0u
  , /*decltype(_impl_.player_dob_)*/0u} {}
struct TournamentPlayerDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TournamentPlayerDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TournamentPlayerDefaultTypeInternal() {}
  union {
    TournamentPlayer _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TournamentPlayerDefaultTypeInternal _TournamentPlayer_default_instance_;
PROTOBUF_CONSTEXPR TournamentTeam::TournamentTeam(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.players_)*/{}
  , /*decltype(_impl_.team_tag_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.team_flag_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.team_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.team_id_)*/0} {}
struct TournamentTeamDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TournamentTeamDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TournamentTeamDefaultTypeInternal() {}
  union {
    TournamentTeam _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TournamentTeamDefaultTypeInternal _TournamentTeam_default_instance_;
PROTOBUF_CONSTEXPR TournamentEvent::TournamentEvent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.event_tag_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.event_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.event_stage_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.event_id_)*/0
  , /*decltype(_impl_.event_time_start_)*/0u
  , /*decltype(_impl_.event_time_end_)*/0u
  , /*decltype(_impl_.event_public_)*/0
  , /*decltype(_impl_.event_stage_id_)*/0
  , /*decltype(_impl_.active_section_id_)*/0u} {}
struct TournamentEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TournamentEventDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TournamentEventDefaultTypeInternal() {}
  union {
    TournamentEvent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TournamentEventDefaultTypeInternal _TournamentEvent_default_instance_;
PROTOBUF_CONSTEXPR GlobalStatistics::GlobalStatistics(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.search_statistics_)*/{}
  , /*decltype(_impl_.main_post_url_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.players_online_)*/0u
  , /*decltype(_impl_.servers_online_)*/0u
  , /*decltype(_impl_.players_searching_)*/0u
  , /*decltype(_impl_.servers_available_)*/0u
  , /*decltype(_impl_.ongoing_matches_)*/0u
  , /*decltype(_impl_.search_time_avg_)*/0u
  , /*decltype(_impl_.required_appid_version_)*/0u
  , /*decltype(_impl_.pricesheet_version_)*/0u
  , /*decltype(_impl_.twitch_streams_version_)*/0u
  , /*decltype(_impl_.active_tournament_eventid_)*/0u
  , /*decltype(_impl_.active_survey_id_)*/0u
  , /*decltype(_impl_.rtime32_cur_)*/0u
  , /*decltype(_impl_.rtime32_event_start_)*/0u
  , /*decltype(_impl_.required_appid_version2_)*/0u} {}
struct GlobalStatisticsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GlobalStatisticsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GlobalStatisticsDefaultTypeInternal() {}
  union {
    GlobalStatistics _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GlobalStatisticsDefaultTypeInternal _GlobalStatistics_default_instance_;
PROTOBUF_CONSTEXPR OperationalStatisticDescription::OperationalStatisticDescription(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.idkey_)*/0u} {}
struct OperationalStatisticDescriptionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR OperationalStatisticDescriptionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~OperationalStatisticDescriptionDefaultTypeInternal() {}
  union {
    OperationalStatisticDescription _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OperationalStatisticDescriptionDefaultTypeInternal _OperationalStatisticDescription_default_instance_;
PROTOBUF_CONSTEXPR OperationalStatisticElement::OperationalStatisticElement(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.values_)*/{}
  , /*decltype(_impl_.idkey_)*/0u} {}
struct OperationalStatisticElementDefaultTypeInternal {
  PROTOBUF_CONSTEXPR OperationalStatisticElementDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~OperationalStatisticElementDefaultTypeInternal() {}
  union {
    OperationalStatisticElement _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OperationalStatisticElementDefaultTypeInternal _OperationalStatisticElement_default_instance_;
PROTOBUF_CONSTEXPR OperationalStatisticsPacket::OperationalStatisticsPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.values_)*/{}
  , /*decltype(_impl_.packetid_)*/0
  , /*decltype(_impl_.mstimestamp_)*/0} {}
struct OperationalStatisticsPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR OperationalStatisticsPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~OperationalStatisticsPacketDefaultTypeInternal() {}
  union {
    OperationalStatisticsPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OperationalStatisticsPacketDefaultTypeInternal _OperationalStatisticsPacket_default_instance_;
PROTOBUF_CONSTEXPR OperationalVarValue::OperationalVarValue(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.svalue_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.ivalue_)*/0
  , /*decltype(_impl_.fvalue_)*/0} {}
struct OperationalVarValueDefaultTypeInternal {
  PROTOBUF_CONSTEXPR OperationalVarValueDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~OperationalVarValueDefaultTypeInternal() {}
  union {
    OperationalVarValue _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OperationalVarValueDefaultTypeInternal _OperationalVarValue_default_instance_;
PROTOBUF_CONSTEXPR PlayerRankingInfo_PerMapRank::PlayerRankingInfo_PerMapRank(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.map_id_)*/0u
  , /*decltype(_impl_.rank_id_)*/0u
  , /*decltype(_impl_.wins_)*/0u} {}
struct PlayerRankingInfo_PerMapRankDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PlayerRankingInfo_PerMapRankDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PlayerRankingInfo_PerMapRankDefaultTypeInternal() {}
  union {
    PlayerRankingInfo_PerMapRank _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PlayerRankingInfo_PerMapRankDefaultTypeInternal _PlayerRankingInfo_PerMapRank_default_instance_;
PROTOBUF_CONSTEXPR PlayerRankingInfo::PlayerRankingInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.per_map_rank_)*/{}
  , /*decltype(_impl_.leaderboard_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.account_id_)*/0u
  , /*decltype(_impl_.rank_id_)*/0u
  , /*decltype(_impl_.wins_)*/0u
  , /*decltype(_impl_.rank_change_)*/0
  , /*decltype(_impl_.rank_type_id_)*/0u
  , /*decltype(_impl_.tv_control_)*/0u
  , /*decltype(_impl_.rank_window_stats_)*/uint64_t{0u}
  , /*decltype(_impl_.rank_if_win_)*/0u
  , /*decltype(_impl_.rank_if_lose_)*/0u
  , /*decltype(_impl_.rank_if_tie_)*/0u
  , /*decltype(_impl_.leaderboard_name_status_)*/0u} {}
struct PlayerRankingInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PlayerRankingInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PlayerRankingInfoDefaultTypeInternal() {}
  union {
    PlayerRankingInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PlayerRankingInfoDefaultTypeInternal _PlayerRankingInfo_default_instance_;
PROTOBUF_CONSTEXPR PlayerCommendationInfo::PlayerCommendationInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.cmd_friendly_)*/0u
  , /*decltype(_impl_.cmd_teaching_)*/0u
  , /*decltype(_impl_.cmd_leader_)*/0u} {}
struct PlayerCommendationInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PlayerCommendationInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PlayerCommendationInfoDefaultTypeInternal() {}
  union {
    PlayerCommendationInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PlayerCommendationInfoDefaultTypeInternal _PlayerCommendationInfo_default_instance_;
PROTOBUF_CONSTEXPR PlayerMedalsInfo::PlayerMedalsInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.display_items_defidx_)*/{}
  , /*decltype(_impl_.featured_display_item_defidx_)*/0u} {}
struct PlayerMedalsInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PlayerMedalsInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PlayerMedalsInfoDefaultTypeInternal() {}
  union {
    PlayerMedalsInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PlayerMedalsInfoDefaultTypeInternal _PlayerMedalsInfo_default_instance_;
PROTOBUF_CONSTEXPR AccountActivity::AccountActivity(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.activity_)*/0u
  , /*decltype(_impl_.mode_)*/0u
  , /*decltype(_impl_.matchid_)*/uint64_t{0u}
  , /*decltype(_impl_.map_)*/0u} {}
struct AccountActivityDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AccountActivityDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AccountActivityDefaultTypeInternal() {}
  union {
    AccountActivity _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AccountActivityDefaultTypeInternal _AccountActivity_default_instance_;
PROTOBUF_CONSTEXPR TournamentMatchSetup::TournamentMatchSetup(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.event_id_)*/0
  , /*decltype(_impl_.team_id_ct_)*/0
  , /*decltype(_impl_.team_id_t_)*/0
  , /*decltype(_impl_.event_stage_id_)*/0} {}
struct TournamentMatchSetupDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TournamentMatchSetupDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TournamentMatchSetupDefaultTypeInternal() {}
  union {
    TournamentMatchSetup _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TournamentMatchSetupDefaultTypeInternal _TournamentMatchSetup_default_instance_;
PROTOBUF_CONSTEXPR ServerHltvInfo::ServerHltvInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.game_mapgroup_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.game_map_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.tv_watch_key_)*/uint64_t{0u}
  , /*decltype(_impl_.tv_udp_port_)*/0u
  , /*decltype(_impl_.tv_slots_)*/0u
  , /*decltype(_impl_.tv_clients_)*/0u
  , /*decltype(_impl_.tv_proxies_)*/0u
  , /*decltype(_impl_.tv_time_)*/0u
  , /*decltype(_impl_.game_type_)*/0u
  , /*decltype(_impl_.tv_master_steamid_)*/uint64_t{0u}
  , /*decltype(_impl_.tv_local_slots_)*/0u
  , /*decltype(_impl_.tv_local_clients_)*/0u
  , /*decltype(_impl_.tv_local_proxies_)*/0u
  , /*decltype(_impl_.tv_relay_slots_)*/0u
  , /*decltype(_impl_.tv_relay_clients_)*/0u
  , /*decltype(_impl_.tv_relay_proxies_)*/0u
  , /*decltype(_impl_.tv_relay_address_)*/0u
  , /*decltype(_impl_.tv_relay_port_)*/0u
  , /*decltype(_impl_.tv_relay_steamid_)*/uint64_t{0u}
  , /*decltype(_impl_.flags_)*/0u} {}
struct ServerHltvInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ServerHltvInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ServerHltvInfoDefaultTypeInternal() {}
  union {
    ServerHltvInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ServerHltvInfoDefaultTypeInternal _ServerHltvInfo_default_instance_;
PROTOBUF_CONSTEXPR IpAddressMask::IpAddressMask(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.a_)*/0u
  , /*decltype(_impl_.b_)*/0u
  , /*decltype(_impl_.c_)*/0u
  , /*decltype(_impl_.d_)*/0u
  , /*decltype(_impl_.bits_)*/0u
  , /*decltype(_impl_.token_)*/0u} {}
struct IpAddressMaskDefaultTypeInternal {
  PROTOBUF_CONSTEXPR IpAddressMaskDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~IpAddressMaskDefaultTypeInternal() {}
  union {
    IpAddressMask _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 IpAddressMaskDefaultTypeInternal _IpAddressMask_default_instance_;
PROTOBUF_CONSTEXPR CMsgCsgoSteamUserStatChange::CMsgCsgoSteamUserStatChange(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.ecsgosteamuserstat_)*/0
  , /*decltype(_impl_.delta_)*/0
  , /*decltype(_impl_.absolute_)*/false} {}
struct CMsgCsgoSteamUserStatChangeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgCsgoSteamUserStatChangeDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgCsgoSteamUserStatChangeDefaultTypeInternal() {}
  union {
    CMsgCsgoSteamUserStatChange _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgCsgoSteamUserStatChangeDefaultTypeInternal _CMsgCsgoSteamUserStatChange_default_instance_;
PROTOBUF_CONSTEXPR XpProgressData::XpProgressData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.xp_points_)*/0u
  , /*decltype(_impl_.xp_category_)*/0} {}
struct XpProgressDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR XpProgressDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~XpProgressDataDefaultTypeInternal() {}
  union {
    XpProgressData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 XpProgressDataDefaultTypeInternal _XpProgressData_default_instance_;
PROTOBUF_CONSTEXPR MatchEndItemUpdates::MatchEndItemUpdates(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.item_id_)*/uint64_t{0u}
  , /*decltype(_impl_.item_attr_defidx_)*/0u
  , /*decltype(_impl_.item_attr_delta_value_)*/0u} {}
struct MatchEndItemUpdatesDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MatchEndItemUpdatesDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MatchEndItemUpdatesDefaultTypeInternal() {}
  union {
    MatchEndItemUpdates _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MatchEndItemUpdatesDefaultTypeInternal _MatchEndItemUpdates_default_instance_;
PROTOBUF_CONSTEXPR ScoreLeaderboardData_Entry::ScoreLeaderboardData_Entry(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.tag_)*/0u
  , /*decltype(_impl_.val_)*/0u} {}
struct ScoreLeaderboardData_EntryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ScoreLeaderboardData_EntryDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ScoreLeaderboardData_EntryDefaultTypeInternal() {}
  union {
    ScoreLeaderboardData_Entry _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ScoreLeaderboardData_EntryDefaultTypeInternal _ScoreLeaderboardData_Entry_default_instance_;
PROTOBUF_CONSTEXPR ScoreLeaderboardData_AccountEntries::ScoreLeaderboardData_AccountEntries(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.entries_)*/{}
  , /*decltype(_impl_.accountid_)*/0u} {}
struct ScoreLeaderboardData_AccountEntriesDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ScoreLeaderboardData_AccountEntriesDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ScoreLeaderboardData_AccountEntriesDefaultTypeInternal() {}
  union {
    ScoreLeaderboardData_AccountEntries _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ScoreLeaderboardData_AccountEntriesDefaultTypeInternal _ScoreLeaderboardData_AccountEntries_default_instance_;
PROTOBUF_CONSTEXPR ScoreLeaderboardData::ScoreLeaderboardData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.accountentries_)*/{}
  , /*decltype(_impl_.matchentries_)*/{}
  , /*decltype(_impl_.leaderboard_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.quest_id_)*/uint64_t{0u}
  , /*decltype(_impl_.score_)*/0u} {}
struct ScoreLeaderboardDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ScoreLeaderboardDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ScoreLeaderboardDataDefaultTypeInternal() {}
  union {
    ScoreLeaderboardData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ScoreLeaderboardDataDefaultTypeInternal _ScoreLeaderboardData_default_instance_;
PROTOBUF_CONSTEXPR PlayerQuestData_QuestItemData::PlayerQuestData_QuestItemData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.quest_id_)*/uint64_t{0u}
  , /*decltype(_impl_.quest_normal_points_earned_)*/0
  , /*decltype(_impl_.quest_bonus_points_earned_)*/0} {}
struct PlayerQuestData_QuestItemDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PlayerQuestData_QuestItemDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PlayerQuestData_QuestItemDataDefaultTypeInternal() {}
  union {
    PlayerQuestData_QuestItemData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PlayerQuestData_QuestItemDataDefaultTypeInternal _PlayerQuestData_QuestItemData_default_instance_;
PROTOBUF_CONSTEXPR PlayerQuestData::PlayerQuestData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.quest_item_data_)*/{}
  , /*decltype(_impl_.xp_progress_data_)*/{}
  , /*decltype(_impl_.item_updates_)*/{}
  , /*decltype(_impl_.userstatchanges_)*/{}
  , /*decltype(_impl_.quester_account_id_)*/0u
  , /*decltype(_impl_.time_played_)*/0u
  , /*decltype(_impl_.mm_game_mode_)*/0u
  , /*decltype(_impl_.operation_points_eligible_)*/false} {}
struct PlayerQuestDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PlayerQuestDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PlayerQuestDataDefaultTypeInternal() {}
  union {
    PlayerQuestData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PlayerQuestDataDefaultTypeInternal _PlayerQuestData_default_instance_;
PROTOBUF_CONSTEXPR DeepPlayerStatsEntry::DeepPlayerStatsEntry(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.mates_)*/{}
  , /*decltype(_impl_.match_id_)*/uint64_t{0u}
  , /*decltype(_impl_.accountid_)*/0u
  , /*decltype(_impl_.mm_game_mode_)*/0u
  , /*decltype(_impl_.mapid_)*/0u
  , /*decltype(_impl_.b_starting_ct_)*/false
  , /*decltype(_impl_.match_outcome_)*/0u
  , /*decltype(_impl_.rounds_won_)*/0u
  , /*decltype(_impl_.rounds_lost_)*/0u
  , /*decltype(_impl_.stat_score_)*/0u
  , /*decltype(_impl_.stat_deaths_)*/0u
  , /*decltype(_impl_.stat_mvps_)*/0u
  , /*decltype(_impl_.enemy_kills_)*/0u
  , /*decltype(_impl_.enemy_headshots_)*/0u
  , /*decltype(_impl_.enemy_2ks_)*/0u
  , /*decltype(_impl_.enemy_3ks_)*/0u
  , /*decltype(_impl_.enemy_4ks_)*/0u
  , /*decltype(_impl_.total_damage_)*/0u
  , /*decltype(_impl_.engagements_entry_count_)*/0u
  , /*decltype(_impl_.engagements_entry_wins_)*/0u
  , /*decltype(_impl_.engagements_1v1_count_)*/0u
  , /*decltype(_impl_.engagements_1v1_wins_)*/0u
  , /*decltype(_impl_.engagements_1v2_count_)*/0u
  , /*decltype(_impl_.engagements_1v2_wins_)*/0u
  , /*decltype(_impl_.utility_count_)*/0u
  , /*decltype(_impl_.utility_success_)*/0u
  , /*decltype(_impl_.flash_count_)*/0u
  , /*decltype(_impl_.flash_success_)*/0u} {}
struct DeepPlayerStatsEntryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DeepPlayerStatsEntryDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DeepPlayerStatsEntryDefaultTypeInternal() {}
  union {
    DeepPlayerStatsEntry _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DeepPlayerStatsEntryDefaultTypeInternal _DeepPlayerStatsEntry_default_instance_;
PROTOBUF_CONSTEXPR DeepPlayerMatchEvent::DeepPlayerMatchEvent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.match_id_)*/uint64_t{0u}
  , /*decltype(_impl_.accountid_)*/0u
  , /*decltype(_impl_.event_id_)*/0u
  , /*decltype(_impl_.event_type_)*/0u
  , /*decltype(_impl_.b_playing_ct_)*/false
  , /*decltype(_impl_.user_pos_x_)*/0
  , /*decltype(_impl_.user_pos_y_)*/0
  , /*decltype(_impl_.user_defidx_)*/0u
  , /*decltype(_impl_.other_pos_x_)*/0
  , /*decltype(_impl_.other_pos_y_)*/0
  , /*decltype(_impl_.other_defidx_)*/0u
  , /*decltype(_impl_.user_pos_z_)*/0
  , /*decltype(_impl_.other_pos_z_)*/0
  , /*decltype(_impl_.event_data_)*/0} {}
struct DeepPlayerMatchEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DeepPlayerMatchEventDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DeepPlayerMatchEventDefaultTypeInternal() {}
  union {
    DeepPlayerMatchEvent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DeepPlayerMatchEventDefaultTypeInternal _DeepPlayerMatchEvent_default_instance_;
PROTOBUF_CONSTEXPR CMsgGC_ServerQuestUpdateData::CMsgGC_ServerQuestUpdateData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.player_quest_data_)*/{}
  , /*decltype(_impl_.binary_data_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.missionlbsdata_)*/nullptr
  , /*decltype(_impl_.mm_game_mode_)*/0u
  , /*decltype(_impl_.flags_)*/0u} {}
struct CMsgGC_ServerQuestUpdateDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgGC_ServerQuestUpdateDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgGC_ServerQuestUpdateDataDefaultTypeInternal() {}
  union {
    CMsgGC_ServerQuestUpdateData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgGC_ServerQuestUpdateDataDefaultTypeInternal _CMsgGC_ServerQuestUpdateData_default_instance_;
PROTOBUF_CONSTEXPR CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm::CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.token_)*/0u
  , /*decltype(_impl_.stamp_)*/0u
  , /*decltype(_impl_.exchange_)*/uint64_t{0u}
  , /*decltype(_impl_.retry_)*/0u} {}
struct CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirmDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirmDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirmDefaultTypeInternal() {}
  union {
    CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirmDefaultTypeInternal _CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm_default_instance_;
PROTOBUF_CONSTEXPR CMsgGCCStrike15_v2_GC2ServerReservationUpdate::CMsgGCCStrike15_v2_GC2ServerReservationUpdate(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.viewers_external_total_)*/0u
  , /*decltype(_impl_.viewers_external_steam_)*/0u} {}
struct CMsgGCCStrike15_v2_GC2ServerReservationUpdateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgGCCStrike15_v2_GC2ServerReservationUpdateDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgGCCStrike15_v2_GC2ServerReservationUpdateDefaultTypeInternal() {}
  union {
    CMsgGCCStrike15_v2_GC2ServerReservationUpdate _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgGCCStrike15_v2_GC2ServerReservationUpdateDefaultTypeInternal _CMsgGCCStrike15_v2_GC2ServerReservationUpdate_default_instance_;
PROTOBUF_CONSTEXPR CMsgGCCStrike15_v2_MatchmakingStart::CMsgGCCStrike15_v2_MatchmakingStart(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.account_ids_)*/{}
  , /*decltype(_impl_.ticket_data_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.tournament_match_)*/nullptr
  , /*decltype(_impl_.game_type_)*/0u
  , /*decltype(_impl_.client_version_)*/0u
  , /*decltype(_impl_.prime_only_)*/false
  , /*decltype(_impl_.tv_control_)*/0u
  , /*decltype(_impl_.lobby_id_)*/uint64_t{0u}} {}
struct CMsgGCCStrike15_v2_MatchmakingStartDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgGCCStrike15_v2_MatchmakingStartDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgGCCStrike15_v2_MatchmakingStartDefaultTypeInternal() {}
  union {
    CMsgGCCStrike15_v2_MatchmakingStart _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgGCCStrike15_v2_MatchmakingStartDefaultTypeInternal _CMsgGCCStrike15_v2_MatchmakingStart_default_instance_;
PROTOBUF_CONSTEXPR CMsgGCCStrike15_v2_MatchmakingStop::CMsgGCCStrike15_v2_MatchmakingStop(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.abandon_)*/0} {}
struct CMsgGCCStrike15_v2_MatchmakingStopDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgGCCStrike15_v2_MatchmakingStopDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgGCCStrike15_v2_MatchmakingStopDefaultTypeInternal() {}
  union {
    CMsgGCCStrike15_v2_MatchmakingStop _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgGCCStrike15_v2_MatchmakingStopDefaultTypeInternal _CMsgGCCStrike15_v2_MatchmakingStop_default_instance_;
PROTOBUF_CONSTEXPR CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_Note::CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_Note(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.type_)*/0
  , /*decltype(_impl_.region_id_)*/0
  , /*decltype(_impl_.region_r_)*/0
  , /*decltype(_impl_.distance_)*/0} {}
struct CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_NoteDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_NoteDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_NoteDefaultTypeInternal() {}
  union {
    CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_Note _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_NoteDefaultTypeInternal _CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_Note_default_instance_;
PROTOBUF_CONSTEXPR CMsgGCCStrike15_v2_MatchmakingClient2ServerPing::CMsgGCCStrike15_v2_MatchmakingClient2ServerPing(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.gameserverpings_)*/{}
  , /*decltype(_impl_.data_center_pings_)*/{}
  , /*decltype(_impl_.notes_)*/{}
  , /*decltype(_impl_.search_key_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.debug_message_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.offset_index_)*/0
  , /*decltype(_impl_.final_batch_)*/0
  , /*decltype(_impl_.max_ping_)*/0u
  , /*decltype(_impl_.test_token_)*/0u} {}
struct CMsgGCCStrike15_v2_MatchmakingClient2ServerPingDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgGCCStrike15_v2_MatchmakingClient2ServerPingDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgGCCStrike15_v2_MatchmakingClient2ServerPingDefaultTypeInternal() {}
  union {
    CMsgGCCStrike15_v2_MatchmakingClient2ServerPing _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgGCCStrike15_v2_MatchmakingClient2ServerPingDefaultTypeInternal _CMsgGCCStrike15_v2_MatchmakingClient2ServerPing_default_instance_;
PROTOBUF_CONSTEXPR CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.waiting_account_id_sessions_)*/{}
  , /*decltype(_impl_.ongoingmatch_account_id_sessions_)*/{}
  , /*decltype(_impl_.failping_account_id_sessions_)*/{}
  , /*decltype(_impl_.penalty_account_id_sessions_)*/{}
  , /*decltype(_impl_.failready_account_id_sessions_)*/{}
  , /*decltype(_impl_.vacbanned_account_id_sessions_)*/{}
  , /*decltype(_impl_.notes_)*/{}
  , /*decltype(_impl_.penalty_account_id_sessions_green_)*/{}
  , /*decltype(_impl_.insufficientlevel_sessions_)*/{}
  , /*decltype(_impl_.vsncheck_account_id_sessions_)*/{}
  , /*decltype(_impl_.launcher_mismatch_sessions_)*/{}
  , /*decltype(_impl_.insecure_account_id_sessions_)*/{}
  , /*decltype(_impl_.error_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.global_stats_)*/nullptr
  , /*decltype(_impl_.server_ipaddress_mask_)*/nullptr
  , /*decltype(_impl_.matchmaking_)*/0} {}
struct CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdateDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdateDefaultTypeInternal() {}
  union {
    CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdateDefaultTypeInternal _CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_default_instance_;
PROTOBUF_CONSTEXPR CDataGCCStrike15_v2_TournamentMatchDraft_Entry::CDataGCCStrike15_v2_TournamentMatchDraft_Entry(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.mapid_)*/0
  , /*decltype(_impl_.team_id_ct_)*/0} {}
struct CDataGCCStrike15_v2_TournamentMatchDraft_EntryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CDataGCCStrike15_v2_TournamentMatchDraft_EntryDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CDataGCCStrike15_v2_TournamentMatchDraft_EntryDefaultTypeInternal() {}
  union {
    CDataGCCStrike15_v2_TournamentMatchDraft_Entry _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CDataGCCStrike15_v2_TournamentMatchDraft_EntryDefaultTypeInternal _CDataGCCStrike15_v2_TournamentMatchDraft_Entry_default_instance_;
PROTOBUF_CONSTEXPR CDataGCCStrike15_v2_TournamentMatchDraft::CDataGCCStrike15_v2_TournamentMatchDraft(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.drafts_)*/{}
  , /*decltype(_impl_.vote_mapid_0_)*/{}
  , /*decltype(_impl_.vote_mapid_1_)*/{}
  , /*decltype(_impl_.vote_mapid_2_)*/{}
  , /*decltype(_impl_.vote_mapid_3_)*/{}
  , /*decltype(_impl_.vote_mapid_4_)*/{}
  , /*decltype(_impl_.vote_mapid_5_)*/{}
  , /*decltype(_impl_.vote_starting_side_)*/{}
  , /*decltype(_impl_.event_id_)*/0
  , /*decltype(_impl_.event_stage_id_)*/0
  , /*decltype(_impl_.team_id_0_)*/0
  , /*decltype(_impl_.team_id_1_)*/0
  , /*decltype(_impl_.maps_count_)*/0
  , /*decltype(_impl_.maps_current_)*/0
  , /*decltype(_impl_.team_id_start_)*/0
  , /*decltype(_impl_.team_id_veto1_)*/0
  , /*decltype(_impl_.team_id_pickn_)*/0
  , /*decltype(_impl_.vote_phase_)*/0
  , /*decltype(_impl_.vote_phase_start_)*/0
  , /*decltype(_impl_.vote_phase_length_)*/0} {}
struct CDataGCCStrike15_v2_TournamentMatchDraftDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CDataGCCStrike15_v2_TournamentMatchDraftDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CDataGCCStrike15_v2_TournamentMatchDraftDefaultTypeInternal() {}
  union {
    CDataGCCStrike15_v2_TournamentMatchDraft _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CDataGCCStrike15_v2_TournamentMatchDraftDefaultTypeInternal _CDataGCCStrike15_v2_TournamentMatchDraft_default_instance_;
PROTOBUF_CONSTEXPR CPreMatchInfoData_TeamStats::CPreMatchInfoData_TeamStats(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.match_info_teams_)*/{}
  , /*decltype(_impl_.match_info_txt_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.match_info_idxtxt_)*/0} {}
struct CPreMatchInfoData_TeamStatsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CPreMatchInfoData_TeamStatsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CPreMatchInfoData_TeamStatsDefaultTypeInternal() {}
  union {
    CPreMatchInfoData_TeamStats _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CPreMatchInfoData_TeamStatsDefaultTypeInternal _CPreMatchInfoData_TeamStats_default_instance_;
PROTOBUF_CONSTEXPR CPreMatchInfoData::CPreMatchInfoData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.stats_)*/{}
  , /*decltype(_impl_.wins_)*/{}
  , /*decltype(_impl_.draft_)*/nullptr
  , /*decltype(_impl_.predictions_pct_)*/0} {}
struct CPreMatchInfoDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CPreMatchInfoDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CPreMatchInfoDataDefaultTypeInternal() {}
  union {
    CPreMatchInfoData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CPreMatchInfoDataDefaultTypeInternal _CPreMatchInfoData_default_instance_;
PROTOBUF_CONSTEXPR CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.account_ids_)*/{}
  , /*decltype(_impl_.rankings_)*/{}
  , /*decltype(_impl_.party_ids_)*/{}
  , /*decltype(_impl_.whitelist_)*/{}
  , /*decltype(_impl_.tournament_teams_)*/{}
  , /*decltype(_impl_.tournament_casters_account_ids_)*/{}
  , /*decltype(_impl_.op_var_values_)*/{}
  , /*decltype(_impl_.teammate_colors_)*/{}
  , /*decltype(_impl_.tournament_event_)*/nullptr
  , /*decltype(_impl_.pre_match_data_)*/nullptr
  , /*decltype(_impl_.match_id_)*/uint64_t{0u}
  , /*decltype(_impl_.game_type_)*/0u
  , /*decltype(_impl_.server_version_)*/0u
  , /*decltype(_impl_.encryption_key_)*/uint64_t{0u}
  , /*decltype(_impl_.encryption_key_pub_)*/uint64_t{0u}
  , /*decltype(_impl_.tv_master_steamid_)*/uint64_t{0u}
  , /*decltype(_impl_.tv_relay_steamid_)*/uint64_t{0u}
  , /*decltype(_impl_.rtime32_event_start_)*/0u
  , /*decltype(_impl_.tv_control_)*/0u
  , /*decltype(_impl_.flags_)*/0u
  , /*decltype(_impl_.socache_control_)*/0u} {}
struct CMsgGCCStrike15_v2_MatchmakingGC2ServerReserveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgGCCStrike15_v2_MatchmakingGC2ServerReserveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgGCCStrike15_v2_MatchmakingGC2ServerReserveDefaultTypeInternal() {}
  union {
    CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgGCCStrike15_v2_MatchmakingGC2ServerReserveDefaultTypeInternal _CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve_default_instance_;
PROTOBUF_CONSTEXPR CMsgGCCStrike15_v2_MatchmakingServerReservationResponse::CMsgGCCStrike15_v2_MatchmakingServerReservationResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.reward_player_accounts_)*/{}
  , /*decltype(_impl_.idle_player_accounts_)*/{}
  , /*decltype(_impl_.map_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.tournament_tag_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.reservation_)*/nullptr
  , /*decltype(_impl_.tv_info_)*/nullptr
  , /*decltype(_impl_.reservationid_)*/uint64_t{0u}
  , /*decltype(_impl_.gc_reservation_sent_)*/uint64_t{0u}
  , /*decltype(_impl_.server_version_)*/0u
  , /*decltype(_impl_.reward_item_attr_def_idx_)*/0u
  , /*decltype(_impl_.reward_item_attr_value_)*/0u
  , /*decltype(_impl_.reward_item_attr_reward_idx_)*/0u
  , /*decltype(_impl_.reward_drop_list_)*/0u
  , /*decltype(_impl_.legacy_steamdatagram_port_)*/0u
  , /*decltype(_impl_.test_token_)*/0u
  , /*decltype(_impl_.flags_)*/0u
  , /*decltype(_impl_.steamdatagram_routing_)*/0u
  , /*decltype(_impl_.system_load_)*/0u
  , /*decltype(_impl_.cpus_online_)*/0u} {}
struct CMsgGCCStrike15_v2_MatchmakingServerReservationResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgGCCStrike15_v2_MatchmakingServerReservationResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgGCCStrike15_v2_MatchmakingServerReservationResponseDefaultTypeInternal() {}
  union {
    CMsgGCCStrike15_v2_MatchmakingServerReservationResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgGCCStrike15_v2_MatchmakingServerReservationResponseDefaultTypeInternal _CMsgGCCStrike15_v2_MatchmakingServerReservationResponse_default_instance_;
PROTOBUF_CONSTEXPR CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve::CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.map_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.server_address_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.reservation_)*/nullptr
  , /*decltype(_impl_.gs_ping_)*/nullptr
  , /*decltype(_impl_.serverid_)*/uint64_t{0u}
  , /*decltype(_impl_.direct_udp_ip_)*/0u
  , /*decltype(_impl_.direct_udp_port_)*/0u
  , /*decltype(_impl_.reservationid_)*/uint64_t{0u}
  , /*decltype(_impl_.gs_location_id_)*/0u} {}
struct CMsgGCCStrike15_v2_MatchmakingGC2ClientReserveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgGCCStrike15_v2_MatchmakingGC2ClientReserveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgGCCStrike15_v2_MatchmakingGC2ClientReserveDefaultTypeInternal() {}
  union {
    CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgGCCStrike15_v2_MatchmakingGC2ClientReserveDefaultTypeInternal _CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve_default_instance_;
PROTOBUF_CONSTEXPR CMsgGCCStrike15_v2_MatchmakingServerRoundStats_DropInfo::CMsgGCCStrike15_v2_MatchmakingServerRoundStats_DropInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.account_mvp_)*/0u} {}
struct CMsgGCCStrike15_v2_MatchmakingServerRoundStats_DropInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgGCCStrike15_v2_MatchmakingServerRoundStats_DropInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgGCCStrike15_v2_MatchmakingServerRoundStats_DropInfoDefaultTypeInternal() {}
  union {
    CMsgGCCStrike15_v2_MatchmakingServerRoundStats_DropInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgGCCStrike15_v2_MatchmakingServerRoundStats_DropInfoDefaultTypeInternal _CMsgGCCStrike15_v2_MatchmakingServerRoundStats_DropInfo_default_instance_;
PROTOBUF_CONSTEXPR CMsgGCCStrike15_v2_MatchmakingServerRoundStats::CMsgGCCStrike15_v2_MatchmakingServerRoundStats(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.kills_)*/{}
  , /*decltype(_impl_.assists_)*/{}
  , /*decltype(_impl_.deaths_)*/{}
  , /*decltype(_impl_.scores_)*/{}
  , /*decltype(_impl_.pings_)*/{}
  , /*decltype(_impl_.team_scores_)*/{}
  , /*decltype(_impl_.enemy_kills_)*/{}
  , /*decltype(_impl_.enemy_headshots_)*/{}
  , /*decltype(_impl_.enemy_3ks_)*/{}
  , /*decltype(_impl_.enemy_4ks_)*/{}
  , /*decltype(_impl_.enemy_5ks_)*/{}
  , /*decltype(_impl_.mvps_)*/{}
  , /*decltype(_impl_.enemy_kills_agg_)*/{}
  , /*decltype(_impl_.enemy_2ks_)*/{}
  , /*decltype(_impl_.player_spawned_)*/{}
  , /*decltype(_impl_.team_spawn_count_)*/{}
  , /*decltype(_impl_.map_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.reservation_)*/nullptr
  , /*decltype(_impl_.confirm_)*/nullptr
  , /*decltype(_impl_.drop_info_)*/nullptr
  , /*decltype(_impl_.reservationid_)*/uint64_t{0u}
  , /*decltype(_impl_.round_)*/0
  , /*decltype(_impl_.round_result_)*/0
  , /*decltype(_impl_.match_result_)*/0
  , /*decltype(_impl_.reservation_stage_)*/0
  , /*decltype(_impl_.match_duration_)*/0
  , /*decltype(_impl_.spectators_count_)*/0u
  , /*decltype(_impl_.spectators_count_tv_)*/0u
  , /*decltype(_impl_.spectators_count_lnk_)*/0u
  , /*decltype(_impl_.b_switched_teams_)*/false
  , /*decltype(_impl_.max_rounds_)*/0u
  , /*decltype(_impl_.map_id_)*/0} {}
struct CMsgGCCStrike15_v2_MatchmakingServerRoundStatsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgGCCStrike15_v2_MatchmakingServerRoundStatsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgGCCStrike15_v2_MatchmakingServerRoundStatsDefaultTypeInternal() {}
  union {
    CMsgGCCStrike15_v2_MatchmakingServerRoundStats _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgGCCStrike15_v2_MatchmakingServerRoundStatsDefaultTypeInternal _CMsgGCCStrike15_v2_MatchmakingServerRoundStats_default_instance_;
PROTOBUF_CONSTEXPR CMsgGCCStrike15_v2_MatchmakingClient2GCHello::CMsgGCCStrike15_v2_MatchmakingClient2GCHello(
    ::_pbi::ConstantInitialized) {}
struct CMsgGCCStrike15_v2_MatchmakingClient2GCHelloDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgGCCStrike15_v2_MatchmakingClient2GCHelloDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgGCCStrike15_v2_MatchmakingClient2GCHelloDefaultTypeInternal() {}
  union {
    CMsgGCCStrike15_v2_MatchmakingClient2GCHello _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgGCCStrike15_v2_MatchmakingClient2GCHelloDefaultTypeInternal _CMsgGCCStrike15_v2_MatchmakingClient2GCHello_default_instance_;
PROTOBUF_CONSTEXPR CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::CMsgGCCStrike15_v2_MatchmakingGC2ClientHello(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.my_current_event_teams_)*/{}
  , /*decltype(_impl_.my_current_event_stages_)*/{}
  , /*decltype(_impl_.rankings_)*/{}
  , /*decltype(_impl_.ongoingmatch_)*/nullptr
  , /*decltype(_impl_.global_stats_)*/nullptr
  , /*decltype(_impl_.ranking_)*/nullptr
  , /*decltype(_impl_.commendation_)*/nullptr
  , /*decltype(_impl_.medals_)*/nullptr
  , /*decltype(_impl_.my_current_event_)*/nullptr
  , /*decltype(_impl_.my_current_team_)*/nullptr
  , /*decltype(_impl_.activity_)*/nullptr
  , /*decltype(_impl_.account_id_)*/0u
  , /*decltype(_impl_.penalty_seconds_)*/0u
  , /*decltype(_impl_.penalty_reason_)*/0u
  , /*decltype(_impl_.vac_banned_)*/0
  , /*decltype(_impl_.survey_vote_)*/0u
  , /*decltype(_impl_.player_level_)*/0
  , /*decltype(_impl_.player_cur_xp_)*/0
  , /*decltype(_impl_.player_xp_bonus_flags_)*/0
  , /*decltype(_impl_.owcaseid_)*/uint64_t{0u}} {}
struct CMsgGCCStrike15_v2_MatchmakingGC2ClientHelloDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgGCCStrike15_v2_MatchmakingGC2ClientHelloDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgGCCStrike15_v2_MatchmakingGC2ClientHelloDefaultTypeInternal() {}
  union {
    CMsgGCCStrike15_v2_MatchmakingGC2ClientHello _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgGCCStrike15_v2_MatchmakingGC2ClientHelloDefaultTypeInternal _CMsgGCCStrike15_v2_MatchmakingGC2ClientHello_default_instance_;
PROTOBUF_CONSTEXPR CMsgGCCStrike15_v2_AccountPrivacySettings_Setting::CMsgGCCStrike15_v2_AccountPrivacySettings_Setting(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.setting_type_)*/0u
  , /*decltype(_impl_.setting_value_)*/0u} {}
struct CMsgGCCStrike15_v2_AccountPrivacySettings_SettingDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgGCCStrike15_v2_AccountPrivacySettings_SettingDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgGCCStrike15_v2_AccountPrivacySettings_SettingDefaultTypeInternal() {}
  union {
    CMsgGCCStrike15_v2_AccountPrivacySettings_Setting _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgGCCStrike15_v2_AccountPrivacySettings_SettingDefaultTypeInternal _CMsgGCCStrike15_v2_AccountPrivacySettings_Setting_default_instance_;
PROTOBUF_CONSTEXPR CMsgGCCStrike15_v2_AccountPrivacySettings::CMsgGCCStrike15_v2_AccountPrivacySettings(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.settings_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CMsgGCCStrike15_v2_AccountPrivacySettingsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgGCCStrike15_v2_AccountPrivacySettingsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgGCCStrike15_v2_AccountPrivacySettingsDefaultTypeInternal() {}
  union {
    CMsgGCCStrike15_v2_AccountPrivacySettings _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgGCCStrike15_v2_AccountPrivacySettingsDefaultTypeInternal _CMsgGCCStrike15_v2_AccountPrivacySettings_default_instance_;
PROTOBUF_CONSTEXPR CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon::CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.abandoned_match_)*/nullptr
  , /*decltype(_impl_.account_id_)*/0u
  , /*decltype(_impl_.penalty_seconds_)*/0u
  , /*decltype(_impl_.penalty_reason_)*/0u} {}
struct CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandonDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandonDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandonDefaultTypeInternal() {}
  union {
    CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandonDefaultTypeInternal _CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon_default_instance_;
PROTOBUF_CONSTEXPR CMsgGCCStrike15_v2_ClientGCRankUpdate::CMsgGCCStrike15_v2_ClientGCRankUpdate(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.rankings_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CMsgGCCStrike15_v2_ClientGCRankUpdateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgGCCStrike15_v2_ClientGCRankUpdateDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgGCCStrike15_v2_ClientGCRankUpdateDefaultTypeInternal() {}
  union {
    CMsgGCCStrike15_v2_ClientGCRankUpdate _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgGCCStrike15_v2_ClientGCRankUpdateDefaultTypeInternal _CMsgGCCStrike15_v2_ClientGCRankUpdate_default_instance_;
PROTOBUF_CONSTEXPR CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate::CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.main_post_url_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdateDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdateDefaultTypeInternal() {}
  union {
    CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdateDefaultTypeInternal _CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate_default_instance_;
PROTOBUF_CONSTEXPR CMsgGCCStrike15_v2_ServerNotificationForUserPenalty::CMsgGCCStrike15_v2_ServerNotificationForUserPenalty(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.account_id_)*/0u
  , /*decltype(_impl_.reason_)*/0u
  , /*decltype(_impl_.seconds_)*/0u
  , /*decltype(_impl_.communication_cooldown_)*/false} {}
struct CMsgGCCStrike15_v2_ServerNotificationForUserPenaltyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgGCCStrike15_v2_ServerNotificationForUserPenaltyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgGCCStrike15_v2_ServerNotificationForUserPenaltyDefaultTypeInternal() {}
  union {
    CMsgGCCStrike15_v2_ServerNotificationForUserPenalty _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgGCCStrike15_v2_ServerNotificationForUserPenaltyDefaultTypeInternal _CMsgGCCStrike15_v2_ServerNotificationForUserPenalty_default_instance_;
PROTOBUF_CONSTEXPR CMsgGCCStrike15_v2_ClientReportPlayer::CMsgGCCStrike15_v2_ClientReportPlayer(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.account_id_)*/0u
  , /*decltype(_impl_.rpt_aimbot_)*/0u
  , /*decltype(_impl_.rpt_wallhack_)*/0u
  , /*decltype(_impl_.rpt_speedhack_)*/0u
  , /*decltype(_impl_.rpt_teamharm_)*/0u
  , /*decltype(_impl_.rpt_textabuse_)*/0u
  , /*decltype(_impl_.match_id_)*/uint64_t{0u}
  , /*decltype(_impl_.rpt_voiceabuse_)*/0u
  , /*decltype(_impl_.report_from_demo_)*/false} {}
struct CMsgGCCStrike15_v2_ClientReportPlayerDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgGCCStrike15_v2_ClientReportPlayerDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgGCCStrike15_v2_ClientReportPlayerDefaultTypeInternal() {}
  union {
    CMsgGCCStrike15_v2_ClientReportPlayer _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgGCCStrike15_v2_ClientReportPlayerDefaultTypeInternal _CMsgGCCStrike15_v2_ClientReportPlayer_default_instance_;
PROTOBUF_CONSTEXPR CMsgGCCStrike15_v2_ClientCommendPlayer::CMsgGCCStrike15_v2_ClientCommendPlayer(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.commendation_)*/nullptr
  , /*decltype(_impl_.account_id_)*/0u
  , /*decltype(_impl_.tokens_)*/0u
  , /*decltype(_impl_.match_id_)*/uint64_t{0u}} {}
struct CMsgGCCStrike15_v2_ClientCommendPlayerDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgGCCStrike15_v2_ClientCommendPlayerDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgGCCStrike15_v2_ClientCommendPlayerDefaultTypeInternal() {}
  union {
    CMsgGCCStrike15_v2_ClientCommendPlayer _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgGCCStrike15_v2_ClientCommendPlayerDefaultTypeInternal _CMsgGCCStrike15_v2_ClientCommendPlayer_default_instance_;
PROTOBUF_CONSTEXPR CMsgGCCStrike15_v2_ClientReportServer::CMsgGCCStrike15_v2_ClientReportServer(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.rpt_poorperf_)*/0u
  , /*decltype(_impl_.rpt_abusivemodels_)*/0u
  , /*decltype(_impl_.rpt_badmotd_)*/0u
  , /*decltype(_impl_.rpt_listingabuse_)*/0u
  , /*decltype(_impl_.match_id_)*/uint64_t{0u}
  , /*decltype(_impl_.rpt_inventoryabuse_)*/0u} {}
struct CMsgGCCStrike15_v2_ClientReportServerDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgGCCStrike15_v2_ClientReportServerDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgGCCStrike15_v2_ClientReportServerDefaultTypeInternal() {}
  union {
    CMsgGCCStrike15_v2_ClientReportServer _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgGCCStrike15_v2_ClientReportServerDefaultTypeInternal _CMsgGCCStrike15_v2_ClientReportServer_default_instance_;
PROTOBUF_CONSTEXPR CMsgGCCStrike15_v2_ClientReportResponse::CMsgGCCStrike15_v2_ClientReportResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.confirmation_id_)*/uint64_t{0u}
  , /*decltype(_impl_.account_id_)*/0u
  , /*decltype(_impl_.server_ip_)*/0u
  , /*decltype(_impl_.response_type_)*/0u
  , /*decltype(_impl_.response_result_)*/0u
  , /*decltype(_impl_.tokens_)*/0u} {}
struct CMsgGCCStrike15_v2_ClientReportResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgGCCStrike15_v2_ClientReportResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgGCCStrike15_v2_ClientReportResponseDefaultTypeInternal() {}
  union {
    CMsgGCCStrike15_v2_ClientReportResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgGCCStrike15_v2_ClientReportResponseDefaultTypeInternal _CMsgGCCStrike15_v2_ClientReportResponse_default_instance_;
PROTOBUF_CONSTEXPR CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends::CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.account_ids_)*/{}
  , /*decltype(_impl_.data_center_pings_)*/{}
  , /*decltype(_impl_.serverid_)*/uint64_t{0u}
  , /*decltype(_impl_.request_id_)*/0u
  , /*decltype(_impl_.client_launcher_)*/0u
  , /*decltype(_impl_.matchid_)*/uint64_t{0u}} {}
struct CMsgGCCStrike15_v2_ClientRequestWatchInfoFriendsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgGCCStrike15_v2_ClientRequestWatchInfoFriendsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgGCCStrike15_v2_ClientRequestWatchInfoFriendsDefaultTypeInternal() {}
  union {
    CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgGCCStrike15_v2_ClientRequestWatchInfoFriendsDefaultTypeInternal _CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends_default_instance_;
PROTOBUF_CONSTEXPR WatchableMatchInfo::WatchableMatchInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.tv_watch_password_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.game_mapgroup_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.game_map_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.server_ip_)*/0u
  , /*decltype(_impl_.tv_port_)*/0u
  , /*decltype(_impl_.tv_spectators_)*/0u
  , /*decltype(_impl_.tv_time_)*/0u
  , /*decltype(_impl_.cl_decryptdata_key_)*/uint64_t{0u}
  , /*decltype(_impl_.cl_decryptdata_key_pub_)*/uint64_t{0u}
  , /*decltype(_impl_.server_id_)*/uint64_t{0u}
  , /*decltype(_impl_.match_id_)*/uint64_t{0u}
  , /*decltype(_impl_.reservation_id_)*/uint64_t{0u}
  , /*decltype(_impl_.game_type_)*/0u} {}
struct WatchableMatchInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR WatchableMatchInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~WatchableMatchInfoDefaultTypeInternal() {}
  union {
    WatchableMatchInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 WatchableMatchInfoDefaultTypeInternal _WatchableMatchInfo_default_instance_;
PROTOBUF_CONSTEXPR CMsgGCCStrike15_v2_ClientRequestJoinFriendData::CMsgGCCStrike15_v2_ClientRequestJoinFriendData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.errormsg_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.res_)*/nullptr
  , /*decltype(_impl_.version_)*/0u
  , /*decltype(_impl_.account_id_)*/0u
  , /*decltype(_impl_.join_token_)*/0u
  , /*decltype(_impl_.join_ipp_)*/0u} {}
struct CMsgGCCStrike15_v2_ClientRequestJoinFriendDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgGCCStrike15_v2_ClientRequestJoinFriendDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgGCCStrike15_v2_ClientRequestJoinFriendDataDefaultTypeInternal() {}
  union {
    CMsgGCCStrike15_v2_ClientRequestJoinFriendData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgGCCStrike15_v2_ClientRequestJoinFriendDataDefaultTypeInternal _CMsgGCCStrike15_v2_ClientRequestJoinFriendData_default_instance_;
PROTOBUF_CONSTEXPR CMsgGCCStrike15_v2_ClientRequestJoinServerData::CMsgGCCStrike15_v2_ClientRequestJoinServerData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.errormsg_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.res_)*/nullptr
  , /*decltype(_impl_.version_)*/0u
  , /*decltype(_impl_.account_id_)*/0u
  , /*decltype(_impl_.serverid_)*/uint64_t{0u}
  , /*decltype(_impl_.server_ip_)*/0u
  , /*decltype(_impl_.server_port_)*/0u} {}
struct CMsgGCCStrike15_v2_ClientRequestJoinServerDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgGCCStrike15_v2_ClientRequestJoinServerDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgGCCStrike15_v2_ClientRequestJoinServerDataDefaultTypeInternal() {}
  union {
    CMsgGCCStrike15_v2_ClientRequestJoinServerData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgGCCStrike15_v2_ClientRequestJoinServerDataDefaultTypeInternal _CMsgGCCStrike15_v2_ClientRequestJoinServerData_default_instance_;
PROTOBUF_CONSTEXPR CMsgGCCstrike15_v2_ClientRequestNewMission::CMsgGCCstrike15_v2_ClientRequestNewMission(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.mission_id_)*/0u
  , /*decltype(_impl_.campaign_id_)*/0u} {}
struct CMsgGCCstrike15_v2_ClientRequestNewMissionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgGCCstrike15_v2_ClientRequestNewMissionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgGCCstrike15_v2_ClientRequestNewMissionDefaultTypeInternal() {}
  union {
    CMsgGCCstrike15_v2_ClientRequestNewMission _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgGCCstrike15_v2_ClientRequestNewMissionDefaultTypeInternal _CMsgGCCstrike15_v2_ClientRequestNewMission_default_instance_;
PROTOBUF_CONSTEXPR CMsgGCCstrike15_v2_ClientRedeemMissionReward::CMsgGCCstrike15_v2_ClientRedeemMissionReward(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.campaign_id_)*/0u
  , /*decltype(_impl_.redeem_id_)*/0u
  , /*decltype(_impl_.redeemable_balance_)*/0u
  , /*decltype(_impl_.expected_cost_)*/0u} {}
struct CMsgGCCstrike15_v2_ClientRedeemMissionRewardDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgGCCstrike15_v2_ClientRedeemMissionRewardDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgGCCstrike15_v2_ClientRedeemMissionRewardDefaultTypeInternal() {}
  union {
    CMsgGCCstrike15_v2_ClientRedeemMissionReward _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgGCCstrike15_v2_ClientRedeemMissionRewardDefaultTypeInternal _CMsgGCCstrike15_v2_ClientRedeemMissionReward_default_instance_;
PROTOBUF_CONSTEXPR CMsgGCCstrike15_v2_ClientRedeemFreeReward::CMsgGCCstrike15_v2_ClientRedeemFreeReward(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.items_)*/{}
  , /*decltype(_impl_.generation_time_)*/0u
  , /*decltype(_impl_.redeemable_balance_)*/0u} {}
struct CMsgGCCstrike15_v2_ClientRedeemFreeRewardDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgGCCstrike15_v2_ClientRedeemFreeRewardDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgGCCstrike15_v2_ClientRedeemFreeRewardDefaultTypeInternal() {}
  union {
    CMsgGCCstrike15_v2_ClientRedeemFreeReward _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgGCCstrike15_v2_ClientRedeemFreeRewardDefaultTypeInternal _CMsgGCCstrike15_v2_ClientRedeemFreeReward_default_instance_;
PROTOBUF_CONSTEXPR CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded::CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.xp_progress_data_)*/{}
  , /*decltype(_impl_.account_id_)*/0u
  , /*decltype(_impl_.current_xp_)*/0u
  , /*decltype(_impl_.current_level_)*/0u
  , /*decltype(_impl_.upgraded_defidx_)*/0u
  , /*decltype(_impl_.operation_points_awarded_)*/0u
  , /*decltype(_impl_.free_rewards_)*/0u
  , /*decltype(_impl_.xp_trail_remaining_)*/0u
  , /*decltype(_impl_.xp_trail_xp_needed_)*/0
  , /*decltype(_impl_.xp_trail_level_)*/0u} {}
struct CMsgGCCstrike15_v2_GC2ServerNotifyXPRewardedDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgGCCstrike15_v2_GC2ServerNotifyXPRewardedDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgGCCstrike15_v2_GC2ServerNotifyXPRewardedDefaultTypeInternal() {}
  union {
    CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgGCCstrike15_v2_GC2ServerNotifyXPRewardedDefaultTypeInternal _CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded_default_instance_;
PROTOBUF_CONSTEXPR CMsgGCCStrike15_v2_ClientNetworkConfig::CMsgGCCStrike15_v2_ClientNetworkConfig(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.data_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct CMsgGCCStrike15_v2_ClientNetworkConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgGCCStrike15_v2_ClientNetworkConfigDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgGCCStrike15_v2_ClientNetworkConfigDefaultTypeInternal() {}
  union {
    CMsgGCCStrike15_v2_ClientNetworkConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgGCCStrike15_v2_ClientNetworkConfigDefaultTypeInternal _CMsgGCCStrike15_v2_ClientNetworkConfig_default_instance_;
PROTOBUF_CONSTEXPR CMsgGCCStrike15_ClientDeepStats_DeepStatsRange::CMsgGCCStrike15_ClientDeepStats_DeepStatsRange(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.begin_)*/0u
  , /*decltype(_impl_.end_)*/0u
  , /*decltype(_impl_.frozen_)*/false} {}
struct CMsgGCCStrike15_ClientDeepStats_DeepStatsRangeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgGCCStrike15_ClientDeepStats_DeepStatsRangeDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgGCCStrike15_ClientDeepStats_DeepStatsRangeDefaultTypeInternal() {}
  union {
    CMsgGCCStrike15_ClientDeepStats_DeepStatsRange _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgGCCStrike15_ClientDeepStats_DeepStatsRangeDefaultTypeInternal _CMsgGCCStrike15_ClientDeepStats_DeepStatsRange_default_instance_;
PROTOBUF_CONSTEXPR CMsgGCCStrike15_ClientDeepStats_DeepStatsMatch::CMsgGCCStrike15_ClientDeepStats_DeepStatsMatch(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.events_)*/{}
  , /*decltype(_impl_.player_)*/nullptr} {}
struct CMsgGCCStrike15_ClientDeepStats_DeepStatsMatchDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgGCCStrike15_ClientDeepStats_DeepStatsMatchDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgGCCStrike15_ClientDeepStats_DeepStatsMatchDefaultTypeInternal() {}
  union {
    CMsgGCCStrike15_ClientDeepStats_DeepStatsMatch _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgGCCStrike15_ClientDeepStats_DeepStatsMatchDefaultTypeInternal _CMsgGCCStrike15_ClientDeepStats_DeepStatsMatch_default_instance_;
PROTOBUF_CONSTEXPR CMsgGCCStrike15_ClientDeepStats::CMsgGCCStrike15_ClientDeepStats(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.matches_)*/{}
  , /*decltype(_impl_.range_)*/nullptr
  , /*decltype(_impl_.account_id_)*/0u} {}
struct CMsgGCCStrike15_ClientDeepStatsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgGCCStrike15_ClientDeepStatsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgGCCStrike15_ClientDeepStatsDefaultTypeInternal() {}
  union {
    CMsgGCCStrike15_ClientDeepStats _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgGCCStrike15_ClientDeepStatsDefaultTypeInternal _CMsgGCCStrike15_ClientDeepStats_default_instance_;
PROTOBUF_CONSTEXPR CMsgGCCStrike15_v2_WatchInfoUsers::CMsgGCCStrike15_v2_WatchInfoUsers(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.account_ids_)*/{}
  , /*decltype(_impl_.watchable_match_infos_)*/{}
  , /*decltype(_impl_.request_id_)*/0u
  , /*decltype(_impl_.extended_timeout_)*/0u} {}
struct CMsgGCCStrike15_v2_WatchInfoUsersDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgGCCStrike15_v2_WatchInfoUsersDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgGCCStrike15_v2_WatchInfoUsersDefaultTypeInternal() {}
  union {
    CMsgGCCStrike15_v2_WatchInfoUsers _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgGCCStrike15_v2_WatchInfoUsersDefaultTypeInternal _CMsgGCCStrike15_v2_WatchInfoUsers_default_instance_;
PROTOBUF_CONSTEXPR CMsgGCCStrike15_v2_ClientRequestPlayersProfile::CMsgGCCStrike15_v2_ClientRequestPlayersProfile(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.account_ids__deprecated_)*/{}
  , /*decltype(_impl_.request_id__deprecated_)*/0u
  , /*decltype(_impl_.account_id_)*/0u
  , /*decltype(_impl_.request_level_)*/0u} {}
struct CMsgGCCStrike15_v2_ClientRequestPlayersProfileDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgGCCStrike15_v2_ClientRequestPlayersProfileDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgGCCStrike15_v2_ClientRequestPlayersProfileDefaultTypeInternal() {}
  union {
    CMsgGCCStrike15_v2_ClientRequestPlayersProfile _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgGCCStrike15_v2_ClientRequestPlayersProfileDefaultTypeInternal _CMsgGCCStrike15_v2_ClientRequestPlayersProfile_default_instance_;
PROTOBUF_CONSTEXPR CMsgGCCStrike15_v2_PlayersProfile::CMsgGCCStrike15_v2_PlayersProfile(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.account_profiles_)*/{}
  , /*decltype(_impl_.request_id_)*/0u} {}
struct CMsgGCCStrike15_v2_PlayersProfileDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgGCCStrike15_v2_PlayersProfileDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgGCCStrike15_v2_PlayersProfileDefaultTypeInternal() {}
  union {
    CMsgGCCStrike15_v2_PlayersProfile _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgGCCStrike15_v2_PlayersProfileDefaultTypeInternal _CMsgGCCStrike15_v2_PlayersProfile_default_instance_;
PROTOBUF_CONSTEXPR CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate::CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.caseid_)*/uint64_t{0u}
  , /*decltype(_impl_.suspectid_)*/0u
  , /*decltype(_impl_.fractionid_)*/0u
  , /*decltype(_impl_.rpt_aimbot_)*/0u
  , /*decltype(_impl_.rpt_wallhack_)*/0u
  , /*decltype(_impl_.rpt_speedhack_)*/0u
  , /*decltype(_impl_.rpt_teamharm_)*/0u
  , /*decltype(_impl_.reason_)*/0u} {}
struct CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdateDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdateDefaultTypeInternal() {}
  union {
    CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdateDefaultTypeInternal _CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate_default_instance_;
PROTOBUF_CONSTEXPR CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment::CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.caseurl_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.caseid_)*/uint64_t{0u}
  , /*decltype(_impl_.verdict_)*/0u
  , /*decltype(_impl_.timestamp_)*/0u
  , /*decltype(_impl_.throttleseconds_)*/0u
  , /*decltype(_impl_.suspectid_)*/0u
  , /*decltype(_impl_.fractionid_)*/0u
  , /*decltype(_impl_.numrounds_)*/0u
  , /*decltype(_impl_.fractionrounds_)*/0u
  , /*decltype(_impl_.streakconvictions_)*/0
  , /*decltype(_impl_.reason_)*/0u} {}
struct CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignmentDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignmentDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignmentDefaultTypeInternal() {}
  union {
    CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignmentDefaultTypeInternal _CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment_default_instance_;
PROTOBUF_CONSTEXPR CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus::CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.caseid_)*/uint64_t{0u}
  , /*decltype(_impl_.statusid_)*/0u} {}
struct CMsgGCCStrike15_v2_PlayerOverwatchCaseStatusDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgGCCStrike15_v2_PlayerOverwatchCaseStatusDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgGCCStrike15_v2_PlayerOverwatchCaseStatusDefaultTypeInternal() {}
  union {
    CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgGCCStrike15_v2_PlayerOverwatchCaseStatusDefaultTypeInternal _CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus_default_instance_;
PROTOBUF_CONSTEXPR CClientHeaderOverwatchEvidence::CClientHeaderOverwatchEvidence(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.caseid_)*/uint64_t{0u}
  , /*decltype(_impl_.accountid_)*/0u} {}
struct CClientHeaderOverwatchEvidenceDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CClientHeaderOverwatchEvidenceDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CClientHeaderOverwatchEvidenceDefaultTypeInternal() {}
  union {
    CClientHeaderOverwatchEvidence _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CClientHeaderOverwatchEvidenceDefaultTypeInternal _CClientHeaderOverwatchEvidence_default_instance_;
PROTOBUF_CONSTEXPR CMsgGCCStrike15_v2_GC2ClientTextMsg::CMsgGCCStrike15_v2_GC2ClientTextMsg(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.payload_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.id_)*/0u
  , /*decltype(_impl_.type_)*/0u} {}
struct CMsgGCCStrike15_v2_GC2ClientTextMsgDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgGCCStrike15_v2_GC2ClientTextMsgDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgGCCStrike15_v2_GC2ClientTextMsgDefaultTypeInternal() {}
  union {
    CMsgGCCStrike15_v2_GC2ClientTextMsg _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgGCCStrike15_v2_GC2ClientTextMsgDefaultTypeInternal _CMsgGCCStrike15_v2_GC2ClientTextMsg_default_instance_;
PROTOBUF_CONSTEXPR CMsgGCCStrike15_v2_Client2GCTextMsg::CMsgGCCStrike15_v2_Client2GCTextMsg(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.args_)*/{}
  , /*decltype(_impl_.id_)*/0u} {}
struct CMsgGCCStrike15_v2_Client2GCTextMsgDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgGCCStrike15_v2_Client2GCTextMsgDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgGCCStrike15_v2_Client2GCTextMsgDefaultTypeInternal() {}
  union {
    CMsgGCCStrike15_v2_Client2GCTextMsg _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgGCCStrike15_v2_Client2GCTextMsgDefaultTypeInternal _CMsgGCCStrike15_v2_Client2GCTextMsg_default_instance_;
PROTOBUF_CONSTEXPR CMsgGCCStrike15_v2_MatchEndRunRewardDrops::CMsgGCCStrike15_v2_MatchEndRunRewardDrops(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.serverinfo_)*/nullptr
  , /*decltype(_impl_.match_end_quest_data_)*/nullptr} {}
struct CMsgGCCStrike15_v2_MatchEndRunRewardDropsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgGCCStrike15_v2_MatchEndRunRewardDropsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgGCCStrike15_v2_MatchEndRunRewardDropsDefaultTypeInternal() {}
  union {
    CMsgGCCStrike15_v2_MatchEndRunRewardDrops _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgGCCStrike15_v2_MatchEndRunRewardDropsDefaultTypeInternal _CMsgGCCStrike15_v2_MatchEndRunRewardDrops_default_instance_;
PROTOBUF_CONSTEXPR CEconItemPreviewDataBlock_Sticker::CEconItemPreviewDataBlock_Sticker(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.slot_)*/0u
  , /*decltype(_impl_.sticker_id_)*/0u
  , /*decltype(_impl_.wear_)*/0
  , /*decltype(_impl_.scale_)*/0
  , /*decltype(_impl_.rotation_)*/0
  , /*decltype(_impl_.tint_id_)*/0u
  , /*decltype(_impl_.offset_x_)*/0
  , /*decltype(_impl_.offset_y_)*/0
  , /*decltype(_impl_.offset_z_)*/0
  , /*decltype(_impl_.pattern_)*/0u} {}
struct CEconItemPreviewDataBlock_StickerDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CEconItemPreviewDataBlock_StickerDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CEconItemPreviewDataBlock_StickerDefaultTypeInternal() {}
  union {
    CEconItemPreviewDataBlock_Sticker _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CEconItemPreviewDataBlock_StickerDefaultTypeInternal _CEconItemPreviewDataBlock_Sticker_default_instance_;
PROTOBUF_CONSTEXPR CEconItemPreviewDataBlock::CEconItemPreviewDataBlock(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.stickers_)*/{}
  , /*decltype(_impl_.keychains_)*/{}
  , /*decltype(_impl_.customname_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.itemid_)*/uint64_t{0u}
  , /*decltype(_impl_.accountid_)*/0u
  , /*decltype(_impl_.defindex_)*/0u
  , /*decltype(_impl_.paintindex_)*/0u
  , /*decltype(_impl_.rarity_)*/0u
  , /*decltype(_impl_.quality_)*/0u
  , /*decltype(_impl_.paintwear_)*/0u
  , /*decltype(_impl_.paintseed_)*/0u
  , /*decltype(_impl_.killeaterscoretype_)*/0u
  , /*decltype(_impl_.killeatervalue_)*/0u
  , /*decltype(_impl_.inventory_)*/0u
  , /*decltype(_impl_.origin_)*/0u
  , /*decltype(_impl_.questid_)*/0u
  , /*decltype(_impl_.dropreason_)*/0u
  , /*decltype(_impl_.musicindex_)*/0u
  , /*decltype(_impl_.entindex_)*/0
  , /*decltype(_impl_.petindex_)*/0u} {}
struct CEconItemPreviewDataBlockDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CEconItemPreviewDataBlockDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CEconItemPreviewDataBlockDefaultTypeInternal() {}
  union {
    CEconItemPreviewDataBlock _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CEconItemPreviewDataBlockDefaultTypeInternal _CEconItemPreviewDataBlock_default_instance_;
PROTOBUF_CONSTEXPR CMsgGCCStrike15_v2_MatchEndRewardDropsNotification::CMsgGCCStrike15_v2_MatchEndRewardDropsNotification(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.iteminfo_)*/nullptr} {}
struct CMsgGCCStrike15_v2_MatchEndRewardDropsNotificationDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgGCCStrike15_v2_MatchEndRewardDropsNotificationDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgGCCStrike15_v2_MatchEndRewardDropsNotificationDefaultTypeInternal() {}
  union {
    CMsgGCCStrike15_v2_MatchEndRewardDropsNotification _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgGCCStrike15_v2_MatchEndRewardDropsNotificationDefaultTypeInternal _CMsgGCCStrike15_v2_MatchEndRewardDropsNotification_default_instance_;
PROTOBUF_CONSTEXPR CMsgItemAcknowledged::CMsgItemAcknowledged(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.iteminfo_)*/nullptr} {}
struct CMsgItemAcknowledgedDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgItemAcknowledgedDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgItemAcknowledgedDefaultTypeInternal() {}
  union {
    CMsgItemAcknowledged _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgItemAcknowledgedDefaultTypeInternal _CMsgItemAcknowledged_default_instance_;
PROTOBUF_CONSTEXPR CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest::CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.param_s_)*/uint64_t{0u}
  , /*decltype(_impl_.param_a_)*/uint64_t{0u}
  , /*decltype(_impl_.param_d_)*/uint64_t{0u}
  , /*decltype(_impl_.param_m_)*/uint64_t{0u}} {}
struct CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequestDefaultTypeInternal() {}
  union {
    CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequestDefaultTypeInternal _CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest_default_instance_;
PROTOBUF_CONSTEXPR CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse::CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.iteminfo_)*/nullptr} {}
struct CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponseDefaultTypeInternal() {}
  union {
    CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponseDefaultTypeInternal _CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse_default_instance_;
PROTOBUF_CONSTEXPR CMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames::CMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames(
    ::_pbi::ConstantInitialized) {}
struct CMsgGCCStrike15_v2_MatchListRequestCurrentLiveGamesDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgGCCStrike15_v2_MatchListRequestCurrentLiveGamesDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgGCCStrike15_v2_MatchListRequestCurrentLiveGamesDefaultTypeInternal() {}
  union {
    CMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgGCCStrike15_v2_MatchListRequestCurrentLiveGamesDefaultTypeInternal _CMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames_default_instance_;
PROTOBUF_CONSTEXPR CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser::CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.accountid_)*/0u} {}
struct CMsgGCCStrike15_v2_MatchListRequestLiveGameForUserDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgGCCStrike15_v2_MatchListRequestLiveGameForUserDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgGCCStrike15_v2_MatchListRequestLiveGameForUserDefaultTypeInternal() {}
  union {
    CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgGCCStrike15_v2_MatchListRequestLiveGameForUserDefaultTypeInternal _CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser_default_instance_;
PROTOBUF_CONSTEXPR CMsgGCCStrike15_v2_MatchListRequestRecentUserGames::CMsgGCCStrike15_v2_MatchListRequestRecentUserGames(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.accountid_)*/0u} {}
struct CMsgGCCStrike15_v2_MatchListRequestRecentUserGamesDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgGCCStrike15_v2_MatchListRequestRecentUserGamesDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgGCCStrike15_v2_MatchListRequestRecentUserGamesDefaultTypeInternal() {}
  union {
    CMsgGCCStrike15_v2_MatchListRequestRecentUserGames _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgGCCStrike15_v2_MatchListRequestRecentUserGamesDefaultTypeInternal _CMsgGCCStrike15_v2_MatchListRequestRecentUserGames_default_instance_;
PROTOBUF_CONSTEXPR CMsgGCCStrike15_v2_MatchListRequestTournamentGames::CMsgGCCStrike15_v2_MatchListRequestTournamentGames(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.eventid_)*/0} {}
struct CMsgGCCStrike15_v2_MatchListRequestTournamentGamesDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgGCCStrike15_v2_MatchListRequestTournamentGamesDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgGCCStrike15_v2_MatchListRequestTournamentGamesDefaultTypeInternal() {}
  union {
    CMsgGCCStrike15_v2_MatchListRequestTournamentGames _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgGCCStrike15_v2_MatchListRequestTournamentGamesDefaultTypeInternal _CMsgGCCStrike15_v2_MatchListRequestTournamentGames_default_instance_;
PROTOBUF_CONSTEXPR CMsgGCCStrike15_v2_MatchListRequestFullGameInfo::CMsgGCCStrike15_v2_MatchListRequestFullGameInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.matchid_)*/uint64_t{0u}
  , /*decltype(_impl_.outcomeid_)*/uint64_t{0u}
  , /*decltype(_impl_.token_)*/0u} {}
struct CMsgGCCStrike15_v2_MatchListRequestFullGameInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgGCCStrike15_v2_MatchListRequestFullGameInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgGCCStrike15_v2_MatchListRequestFullGameInfoDefaultTypeInternal() {}
  union {
    CMsgGCCStrike15_v2_MatchListRequestFullGameInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgGCCStrike15_v2_MatchListRequestFullGameInfoDefaultTypeInternal _CMsgGCCStrike15_v2_MatchListRequestFullGameInfo_default_instance_;
PROTOBUF_CONSTEXPR CDataGCCStrike15_v2_MatchInfo::CDataGCCStrike15_v2_MatchInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.roundstatsall_)*/{}
  , /*decltype(_impl_.watchablematchinfo_)*/nullptr
  , /*decltype(_impl_.roundstats_legacy_)*/nullptr
  , /*decltype(_impl_.matchid_)*/uint64_t{0u}
  , /*decltype(_impl_.matchtime_)*/0u} {}
struct CDataGCCStrike15_v2_MatchInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CDataGCCStrike15_v2_MatchInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CDataGCCStrike15_v2_MatchInfoDefaultTypeInternal() {}
  union {
    CDataGCCStrike15_v2_MatchInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CDataGCCStrike15_v2_MatchInfoDefaultTypeInternal _CDataGCCStrike15_v2_MatchInfo_default_instance_;
PROTOBUF_CONSTEXPR CDataGCCStrike15_v2_TournamentGroupTeam::CDataGCCStrike15_v2_TournamentGroupTeam(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.team_id_)*/0
  , /*decltype(_impl_.score_)*/0
  , /*decltype(_impl_.correctpick_)*/false} {}
struct CDataGCCStrike15_v2_TournamentGroupTeamDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CDataGCCStrike15_v2_TournamentGroupTeamDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CDataGCCStrike15_v2_TournamentGroupTeamDefaultTypeInternal() {}
  union {
    CDataGCCStrike15_v2_TournamentGroupTeam _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CDataGCCStrike15_v2_TournamentGroupTeamDefaultTypeInternal _CDataGCCStrike15_v2_TournamentGroupTeam_default_instance_;
PROTOBUF_CONSTEXPR CDataGCCStrike15_v2_TournamentGroup_Picks::CDataGCCStrike15_v2_TournamentGroup_Picks(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.pickids_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CDataGCCStrike15_v2_TournamentGroup_PicksDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CDataGCCStrike15_v2_TournamentGroup_PicksDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CDataGCCStrike15_v2_TournamentGroup_PicksDefaultTypeInternal() {}
  union {
    CDataGCCStrike15_v2_TournamentGroup_Picks _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CDataGCCStrike15_v2_TournamentGroup_PicksDefaultTypeInternal _CDataGCCStrike15_v2_TournamentGroup_Picks_default_instance_;
PROTOBUF_CONSTEXPR CDataGCCStrike15_v2_TournamentGroup::CDataGCCStrike15_v2_TournamentGroup(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.teams_)*/{}
  , /*decltype(_impl_.stage_ids_)*/{}
  , /*decltype(_impl_.picks_)*/{}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.desc_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.groupid_)*/0u
  , /*decltype(_impl_.picks__deprecated_)*/0u
  , /*decltype(_impl_.picklockuntiltime_)*/0u
  , /*decltype(_impl_.pickableteams_)*/0u
  , /*decltype(_impl_.points_per_pick_)*/0u} {}
struct CDataGCCStrike15_v2_TournamentGroupDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CDataGCCStrike15_v2_TournamentGroupDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CDataGCCStrike15_v2_TournamentGroupDefaultTypeInternal() {}
  union {
    CDataGCCStrike15_v2_TournamentGroup _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CDataGCCStrike15_v2_TournamentGroupDefaultTypeInternal _CDataGCCStrike15_v2_TournamentGroup_default_instance_;
PROTOBUF_CONSTEXPR CDataGCCStrike15_v2_TournamentSection::CDataGCCStrike15_v2_TournamentSection(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.groups_)*/{}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.desc_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.sectionid_)*/0u} {}
struct CDataGCCStrike15_v2_TournamentSectionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CDataGCCStrike15_v2_TournamentSectionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CDataGCCStrike15_v2_TournamentSectionDefaultTypeInternal() {}
  union {
    CDataGCCStrike15_v2_TournamentSection _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CDataGCCStrike15_v2_TournamentSectionDefaultTypeInternal _CDataGCCStrike15_v2_TournamentSection_default_instance_;
PROTOBUF_CONSTEXPR CDataGCCStrike15_v2_TournamentInfo::CDataGCCStrike15_v2_TournamentInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.sections_)*/{}
  , /*decltype(_impl_.tournament_teams_)*/{}
  , /*decltype(_impl_.tournament_event_)*/nullptr} {}
struct CDataGCCStrike15_v2_TournamentInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CDataGCCStrike15_v2_TournamentInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CDataGCCStrike15_v2_TournamentInfoDefaultTypeInternal() {}
  union {
    CDataGCCStrike15_v2_TournamentInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CDataGCCStrike15_v2_TournamentInfoDefaultTypeInternal _CDataGCCStrike15_v2_TournamentInfo_default_instance_;
PROTOBUF_CONSTEXPR CMsgGCCStrike15_v2_MatchList::CMsgGCCStrike15_v2_MatchList(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.matches_)*/{}
  , /*decltype(_impl_.streams_)*/{}
  , /*decltype(_impl_.tournamentinfo_)*/nullptr
  , /*decltype(_impl_.msgrequestid_)*/0u
  , /*decltype(_impl_.accountid_)*/0u
  , /*decltype(_impl_.servertime_)*/0u} {}
struct CMsgGCCStrike15_v2_MatchListDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgGCCStrike15_v2_MatchListDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgGCCStrike15_v2_MatchListDefaultTypeInternal() {}
  union {
    CMsgGCCStrike15_v2_MatchList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgGCCStrike15_v2_MatchListDefaultTypeInternal _CMsgGCCStrike15_v2_MatchList_default_instance_;
PROTOBUF_CONSTEXPR CMsgGCCStrike15_v2_MatchListTournamentOperatorMgmt::CMsgGCCStrike15_v2_MatchListTournamentOperatorMgmt(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.matches_)*/{}
  , /*decltype(_impl_.eventid_)*/0
  , /*decltype(_impl_.accountid_)*/0u} {}
struct CMsgGCCStrike15_v2_MatchListTournamentOperatorMgmtDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgGCCStrike15_v2_MatchListTournamentOperatorMgmtDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgGCCStrike15_v2_MatchListTournamentOperatorMgmtDefaultTypeInternal() {}
  union {
    CMsgGCCStrike15_v2_MatchListTournamentOperatorMgmt _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgGCCStrike15_v2_MatchListTournamentOperatorMgmtDefaultTypeInternal _CMsgGCCStrike15_v2_MatchListTournamentOperatorMgmt_default_instance_;
PROTOBUF_CONSTEXPR CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick::CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.sectionid_)*/0
  , /*decltype(_impl_.groupid_)*/0
  , /*decltype(_impl_.index_)*/0
  , /*decltype(_impl_.teamid_)*/0
  , /*decltype(_impl_.itemid_)*/uint64_t{0u}} {}
struct CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPickDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPickDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPickDefaultTypeInternal() {}
  union {
    CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPickDefaultTypeInternal _CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick_default_instance_;
PROTOBUF_CONSTEXPR CMsgGCCStrike15_v2_Predictions::CMsgGCCStrike15_v2_Predictions(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.group_match_team_picks_)*/{}
  , /*decltype(_impl_.event_id_)*/0u} {}
struct CMsgGCCStrike15_v2_PredictionsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgGCCStrike15_v2_PredictionsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgGCCStrike15_v2_PredictionsDefaultTypeInternal() {}
  union {
    CMsgGCCStrike15_v2_Predictions _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgGCCStrike15_v2_PredictionsDefaultTypeInternal _CMsgGCCStrike15_v2_Predictions_default_instance_;
PROTOBUF_CONSTEXPR CMsgGCCStrike15_v2_Fantasy_FantasySlot::CMsgGCCStrike15_v2_Fantasy_FantasySlot(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.type_)*/0
  , /*decltype(_impl_.pick_)*/0
  , /*decltype(_impl_.itemid_)*/uint64_t{0u}} {}
struct CMsgGCCStrike15_v2_Fantasy_FantasySlotDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgGCCStrike15_v2_Fantasy_FantasySlotDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgGCCStrike15_v2_Fantasy_FantasySlotDefaultTypeInternal() {}
  union {
    CMsgGCCStrike15_v2_Fantasy_FantasySlot _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgGCCStrike15_v2_Fantasy_FantasySlotDefaultTypeInternal _CMsgGCCStrike15_v2_Fantasy_FantasySlot_default_instance_;
PROTOBUF_CONSTEXPR CMsgGCCStrike15_v2_Fantasy_FantasyTeam::CMsgGCCStrike15_v2_Fantasy_FantasyTeam(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.slots_)*/{}
  , /*decltype(_impl_.sectionid_)*/0} {}
struct CMsgGCCStrike15_v2_Fantasy_FantasyTeamDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgGCCStrike15_v2_Fantasy_FantasyTeamDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgGCCStrike15_v2_Fantasy_FantasyTeamDefaultTypeInternal() {}
  union {
    CMsgGCCStrike15_v2_Fantasy_FantasyTeam _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgGCCStrike15_v2_Fantasy_FantasyTeamDefaultTypeInternal _CMsgGCCStrike15_v2_Fantasy_FantasyTeam_default_instance_;
PROTOBUF_CONSTEXPR CMsgGCCStrike15_v2_Fantasy::CMsgGCCStrike15_v2_Fantasy(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.teams_)*/{}
  , /*decltype(_impl_.event_id_)*/0u} {}
struct CMsgGCCStrike15_v2_FantasyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgGCCStrike15_v2_FantasyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgGCCStrike15_v2_FantasyDefaultTypeInternal() {}
  union {
    CMsgGCCStrike15_v2_Fantasy _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgGCCStrike15_v2_FantasyDefaultTypeInternal _CMsgGCCStrike15_v2_Fantasy_default_instance_;
PROTOBUF_CONSTEXPR CAttribute_String::CAttribute_String(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.value_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct CAttribute_StringDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CAttribute_StringDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CAttribute_StringDefaultTypeInternal() {}
  union {
    CAttribute_String _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CAttribute_StringDefaultTypeInternal _CAttribute_String_default_instance_;
PROTOBUF_CONSTEXPR CMsgLegacySource1ClientWelcome_Location::CMsgLegacySource1ClientWelcome_Location(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.country_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.latitude_)*/0
  , /*decltype(_impl_.longitude_)*/0} {}
struct CMsgLegacySource1ClientWelcome_LocationDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgLegacySource1ClientWelcome_LocationDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgLegacySource1ClientWelcome_LocationDefaultTypeInternal() {}
  union {
    CMsgLegacySource1ClientWelcome_Location _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgLegacySource1ClientWelcome_LocationDefaultTypeInternal _CMsgLegacySource1ClientWelcome_Location_default_instance_;
PROTOBUF_CONSTEXPR CMsgLegacySource1ClientWelcome::CMsgLegacySource1ClientWelcome(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.outofdate_subscribed_caches_)*/{}
  , /*decltype(_impl_.uptodate_subscribed_caches_)*/{}
  , /*decltype(_impl_.game_data_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.game_data2_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.balance_url_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.txn_country_code_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.location_)*/nullptr
  , /*decltype(_impl_.version_)*/0u
  , /*decltype(_impl_.rtime32_gc_welcome_timestamp_)*/0u
  , /*decltype(_impl_.currency_)*/0u
  , /*decltype(_impl_.balance_)*/0u} {}
struct CMsgLegacySource1ClientWelcomeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgLegacySource1ClientWelcomeDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgLegacySource1ClientWelcomeDefaultTypeInternal() {}
  union {
    CMsgLegacySource1ClientWelcome _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgLegacySource1ClientWelcomeDefaultTypeInternal _CMsgLegacySource1ClientWelcome_default_instance_;
PROTOBUF_CONSTEXPR CMsgCStrike15Welcome::CMsgCStrike15Welcome(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.store_item_hash_)*/0u
  , /*decltype(_impl_.timeplayedconsecutively_)*/0u
  , /*decltype(_impl_.time_first_played_)*/0u
  , /*decltype(_impl_.last_time_played_)*/0u
  , /*decltype(_impl_.gscookieid_)*/uint64_t{0u}
  , /*decltype(_impl_.uniqueid_)*/uint64_t{0u}
  , /*decltype(_impl_.last_ip_address_)*/0u} {}
struct CMsgCStrike15WelcomeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgCStrike15WelcomeDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgCStrike15WelcomeDefaultTypeInternal() {}
  union {
    CMsgCStrike15Welcome _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgCStrike15WelcomeDefaultTypeInternal _CMsgCStrike15Welcome_default_instance_;
PROTOBUF_CONSTEXPR CMsgGCCStrike15_v2_ClientVarValueNotificationInfo::CMsgGCCStrike15_v2_ClientVarValueNotificationInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.choked_blocks_)*/{}
  , /*decltype(_impl_.value_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.value_int_)*/0
  , /*decltype(_impl_.server_addr_)*/0u
  , /*decltype(_impl_.server_port_)*/0u} {}
struct CMsgGCCStrike15_v2_ClientVarValueNotificationInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgGCCStrike15_v2_ClientVarValueNotificationInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgGCCStrike15_v2_ClientVarValueNotificationInfoDefaultTypeInternal() {}
  union {
    CMsgGCCStrike15_v2_ClientVarValueNotificationInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgGCCStrike15_v2_ClientVarValueNotificationInfoDefaultTypeInternal _CMsgGCCStrike15_v2_ClientVarValueNotificationInfo_default_instance_;
PROTOBUF_CONSTEXPR CMsgGCCStrike15_v2_ServerVarValueNotificationInfo::CMsgGCCStrike15_v2_ServerVarValueNotificationInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.viewangles_)*/{}
  , /*decltype(_impl_.userdata_)*/{}
  , /*decltype(_impl_.accountid_)*/0u
  , /*decltype(_impl_.type_)*/0u} {}
struct CMsgGCCStrike15_v2_ServerVarValueNotificationInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgGCCStrike15_v2_ServerVarValueNotificationInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgGCCStrike15_v2_ServerVarValueNotificationInfoDefaultTypeInternal() {}
  union {
    CMsgGCCStrike15_v2_ServerVarValueNotificationInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgGCCStrike15_v2_ServerVarValueNotificationInfoDefaultTypeInternal _CMsgGCCStrike15_v2_ServerVarValueNotificationInfo_default_instance_;
PROTOBUF_CONSTEXPR CMsgGCCStrike15_v2_GiftsLeaderboardRequest::CMsgGCCStrike15_v2_GiftsLeaderboardRequest(
    ::_pbi::ConstantInitialized) {}
struct CMsgGCCStrike15_v2_GiftsLeaderboardRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgGCCStrike15_v2_GiftsLeaderboardRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgGCCStrike15_v2_GiftsLeaderboardRequestDefaultTypeInternal() {}
  union {
    CMsgGCCStrike15_v2_GiftsLeaderboardRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgGCCStrike15_v2_GiftsLeaderboardRequestDefaultTypeInternal _CMsgGCCStrike15_v2_GiftsLeaderboardRequest_default_instance_;
PROTOBUF_CONSTEXPR CMsgGCCStrike15_v2_GiftsLeaderboardResponse_GiftLeaderboardEntry::CMsgGCCStrike15_v2_GiftsLeaderboardResponse_GiftLeaderboardEntry(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.accountid_)*/0u
  , /*decltype(_impl_.gifts_)*/0u} {}
struct CMsgGCCStrike15_v2_GiftsLeaderboardResponse_GiftLeaderboardEntryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgGCCStrike15_v2_GiftsLeaderboardResponse_GiftLeaderboardEntryDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgGCCStrike15_v2_GiftsLeaderboardResponse_GiftLeaderboardEntryDefaultTypeInternal() {}
  union {
    CMsgGCCStrike15_v2_GiftsLeaderboardResponse_GiftLeaderboardEntry _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgGCCStrike15_v2_GiftsLeaderboardResponse_GiftLeaderboardEntryDefaultTypeInternal _CMsgGCCStrike15_v2_GiftsLeaderboardResponse_GiftLeaderboardEntry_default_instance_;
PROTOBUF_CONSTEXPR CMsgGCCStrike15_v2_GiftsLeaderboardResponse::CMsgGCCStrike15_v2_GiftsLeaderboardResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.entries_)*/{}
  , /*decltype(_impl_.servertime_)*/0u
  , /*decltype(_impl_.time_period_seconds_)*/0u
  , /*decltype(_impl_.total_gifts_given_)*/0u
  , /*decltype(_impl_.total_givers_)*/0u} {}
struct CMsgGCCStrike15_v2_GiftsLeaderboardResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgGCCStrike15_v2_GiftsLeaderboardResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgGCCStrike15_v2_GiftsLeaderboardResponseDefaultTypeInternal() {}
  union {
    CMsgGCCStrike15_v2_GiftsLeaderboardResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgGCCStrike15_v2_GiftsLeaderboardResponseDefaultTypeInternal _CMsgGCCStrike15_v2_GiftsLeaderboardResponse_default_instance_;
PROTOBUF_CONSTEXPR CMsgGCCStrike15_v2_ClientSubmitSurveyVote::CMsgGCCStrike15_v2_ClientSubmitSurveyVote(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.survey_id_)*/0u
  , /*decltype(_impl_.vote_)*/0u} {}
struct CMsgGCCStrike15_v2_ClientSubmitSurveyVoteDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgGCCStrike15_v2_ClientSubmitSurveyVoteDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgGCCStrike15_v2_ClientSubmitSurveyVoteDefaultTypeInternal() {}
  union {
    CMsgGCCStrike15_v2_ClientSubmitSurveyVote _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgGCCStrike15_v2_ClientSubmitSurveyVoteDefaultTypeInternal _CMsgGCCStrike15_v2_ClientSubmitSurveyVote_default_instance_;
PROTOBUF_CONSTEXPR CMsgGCCStrike15_v2_Server2GCClientValidate::CMsgGCCStrike15_v2_Server2GCClientValidate(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.accountid_)*/0u} {}
struct CMsgGCCStrike15_v2_Server2GCClientValidateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgGCCStrike15_v2_Server2GCClientValidateDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgGCCStrike15_v2_Server2GCClientValidateDefaultTypeInternal() {}
  union {
    CMsgGCCStrike15_v2_Server2GCClientValidate _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgGCCStrike15_v2_Server2GCClientValidateDefaultTypeInternal _CMsgGCCStrike15_v2_Server2GCClientValidate_default_instance_;
PROTOBUF_CONSTEXPR CMsgGCCStrike15_v2_GC2ClientTournamentInfo::CMsgGCCStrike15_v2_GC2ClientTournamentInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.teamids_)*/{}
  , /*decltype(_impl_.eventid_)*/0u
  , /*decltype(_impl_.stageid_)*/0u
  , /*decltype(_impl_.game_type_)*/0u} {}
struct CMsgGCCStrike15_v2_GC2ClientTournamentInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgGCCStrike15_v2_GC2ClientTournamentInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgGCCStrike15_v2_GC2ClientTournamentInfoDefaultTypeInternal() {}
  union {
    CMsgGCCStrike15_v2_GC2ClientTournamentInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgGCCStrike15_v2_GC2ClientTournamentInfoDefaultTypeInternal _CMsgGCCStrike15_v2_GC2ClientTournamentInfo_default_instance_;
PROTOBUF_CONSTEXPR CSOEconCoupon::CSOEconCoupon(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.entryid_)*/0u
  , /*decltype(_impl_.defidx_)*/0u
  , /*decltype(_impl_.expiration_date_)*/0u} {}
struct CSOEconCouponDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CSOEconCouponDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CSOEconCouponDefaultTypeInternal() {}
  union {
    CSOEconCoupon _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CSOEconCouponDefaultTypeInternal _CSOEconCoupon_default_instance_;
PROTOBUF_CONSTEXPR CSOAccountItemPersonalStore::CSOAccountItemPersonalStore(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.items_)*/{}
  , /*decltype(_impl_.generation_time_)*/0u
  , /*decltype(_impl_.redeemable_balance_)*/0u} {}
struct CSOAccountItemPersonalStoreDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CSOAccountItemPersonalStoreDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CSOAccountItemPersonalStoreDefaultTypeInternal() {}
  union {
    CSOAccountItemPersonalStore _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CSOAccountItemPersonalStoreDefaultTypeInternal _CSOAccountItemPersonalStore_default_instance_;
PROTOBUF_CONSTEXPR CSOAccountXpShop::CSOAccountXpShop(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.xp_tracks_)*/{}
  , /*decltype(_impl_.generation_time_)*/0u
  , /*decltype(_impl_.redeemable_balance_)*/0u} {}
struct CSOAccountXpShopDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CSOAccountXpShopDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CSOAccountXpShopDefaultTypeInternal() {}
  union {
    CSOAccountXpShop _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CSOAccountXpShopDefaultTypeInternal _CSOAccountXpShop_default_instance_;
PROTOBUF_CONSTEXPR CSOAccountKeychainRemoveToolCharges::CSOAccountKeychainRemoveToolCharges(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.charges_)*/0u} {}
struct CSOAccountKeychainRemoveToolChargesDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CSOAccountKeychainRemoveToolChargesDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CSOAccountKeychainRemoveToolChargesDefaultTypeInternal() {}
  union {
    CSOAccountKeychainRemoveToolCharges _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CSOAccountKeychainRemoveToolChargesDefaultTypeInternal _CSOAccountKeychainRemoveToolCharges_default_instance_;
PROTOBUF_CONSTEXPR CSOQuestProgress::CSOQuestProgress(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.questid_)*/0u
  , /*decltype(_impl_.points_remaining_)*/0u
  , /*decltype(_impl_.bonus_points_)*/0u} {}
struct CSOQuestProgressDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CSOQuestProgressDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CSOQuestProgressDefaultTypeInternal() {}
  union {
    CSOQuestProgress _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CSOQuestProgressDefaultTypeInternal _CSOQuestProgress_default_instance_;
PROTOBUF_CONSTEXPR CSOAccountSeasonalOperation::CSOAccountSeasonalOperation(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.season_value_)*/0u
  , /*decltype(_impl_.tier_unlocked_)*/0u
  , /*decltype(_impl_.premium_tiers_)*/0u
  , /*decltype(_impl_.mission_id_)*/0u
  , /*decltype(_impl_.missions_completed_)*/0u
  , /*decltype(_impl_.redeemable_balance_)*/0u
  , /*decltype(_impl_.season_pass_time_)*/0u} {}
struct CSOAccountSeasonalOperationDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CSOAccountSeasonalOperationDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CSOAccountSeasonalOperationDefaultTypeInternal() {}
  union {
    CSOAccountSeasonalOperation _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CSOAccountSeasonalOperationDefaultTypeInternal _CSOAccountSeasonalOperation_default_instance_;
PROTOBUF_CONSTEXPR CSOAccountRecurringSubscription::CSOAccountRecurringSubscription(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.time_next_cycle_)*/0u
  , /*decltype(_impl_.time_initiated_)*/0u} {}
struct CSOAccountRecurringSubscriptionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CSOAccountRecurringSubscriptionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CSOAccountRecurringSubscriptionDefaultTypeInternal() {}
  union {
    CSOAccountRecurringSubscription _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CSOAccountRecurringSubscriptionDefaultTypeInternal _CSOAccountRecurringSubscription_default_instance_;
PROTOBUF_CONSTEXPR CSOPersonaDataPublic::CSOPersonaDataPublic(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.commendation_)*/nullptr
  , /*decltype(_impl_.player_level_)*/0
  , /*decltype(_impl_.elevated_state_)*/false
  , /*decltype(_impl_.xp_trail_timestamp_refresh_)*/0u
  , /*decltype(_impl_.xp_trail_level_)*/0u} {}
struct CSOPersonaDataPublicDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CSOPersonaDataPublicDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CSOPersonaDataPublicDefaultTypeInternal() {}
  union {
    CSOPersonaDataPublic _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CSOPersonaDataPublicDefaultTypeInternal _CSOPersonaDataPublic_default_instance_;
PROTOBUF_CONSTEXPR CMsgGCCStrike15_v2_GC2ClientNotifyXPShop::CMsgGCCStrike15_v2_GC2ClientNotifyXPShop(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.prematch_)*/nullptr
  , /*decltype(_impl_.postmatch_)*/nullptr
  , /*decltype(_impl_.current_xp_)*/0u
  , /*decltype(_impl_.current_level_)*/0u} {}
struct CMsgGCCStrike15_v2_GC2ClientNotifyXPShopDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgGCCStrike15_v2_GC2ClientNotifyXPShopDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgGCCStrike15_v2_GC2ClientNotifyXPShopDefaultTypeInternal() {}
  union {
    CMsgGCCStrike15_v2_GC2ClientNotifyXPShop _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgGCCStrike15_v2_GC2ClientNotifyXPShopDefaultTypeInternal _CMsgGCCStrike15_v2_GC2ClientNotifyXPShop_default_instance_;
PROTOBUF_CONSTEXPR CMsgGCCStrike15_v2_Client2GcAckXPShopTracks::CMsgGCCStrike15_v2_Client2GcAckXPShopTracks(
    ::_pbi::ConstantInitialized) {}
struct CMsgGCCStrike15_v2_Client2GcAckXPShopTracksDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgGCCStrike15_v2_Client2GcAckXPShopTracksDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgGCCStrike15_v2_Client2GcAckXPShopTracksDefaultTypeInternal() {}
  union {
    CMsgGCCStrike15_v2_Client2GcAckXPShopTracks _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgGCCStrike15_v2_Client2GcAckXPShopTracksDefaultTypeInternal _CMsgGCCStrike15_v2_Client2GcAckXPShopTracks_default_instance_;
PROTOBUF_CONSTEXPR CMsgGC_GlobalGame_Subscribe::CMsgGC_GlobalGame_Subscribe(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.ticket_)*/uint64_t{0u}} {}
struct CMsgGC_GlobalGame_SubscribeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgGC_GlobalGame_SubscribeDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgGC_GlobalGame_SubscribeDefaultTypeInternal() {}
  union {
    CMsgGC_GlobalGame_Subscribe _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgGC_GlobalGame_SubscribeDefaultTypeInternal _CMsgGC_GlobalGame_Subscribe_default_instance_;
PROTOBUF_CONSTEXPR CMsgGC_GlobalGame_Unsubscribe::CMsgGC_GlobalGame_Unsubscribe(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.timeleft_)*/0} {}
struct CMsgGC_GlobalGame_UnsubscribeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgGC_GlobalGame_UnsubscribeDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgGC_GlobalGame_UnsubscribeDefaultTypeInternal() {}
  union {
    CMsgGC_GlobalGame_Unsubscribe _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgGC_GlobalGame_UnsubscribeDefaultTypeInternal _CMsgGC_GlobalGame_Unsubscribe_default_instance_;
PROTOBUF_CONSTEXPR CMsgGC_GlobalGame_Play::CMsgGC_GlobalGame_Play(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.ticket_)*/uint64_t{0u}
  , /*decltype(_impl_.gametimems_)*/0u
  , /*decltype(_impl_.msperpoint_)*/0u} {}
struct CMsgGC_GlobalGame_PlayDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgGC_GlobalGame_PlayDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgGC_GlobalGame_PlayDefaultTypeInternal() {}
  union {
    CMsgGC_GlobalGame_Play _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgGC_GlobalGame_PlayDefaultTypeInternal _CMsgGC_GlobalGame_Play_default_instance_;
PROTOBUF_CONSTEXPR CMsgGCCStrike15_v2_AcknowledgePenalty::CMsgGCCStrike15_v2_AcknowledgePenalty(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.acknowledged_)*/0} {}
struct CMsgGCCStrike15_v2_AcknowledgePenaltyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgGCCStrike15_v2_AcknowledgePenaltyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgGCCStrike15_v2_AcknowledgePenaltyDefaultTypeInternal() {}
  union {
    CMsgGCCStrike15_v2_AcknowledgePenalty _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgGCCStrike15_v2_AcknowledgePenaltyDefaultTypeInternal _CMsgGCCStrike15_v2_AcknowledgePenalty_default_instance_;
PROTOBUF_CONSTEXPR CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin::CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.upgradeid_)*/uint64_t{0u}
  , /*decltype(_impl_.defindex_)*/0u
  , /*decltype(_impl_.hours_)*/0u
  , /*decltype(_impl_.prestigetime_)*/0u} {}
struct CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoinDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoinDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoinDefaultTypeInternal() {}
  union {
    CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoinDefaultTypeInternal _CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin_default_instance_;
PROTOBUF_CONSTEXPR CMsgGCCStrike15_v2_Client2GCStreamUnlock::CMsgGCCStrike15_v2_Client2GCStreamUnlock(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.ticket_)*/uint64_t{0u}
  , /*decltype(_impl_.os_)*/0} {}
struct CMsgGCCStrike15_v2_Client2GCStreamUnlockDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgGCCStrike15_v2_Client2GCStreamUnlockDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgGCCStrike15_v2_Client2GCStreamUnlockDefaultTypeInternal() {}
  union {
    CMsgGCCStrike15_v2_Client2GCStreamUnlock _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgGCCStrike15_v2_Client2GCStreamUnlockDefaultTypeInternal _CMsgGCCStrike15_v2_Client2GCStreamUnlock_default_instance_;
PROTOBUF_CONSTEXPR CMsgGCCStrike15_v2_ClientToGCRequestElevate::CMsgGCCStrike15_v2_ClientToGCRequestElevate(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.stage_)*/0u} {}
struct CMsgGCCStrike15_v2_ClientToGCRequestElevateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgGCCStrike15_v2_ClientToGCRequestElevateDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgGCCStrike15_v2_ClientToGCRequestElevateDefaultTypeInternal() {}
  union {
    CMsgGCCStrike15_v2_ClientToGCRequestElevate _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgGCCStrike15_v2_ClientToGCRequestElevateDefaultTypeInternal _CMsgGCCStrike15_v2_ClientToGCRequestElevate_default_instance_;
PROTOBUF_CONSTEXPR CMsgGCCStrike15_v2_ClientToGCChat::CMsgGCCStrike15_v2_ClientToGCChat(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.text_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.match_id_)*/uint64_t{0u}} {}
struct CMsgGCCStrike15_v2_ClientToGCChatDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgGCCStrike15_v2_ClientToGCChatDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgGCCStrike15_v2_ClientToGCChatDefaultTypeInternal() {}
  union {
    CMsgGCCStrike15_v2_ClientToGCChat _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgGCCStrike15_v2_ClientToGCChatDefaultTypeInternal _CMsgGCCStrike15_v2_ClientToGCChat_default_instance_;
PROTOBUF_CONSTEXPR CMsgGCCStrike15_v2_GCToClientChat::CMsgGCCStrike15_v2_GCToClientChat(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.text_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.account_id_)*/0u} {}
struct CMsgGCCStrike15_v2_GCToClientChatDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgGCCStrike15_v2_GCToClientChatDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgGCCStrike15_v2_GCToClientChatDefaultTypeInternal() {}
  union {
    CMsgGCCStrike15_v2_GCToClientChat _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgGCCStrike15_v2_GCToClientChatDefaultTypeInternal _CMsgGCCStrike15_v2_GCToClientChat_default_instance_;
PROTOBUF_CONSTEXPR CMsgGCCStrike15_v2_ClientAuthKeyCode::CMsgGCCStrike15_v2_ClientAuthKeyCode(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.code_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.eventid_)*/0u} {}
struct CMsgGCCStrike15_v2_ClientAuthKeyCodeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgGCCStrike15_v2_ClientAuthKeyCodeDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgGCCStrike15_v2_ClientAuthKeyCodeDefaultTypeInternal() {}
  union {
    CMsgGCCStrike15_v2_ClientAuthKeyCode _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgGCCStrike15_v2_ClientAuthKeyCodeDefaultTypeInternal _CMsgGCCStrike15_v2_ClientAuthKeyCode_default_instance_;
PROTOBUF_CONSTEXPR CMsgGCCStrike15_GotvSyncPacket::CMsgGCCStrike15_GotvSyncPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.data_)*/nullptr} {}
struct CMsgGCCStrike15_GotvSyncPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgGCCStrike15_GotvSyncPacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgGCCStrike15_GotvSyncPacketDefaultTypeInternal() {}
  union {
    CMsgGCCStrike15_GotvSyncPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgGCCStrike15_GotvSyncPacketDefaultTypeInternal _CMsgGCCStrike15_GotvSyncPacket_default_instance_;
PROTOBUF_CONSTEXPR PlayerDecalDigitalSignature::PlayerDecalDigitalSignature(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.endpos_)*/{}
  , /*decltype(_impl_.startpos_)*/{}
  , /*decltype(_impl_.left_)*/{}
  , /*decltype(_impl_.normal_)*/{}
  , /*decltype(_impl_.signature_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.accountid_)*/0u
  , /*decltype(_impl_.rtime_)*/0u
  , /*decltype(_impl_.tx_defidx_)*/0u
  , /*decltype(_impl_.entindex_)*/0
  , /*decltype(_impl_.hitbox_)*/0u
  , /*decltype(_impl_.creationtime_)*/0
  , /*decltype(_impl_.equipslot_)*/0u
  , /*decltype(_impl_.trace_id_)*/0u
  , /*decltype(_impl_.tint_id_)*/0u} {}
struct PlayerDecalDigitalSignatureDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PlayerDecalDigitalSignatureDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PlayerDecalDigitalSignatureDefaultTypeInternal() {}
  union {
    PlayerDecalDigitalSignature _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PlayerDecalDigitalSignatureDefaultTypeInternal _PlayerDecalDigitalSignature_default_instance_;
PROTOBUF_CONSTEXPR CMsgGCCStrike15_v2_ClientPlayerDecalSign::CMsgGCCStrike15_v2_ClientPlayerDecalSign(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.data_)*/nullptr
  , /*decltype(_impl_.itemid_)*/uint64_t{0u}} {}
struct CMsgGCCStrike15_v2_ClientPlayerDecalSignDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgGCCStrike15_v2_ClientPlayerDecalSignDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgGCCStrike15_v2_ClientPlayerDecalSignDefaultTypeInternal() {}
  union {
    CMsgGCCStrike15_v2_ClientPlayerDecalSign _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgGCCStrike15_v2_ClientPlayerDecalSignDefaultTypeInternal _CMsgGCCStrike15_v2_ClientPlayerDecalSign_default_instance_;
PROTOBUF_CONSTEXPR CMsgGCCStrike15_v2_BetaEnrollment::CMsgGCCStrike15_v2_BetaEnrollment(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.eresult_)*/0u} {}
struct CMsgGCCStrike15_v2_BetaEnrollmentDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgGCCStrike15_v2_BetaEnrollmentDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgGCCStrike15_v2_BetaEnrollmentDefaultTypeInternal() {}
  union {
    CMsgGCCStrike15_v2_BetaEnrollment _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgGCCStrike15_v2_BetaEnrollmentDefaultTypeInternal _CMsgGCCStrike15_v2_BetaEnrollment_default_instance_;
PROTOBUF_CONSTEXPR CMsgGCCStrike15_v2_ClientLogonFatalError::CMsgGCCStrike15_v2_ClientLogonFatalError(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.message_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.country_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.errorcode_)*/0u} {}
struct CMsgGCCStrike15_v2_ClientLogonFatalErrorDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgGCCStrike15_v2_ClientLogonFatalErrorDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgGCCStrike15_v2_ClientLogonFatalErrorDefaultTypeInternal() {}
  union {
    CMsgGCCStrike15_v2_ClientLogonFatalError _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgGCCStrike15_v2_ClientLogonFatalErrorDefaultTypeInternal _CMsgGCCStrike15_v2_ClientLogonFatalError_default_instance_;
PROTOBUF_CONSTEXPR CMsgGCCStrike15_v2_ClientPollState::CMsgGCCStrike15_v2_ClientPollState(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.names_)*/{}
  , /*decltype(_impl_.values_)*/{}
  , /*decltype(_impl_.pollid_)*/0u} {}
struct CMsgGCCStrike15_v2_ClientPollStateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgGCCStrike15_v2_ClientPollStateDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgGCCStrike15_v2_ClientPollStateDefaultTypeInternal() {}
  union {
    CMsgGCCStrike15_v2_ClientPollState _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgGCCStrike15_v2_ClientPollStateDefaultTypeInternal _CMsgGCCStrike15_v2_ClientPollState_default_instance_;
PROTOBUF_CONSTEXPR CMsgGCCStrike15_v2_Party_Register::CMsgGCCStrike15_v2_Party_Register(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.id_)*/0u
  , /*decltype(_impl_.ver_)*/0u
  , /*decltype(_impl_.apr_)*/0u
  , /*decltype(_impl_.ark_)*/0u
  , /*decltype(_impl_.nby_)*/0u
  , /*decltype(_impl_.grp_)*/0u
  , /*decltype(_impl_.slots_)*/0u
  , /*decltype(_impl_.launcher_)*/0u
  , /*decltype(_impl_.game_type_)*/0u} {}
struct CMsgGCCStrike15_v2_Party_RegisterDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgGCCStrike15_v2_Party_RegisterDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgGCCStrike15_v2_Party_RegisterDefaultTypeInternal() {}
  union {
    CMsgGCCStrike15_v2_Party_Register _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgGCCStrike15_v2_Party_RegisterDefaultTypeInternal _CMsgGCCStrike15_v2_Party_Register_default_instance_;
PROTOBUF_CONSTEXPR CMsgGCCStrike15_v2_Party_Search::CMsgGCCStrike15_v2_Party_Search(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.grps_)*/{}
  , /*decltype(_impl_.ver_)*/0u
  , /*decltype(_impl_.apr_)*/0u
  , /*decltype(_impl_.ark_)*/0u
  , /*decltype(_impl_.launcher_)*/0u
  , /*decltype(_impl_.game_type_)*/0u} {}
struct CMsgGCCStrike15_v2_Party_SearchDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgGCCStrike15_v2_Party_SearchDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgGCCStrike15_v2_Party_SearchDefaultTypeInternal() {}
  union {
    CMsgGCCStrike15_v2_Party_Search _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgGCCStrike15_v2_Party_SearchDefaultTypeInternal _CMsgGCCStrike15_v2_Party_Search_default_instance_;
PROTOBUF_CONSTEXPR CMsgGCCStrike15_v2_Party_SearchResults_Entry::CMsgGCCStrike15_v2_Party_SearchResults_Entry(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.id_)*/0u
  , /*decltype(_impl_.grp_)*/0u
  , /*decltype(_impl_.game_type_)*/0u
  , /*decltype(_impl_.apr_)*/0u
  , /*decltype(_impl_.ark_)*/0u
  , /*decltype(_impl_.loc_)*/0u
  , /*decltype(_impl_.accountid_)*/0u} {}
struct CMsgGCCStrike15_v2_Party_SearchResults_EntryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgGCCStrike15_v2_Party_SearchResults_EntryDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgGCCStrike15_v2_Party_SearchResults_EntryDefaultTypeInternal() {}
  union {
    CMsgGCCStrike15_v2_Party_SearchResults_Entry _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgGCCStrike15_v2_Party_SearchResults_EntryDefaultTypeInternal _CMsgGCCStrike15_v2_Party_SearchResults_Entry_default_instance_;
PROTOBUF_CONSTEXPR CMsgGCCStrike15_v2_Party_SearchResults::CMsgGCCStrike15_v2_Party_SearchResults(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.entries_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CMsgGCCStrike15_v2_Party_SearchResultsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgGCCStrike15_v2_Party_SearchResultsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgGCCStrike15_v2_Party_SearchResultsDefaultTypeInternal() {}
  union {
    CMsgGCCStrike15_v2_Party_SearchResults _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgGCCStrike15_v2_Party_SearchResultsDefaultTypeInternal _CMsgGCCStrike15_v2_Party_SearchResults_default_instance_;
PROTOBUF_CONSTEXPR CMsgGCCStrike15_v2_Party_Invite::CMsgGCCStrike15_v2_Party_Invite(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.accountid_)*/0u
  , /*decltype(_impl_.lobbyid_)*/0u} {}
struct CMsgGCCStrike15_v2_Party_InviteDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgGCCStrike15_v2_Party_InviteDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgGCCStrike15_v2_Party_InviteDefaultTypeInternal() {}
  union {
    CMsgGCCStrike15_v2_Party_Invite _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgGCCStrike15_v2_Party_InviteDefaultTypeInternal _CMsgGCCStrike15_v2_Party_Invite_default_instance_;
PROTOBUF_CONSTEXPR CMsgGCCStrike15_v2_Account_RequestCoPlays_Player::CMsgGCCStrike15_v2_Account_RequestCoPlays_Player(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.accountid_)*/0u
  , /*decltype(_impl_.rtcoplay_)*/0u
  , /*decltype(_impl_.online_)*/false} {}
struct CMsgGCCStrike15_v2_Account_RequestCoPlays_PlayerDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgGCCStrike15_v2_Account_RequestCoPlays_PlayerDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgGCCStrike15_v2_Account_RequestCoPlays_PlayerDefaultTypeInternal() {}
  union {
    CMsgGCCStrike15_v2_Account_RequestCoPlays_Player _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgGCCStrike15_v2_Account_RequestCoPlays_PlayerDefaultTypeInternal _CMsgGCCStrike15_v2_Account_RequestCoPlays_Player_default_instance_;
PROTOBUF_CONSTEXPR CMsgGCCStrike15_v2_Account_RequestCoPlays::CMsgGCCStrike15_v2_Account_RequestCoPlays(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.players_)*/{}
  , /*decltype(_impl_.servertime_)*/0u} {}
struct CMsgGCCStrike15_v2_Account_RequestCoPlaysDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgGCCStrike15_v2_Account_RequestCoPlaysDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgGCCStrike15_v2_Account_RequestCoPlaysDefaultTypeInternal() {}
  union {
    CMsgGCCStrike15_v2_Account_RequestCoPlays _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgGCCStrike15_v2_Account_RequestCoPlaysDefaultTypeInternal _CMsgGCCStrike15_v2_Account_RequestCoPlays_default_instance_;
PROTOBUF_CONSTEXPR CMsgGCCStrike15_v2_ClientToGCRequestTicket::CMsgGCCStrike15_v2_ClientToGCRequestTicket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.gameserver_sdr_routing_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.authorized_steam_id_)*/uint64_t{0u}
  , /*decltype(_impl_.gameserver_steam_id_)*/uint64_t{0u}
  , /*decltype(_impl_.authorized_public_ip_)*/0u} {}
struct CMsgGCCStrike15_v2_ClientToGCRequestTicketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgGCCStrike15_v2_ClientToGCRequestTicketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgGCCStrike15_v2_ClientToGCRequestTicketDefaultTypeInternal() {}
  union {
    CMsgGCCStrike15_v2_ClientToGCRequestTicket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgGCCStrike15_v2_ClientToGCRequestTicketDefaultTypeInternal _CMsgGCCStrike15_v2_ClientToGCRequestTicket_default_instance_;
PROTOBUF_CONSTEXPR CMsgGCToClientSteamDatagramTicket::CMsgGCToClientSteamDatagramTicket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.serialized_ticket_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct CMsgGCToClientSteamDatagramTicketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgGCToClientSteamDatagramTicketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgGCToClientSteamDatagramTicketDefaultTypeInternal() {}
  union {
    CMsgGCToClientSteamDatagramTicket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgGCToClientSteamDatagramTicketDefaultTypeInternal _CMsgGCToClientSteamDatagramTicket_default_instance_;
PROTOBUF_CONSTEXPR CMsgGCCStrike15_v2_ClientRequestOffers::CMsgGCCStrike15_v2_ClientRequestOffers(
    ::_pbi::ConstantInitialized) {}
struct CMsgGCCStrike15_v2_ClientRequestOffersDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgGCCStrike15_v2_ClientRequestOffersDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgGCCStrike15_v2_ClientRequestOffersDefaultTypeInternal() {}
  union {
    CMsgGCCStrike15_v2_ClientRequestOffers _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgGCCStrike15_v2_ClientRequestOffersDefaultTypeInternal _CMsgGCCStrike15_v2_ClientRequestOffers_default_instance_;
PROTOBUF_CONSTEXPR CMsgGCCStrike15_v2_ClientRequestSouvenir::CMsgGCCStrike15_v2_ClientRequestSouvenir(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.itemid_)*/uint64_t{0u}
  , /*decltype(_impl_.matchid_)*/uint64_t{0u}
  , /*decltype(_impl_.eventid_)*/0} {}
struct CMsgGCCStrike15_v2_ClientRequestSouvenirDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgGCCStrike15_v2_ClientRequestSouvenirDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgGCCStrike15_v2_ClientRequestSouvenirDefaultTypeInternal() {}
  union {
    CMsgGCCStrike15_v2_ClientRequestSouvenir _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgGCCStrike15_v2_ClientRequestSouvenirDefaultTypeInternal _CMsgGCCStrike15_v2_ClientRequestSouvenir_default_instance_;
PROTOBUF_CONSTEXPR CMsgGCCStrike15_v2_ClientAccountBalance::CMsgGCCStrike15_v2_ClientAccountBalance(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.url_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.amount_)*/uint64_t{0u}} {}
struct CMsgGCCStrike15_v2_ClientAccountBalanceDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgGCCStrike15_v2_ClientAccountBalanceDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgGCCStrike15_v2_ClientAccountBalanceDefaultTypeInternal() {}
  union {
    CMsgGCCStrike15_v2_ClientAccountBalance _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgGCCStrike15_v2_ClientAccountBalanceDefaultTypeInternal _CMsgGCCStrike15_v2_ClientAccountBalance_default_instance_;
PROTOBUF_CONSTEXPR CMsgGCCStrike15_v2_ClientPartyJoinRelay::CMsgGCCStrike15_v2_ClientPartyJoinRelay(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.lobbyid_)*/uint64_t{0u}
  , /*decltype(_impl_.accountid_)*/0u} {}
struct CMsgGCCStrike15_v2_ClientPartyJoinRelayDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgGCCStrike15_v2_ClientPartyJoinRelayDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgGCCStrike15_v2_ClientPartyJoinRelayDefaultTypeInternal() {}
  union {
    CMsgGCCStrike15_v2_ClientPartyJoinRelay _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgGCCStrike15_v2_ClientPartyJoinRelayDefaultTypeInternal _CMsgGCCStrike15_v2_ClientPartyJoinRelay_default_instance_;
PROTOBUF_CONSTEXPR CMsgGCCStrike15_v2_ClientPartyWarning_Entry::CMsgGCCStrike15_v2_ClientPartyWarning_Entry(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.accountid_)*/0u
  , /*decltype(_impl_.warntype_)*/0u} {}
struct CMsgGCCStrike15_v2_ClientPartyWarning_EntryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgGCCStrike15_v2_ClientPartyWarning_EntryDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgGCCStrike15_v2_ClientPartyWarning_EntryDefaultTypeInternal() {}
  union {
    CMsgGCCStrike15_v2_ClientPartyWarning_Entry _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgGCCStrike15_v2_ClientPartyWarning_EntryDefaultTypeInternal _CMsgGCCStrike15_v2_ClientPartyWarning_Entry_default_instance_;
PROTOBUF_CONSTEXPR CMsgGCCStrike15_v2_ClientPartyWarning::CMsgGCCStrike15_v2_ClientPartyWarning(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.entries_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CMsgGCCStrike15_v2_ClientPartyWarningDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgGCCStrike15_v2_ClientPartyWarningDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgGCCStrike15_v2_ClientPartyWarningDefaultTypeInternal() {}
  union {
    CMsgGCCStrike15_v2_ClientPartyWarning _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgGCCStrike15_v2_ClientPartyWarningDefaultTypeInternal _CMsgGCCStrike15_v2_ClientPartyWarning_default_instance_;
PROTOBUF_CONSTEXPR CMsgGCCStrike15_v2_SetEventFavorite::CMsgGCCStrike15_v2_SetEventFavorite(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.eventid_)*/uint64_t{0u}
  , /*decltype(_impl_.is_favorite_)*/false} {}
struct CMsgGCCStrike15_v2_SetEventFavoriteDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgGCCStrike15_v2_SetEventFavoriteDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgGCCStrike15_v2_SetEventFavoriteDefaultTypeInternal() {}
  union {
    CMsgGCCStrike15_v2_SetEventFavorite _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgGCCStrike15_v2_SetEventFavoriteDefaultTypeInternal _CMsgGCCStrike15_v2_SetEventFavorite_default_instance_;
PROTOBUF_CONSTEXPR CMsgGCCStrike15_v2_GetEventFavorites_Request::CMsgGCCStrike15_v2_GetEventFavorites_Request(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.all_events_)*/false} {}
struct CMsgGCCStrike15_v2_GetEventFavorites_RequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgGCCStrike15_v2_GetEventFavorites_RequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgGCCStrike15_v2_GetEventFavorites_RequestDefaultTypeInternal() {}
  union {
    CMsgGCCStrike15_v2_GetEventFavorites_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgGCCStrike15_v2_GetEventFavorites_RequestDefaultTypeInternal _CMsgGCCStrike15_v2_GetEventFavorites_Request_default_instance_;
PROTOBUF_CONSTEXPR CMsgGCCStrike15_v2_GetEventFavorites_Response::CMsgGCCStrike15_v2_GetEventFavorites_Response(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.json_favorites_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.json_featured_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.all_events_)*/false} {}
struct CMsgGCCStrike15_v2_GetEventFavorites_ResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgGCCStrike15_v2_GetEventFavorites_ResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgGCCStrike15_v2_GetEventFavorites_ResponseDefaultTypeInternal() {}
  union {
    CMsgGCCStrike15_v2_GetEventFavorites_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgGCCStrike15_v2_GetEventFavorites_ResponseDefaultTypeInternal _CMsgGCCStrike15_v2_GetEventFavorites_Response_default_instance_;
PROTOBUF_CONSTEXPR CMsgGCCStrike15_v2_ClientPerfReport_Entry::CMsgGCCStrike15_v2_ClientPerfReport_Entry(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.reference_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.actual_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.perfcounter_)*/0u
  , /*decltype(_impl_.length_)*/0u
  , /*decltype(_impl_.sourceid_)*/0u
  , /*decltype(_impl_.status_)*/0u} {}
struct CMsgGCCStrike15_v2_ClientPerfReport_EntryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgGCCStrike15_v2_ClientPerfReport_EntryDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgGCCStrike15_v2_ClientPerfReport_EntryDefaultTypeInternal() {}
  union {
    CMsgGCCStrike15_v2_ClientPerfReport_Entry _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgGCCStrike15_v2_ClientPerfReport_EntryDefaultTypeInternal _CMsgGCCStrike15_v2_ClientPerfReport_Entry_default_instance_;
PROTOBUF_CONSTEXPR CMsgGCCStrike15_v2_ClientPerfReport::CMsgGCCStrike15_v2_ClientPerfReport(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.entries_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CMsgGCCStrike15_v2_ClientPerfReportDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgGCCStrike15_v2_ClientPerfReportDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgGCCStrike15_v2_ClientPerfReportDefaultTypeInternal() {}
  union {
    CMsgGCCStrike15_v2_ClientPerfReport _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgGCCStrike15_v2_ClientPerfReportDefaultTypeInternal _CMsgGCCStrike15_v2_ClientPerfReport_default_instance_;
PROTOBUF_CONSTEXPR CVDiagnostic::CVDiagnostic(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.string_value_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.id_)*/0u
  , /*decltype(_impl_.extended_)*/0u
  , /*decltype(_impl_.value_)*/uint64_t{0u}} {}
struct CVDiagnosticDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CVDiagnosticDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CVDiagnosticDefaultTypeInternal() {}
  union {
    CVDiagnostic _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CVDiagnosticDefaultTypeInternal _CVDiagnostic_default_instance_;
PROTOBUF_CONSTEXPR CMsgGCCStrike15_v2_ClientReportValidation::CMsgGCCStrike15_v2_ClientReportValidation(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.diagnostics_)*/{}
  , /*decltype(_impl_.file_report_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.command_line_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.last_launch_data_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.total_files_)*/0u
  , /*decltype(_impl_.internal_error_)*/0u
  , /*decltype(_impl_.trust_time_)*/0u
  , /*decltype(_impl_.count_pending_)*/0u
  , /*decltype(_impl_.count_completed_)*/0u
  , /*decltype(_impl_.process_id_)*/0u
  , /*decltype(_impl_.osversion_)*/0
  , /*decltype(_impl_.clientreportversion_)*/0u
  , /*decltype(_impl_.status_id_)*/0u
  , /*decltype(_impl_.diagnostic1_)*/0u
  , /*decltype(_impl_.diagnostic2_)*/uint64_t{0u}
  , /*decltype(_impl_.diagnostic3_)*/uint64_t{0u}
  , /*decltype(_impl_.client_time_)*/uint64_t{0u}
  , /*decltype(_impl_.diagnostic4_)*/uint64_t{0u}
  , /*decltype(_impl_.diagnostic5_)*/uint64_t{0u}
  , /*decltype(_impl_.report_count_)*/0u} {}
struct CMsgGCCStrike15_v2_ClientReportValidationDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgGCCStrike15_v2_ClientReportValidationDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgGCCStrike15_v2_ClientReportValidationDefaultTypeInternal() {}
  union {
    CMsgGCCStrike15_v2_ClientReportValidation _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgGCCStrike15_v2_ClientReportValidationDefaultTypeInternal _CMsgGCCStrike15_v2_ClientReportValidation_default_instance_;
PROTOBUF_CONSTEXPR CMsgGCCStrike15_v2_GC2ClientRefuseSecureMode::CMsgGCCStrike15_v2_GC2ClientRefuseSecureMode(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.file_report_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.files_prevented_trusted_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.offer_insecure_mode_)*/false
  , /*decltype(_impl_.offer_secure_mode_)*/false
  , /*decltype(_impl_.show_unsigned_ui_)*/false
  , /*decltype(_impl_.kick_user_)*/false
  , /*decltype(_impl_.show_trusted_ui_)*/false
  , /*decltype(_impl_.show_warning_not_trusted_)*/false
  , /*decltype(_impl_.show_warning_not_trusted_2_)*/false} {}
struct CMsgGCCStrike15_v2_GC2ClientRefuseSecureModeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgGCCStrike15_v2_GC2ClientRefuseSecureModeDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgGCCStrike15_v2_GC2ClientRefuseSecureModeDefaultTypeInternal() {}
  union {
    CMsgGCCStrike15_v2_GC2ClientRefuseSecureMode _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgGCCStrike15_v2_GC2ClientRefuseSecureModeDefaultTypeInternal _CMsgGCCStrike15_v2_GC2ClientRefuseSecureMode_default_instance_;
PROTOBUF_CONSTEXPR CMsgGCCStrike15_v2_GC2ClientRequestValidation::CMsgGCCStrike15_v2_GC2ClientRequestValidation(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.module_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.full_report_)*/false} {}
struct CMsgGCCStrike15_v2_GC2ClientRequestValidationDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgGCCStrike15_v2_GC2ClientRequestValidationDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgGCCStrike15_v2_GC2ClientRequestValidationDefaultTypeInternal() {}
  union {
    CMsgGCCStrike15_v2_GC2ClientRequestValidation _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgGCCStrike15_v2_GC2ClientRequestValidationDefaultTypeInternal _CMsgGCCStrike15_v2_GC2ClientRequestValidation_default_instance_;
PROTOBUF_CONSTEXPR CMsgGCCStrike15_v2_GC2ClientInitSystem::CMsgGCCStrike15_v2_GC2ClientInitSystem(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.outputname_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.key_data_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.sha_hash_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.manifest_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.system_package_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.load_)*/false
  , /*decltype(_impl_.load_system_)*/false
  , /*decltype(_impl_.cookie_)*/0} {}
struct CMsgGCCStrike15_v2_GC2ClientInitSystemDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgGCCStrike15_v2_GC2ClientInitSystemDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgGCCStrike15_v2_GC2ClientInitSystemDefaultTypeInternal() {}
  union {
    CMsgGCCStrike15_v2_GC2ClientInitSystem _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgGCCStrike15_v2_GC2ClientInitSystemDefaultTypeInternal _CMsgGCCStrike15_v2_GC2ClientInitSystem_default_instance_;
PROTOBUF_CONSTEXPR CMsgGCCStrike15_v2_GC2ClientInitSystem_Response::CMsgGCCStrike15_v2_GC2ClientInitSystem_Response(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.diagnostic_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.sha_hash_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.success_)*/false
  , /*decltype(_impl_.response_)*/0
  , /*decltype(_impl_.error_code1_)*/0
  , /*decltype(_impl_.error_code2_)*/0
  , /*decltype(_impl_.handle_)*/int64_t{0}
  , /*decltype(_impl_.einit_result_)*/0
  , /*decltype(_impl_.aux_system1_)*/0
  , /*decltype(_impl_.aux_system2_)*/0} {}
struct CMsgGCCStrike15_v2_GC2ClientInitSystem_ResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgGCCStrike15_v2_GC2ClientInitSystem_ResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgGCCStrike15_v2_GC2ClientInitSystem_ResponseDefaultTypeInternal() {}
  union {
    CMsgGCCStrike15_v2_GC2ClientInitSystem_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgGCCStrike15_v2_GC2ClientInitSystem_ResponseDefaultTypeInternal _CMsgGCCStrike15_v2_GC2ClientInitSystem_Response_default_instance_;
PROTOBUF_CONSTEXPR CMsgGCCStrike15_v2_SetPlayerLeaderboardSafeName::CMsgGCCStrike15_v2_SetPlayerLeaderboardSafeName(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.leaderboard_safe_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct CMsgGCCStrike15_v2_SetPlayerLeaderboardSafeNameDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgGCCStrike15_v2_SetPlayerLeaderboardSafeNameDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgGCCStrike15_v2_SetPlayerLeaderboardSafeNameDefaultTypeInternal() {}
  union {
    CMsgGCCStrike15_v2_SetPlayerLeaderboardSafeName _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgGCCStrike15_v2_SetPlayerLeaderboardSafeNameDefaultTypeInternal _CMsgGCCStrike15_v2_SetPlayerLeaderboardSafeName_default_instance_;
static ::_pb::Metadata file_level_metadata_cstrike15_5fgcmessages_2eproto[169];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_cstrike15_5fgcmessages_2eproto[4];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_cstrike15_5fgcmessages_2eproto = nullptr;

const uint32_t TableStruct_cstrike15_5fgcmessages_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::GameServerPing, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::GameServerPing, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::GameServerPing, _impl_.ping_),
  PROTOBUF_FIELD_OFFSET(::GameServerPing, _impl_.ip_),
  PROTOBUF_FIELD_OFFSET(::GameServerPing, _impl_.instances_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::DataCenterPing, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::DataCenterPing, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::DataCenterPing, _impl_.data_center_id_),
  PROTOBUF_FIELD_OFFSET(::DataCenterPing, _impl_.ping_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::DetailedSearchStatistic, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::DetailedSearchStatistic, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::DetailedSearchStatistic, _impl_.game_type_),
  PROTOBUF_FIELD_OFFSET(::DetailedSearchStatistic, _impl_.search_time_avg_),
  PROTOBUF_FIELD_OFFSET(::DetailedSearchStatistic, _impl_.players_searching_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::TournamentPlayer, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TournamentPlayer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TournamentPlayer, _impl_.account_id_),
  PROTOBUF_FIELD_OFFSET(::TournamentPlayer, _impl_.player_nick_),
  PROTOBUF_FIELD_OFFSET(::TournamentPlayer, _impl_.player_name_),
  PROTOBUF_FIELD_OFFSET(::TournamentPlayer, _impl_.player_dob_),
  PROTOBUF_FIELD_OFFSET(::TournamentPlayer, _impl_.player_flag_),
  PROTOBUF_FIELD_OFFSET(::TournamentPlayer, _impl_.player_location_),
  PROTOBUF_FIELD_OFFSET(::TournamentPlayer, _impl_.player_desc_),
  5,
  0,
  1,
  6,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::TournamentTeam, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TournamentTeam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TournamentTeam, _impl_.team_id_),
  PROTOBUF_FIELD_OFFSET(::TournamentTeam, _impl_.team_tag_),
  PROTOBUF_FIELD_OFFSET(::TournamentTeam, _impl_.team_flag_),
  PROTOBUF_FIELD_OFFSET(::TournamentTeam, _impl_.team_name_),
  PROTOBUF_FIELD_OFFSET(::TournamentTeam, _impl_.players_),
  3,
  0,
  1,
  2,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::TournamentEvent, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TournamentEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TournamentEvent, _impl_.event_id_),
  PROTOBUF_FIELD_OFFSET(::TournamentEvent, _impl_.event_tag_),
  PROTOBUF_FIELD_OFFSET(::TournamentEvent, _impl_.event_name_),
  PROTOBUF_FIELD_OFFSET(::TournamentEvent, _impl_.event_time_start_),
  PROTOBUF_FIELD_OFFSET(::TournamentEvent, _impl_.event_time_end_),
  PROTOBUF_FIELD_OFFSET(::TournamentEvent, _impl_.event_public_),
  PROTOBUF_FIELD_OFFSET(::TournamentEvent, _impl_.event_stage_id_),
  PROTOBUF_FIELD_OFFSET(::TournamentEvent, _impl_.event_stage_name_),
  PROTOBUF_FIELD_OFFSET(::TournamentEvent, _impl_.active_section_id_),
  3,
  0,
  1,
  4,
  5,
  6,
  7,
  2,
  8,
  PROTOBUF_FIELD_OFFSET(::GlobalStatistics, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::GlobalStatistics, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::GlobalStatistics, _impl_.players_online_),
  PROTOBUF_FIELD_OFFSET(::GlobalStatistics, _impl_.servers_online_),
  PROTOBUF_FIELD_OFFSET(::GlobalStatistics, _impl_.players_searching_),
  PROTOBUF_FIELD_OFFSET(::GlobalStatistics, _impl_.servers_available_),
  PROTOBUF_FIELD_OFFSET(::GlobalStatistics, _impl_.ongoing_matches_),
  PROTOBUF_FIELD_OFFSET(::GlobalStatistics, _impl_.search_time_avg_),
  PROTOBUF_FIELD_OFFSET(::GlobalStatistics, _impl_.search_statistics_),
  PROTOBUF_FIELD_OFFSET(::GlobalStatistics, _impl_.main_post_url_),
  PROTOBUF_FIELD_OFFSET(::GlobalStatistics, _impl_.required_appid_version_),
  PROTOBUF_FIELD_OFFSET(::GlobalStatistics, _impl_.pricesheet_version_),
  PROTOBUF_FIELD_OFFSET(::GlobalStatistics, _impl_.twitch_streams_version_),
  PROTOBUF_FIELD_OFFSET(::GlobalStatistics, _impl_.active_tournament_eventid_),
  PROTOBUF_FIELD_OFFSET(::GlobalStatistics, _impl_.active_survey_id_),
  PROTOBUF_FIELD_OFFSET(::GlobalStatistics, _impl_.rtime32_cur_),
  PROTOBUF_FIELD_OFFSET(::GlobalStatistics, _impl_.rtime32_event_start_),
  PROTOBUF_FIELD_OFFSET(::GlobalStatistics, _impl_.required_appid_version2_),
  1,
  2,
  3,
  4,
  5,
  6,
  ~0u,
  0,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  PROTOBUF_FIELD_OFFSET(::OperationalStatisticDescription, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::OperationalStatisticDescription, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::OperationalStatisticDescription, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::OperationalStatisticDescription, _impl_.idkey_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::OperationalStatisticElement, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::OperationalStatisticElement, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::OperationalStatisticElement, _impl_.idkey_),
  PROTOBUF_FIELD_OFFSET(::OperationalStatisticElement, _impl_.values_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::OperationalStatisticsPacket, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::OperationalStatisticsPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::OperationalStatisticsPacket, _impl_.packetid_),
  PROTOBUF_FIELD_OFFSET(::OperationalStatisticsPacket, _impl_.mstimestamp_),
  PROTOBUF_FIELD_OFFSET(::OperationalStatisticsPacket, _impl_.values_),
  0,
  1,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::OperationalVarValue, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::OperationalVarValue, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::OperationalVarValue, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::OperationalVarValue, _impl_.ivalue_),
  PROTOBUF_FIELD_OFFSET(::OperationalVarValue, _impl_.fvalue_),
  PROTOBUF_FIELD_OFFSET(::OperationalVarValue, _impl_.svalue_),
  0,
  2,
  3,
  1,
  PROTOBUF_FIELD_OFFSET(::PlayerRankingInfo_PerMapRank, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::PlayerRankingInfo_PerMapRank, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::PlayerRankingInfo_PerMapRank, _impl_.map_id_),
  PROTOBUF_FIELD_OFFSET(::PlayerRankingInfo_PerMapRank, _impl_.rank_id_),
  PROTOBUF_FIELD_OFFSET(::PlayerRankingInfo_PerMapRank, _impl_.wins_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::PlayerRankingInfo, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::PlayerRankingInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::PlayerRankingInfo, _impl_.account_id_),
  PROTOBUF_FIELD_OFFSET(::PlayerRankingInfo, _impl_.rank_id_),
  PROTOBUF_FIELD_OFFSET(::PlayerRankingInfo, _impl_.wins_),
  PROTOBUF_FIELD_OFFSET(::PlayerRankingInfo, _impl_.rank_change_),
  PROTOBUF_FIELD_OFFSET(::PlayerRankingInfo, _impl_.rank_type_id_),
  PROTOBUF_FIELD_OFFSET(::PlayerRankingInfo, _impl_.tv_control_),
  PROTOBUF_FIELD_OFFSET(::PlayerRankingInfo, _impl_.rank_window_stats_),
  PROTOBUF_FIELD_OFFSET(::PlayerRankingInfo, _impl_.leaderboard_name_),
  PROTOBUF_FIELD_OFFSET(::PlayerRankingInfo, _impl_.rank_if_win_),
  PROTOBUF_FIELD_OFFSET(::PlayerRankingInfo, _impl_.rank_if_lose_),
  PROTOBUF_FIELD_OFFSET(::PlayerRankingInfo, _impl_.rank_if_tie_),
  PROTOBUF_FIELD_OFFSET(::PlayerRankingInfo, _impl_.per_map_rank_),
  PROTOBUF_FIELD_OFFSET(::PlayerRankingInfo, _impl_.leaderboard_name_status_),
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  0,
  8,
  9,
  10,
  ~0u,
  11,
  PROTOBUF_FIELD_OFFSET(::PlayerCommendationInfo, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::PlayerCommendationInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::PlayerCommendationInfo, _impl_.cmd_friendly_),
  PROTOBUF_FIELD_OFFSET(::PlayerCommendationInfo, _impl_.cmd_teaching_),
  PROTOBUF_FIELD_OFFSET(::PlayerCommendationInfo, _impl_.cmd_leader_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::PlayerMedalsInfo, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::PlayerMedalsInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::PlayerMedalsInfo, _impl_.display_items_defidx_),
  PROTOBUF_FIELD_OFFSET(::PlayerMedalsInfo, _impl_.featured_display_item_defidx_),
  ~0u,
  0,
  PROTOBUF_FIELD_OFFSET(::AccountActivity, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::AccountActivity, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::AccountActivity, _impl_.activity_),
  PROTOBUF_FIELD_OFFSET(::AccountActivity, _impl_.mode_),
  PROTOBUF_FIELD_OFFSET(::AccountActivity, _impl_.map_),
  PROTOBUF_FIELD_OFFSET(::AccountActivity, _impl_.matchid_),
  0,
  1,
  3,
  2,
  PROTOBUF_FIELD_OFFSET(::TournamentMatchSetup, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TournamentMatchSetup, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TournamentMatchSetup, _impl_.event_id_),
  PROTOBUF_FIELD_OFFSET(::TournamentMatchSetup, _impl_.team_id_ct_),
  PROTOBUF_FIELD_OFFSET(::TournamentMatchSetup, _impl_.team_id_t_),
  PROTOBUF_FIELD_OFFSET(::TournamentMatchSetup, _impl_.event_stage_id_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::ServerHltvInfo, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::ServerHltvInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ServerHltvInfo, _impl_.tv_udp_port_),
  PROTOBUF_FIELD_OFFSET(::ServerHltvInfo, _impl_.tv_watch_key_),
  PROTOBUF_FIELD_OFFSET(::ServerHltvInfo, _impl_.tv_slots_),
  PROTOBUF_FIELD_OFFSET(::ServerHltvInfo, _impl_.tv_clients_),
  PROTOBUF_FIELD_OFFSET(::ServerHltvInfo, _impl_.tv_proxies_),
  PROTOBUF_FIELD_OFFSET(::ServerHltvInfo, _impl_.tv_time_),
  PROTOBUF_FIELD_OFFSET(::ServerHltvInfo, _impl_.game_type_),
  PROTOBUF_FIELD_OFFSET(::ServerHltvInfo, _impl_.game_mapgroup_),
  PROTOBUF_FIELD_OFFSET(::ServerHltvInfo, _impl_.game_map_),
  PROTOBUF_FIELD_OFFSET(::ServerHltvInfo, _impl_.tv_master_steamid_),
  PROTOBUF_FIELD_OFFSET(::ServerHltvInfo, _impl_.tv_local_slots_),
  PROTOBUF_FIELD_OFFSET(::ServerHltvInfo, _impl_.tv_local_clients_),
  PROTOBUF_FIELD_OFFSET(::ServerHltvInfo, _impl_.tv_local_proxies_),
  PROTOBUF_FIELD_OFFSET(::ServerHltvInfo, _impl_.tv_relay_slots_),
  PROTOBUF_FIELD_OFFSET(::ServerHltvInfo, _impl_.tv_relay_clients_),
  PROTOBUF_FIELD_OFFSET(::ServerHltvInfo, _impl_.tv_relay_proxies_),
  PROTOBUF_FIELD_OFFSET(::ServerHltvInfo, _impl_.tv_relay_address_),
  PROTOBUF_FIELD_OFFSET(::ServerHltvInfo, _impl_.tv_relay_port_),
  PROTOBUF_FIELD_OFFSET(::ServerHltvInfo, _impl_.tv_relay_steamid_),
  PROTOBUF_FIELD_OFFSET(::ServerHltvInfo, _impl_.flags_),
  3,
  2,
  4,
  5,
  6,
  7,
  8,
  0,
  1,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  17,
  18,
  19,
  PROTOBUF_FIELD_OFFSET(::IpAddressMask, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::IpAddressMask, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::IpAddressMask, _impl_.a_),
  PROTOBUF_FIELD_OFFSET(::IpAddressMask, _impl_.b_),
  PROTOBUF_FIELD_OFFSET(::IpAddressMask, _impl_.c_),
  PROTOBUF_FIELD_OFFSET(::IpAddressMask, _impl_.d_),
  PROTOBUF_FIELD_OFFSET(::IpAddressMask, _impl_.bits_),
  PROTOBUF_FIELD_OFFSET(::IpAddressMask, _impl_.token_),
  0,
  1,
  2,
  3,
  4,
  5,
  PROTOBUF_FIELD_OFFSET(::CMsgCsgoSteamUserStatChange, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgCsgoSteamUserStatChange, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgCsgoSteamUserStatChange, _impl_.ecsgosteamuserstat_),
  PROTOBUF_FIELD_OFFSET(::CMsgCsgoSteamUserStatChange, _impl_.delta_),
  PROTOBUF_FIELD_OFFSET(::CMsgCsgoSteamUserStatChange, _impl_.absolute_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::XpProgressData, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::XpProgressData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::XpProgressData, _impl_.xp_points_),
  PROTOBUF_FIELD_OFFSET(::XpProgressData, _impl_.xp_category_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::MatchEndItemUpdates, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::MatchEndItemUpdates, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::MatchEndItemUpdates, _impl_.item_id_),
  PROTOBUF_FIELD_OFFSET(::MatchEndItemUpdates, _impl_.item_attr_defidx_),
  PROTOBUF_FIELD_OFFSET(::MatchEndItemUpdates, _impl_.item_attr_delta_value_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::ScoreLeaderboardData_Entry, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::ScoreLeaderboardData_Entry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ScoreLeaderboardData_Entry, _impl_.tag_),
  PROTOBUF_FIELD_OFFSET(::ScoreLeaderboardData_Entry, _impl_.val_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::ScoreLeaderboardData_AccountEntries, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::ScoreLeaderboardData_AccountEntries, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ScoreLeaderboardData_AccountEntries, _impl_.accountid_),
  PROTOBUF_FIELD_OFFSET(::ScoreLeaderboardData_AccountEntries, _impl_.entries_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::ScoreLeaderboardData, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::ScoreLeaderboardData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ScoreLeaderboardData, _impl_.quest_id_),
  PROTOBUF_FIELD_OFFSET(::ScoreLeaderboardData, _impl_.score_),
  PROTOBUF_FIELD_OFFSET(::ScoreLeaderboardData, _impl_.accountentries_),
  PROTOBUF_FIELD_OFFSET(::ScoreLeaderboardData, _impl_.matchentries_),
  PROTOBUF_FIELD_OFFSET(::ScoreLeaderboardData, _impl_.leaderboard_name_),
  1,
  2,
  ~0u,
  ~0u,
  0,
  PROTOBUF_FIELD_OFFSET(::PlayerQuestData_QuestItemData, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::PlayerQuestData_QuestItemData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::PlayerQuestData_QuestItemData, _impl_.quest_id_),
  PROTOBUF_FIELD_OFFSET(::PlayerQuestData_QuestItemData, _impl_.quest_normal_points_earned_),
  PROTOBUF_FIELD_OFFSET(::PlayerQuestData_QuestItemData, _impl_.quest_bonus_points_earned_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::PlayerQuestData, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::PlayerQuestData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::PlayerQuestData, _impl_.quester_account_id_),
  PROTOBUF_FIELD_OFFSET(::PlayerQuestData, _impl_.quest_item_data_),
  PROTOBUF_FIELD_OFFSET(::PlayerQuestData, _impl_.xp_progress_data_),
  PROTOBUF_FIELD_OFFSET(::PlayerQuestData, _impl_.time_played_),
  PROTOBUF_FIELD_OFFSET(::PlayerQuestData, _impl_.mm_game_mode_),
  PROTOBUF_FIELD_OFFSET(::PlayerQuestData, _impl_.item_updates_),
  PROTOBUF_FIELD_OFFSET(::PlayerQuestData, _impl_.operation_points_eligible_),
  PROTOBUF_FIELD_OFFSET(::PlayerQuestData, _impl_.userstatchanges_),
  0,
  ~0u,
  ~0u,
  1,
  2,
  ~0u,
  3,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::DeepPlayerStatsEntry, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::DeepPlayerStatsEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::DeepPlayerStatsEntry, _impl_.accountid_),
  PROTOBUF_FIELD_OFFSET(::DeepPlayerStatsEntry, _impl_.match_id_),
  PROTOBUF_FIELD_OFFSET(::DeepPlayerStatsEntry, _impl_.mm_game_mode_),
  PROTOBUF_FIELD_OFFSET(::DeepPlayerStatsEntry, _impl_.mapid_),
  PROTOBUF_FIELD_OFFSET(::DeepPlayerStatsEntry, _impl_.b_starting_ct_),
  PROTOBUF_FIELD_OFFSET(::DeepPlayerStatsEntry, _impl_.match_outcome_),
  PROTOBUF_FIELD_OFFSET(::DeepPlayerStatsEntry, _impl_.rounds_won_),
  PROTOBUF_FIELD_OFFSET(::DeepPlayerStatsEntry, _impl_.rounds_lost_),
  PROTOBUF_FIELD_OFFSET(::DeepPlayerStatsEntry, _impl_.stat_score_),
  PROTOBUF_FIELD_OFFSET(::DeepPlayerStatsEntry, _impl_.stat_deaths_),
  PROTOBUF_FIELD_OFFSET(::DeepPlayerStatsEntry, _impl_.stat_mvps_),
  PROTOBUF_FIELD_OFFSET(::DeepPlayerStatsEntry, _impl_.enemy_kills_),
  PROTOBUF_FIELD_OFFSET(::DeepPlayerStatsEntry, _impl_.enemy_headshots_),
  PROTOBUF_FIELD_OFFSET(::DeepPlayerStatsEntry, _impl_.enemy_2ks_),
  PROTOBUF_FIELD_OFFSET(::DeepPlayerStatsEntry, _impl_.enemy_3ks_),
  PROTOBUF_FIELD_OFFSET(::DeepPlayerStatsEntry, _impl_.enemy_4ks_),
  PROTOBUF_FIELD_OFFSET(::DeepPlayerStatsEntry, _impl_.total_damage_),
  PROTOBUF_FIELD_OFFSET(::DeepPlayerStatsEntry, _impl_.engagements_entry_count_),
  PROTOBUF_FIELD_OFFSET(::DeepPlayerStatsEntry, _impl_.engagements_entry_wins_),
  PROTOBUF_FIELD_OFFSET(::DeepPlayerStatsEntry, _impl_.engagements_1v1_count_),
  PROTOBUF_FIELD_OFFSET(::DeepPlayerStatsEntry, _impl_.engagements_1v1_wins_),
  PROTOBUF_FIELD_OFFSET(::DeepPlayerStatsEntry, _impl_.engagements_1v2_count_),
  PROTOBUF_FIELD_OFFSET(::DeepPlayerStatsEntry, _impl_.engagements_1v2_wins_),
  PROTOBUF_FIELD_OFFSET(::DeepPlayerStatsEntry, _impl_.utility_count_),
  PROTOBUF_FIELD_OFFSET(::DeepPlayerStatsEntry, _impl_.utility_success_),
  PROTOBUF_FIELD_OFFSET(::DeepPlayerStatsEntry, _impl_.flash_count_),
  PROTOBUF_FIELD_OFFSET(::DeepPlayerStatsEntry, _impl_.flash_success_),
  PROTOBUF_FIELD_OFFSET(::DeepPlayerStatsEntry, _impl_.mates_),
  1,
  0,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  17,
  18,
  19,
  20,
  21,
  22,
  23,
  24,
  25,
  26,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::DeepPlayerMatchEvent, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::DeepPlayerMatchEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::DeepPlayerMatchEvent, _impl_.accountid_),
  PROTOBUF_FIELD_OFFSET(::DeepPlayerMatchEvent, _impl_.match_id_),
  PROTOBUF_FIELD_OFFSET(::DeepPlayerMatchEvent, _impl_.event_id_),
  PROTOBUF_FIELD_OFFSET(::DeepPlayerMatchEvent, _impl_.event_type_),
  PROTOBUF_FIELD_OFFSET(::DeepPlayerMatchEvent, _impl_.b_playing_ct_),
  PROTOBUF_FIELD_OFFSET(::DeepPlayerMatchEvent, _impl_.user_pos_x_),
  PROTOBUF_FIELD_OFFSET(::DeepPlayerMatchEvent, _impl_.user_pos_y_),
  PROTOBUF_FIELD_OFFSET(::DeepPlayerMatchEvent, _impl_.user_pos_z_),
  PROTOBUF_FIELD_OFFSET(::DeepPlayerMatchEvent, _impl_.user_defidx_),
  PROTOBUF_FIELD_OFFSET(::DeepPlayerMatchEvent, _impl_.other_pos_x_),
  PROTOBUF_FIELD_OFFSET(::DeepPlayerMatchEvent, _impl_.other_pos_y_),
  PROTOBUF_FIELD_OFFSET(::DeepPlayerMatchEvent, _impl_.other_pos_z_),
  PROTOBUF_FIELD_OFFSET(::DeepPlayerMatchEvent, _impl_.other_defidx_),
  PROTOBUF_FIELD_OFFSET(::DeepPlayerMatchEvent, _impl_.event_data_),
  1,
  0,
  2,
  3,
  4,
  5,
  6,
  11,
  7,
  8,
  9,
  12,
  10,
  13,
  PROTOBUF_FIELD_OFFSET(::CMsgGC_ServerQuestUpdateData, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGC_ServerQuestUpdateData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgGC_ServerQuestUpdateData, _impl_.player_quest_data_),
  PROTOBUF_FIELD_OFFSET(::CMsgGC_ServerQuestUpdateData, _impl_.binary_data_),
  PROTOBUF_FIELD_OFFSET(::CMsgGC_ServerQuestUpdateData, _impl_.mm_game_mode_),
  PROTOBUF_FIELD_OFFSET(::CMsgGC_ServerQuestUpdateData, _impl_.missionlbsdata_),
  PROTOBUF_FIELD_OFFSET(::CMsgGC_ServerQuestUpdateData, _impl_.flags_),
  ~0u,
  0,
  2,
  1,
  3,
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm, _impl_.token_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm, _impl_.stamp_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm, _impl_.exchange_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm, _impl_.retry_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_GC2ServerReservationUpdate, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_GC2ServerReservationUpdate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_GC2ServerReservationUpdate, _impl_.viewers_external_total_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_GC2ServerReservationUpdate, _impl_.viewers_external_steam_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingStart, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingStart, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingStart, _impl_.account_ids_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingStart, _impl_.game_type_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingStart, _impl_.ticket_data_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingStart, _impl_.client_version_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingStart, _impl_.tournament_match_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingStart, _impl_.prime_only_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingStart, _impl_.tv_control_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingStart, _impl_.lobby_id_),
  ~0u,
  2,
  0,
  3,
  1,
  4,
  5,
  6,
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingStop, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingStop, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingStop, _impl_.abandon_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_Note, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_Note, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_Note, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_Note, _impl_.region_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_Note, _impl_.region_r_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_Note, _impl_.distance_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingClient2ServerPing, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingClient2ServerPing, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingClient2ServerPing, _impl_.gameserverpings_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingClient2ServerPing, _impl_.offset_index_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingClient2ServerPing, _impl_.final_batch_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingClient2ServerPing, _impl_.data_center_pings_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingClient2ServerPing, _impl_.max_ping_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingClient2ServerPing, _impl_.test_token_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingClient2ServerPing, _impl_.search_key_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingClient2ServerPing, _impl_.notes_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingClient2ServerPing, _impl_.debug_message_),
  ~0u,
  2,
  3,
  ~0u,
  4,
  5,
  0,
  ~0u,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate, _impl_.matchmaking_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate, _impl_.waiting_account_id_sessions_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate, _impl_.error_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate, _impl_.ongoingmatch_account_id_sessions_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate, _impl_.global_stats_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate, _impl_.failping_account_id_sessions_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate, _impl_.penalty_account_id_sessions_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate, _impl_.failready_account_id_sessions_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate, _impl_.vacbanned_account_id_sessions_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate, _impl_.server_ipaddress_mask_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate, _impl_.notes_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate, _impl_.penalty_account_id_sessions_green_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate, _impl_.insufficientlevel_sessions_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate, _impl_.vsncheck_account_id_sessions_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate, _impl_.launcher_mismatch_sessions_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate, _impl_.insecure_account_id_sessions_),
  3,
  ~0u,
  0,
  ~0u,
  1,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  2,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CDataGCCStrike15_v2_TournamentMatchDraft_Entry, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDataGCCStrike15_v2_TournamentMatchDraft_Entry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CDataGCCStrike15_v2_TournamentMatchDraft_Entry, _impl_.mapid_),
  PROTOBUF_FIELD_OFFSET(::CDataGCCStrike15_v2_TournamentMatchDraft_Entry, _impl_.team_id_ct_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CDataGCCStrike15_v2_TournamentMatchDraft, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDataGCCStrike15_v2_TournamentMatchDraft, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CDataGCCStrike15_v2_TournamentMatchDraft, _impl_.event_id_),
  PROTOBUF_FIELD_OFFSET(::CDataGCCStrike15_v2_TournamentMatchDraft, _impl_.event_stage_id_),
  PROTOBUF_FIELD_OFFSET(::CDataGCCStrike15_v2_TournamentMatchDraft, _impl_.team_id_0_),
  PROTOBUF_FIELD_OFFSET(::CDataGCCStrike15_v2_TournamentMatchDraft, _impl_.team_id_1_),
  PROTOBUF_FIELD_OFFSET(::CDataGCCStrike15_v2_TournamentMatchDraft, _impl_.maps_count_),
  PROTOBUF_FIELD_OFFSET(::CDataGCCStrike15_v2_TournamentMatchDraft, _impl_.maps_current_),
  PROTOBUF_FIELD_OFFSET(::CDataGCCStrike15_v2_TournamentMatchDraft, _impl_.team_id_start_),
  PROTOBUF_FIELD_OFFSET(::CDataGCCStrike15_v2_TournamentMatchDraft, _impl_.team_id_veto1_),
  PROTOBUF_FIELD_OFFSET(::CDataGCCStrike15_v2_TournamentMatchDraft, _impl_.team_id_pickn_),
  PROTOBUF_FIELD_OFFSET(::CDataGCCStrike15_v2_TournamentMatchDraft, _impl_.drafts_),
  PROTOBUF_FIELD_OFFSET(::CDataGCCStrike15_v2_TournamentMatchDraft, _impl_.vote_mapid_0_),
  PROTOBUF_FIELD_OFFSET(::CDataGCCStrike15_v2_TournamentMatchDraft, _impl_.vote_mapid_1_),
  PROTOBUF_FIELD_OFFSET(::CDataGCCStrike15_v2_TournamentMatchDraft, _impl_.vote_mapid_2_),
  PROTOBUF_FIELD_OFFSET(::CDataGCCStrike15_v2_TournamentMatchDraft, _impl_.vote_mapid_3_),
  PROTOBUF_FIELD_OFFSET(::CDataGCCStrike15_v2_TournamentMatchDraft, _impl_.vote_mapid_4_),
  PROTOBUF_FIELD_OFFSET(::CDataGCCStrike15_v2_TournamentMatchDraft, _impl_.vote_mapid_5_),
  PROTOBUF_FIELD_OFFSET(::CDataGCCStrike15_v2_TournamentMatchDraft, _impl_.vote_starting_side_),
  PROTOBUF_FIELD_OFFSET(::CDataGCCStrike15_v2_TournamentMatchDraft, _impl_.vote_phase_),
  PROTOBUF_FIELD_OFFSET(::CDataGCCStrike15_v2_TournamentMatchDraft, _impl_.vote_phase_start_),
  PROTOBUF_FIELD_OFFSET(::CDataGCCStrike15_v2_TournamentMatchDraft, _impl_.vote_phase_length_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  9,
  10,
  11,
  PROTOBUF_FIELD_OFFSET(::CPreMatchInfoData_TeamStats, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CPreMatchInfoData_TeamStats, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CPreMatchInfoData_TeamStats, _impl_.match_info_idxtxt_),
  PROTOBUF_FIELD_OFFSET(::CPreMatchInfoData_TeamStats, _impl_.match_info_txt_),
  PROTOBUF_FIELD_OFFSET(::CPreMatchInfoData_TeamStats, _impl_.match_info_teams_),
  1,
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CPreMatchInfoData, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CPreMatchInfoData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CPreMatchInfoData, _impl_.predictions_pct_),
  PROTOBUF_FIELD_OFFSET(::CPreMatchInfoData, _impl_.draft_),
  PROTOBUF_FIELD_OFFSET(::CPreMatchInfoData, _impl_.stats_),
  PROTOBUF_FIELD_OFFSET(::CPreMatchInfoData, _impl_.wins_),
  1,
  0,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve, _impl_.account_ids_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve, _impl_.game_type_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve, _impl_.match_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve, _impl_.server_version_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve, _impl_.flags_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve, _impl_.rankings_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve, _impl_.encryption_key_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve, _impl_.encryption_key_pub_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve, _impl_.party_ids_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve, _impl_.whitelist_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve, _impl_.tv_master_steamid_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve, _impl_.tournament_event_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve, _impl_.tournament_teams_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve, _impl_.tournament_casters_account_ids_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve, _impl_.tv_relay_steamid_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve, _impl_.pre_match_data_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve, _impl_.rtime32_event_start_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve, _impl_.tv_control_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve, _impl_.op_var_values_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve, _impl_.socache_control_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve, _impl_.teammate_colors_),
  ~0u,
  3,
  2,
  4,
  11,
  ~0u,
  5,
  6,
  ~0u,
  ~0u,
  7,
  0,
  ~0u,
  ~0u,
  8,
  1,
  9,
  10,
  ~0u,
  12,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingServerReservationResponse, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingServerReservationResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingServerReservationResponse, _impl_.reservationid_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingServerReservationResponse, _impl_.reservation_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingServerReservationResponse, _impl_.map_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingServerReservationResponse, _impl_.gc_reservation_sent_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingServerReservationResponse, _impl_.server_version_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingServerReservationResponse, _impl_.tv_info_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingServerReservationResponse, _impl_.reward_player_accounts_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingServerReservationResponse, _impl_.idle_player_accounts_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingServerReservationResponse, _impl_.reward_item_attr_def_idx_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingServerReservationResponse, _impl_.reward_item_attr_value_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingServerReservationResponse, _impl_.reward_item_attr_reward_idx_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingServerReservationResponse, _impl_.reward_drop_list_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingServerReservationResponse, _impl_.tournament_tag_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingServerReservationResponse, _impl_.legacy_steamdatagram_port_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingServerReservationResponse, _impl_.steamdatagram_routing_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingServerReservationResponse, _impl_.test_token_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingServerReservationResponse, _impl_.flags_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingServerReservationResponse, _impl_.system_load_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingServerReservationResponse, _impl_.cpus_online_),
  4,
  2,
  0,
  5,
  6,
  3,
  ~0u,
  ~0u,
  7,
  8,
  9,
  10,
  1,
  11,
  14,
  12,
  13,
  15,
  16,
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve, _impl_.serverid_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve, _impl_.direct_udp_ip_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve, _impl_.direct_udp_port_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve, _impl_.reservationid_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve, _impl_.reservation_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve, _impl_.map_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve, _impl_.server_address_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve, _impl_.gs_ping_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve, _impl_.gs_location_id_),
  4,
  5,
  6,
  7,
  2,
  0,
  1,
  3,
  8,
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingServerRoundStats_DropInfo, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingServerRoundStats_DropInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingServerRoundStats_DropInfo, _impl_.account_mvp_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingServerRoundStats, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingServerRoundStats, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingServerRoundStats, _impl_.reservationid_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingServerRoundStats, _impl_.reservation_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingServerRoundStats, _impl_.map_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingServerRoundStats, _impl_.round_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingServerRoundStats, _impl_.kills_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingServerRoundStats, _impl_.assists_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingServerRoundStats, _impl_.deaths_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingServerRoundStats, _impl_.scores_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingServerRoundStats, _impl_.pings_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingServerRoundStats, _impl_.round_result_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingServerRoundStats, _impl_.match_result_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingServerRoundStats, _impl_.team_scores_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingServerRoundStats, _impl_.confirm_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingServerRoundStats, _impl_.reservation_stage_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingServerRoundStats, _impl_.match_duration_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingServerRoundStats, _impl_.enemy_kills_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingServerRoundStats, _impl_.enemy_headshots_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingServerRoundStats, _impl_.enemy_3ks_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingServerRoundStats, _impl_.enemy_4ks_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingServerRoundStats, _impl_.enemy_5ks_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingServerRoundStats, _impl_.mvps_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingServerRoundStats, _impl_.spectators_count_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingServerRoundStats, _impl_.spectators_count_tv_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingServerRoundStats, _impl_.spectators_count_lnk_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingServerRoundStats, _impl_.enemy_kills_agg_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingServerRoundStats, _impl_.drop_info_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingServerRoundStats, _impl_.b_switched_teams_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingServerRoundStats, _impl_.enemy_2ks_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingServerRoundStats, _impl_.player_spawned_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingServerRoundStats, _impl_.team_spawn_count_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingServerRoundStats, _impl_.max_rounds_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingServerRoundStats, _impl_.map_id_),
  4,
  1,
  0,
  5,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  6,
  7,
  ~0u,
  2,
  8,
  9,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  10,
  11,
  12,
  ~0u,
  3,
  13,
  ~0u,
  ~0u,
  ~0u,
  14,
  15,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingClient2GCHello, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingGC2ClientHello, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingGC2ClientHello, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingGC2ClientHello, _impl_.account_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingGC2ClientHello, _impl_.ongoingmatch_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingGC2ClientHello, _impl_.global_stats_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingGC2ClientHello, _impl_.penalty_seconds_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingGC2ClientHello, _impl_.penalty_reason_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingGC2ClientHello, _impl_.vac_banned_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingGC2ClientHello, _impl_.ranking_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingGC2ClientHello, _impl_.commendation_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingGC2ClientHello, _impl_.medals_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingGC2ClientHello, _impl_.my_current_event_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingGC2ClientHello, _impl_.my_current_event_teams_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingGC2ClientHello, _impl_.my_current_team_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingGC2ClientHello, _impl_.my_current_event_stages_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingGC2ClientHello, _impl_.survey_vote_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingGC2ClientHello, _impl_.activity_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingGC2ClientHello, _impl_.player_level_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingGC2ClientHello, _impl_.player_cur_xp_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingGC2ClientHello, _impl_.player_xp_bonus_flags_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingGC2ClientHello, _impl_.rankings_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingGC2ClientHello, _impl_.owcaseid_),
  8,
  0,
  1,
  9,
  10,
  11,
  2,
  3,
  4,
  5,
  ~0u,
  6,
  ~0u,
  12,
  7,
  13,
  14,
  15,
  ~0u,
  16,
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_AccountPrivacySettings_Setting, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_AccountPrivacySettings_Setting, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_AccountPrivacySettings_Setting, _impl_.setting_type_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_AccountPrivacySettings_Setting, _impl_.setting_value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_AccountPrivacySettings, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_AccountPrivacySettings, _impl_.settings_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon, _impl_.account_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon, _impl_.abandoned_match_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon, _impl_.penalty_seconds_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon, _impl_.penalty_reason_),
  1,
  0,
  2,
  3,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientGCRankUpdate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientGCRankUpdate, _impl_.rankings_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate, _impl_.main_post_url_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_ServerNotificationForUserPenalty, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_ServerNotificationForUserPenalty, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_ServerNotificationForUserPenalty, _impl_.account_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_ServerNotificationForUserPenalty, _impl_.reason_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_ServerNotificationForUserPenalty, _impl_.seconds_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_ServerNotificationForUserPenalty, _impl_.communication_cooldown_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientReportPlayer, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientReportPlayer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientReportPlayer, _impl_.account_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientReportPlayer, _impl_.rpt_aimbot_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientReportPlayer, _impl_.rpt_wallhack_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientReportPlayer, _impl_.rpt_speedhack_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientReportPlayer, _impl_.rpt_teamharm_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientReportPlayer, _impl_.rpt_textabuse_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientReportPlayer, _impl_.rpt_voiceabuse_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientReportPlayer, _impl_.match_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientReportPlayer, _impl_.report_from_demo_),
  0,
  1,
  2,
  3,
  4,
  5,
  7,
  6,
  8,
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientCommendPlayer, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientCommendPlayer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientCommendPlayer, _impl_.account_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientCommendPlayer, _impl_.match_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientCommendPlayer, _impl_.commendation_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientCommendPlayer, _impl_.tokens_),
  1,
  3,
  0,
  2,
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientReportServer, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientReportServer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientReportServer, _impl_.rpt_poorperf_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientReportServer, _impl_.rpt_abusivemodels_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientReportServer, _impl_.rpt_badmotd_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientReportServer, _impl_.rpt_listingabuse_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientReportServer, _impl_.rpt_inventoryabuse_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientReportServer, _impl_.match_id_),
  0,
  1,
  2,
  3,
  5,
  4,
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientReportResponse, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientReportResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientReportResponse, _impl_.confirmation_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientReportResponse, _impl_.account_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientReportResponse, _impl_.server_ip_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientReportResponse, _impl_.response_type_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientReportResponse, _impl_.response_result_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientReportResponse, _impl_.tokens_),
  0,
  1,
  2,
  3,
  4,
  5,
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends, _impl_.request_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends, _impl_.account_ids_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends, _impl_.serverid_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends, _impl_.matchid_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends, _impl_.client_launcher_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends, _impl_.data_center_pings_),
  1,
  ~0u,
  0,
  3,
  2,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::WatchableMatchInfo, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::WatchableMatchInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::WatchableMatchInfo, _impl_.server_ip_),
  PROTOBUF_FIELD_OFFSET(::WatchableMatchInfo, _impl_.tv_port_),
  PROTOBUF_FIELD_OFFSET(::WatchableMatchInfo, _impl_.tv_spectators_),
  PROTOBUF_FIELD_OFFSET(::WatchableMatchInfo, _impl_.tv_time_),
  PROTOBUF_FIELD_OFFSET(::WatchableMatchInfo, _impl_.tv_watch_password_),
  PROTOBUF_FIELD_OFFSET(::WatchableMatchInfo, _impl_.cl_decryptdata_key_),
  PROTOBUF_FIELD_OFFSET(::WatchableMatchInfo, _impl_.cl_decryptdata_key_pub_),
  PROTOBUF_FIELD_OFFSET(::WatchableMatchInfo, _impl_.game_type_),
  PROTOBUF_FIELD_OFFSET(::WatchableMatchInfo, _impl_.game_mapgroup_),
  PROTOBUF_FIELD_OFFSET(::WatchableMatchInfo, _impl_.game_map_),
  PROTOBUF_FIELD_OFFSET(::WatchableMatchInfo, _impl_.server_id_),
  PROTOBUF_FIELD_OFFSET(::WatchableMatchInfo, _impl_.match_id_),
  PROTOBUF_FIELD_OFFSET(::WatchableMatchInfo, _impl_.reservation_id_),
  3,
  4,
  5,
  6,
  0,
  7,
  8,
  12,
  1,
  2,
  9,
  10,
  11,
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientRequestJoinFriendData, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientRequestJoinFriendData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientRequestJoinFriendData, _impl_.version_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientRequestJoinFriendData, _impl_.account_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientRequestJoinFriendData, _impl_.join_token_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientRequestJoinFriendData, _impl_.join_ipp_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientRequestJoinFriendData, _impl_.res_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientRequestJoinFriendData, _impl_.errormsg_),
  2,
  3,
  4,
  5,
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientRequestJoinServerData, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientRequestJoinServerData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientRequestJoinServerData, _impl_.version_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientRequestJoinServerData, _impl_.account_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientRequestJoinServerData, _impl_.serverid_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientRequestJoinServerData, _impl_.server_ip_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientRequestJoinServerData, _impl_.server_port_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientRequestJoinServerData, _impl_.res_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientRequestJoinServerData, _impl_.errormsg_),
  2,
  3,
  4,
  5,
  6,
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgGCCstrike15_v2_ClientRequestNewMission, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCstrike15_v2_ClientRequestNewMission, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgGCCstrike15_v2_ClientRequestNewMission, _impl_.mission_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCstrike15_v2_ClientRequestNewMission, _impl_.campaign_id_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgGCCstrike15_v2_ClientRedeemMissionReward, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCstrike15_v2_ClientRedeemMissionReward, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgGCCstrike15_v2_ClientRedeemMissionReward, _impl_.campaign_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCstrike15_v2_ClientRedeemMissionReward, _impl_.redeem_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCstrike15_v2_ClientRedeemMissionReward, _impl_.redeemable_balance_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCstrike15_v2_ClientRedeemMissionReward, _impl_.expected_cost_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::CMsgGCCstrike15_v2_ClientRedeemFreeReward, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCstrike15_v2_ClientRedeemFreeReward, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgGCCstrike15_v2_ClientRedeemFreeReward, _impl_.generation_time_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCstrike15_v2_ClientRedeemFreeReward, _impl_.redeemable_balance_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCstrike15_v2_ClientRedeemFreeReward, _impl_.items_),
  0,
  1,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded, _impl_.xp_progress_data_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded, _impl_.account_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded, _impl_.current_xp_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded, _impl_.current_level_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded, _impl_.upgraded_defidx_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded, _impl_.operation_points_awarded_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded, _impl_.free_rewards_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded, _impl_.xp_trail_remaining_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded, _impl_.xp_trail_xp_needed_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded, _impl_.xp_trail_level_),
  ~0u,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientNetworkConfig, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientNetworkConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientNetworkConfig, _impl_.data_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_ClientDeepStats_DeepStatsRange, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_ClientDeepStats_DeepStatsRange, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_ClientDeepStats_DeepStatsRange, _impl_.begin_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_ClientDeepStats_DeepStatsRange, _impl_.end_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_ClientDeepStats_DeepStatsRange, _impl_.frozen_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_ClientDeepStats_DeepStatsMatch, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_ClientDeepStats_DeepStatsMatch, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_ClientDeepStats_DeepStatsMatch, _impl_.player_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_ClientDeepStats_DeepStatsMatch, _impl_.events_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_ClientDeepStats, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_ClientDeepStats, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_ClientDeepStats, _impl_.account_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_ClientDeepStats, _impl_.range_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_ClientDeepStats, _impl_.matches_),
  1,
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_WatchInfoUsers, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_WatchInfoUsers, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_WatchInfoUsers, _impl_.request_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_WatchInfoUsers, _impl_.account_ids_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_WatchInfoUsers, _impl_.watchable_match_infos_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_WatchInfoUsers, _impl_.extended_timeout_),
  0,
  ~0u,
  ~0u,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientRequestPlayersProfile, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientRequestPlayersProfile, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientRequestPlayersProfile, _impl_.request_id__deprecated_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientRequestPlayersProfile, _impl_.account_ids__deprecated_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientRequestPlayersProfile, _impl_.account_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientRequestPlayersProfile, _impl_.request_level_),
  0,
  ~0u,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_PlayersProfile, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_PlayersProfile, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_PlayersProfile, _impl_.request_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_PlayersProfile, _impl_.account_profiles_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate, _impl_.caseid_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate, _impl_.suspectid_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate, _impl_.fractionid_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate, _impl_.rpt_aimbot_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate, _impl_.rpt_wallhack_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate, _impl_.rpt_speedhack_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate, _impl_.rpt_teamharm_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate, _impl_.reason_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment, _impl_.caseid_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment, _impl_.caseurl_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment, _impl_.verdict_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment, _impl_.timestamp_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment, _impl_.throttleseconds_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment, _impl_.suspectid_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment, _impl_.fractionid_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment, _impl_.numrounds_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment, _impl_.fractionrounds_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment, _impl_.streakconvictions_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment, _impl_.reason_),
  1,
  0,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus, _impl_.caseid_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus, _impl_.statusid_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CClientHeaderOverwatchEvidence, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CClientHeaderOverwatchEvidence, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CClientHeaderOverwatchEvidence, _impl_.accountid_),
  PROTOBUF_FIELD_OFFSET(::CClientHeaderOverwatchEvidence, _impl_.caseid_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_GC2ClientTextMsg, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_GC2ClientTextMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_GC2ClientTextMsg, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_GC2ClientTextMsg, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_GC2ClientTextMsg, _impl_.payload_),
  1,
  2,
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_Client2GCTextMsg, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_Client2GCTextMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_Client2GCTextMsg, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_Client2GCTextMsg, _impl_.args_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchEndRunRewardDrops, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchEndRunRewardDrops, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchEndRunRewardDrops, _impl_.serverinfo_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchEndRunRewardDrops, _impl_.match_end_quest_data_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CEconItemPreviewDataBlock_Sticker, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CEconItemPreviewDataBlock_Sticker, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CEconItemPreviewDataBlock_Sticker, _impl_.slot_),
  PROTOBUF_FIELD_OFFSET(::CEconItemPreviewDataBlock_Sticker, _impl_.sticker_id_),
  PROTOBUF_FIELD_OFFSET(::CEconItemPreviewDataBlock_Sticker, _impl_.wear_),
  PROTOBUF_FIELD_OFFSET(::CEconItemPreviewDataBlock_Sticker, _impl_.scale_),
  PROTOBUF_FIELD_OFFSET(::CEconItemPreviewDataBlock_Sticker, _impl_.rotation_),
  PROTOBUF_FIELD_OFFSET(::CEconItemPreviewDataBlock_Sticker, _impl_.tint_id_),
  PROTOBUF_FIELD_OFFSET(::CEconItemPreviewDataBlock_Sticker, _impl_.offset_x_),
  PROTOBUF_FIELD_OFFSET(::CEconItemPreviewDataBlock_Sticker, _impl_.offset_y_),
  PROTOBUF_FIELD_OFFSET(::CEconItemPreviewDataBlock_Sticker, _impl_.offset_z_),
  PROTOBUF_FIELD_OFFSET(::CEconItemPreviewDataBlock_Sticker, _impl_.pattern_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  PROTOBUF_FIELD_OFFSET(::CEconItemPreviewDataBlock, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CEconItemPreviewDataBlock, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CEconItemPreviewDataBlock, _impl_.accountid_),
  PROTOBUF_FIELD_OFFSET(::CEconItemPreviewDataBlock, _impl_.itemid_),
  PROTOBUF_FIELD_OFFSET(::CEconItemPreviewDataBlock, _impl_.defindex_),
  PROTOBUF_FIELD_OFFSET(::CEconItemPreviewDataBlock, _impl_.paintindex_),
  PROTOBUF_FIELD_OFFSET(::CEconItemPreviewDataBlock, _impl_.rarity_),
  PROTOBUF_FIELD_OFFSET(::CEconItemPreviewDataBlock, _impl_.quality_),
  PROTOBUF_FIELD_OFFSET(::CEconItemPreviewDataBlock, _impl_.paintwear_),
  PROTOBUF_FIELD_OFFSET(::CEconItemPreviewDataBlock, _impl_.paintseed_),
  PROTOBUF_FIELD_OFFSET(::CEconItemPreviewDataBlock, _impl_.killeaterscoretype_),
  PROTOBUF_FIELD_OFFSET(::CEconItemPreviewDataBlock, _impl_.killeatervalue_),
  PROTOBUF_FIELD_OFFSET(::CEconItemPreviewDataBlock, _impl_.customname_),
  PROTOBUF_FIELD_OFFSET(::CEconItemPreviewDataBlock, _impl_.stickers_),
  PROTOBUF_FIELD_OFFSET(::CEconItemPreviewDataBlock, _impl_.inventory_),
  PROTOBUF_FIELD_OFFSET(::CEconItemPreviewDataBlock, _impl_.origin_),
  PROTOBUF_FIELD_OFFSET(::CEconItemPreviewDataBlock, _impl_.questid_),
  PROTOBUF_FIELD_OFFSET(::CEconItemPreviewDataBlock, _impl_.dropreason_),
  PROTOBUF_FIELD_OFFSET(::CEconItemPreviewDataBlock, _impl_.musicindex_),
  PROTOBUF_FIELD_OFFSET(::CEconItemPreviewDataBlock, _impl_.entindex_),
  PROTOBUF_FIELD_OFFSET(::CEconItemPreviewDataBlock, _impl_.petindex_),
  PROTOBUF_FIELD_OFFSET(::CEconItemPreviewDataBlock, _impl_.keychains_),
  2,
  1,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  0,
  ~0u,
  11,
  12,
  13,
  14,
  15,
  16,
  17,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchEndRewardDropsNotification, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchEndRewardDropsNotification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchEndRewardDropsNotification, _impl_.iteminfo_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgItemAcknowledged, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgItemAcknowledged, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgItemAcknowledged, _impl_.iteminfo_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest, _impl_.param_s_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest, _impl_.param_a_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest, _impl_.param_d_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest, _impl_.param_m_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse, _impl_.iteminfo_),
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser, _impl_.accountid_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchListRequestRecentUserGames, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchListRequestRecentUserGames, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchListRequestRecentUserGames, _impl_.accountid_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchListRequestTournamentGames, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchListRequestTournamentGames, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchListRequestTournamentGames, _impl_.eventid_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchListRequestFullGameInfo, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchListRequestFullGameInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchListRequestFullGameInfo, _impl_.matchid_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchListRequestFullGameInfo, _impl_.outcomeid_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchListRequestFullGameInfo, _impl_.token_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CDataGCCStrike15_v2_MatchInfo, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDataGCCStrike15_v2_MatchInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CDataGCCStrike15_v2_MatchInfo, _impl_.matchid_),
  PROTOBUF_FIELD_OFFSET(::CDataGCCStrike15_v2_MatchInfo, _impl_.matchtime_),
  PROTOBUF_FIELD_OFFSET(::CDataGCCStrike15_v2_MatchInfo, _impl_.watchablematchinfo_),
  PROTOBUF_FIELD_OFFSET(::CDataGCCStrike15_v2_MatchInfo, _impl_.roundstats_legacy_),
  PROTOBUF_FIELD_OFFSET(::CDataGCCStrike15_v2_MatchInfo, _impl_.roundstatsall_),
  2,
  3,
  0,
  1,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CDataGCCStrike15_v2_TournamentGroupTeam, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDataGCCStrike15_v2_TournamentGroupTeam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CDataGCCStrike15_v2_TournamentGroupTeam, _impl_.team_id_),
  PROTOBUF_FIELD_OFFSET(::CDataGCCStrike15_v2_TournamentGroupTeam, _impl_.score_),
  PROTOBUF_FIELD_OFFSET(::CDataGCCStrike15_v2_TournamentGroupTeam, _impl_.correctpick_),
  0,
  1,
  2,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CDataGCCStrike15_v2_TournamentGroup_Picks, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CDataGCCStrike15_v2_TournamentGroup_Picks, _impl_.pickids_),
  PROTOBUF_FIELD_OFFSET(::CDataGCCStrike15_v2_TournamentGroup, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDataGCCStrike15_v2_TournamentGroup, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CDataGCCStrike15_v2_TournamentGroup, _impl_.groupid_),
  PROTOBUF_FIELD_OFFSET(::CDataGCCStrike15_v2_TournamentGroup, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::CDataGCCStrike15_v2_TournamentGroup, _impl_.desc_),
  PROTOBUF_FIELD_OFFSET(::CDataGCCStrike15_v2_TournamentGroup, _impl_.picks__deprecated_),
  PROTOBUF_FIELD_OFFSET(::CDataGCCStrike15_v2_TournamentGroup, _impl_.teams_),
  PROTOBUF_FIELD_OFFSET(::CDataGCCStrike15_v2_TournamentGroup, _impl_.stage_ids_),
  PROTOBUF_FIELD_OFFSET(::CDataGCCStrike15_v2_TournamentGroup, _impl_.picklockuntiltime_),
  PROTOBUF_FIELD_OFFSET(::CDataGCCStrike15_v2_TournamentGroup, _impl_.pickableteams_),
  PROTOBUF_FIELD_OFFSET(::CDataGCCStrike15_v2_TournamentGroup, _impl_.points_per_pick_),
  PROTOBUF_FIELD_OFFSET(::CDataGCCStrike15_v2_TournamentGroup, _impl_.picks_),
  2,
  0,
  1,
  3,
  ~0u,
  ~0u,
  4,
  5,
  6,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CDataGCCStrike15_v2_TournamentSection, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDataGCCStrike15_v2_TournamentSection, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CDataGCCStrike15_v2_TournamentSection, _impl_.sectionid_),
  PROTOBUF_FIELD_OFFSET(::CDataGCCStrike15_v2_TournamentSection, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::CDataGCCStrike15_v2_TournamentSection, _impl_.desc_),
  PROTOBUF_FIELD_OFFSET(::CDataGCCStrike15_v2_TournamentSection, _impl_.groups_),
  2,
  0,
  1,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CDataGCCStrike15_v2_TournamentInfo, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDataGCCStrike15_v2_TournamentInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CDataGCCStrike15_v2_TournamentInfo, _impl_.sections_),
  PROTOBUF_FIELD_OFFSET(::CDataGCCStrike15_v2_TournamentInfo, _impl_.tournament_event_),
  PROTOBUF_FIELD_OFFSET(::CDataGCCStrike15_v2_TournamentInfo, _impl_.tournament_teams_),
  ~0u,
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchList, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchList, _impl_.msgrequestid_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchList, _impl_.accountid_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchList, _impl_.servertime_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchList, _impl_.matches_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchList, _impl_.streams_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchList, _impl_.tournamentinfo_),
  1,
  2,
  3,
  ~0u,
  ~0u,
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchListTournamentOperatorMgmt, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchListTournamentOperatorMgmt, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchListTournamentOperatorMgmt, _impl_.eventid_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchListTournamentOperatorMgmt, _impl_.matches_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_MatchListTournamentOperatorMgmt, _impl_.accountid_),
  0,
  ~0u,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick, _impl_.sectionid_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick, _impl_.groupid_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick, _impl_.index_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick, _impl_.teamid_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick, _impl_.itemid_),
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_Predictions, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_Predictions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_Predictions, _impl_.event_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_Predictions, _impl_.group_match_team_picks_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_Fantasy_FantasySlot, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_Fantasy_FantasySlot, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_Fantasy_FantasySlot, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_Fantasy_FantasySlot, _impl_.pick_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_Fantasy_FantasySlot, _impl_.itemid_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_Fantasy_FantasyTeam, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_Fantasy_FantasyTeam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_Fantasy_FantasyTeam, _impl_.sectionid_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_Fantasy_FantasyTeam, _impl_.slots_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_Fantasy, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_Fantasy, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_Fantasy, _impl_.event_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_Fantasy, _impl_.teams_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CAttribute_String, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CAttribute_String, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CAttribute_String, _impl_.value_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgLegacySource1ClientWelcome_Location, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgLegacySource1ClientWelcome_Location, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgLegacySource1ClientWelcome_Location, _impl_.latitude_),
  PROTOBUF_FIELD_OFFSET(::CMsgLegacySource1ClientWelcome_Location, _impl_.longitude_),
  PROTOBUF_FIELD_OFFSET(::CMsgLegacySource1ClientWelcome_Location, _impl_.country_),
  1,
  2,
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgLegacySource1ClientWelcome, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgLegacySource1ClientWelcome, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgLegacySource1ClientWelcome, _impl_.version_),
  PROTOBUF_FIELD_OFFSET(::CMsgLegacySource1ClientWelcome, _impl_.game_data_),
  PROTOBUF_FIELD_OFFSET(::CMsgLegacySource1ClientWelcome, _impl_.outofdate_subscribed_caches_),
  PROTOBUF_FIELD_OFFSET(::CMsgLegacySource1ClientWelcome, _impl_.uptodate_subscribed_caches_),
  PROTOBUF_FIELD_OFFSET(::CMsgLegacySource1ClientWelcome, _impl_.location_),
  PROTOBUF_FIELD_OFFSET(::CMsgLegacySource1ClientWelcome, _impl_.game_data2_),
  PROTOBUF_FIELD_OFFSET(::CMsgLegacySource1ClientWelcome, _impl_.rtime32_gc_welcome_timestamp_),
  PROTOBUF_FIELD_OFFSET(::CMsgLegacySource1ClientWelcome, _impl_.currency_),
  PROTOBUF_FIELD_OFFSET(::CMsgLegacySource1ClientWelcome, _impl_.balance_),
  PROTOBUF_FIELD_OFFSET(::CMsgLegacySource1ClientWelcome, _impl_.balance_url_),
  PROTOBUF_FIELD_OFFSET(::CMsgLegacySource1ClientWelcome, _impl_.txn_country_code_),
  5,
  0,
  ~0u,
  ~0u,
  4,
  1,
  6,
  7,
  8,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::CMsgCStrike15Welcome, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgCStrike15Welcome, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgCStrike15Welcome, _impl_.store_item_hash_),
  PROTOBUF_FIELD_OFFSET(::CMsgCStrike15Welcome, _impl_.timeplayedconsecutively_),
  PROTOBUF_FIELD_OFFSET(::CMsgCStrike15Welcome, _impl_.time_first_played_),
  PROTOBUF_FIELD_OFFSET(::CMsgCStrike15Welcome, _impl_.last_time_played_),
  PROTOBUF_FIELD_OFFSET(::CMsgCStrike15Welcome, _impl_.last_ip_address_),
  PROTOBUF_FIELD_OFFSET(::CMsgCStrike15Welcome, _impl_.gscookieid_),
  PROTOBUF_FIELD_OFFSET(::CMsgCStrike15Welcome, _impl_.uniqueid_),
  0,
  1,
  2,
  3,
  6,
  4,
  5,
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientVarValueNotificationInfo, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientVarValueNotificationInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientVarValueNotificationInfo, _impl_.value_name_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientVarValueNotificationInfo, _impl_.value_int_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientVarValueNotificationInfo, _impl_.server_addr_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientVarValueNotificationInfo, _impl_.server_port_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientVarValueNotificationInfo, _impl_.choked_blocks_),
  0,
  1,
  2,
  3,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_ServerVarValueNotificationInfo, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_ServerVarValueNotificationInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_ServerVarValueNotificationInfo, _impl_.accountid_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_ServerVarValueNotificationInfo, _impl_.viewangles_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_ServerVarValueNotificationInfo, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_ServerVarValueNotificationInfo, _impl_.userdata_),
  0,
  ~0u,
  1,
  ~0u,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_GiftsLeaderboardRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_GiftsLeaderboardResponse_GiftLeaderboardEntry, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_GiftsLeaderboardResponse_GiftLeaderboardEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_GiftsLeaderboardResponse_GiftLeaderboardEntry, _impl_.accountid_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_GiftsLeaderboardResponse_GiftLeaderboardEntry, _impl_.gifts_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_GiftsLeaderboardResponse, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_GiftsLeaderboardResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_GiftsLeaderboardResponse, _impl_.servertime_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_GiftsLeaderboardResponse, _impl_.time_period_seconds_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_GiftsLeaderboardResponse, _impl_.total_gifts_given_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_GiftsLeaderboardResponse, _impl_.total_givers_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_GiftsLeaderboardResponse, _impl_.entries_),
  0,
  1,
  2,
  3,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientSubmitSurveyVote, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientSubmitSurveyVote, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientSubmitSurveyVote, _impl_.survey_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientSubmitSurveyVote, _impl_.vote_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_Server2GCClientValidate, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_Server2GCClientValidate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_Server2GCClientValidate, _impl_.accountid_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_GC2ClientTournamentInfo, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_GC2ClientTournamentInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_GC2ClientTournamentInfo, _impl_.eventid_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_GC2ClientTournamentInfo, _impl_.stageid_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_GC2ClientTournamentInfo, _impl_.game_type_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_GC2ClientTournamentInfo, _impl_.teamids_),
  0,
  1,
  2,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CSOEconCoupon, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CSOEconCoupon, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CSOEconCoupon, _impl_.entryid_),
  PROTOBUF_FIELD_OFFSET(::CSOEconCoupon, _impl_.defidx_),
  PROTOBUF_FIELD_OFFSET(::CSOEconCoupon, _impl_.expiration_date_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CSOAccountItemPersonalStore, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CSOAccountItemPersonalStore, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CSOAccountItemPersonalStore, _impl_.generation_time_),
  PROTOBUF_FIELD_OFFSET(::CSOAccountItemPersonalStore, _impl_.redeemable_balance_),
  PROTOBUF_FIELD_OFFSET(::CSOAccountItemPersonalStore, _impl_.items_),
  0,
  1,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CSOAccountXpShop, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CSOAccountXpShop, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CSOAccountXpShop, _impl_.generation_time_),
  PROTOBUF_FIELD_OFFSET(::CSOAccountXpShop, _impl_.redeemable_balance_),
  PROTOBUF_FIELD_OFFSET(::CSOAccountXpShop, _impl_.xp_tracks_),
  0,
  1,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CSOAccountKeychainRemoveToolCharges, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CSOAccountKeychainRemoveToolCharges, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CSOAccountKeychainRemoveToolCharges, _impl_.charges_),
  0,
  PROTOBUF_FIELD_OFFSET(::CSOQuestProgress, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CSOQuestProgress, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CSOQuestProgress, _impl_.questid_),
  PROTOBUF_FIELD_OFFSET(::CSOQuestProgress, _impl_.points_remaining_),
  PROTOBUF_FIELD_OFFSET(::CSOQuestProgress, _impl_.bonus_points_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CSOAccountSeasonalOperation, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CSOAccountSeasonalOperation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CSOAccountSeasonalOperation, _impl_.season_value_),
  PROTOBUF_FIELD_OFFSET(::CSOAccountSeasonalOperation, _impl_.tier_unlocked_),
  PROTOBUF_FIELD_OFFSET(::CSOAccountSeasonalOperation, _impl_.premium_tiers_),
  PROTOBUF_FIELD_OFFSET(::CSOAccountSeasonalOperation, _impl_.mission_id_),
  PROTOBUF_FIELD_OFFSET(::CSOAccountSeasonalOperation, _impl_.missions_completed_),
  PROTOBUF_FIELD_OFFSET(::CSOAccountSeasonalOperation, _impl_.redeemable_balance_),
  PROTOBUF_FIELD_OFFSET(::CSOAccountSeasonalOperation, _impl_.season_pass_time_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  PROTOBUF_FIELD_OFFSET(::CSOAccountRecurringSubscription, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CSOAccountRecurringSubscription, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CSOAccountRecurringSubscription, _impl_.time_next_cycle_),
  PROTOBUF_FIELD_OFFSET(::CSOAccountRecurringSubscription, _impl_.time_initiated_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CSOPersonaDataPublic, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CSOPersonaDataPublic, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CSOPersonaDataPublic, _impl_.player_level_),
  PROTOBUF_FIELD_OFFSET(::CSOPersonaDataPublic, _impl_.commendation_),
  PROTOBUF_FIELD_OFFSET(::CSOPersonaDataPublic, _impl_.elevated_state_),
  PROTOBUF_FIELD_OFFSET(::CSOPersonaDataPublic, _impl_.xp_trail_timestamp_refresh_),
  PROTOBUF_FIELD_OFFSET(::CSOPersonaDataPublic, _impl_.xp_trail_level_),
  1,
  0,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_GC2ClientNotifyXPShop, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_GC2ClientNotifyXPShop, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_GC2ClientNotifyXPShop, _impl_.prematch_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_GC2ClientNotifyXPShop, _impl_.postmatch_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_GC2ClientNotifyXPShop, _impl_.current_xp_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_GC2ClientNotifyXPShop, _impl_.current_level_),
  0,
  1,
  2,
  3,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_Client2GcAckXPShopTracks, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgGC_GlobalGame_Subscribe, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGC_GlobalGame_Subscribe, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgGC_GlobalGame_Subscribe, _impl_.ticket_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgGC_GlobalGame_Unsubscribe, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGC_GlobalGame_Unsubscribe, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgGC_GlobalGame_Unsubscribe, _impl_.timeleft_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgGC_GlobalGame_Play, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGC_GlobalGame_Play, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgGC_GlobalGame_Play, _impl_.ticket_),
  PROTOBUF_FIELD_OFFSET(::CMsgGC_GlobalGame_Play, _impl_.gametimems_),
  PROTOBUF_FIELD_OFFSET(::CMsgGC_GlobalGame_Play, _impl_.msperpoint_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_AcknowledgePenalty, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_AcknowledgePenalty, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_AcknowledgePenalty, _impl_.acknowledged_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin, _impl_.defindex_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin, _impl_.upgradeid_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin, _impl_.hours_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin, _impl_.prestigetime_),
  1,
  0,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_Client2GCStreamUnlock, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_Client2GCStreamUnlock, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_Client2GCStreamUnlock, _impl_.ticket_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_Client2GCStreamUnlock, _impl_.os_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientToGCRequestElevate, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientToGCRequestElevate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientToGCRequestElevate, _impl_.stage_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientToGCChat, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientToGCChat, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientToGCChat, _impl_.match_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientToGCChat, _impl_.text_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_GCToClientChat, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_GCToClientChat, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_GCToClientChat, _impl_.account_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_GCToClientChat, _impl_.text_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientAuthKeyCode, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientAuthKeyCode, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientAuthKeyCode, _impl_.eventid_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientAuthKeyCode, _impl_.code_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_GotvSyncPacket, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_GotvSyncPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_GotvSyncPacket, _impl_.data_),
  0,
  PROTOBUF_FIELD_OFFSET(::PlayerDecalDigitalSignature, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::PlayerDecalDigitalSignature, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::PlayerDecalDigitalSignature, _impl_.signature_),
  PROTOBUF_FIELD_OFFSET(::PlayerDecalDigitalSignature, _impl_.accountid_),
  PROTOBUF_FIELD_OFFSET(::PlayerDecalDigitalSignature, _impl_.rtime_),
  PROTOBUF_FIELD_OFFSET(::PlayerDecalDigitalSignature, _impl_.endpos_),
  PROTOBUF_FIELD_OFFSET(::PlayerDecalDigitalSignature, _impl_.startpos_),
  PROTOBUF_FIELD_OFFSET(::PlayerDecalDigitalSignature, _impl_.left_),
  PROTOBUF_FIELD_OFFSET(::PlayerDecalDigitalSignature, _impl_.tx_defidx_),
  PROTOBUF_FIELD_OFFSET(::PlayerDecalDigitalSignature, _impl_.entindex_),
  PROTOBUF_FIELD_OFFSET(::PlayerDecalDigitalSignature, _impl_.hitbox_),
  PROTOBUF_FIELD_OFFSET(::PlayerDecalDigitalSignature, _impl_.creationtime_),
  PROTOBUF_FIELD_OFFSET(::PlayerDecalDigitalSignature, _impl_.equipslot_),
  PROTOBUF_FIELD_OFFSET(::PlayerDecalDigitalSignature, _impl_.trace_id_),
  PROTOBUF_FIELD_OFFSET(::PlayerDecalDigitalSignature, _impl_.normal_),
  PROTOBUF_FIELD_OFFSET(::PlayerDecalDigitalSignature, _impl_.tint_id_),
  0,
  1,
  2,
  ~0u,
  ~0u,
  ~0u,
  3,
  4,
  5,
  6,
  7,
  8,
  ~0u,
  9,
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientPlayerDecalSign, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientPlayerDecalSign, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientPlayerDecalSign, _impl_.data_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientPlayerDecalSign, _impl_.itemid_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_BetaEnrollment, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_BetaEnrollment, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_BetaEnrollment, _impl_.eresult_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientLogonFatalError, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientLogonFatalError, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientLogonFatalError, _impl_.errorcode_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientLogonFatalError, _impl_.message_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientLogonFatalError, _impl_.country_),
  2,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientPollState, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientPollState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientPollState, _impl_.pollid_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientPollState, _impl_.names_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientPollState, _impl_.values_),
  0,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_Party_Register, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_Party_Register, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_Party_Register, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_Party_Register, _impl_.ver_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_Party_Register, _impl_.apr_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_Party_Register, _impl_.ark_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_Party_Register, _impl_.nby_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_Party_Register, _impl_.grp_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_Party_Register, _impl_.slots_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_Party_Register, _impl_.launcher_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_Party_Register, _impl_.game_type_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_Party_Search, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_Party_Search, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_Party_Search, _impl_.ver_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_Party_Search, _impl_.apr_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_Party_Search, _impl_.ark_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_Party_Search, _impl_.grps_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_Party_Search, _impl_.launcher_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_Party_Search, _impl_.game_type_),
  0,
  1,
  2,
  ~0u,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_Party_SearchResults_Entry, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_Party_SearchResults_Entry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_Party_SearchResults_Entry, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_Party_SearchResults_Entry, _impl_.grp_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_Party_SearchResults_Entry, _impl_.game_type_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_Party_SearchResults_Entry, _impl_.apr_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_Party_SearchResults_Entry, _impl_.ark_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_Party_SearchResults_Entry, _impl_.loc_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_Party_SearchResults_Entry, _impl_.accountid_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_Party_SearchResults, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_Party_SearchResults, _impl_.entries_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_Party_Invite, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_Party_Invite, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_Party_Invite, _impl_.accountid_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_Party_Invite, _impl_.lobbyid_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_Account_RequestCoPlays_Player, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_Account_RequestCoPlays_Player, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_Account_RequestCoPlays_Player, _impl_.accountid_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_Account_RequestCoPlays_Player, _impl_.rtcoplay_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_Account_RequestCoPlays_Player, _impl_.online_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_Account_RequestCoPlays, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_Account_RequestCoPlays, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_Account_RequestCoPlays, _impl_.players_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_Account_RequestCoPlays, _impl_.servertime_),
  ~0u,
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientToGCRequestTicket, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientToGCRequestTicket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientToGCRequestTicket, _impl_.authorized_steam_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientToGCRequestTicket, _impl_.authorized_public_ip_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientToGCRequestTicket, _impl_.gameserver_steam_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientToGCRequestTicket, _impl_.gameserver_sdr_routing_),
  1,
  3,
  2,
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgGCToClientSteamDatagramTicket, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToClientSteamDatagramTicket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgGCToClientSteamDatagramTicket, _impl_.serialized_ticket_),
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientRequestOffers, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientRequestSouvenir, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientRequestSouvenir, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientRequestSouvenir, _impl_.itemid_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientRequestSouvenir, _impl_.matchid_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientRequestSouvenir, _impl_.eventid_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientAccountBalance, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientAccountBalance, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientAccountBalance, _impl_.amount_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientAccountBalance, _impl_.url_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientPartyJoinRelay, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientPartyJoinRelay, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientPartyJoinRelay, _impl_.accountid_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientPartyJoinRelay, _impl_.lobbyid_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientPartyWarning_Entry, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientPartyWarning_Entry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientPartyWarning_Entry, _impl_.accountid_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientPartyWarning_Entry, _impl_.warntype_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientPartyWarning, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientPartyWarning, _impl_.entries_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_SetEventFavorite, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_SetEventFavorite, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_SetEventFavorite, _impl_.eventid_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_SetEventFavorite, _impl_.is_favorite_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_GetEventFavorites_Request, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_GetEventFavorites_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_GetEventFavorites_Request, _impl_.all_events_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_GetEventFavorites_Response, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_GetEventFavorites_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_GetEventFavorites_Response, _impl_.all_events_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_GetEventFavorites_Response, _impl_.json_favorites_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_GetEventFavorites_Response, _impl_.json_featured_),
  2,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientPerfReport_Entry, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientPerfReport_Entry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientPerfReport_Entry, _impl_.perfcounter_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientPerfReport_Entry, _impl_.length_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientPerfReport_Entry, _impl_.reference_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientPerfReport_Entry, _impl_.actual_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientPerfReport_Entry, _impl_.sourceid_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientPerfReport_Entry, _impl_.status_),
  2,
  3,
  0,
  1,
  4,
  5,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientPerfReport, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientPerfReport, _impl_.entries_),
  PROTOBUF_FIELD_OFFSET(::CVDiagnostic, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CVDiagnostic, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CVDiagnostic, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::CVDiagnostic, _impl_.extended_),
  PROTOBUF_FIELD_OFFSET(::CVDiagnostic, _impl_.value_),
  PROTOBUF_FIELD_OFFSET(::CVDiagnostic, _impl_.string_value_),
  1,
  2,
  3,
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientReportValidation, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientReportValidation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientReportValidation, _impl_.file_report_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientReportValidation, _impl_.command_line_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientReportValidation, _impl_.total_files_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientReportValidation, _impl_.internal_error_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientReportValidation, _impl_.trust_time_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientReportValidation, _impl_.count_pending_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientReportValidation, _impl_.count_completed_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientReportValidation, _impl_.process_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientReportValidation, _impl_.osversion_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientReportValidation, _impl_.clientreportversion_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientReportValidation, _impl_.status_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientReportValidation, _impl_.diagnostic1_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientReportValidation, _impl_.diagnostic2_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientReportValidation, _impl_.diagnostic3_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientReportValidation, _impl_.last_launch_data_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientReportValidation, _impl_.report_count_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientReportValidation, _impl_.client_time_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientReportValidation, _impl_.diagnostic4_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientReportValidation, _impl_.diagnostic5_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_ClientReportValidation, _impl_.diagnostics_),
  0,
  1,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  2,
  18,
  15,
  16,
  17,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_GC2ClientRefuseSecureMode, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_GC2ClientRefuseSecureMode, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_GC2ClientRefuseSecureMode, _impl_.file_report_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_GC2ClientRefuseSecureMode, _impl_.offer_insecure_mode_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_GC2ClientRefuseSecureMode, _impl_.offer_secure_mode_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_GC2ClientRefuseSecureMode, _impl_.show_unsigned_ui_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_GC2ClientRefuseSecureMode, _impl_.kick_user_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_GC2ClientRefuseSecureMode, _impl_.show_trusted_ui_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_GC2ClientRefuseSecureMode, _impl_.show_warning_not_trusted_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_GC2ClientRefuseSecureMode, _impl_.show_warning_not_trusted_2_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_GC2ClientRefuseSecureMode, _impl_.files_prevented_trusted_),
  0,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_GC2ClientRequestValidation, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_GC2ClientRequestValidation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_GC2ClientRequestValidation, _impl_.full_report_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_GC2ClientRequestValidation, _impl_.module_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_GC2ClientInitSystem, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_GC2ClientInitSystem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_GC2ClientInitSystem, _impl_.load_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_GC2ClientInitSystem, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_GC2ClientInitSystem, _impl_.outputname_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_GC2ClientInitSystem, _impl_.key_data_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_GC2ClientInitSystem, _impl_.sha_hash_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_GC2ClientInitSystem, _impl_.cookie_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_GC2ClientInitSystem, _impl_.manifest_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_GC2ClientInitSystem, _impl_.system_package_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_GC2ClientInitSystem, _impl_.load_system_),
  6,
  0,
  1,
  2,
  3,
  8,
  4,
  5,
  7,
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_GC2ClientInitSystem_Response, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_GC2ClientInitSystem_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_GC2ClientInitSystem_Response, _impl_.success_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_GC2ClientInitSystem_Response, _impl_.diagnostic_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_GC2ClientInitSystem_Response, _impl_.sha_hash_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_GC2ClientInitSystem_Response, _impl_.response_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_GC2ClientInitSystem_Response, _impl_.error_code1_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_GC2ClientInitSystem_Response, _impl_.error_code2_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_GC2ClientInitSystem_Response, _impl_.handle_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_GC2ClientInitSystem_Response, _impl_.einit_result_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_GC2ClientInitSystem_Response, _impl_.aux_system1_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_GC2ClientInitSystem_Response, _impl_.aux_system2_),
  2,
  0,
  1,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_SetPlayerLeaderboardSafeName, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_SetPlayerLeaderboardSafeName, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgGCCStrike15_v2_SetPlayerLeaderboardSafeName, _impl_.leaderboard_safe_name_),
  0,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 9, -1, sizeof(::GameServerPing)},
  { 12, 20, -1, sizeof(::DataCenterPing)},
  { 22, 31, -1, sizeof(::DetailedSearchStatistic)},
  { 34, 47, -1, sizeof(::TournamentPlayer)},
  { 54, 65, -1, sizeof(::TournamentTeam)},
  { 70, 85, -1, sizeof(::TournamentEvent)},
  { 94, 116, -1, sizeof(::GlobalStatistics)},
  { 132, 140, -1, sizeof(::OperationalStatisticDescription)},
  { 142, 150, -1, sizeof(::OperationalStatisticElement)},
  { 152, 161, -1, sizeof(::OperationalStatisticsPacket)},
  { 164, 174, -1, sizeof(::OperationalVarValue)},
  { 178, 187, -1, sizeof(::PlayerRankingInfo_PerMapRank)},
  { 190, 209, -1, sizeof(::PlayerRankingInfo)},
  { 222, 231, -1, sizeof(::PlayerCommendationInfo)},
  { 234, 242, -1, sizeof(::PlayerMedalsInfo)},
  { 244, 254, -1, sizeof(::AccountActivity)},
  { 258, 268, -1, sizeof(::TournamentMatchSetup)},
  { 272, 298, -1, sizeof(::ServerHltvInfo)},
  { 318, 330, -1, sizeof(::IpAddressMask)},
  { 336, 345, -1, sizeof(::CMsgCsgoSteamUserStatChange)},
  { 348, 356, -1, sizeof(::XpProgressData)},
  { 358, 367, -1, sizeof(::MatchEndItemUpdates)},
  { 370, 378, -1, sizeof(::ScoreLeaderboardData_Entry)},
  { 380, 388, -1, sizeof(::ScoreLeaderboardData_AccountEntries)},
  { 390, 401, -1, sizeof(::ScoreLeaderboardData)},
  { 406, 415, -1, sizeof(::PlayerQuestData_QuestItemData)},
  { 418, 432, -1, sizeof(::PlayerQuestData)},
  { 440, 474, -1, sizeof(::DeepPlayerStatsEntry)},
  { 502, 522, -1, sizeof(::DeepPlayerMatchEvent)},
  { 536, 547, -1, sizeof(::CMsgGC_ServerQuestUpdateData)},
  { 552, 562, -1, sizeof(::CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm)},
  { 566, 574, -1, sizeof(::CMsgGCCStrike15_v2_GC2ServerReservationUpdate)},
  { 576, 590, -1, sizeof(::CMsgGCCStrike15_v2_MatchmakingStart)},
  { 598, 605, -1, sizeof(::CMsgGCCStrike15_v2_MatchmakingStop)},
  { 606, 616, -1, sizeof(::CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_Note)},
  { 620, 635, -1, sizeof(::CMsgGCCStrike15_v2_MatchmakingClient2ServerPing)},
  { 644, 666, -1, sizeof(::CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate)},
  { 682, 690, -1, sizeof(::CDataGCCStrike15_v2_TournamentMatchDraft_Entry)},
  { 692, 718, -1, sizeof(::CDataGCCStrike15_v2_TournamentMatchDraft)},
  { 738, 747, -1, sizeof(::CPreMatchInfoData_TeamStats)},
  { 750, 760, -1, sizeof(::CPreMatchInfoData)},
  { 764, 791, -1, sizeof(::CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve)},
  { 812, 837, -1, sizeof(::CMsgGCCStrike15_v2_MatchmakingServerReservationResponse)},
  { 856, 871, -1, sizeof(::CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve)},
  { 880, 887, -1, sizeof(::CMsgGCCStrike15_v2_MatchmakingServerRoundStats_DropInfo)},
  { 888, 926, -1, sizeof(::CMsgGCCStrike15_v2_MatchmakingServerRoundStats)},
  { 958, -1, -1, sizeof(::CMsgGCCStrike15_v2_MatchmakingClient2GCHello)},
  { 964, 990, -1, sizeof(::CMsgGCCStrike15_v2_MatchmakingGC2ClientHello)},
  { 1010, 1018, -1, sizeof(::CMsgGCCStrike15_v2_AccountPrivacySettings_Setting)},
  { 1020, -1, -1, sizeof(::CMsgGCCStrike15_v2_AccountPrivacySettings)},
  { 1027, 1037, -1, sizeof(::CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon)},
  { 1041, -1, -1, sizeof(::CMsgGCCStrike15_v2_ClientGCRankUpdate)},
  { 1048, 1055, -1, sizeof(::CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate)},
  { 1056, 1066, -1, sizeof(::CMsgGCCStrike15_v2_ServerNotificationForUserPenalty)},
  { 1070, 1085, -1, sizeof(::CMsgGCCStrike15_v2_ClientReportPlayer)},
  { 1094, 1104, -1, sizeof(::CMsgGCCStrike15_v2_ClientCommendPlayer)},
  { 1108, 1120, -1, sizeof(::CMsgGCCStrike15_v2_ClientReportServer)},
  { 1126, 1138, -1, sizeof(::CMsgGCCStrike15_v2_ClientReportResponse)},
  { 1144, 1156, -1, sizeof(::CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends)},
  { 1162, 1181, -1, sizeof(::WatchableMatchInfo)},
  { 1194, 1206, -1, sizeof(::CMsgGCCStrike15_v2_ClientRequestJoinFriendData)},
  { 1212, 1225, -1, sizeof(::CMsgGCCStrike15_v2_ClientRequestJoinServerData)},
  { 1232, 1240, -1, sizeof(::CMsgGCCstrike15_v2_ClientRequestNewMission)},
  { 1242, 1252, -1, sizeof(::CMsgGCCstrike15_v2_ClientRedeemMissionReward)},
  { 1256, 1265, -1, sizeof(::CMsgGCCstrike15_v2_ClientRedeemFreeReward)},
  { 1268, 1284, -1, sizeof(::CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded)},
  { 1294, 1301, -1, sizeof(::CMsgGCCStrike15_v2_ClientNetworkConfig)},
  { 1302, 1311, -1, sizeof(::CMsgGCCStrike15_ClientDeepStats_DeepStatsRange)},
  { 1314, 1322, -1, sizeof(::CMsgGCCStrike15_ClientDeepStats_DeepStatsMatch)},
  { 1324, 1333, -1, sizeof(::CMsgGCCStrike15_ClientDeepStats)},
  { 1336, 1346, -1, sizeof(::CMsgGCCStrike15_v2_WatchInfoUsers)},
  { 1350, 1360, -1, sizeof(::CMsgGCCStrike15_v2_ClientRequestPlayersProfile)},
  { 1364, 1372, -1, sizeof(::CMsgGCCStrike15_v2_PlayersProfile)},
  { 1374, 1388, -1, sizeof(::CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate)},
  { 1396, 1413, -1, sizeof(::CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment)},
  { 1424, 1432, -1, sizeof(::CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus)},
  { 1434, 1442, -1, sizeof(::CClientHeaderOverwatchEvidence)},
  { 1444, 1453, -1, sizeof(::CMsgGCCStrike15_v2_GC2ClientTextMsg)},
  { 1456, 1464, -1, sizeof(::CMsgGCCStrike15_v2_Client2GCTextMsg)},
  { 1466, 1474, -1, sizeof(::CMsgGCCStrike15_v2_MatchEndRunRewardDrops)},
  { 1476, 1492, -1, sizeof(::CEconItemPreviewDataBlock_Sticker)},
  { 1502, 1528, -1, sizeof(::CEconItemPreviewDataBlock)},
  { 1548, 1555, -1, sizeof(::CMsgGCCStrike15_v2_MatchEndRewardDropsNotification)},
  { 1556, 1563, -1, sizeof(::CMsgItemAcknowledged)},
  { 1564, 1574, -1, sizeof(::CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest)},
  { 1578, 1585, -1, sizeof(::CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse)},
  { 1586, -1, -1, sizeof(::CMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames)},
  { 1592, 1599, -1, sizeof(::CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser)},
  { 1600, 1607, -1, sizeof(::CMsgGCCStrike15_v2_MatchListRequestRecentUserGames)},
  { 1608, 1615, -1, sizeof(::CMsgGCCStrike15_v2_MatchListRequestTournamentGames)},
  { 1616, 1625, -1, sizeof(::CMsgGCCStrike15_v2_MatchListRequestFullGameInfo)},
  { 1628, 1639, -1, sizeof(::CDataGCCStrike15_v2_MatchInfo)},
  { 1644, 1653, -1, sizeof(::CDataGCCStrike15_v2_TournamentGroupTeam)},
  { 1656, -1, -1, sizeof(::CDataGCCStrike15_v2_TournamentGroup_Picks)},
  { 1663, 1679, -1, sizeof(::CDataGCCStrike15_v2_TournamentGroup)},
  { 1689, 1699, -1, sizeof(::CDataGCCStrike15_v2_TournamentSection)},
  { 1703, 1712, -1, sizeof(::CDataGCCStrike15_v2_TournamentInfo)},
  { 1715, 1727, -1, sizeof(::CMsgGCCStrike15_v2_MatchList)},
  { 1733, 1742, -1, sizeof(::CMsgGCCStrike15_v2_MatchListTournamentOperatorMgmt)},
  { 1745, 1756, -1, sizeof(::CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick)},
  { 1761, 1769, -1, sizeof(::CMsgGCCStrike15_v2_Predictions)},
  { 1771, 1780, -1, sizeof(::CMsgGCCStrike15_v2_Fantasy_FantasySlot)},
  { 1783, 1791, -1, sizeof(::CMsgGCCStrike15_v2_Fantasy_FantasyTeam)},
  { 1793, 1801, -1, sizeof(::CMsgGCCStrike15_v2_Fantasy)},
  { 1803, 1810, -1, sizeof(::CAttribute_String)},
  { 1811, 1820, -1, sizeof(::CMsgLegacySource1ClientWelcome_Location)},
  { 1823, 1840, -1, sizeof(::CMsgLegacySource1ClientWelcome)},
  { 1851, 1864, -1, sizeof(::CMsgCStrike15Welcome)},
  { 1871, 1882, -1, sizeof(::CMsgGCCStrike15_v2_ClientVarValueNotificationInfo)},
  { 1887, 1897, -1, sizeof(::CMsgGCCStrike15_v2_ServerVarValueNotificationInfo)},
  { 1901, -1, -1, sizeof(::CMsgGCCStrike15_v2_GiftsLeaderboardRequest)},
  { 1907, 1915, -1, sizeof(::CMsgGCCStrike15_v2_GiftsLeaderboardResponse_GiftLeaderboardEntry)},
  { 1917, 1928, -1, sizeof(::CMsgGCCStrike15_v2_GiftsLeaderboardResponse)},
  { 1933, 1941, -1, sizeof(::CMsgGCCStrike15_v2_ClientSubmitSurveyVote)},
  { 1943, 1950, -1, sizeof(::CMsgGCCStrike15_v2_Server2GCClientValidate)},
  { 1951, 1961, -1, sizeof(::CMsgGCCStrike15_v2_GC2ClientTournamentInfo)},
  { 1965, 1974, -1, sizeof(::CSOEconCoupon)},
  { 1977, 1986, -1, sizeof(::CSOAccountItemPersonalStore)},
  { 1989, 1998, -1, sizeof(::CSOAccountXpShop)},
  { 2001, 2008, -1, sizeof(::CSOAccountKeychainRemoveToolCharges)},
  { 2009, 2018, -1, sizeof(::CSOQuestProgress)},
  { 2021, 2034, -1, sizeof(::CSOAccountSeasonalOperation)},
  { 2041, 2049, -1, sizeof(::CSOAccountRecurringSubscription)},
  { 2051, 2062, -1, sizeof(::CSOPersonaDataPublic)},
  { 2067, 2077, -1, sizeof(::CMsgGCCStrike15_v2_GC2ClientNotifyXPShop)},
  { 2081, -1, -1, sizeof(::CMsgGCCStrike15_v2_Client2GcAckXPShopTracks)},
  { 2087, 2094, -1, sizeof(::CMsgGC_GlobalGame_Subscribe)},
  { 2095, 2102, -1, sizeof(::CMsgGC_GlobalGame_Unsubscribe)},
  { 2103, 2112, -1, sizeof(::CMsgGC_GlobalGame_Play)},
  { 2115, 2122, -1, sizeof(::CMsgGCCStrike15_v2_AcknowledgePenalty)},
  { 2123, 2133, -1, sizeof(::CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin)},
  { 2137, 2145, -1, sizeof(::CMsgGCCStrike15_v2_Client2GCStreamUnlock)},
  { 2147, 2154, -1, sizeof(::CMsgGCCStrike15_v2_ClientToGCRequestElevate)},
  { 2155, 2163, -1, sizeof(::CMsgGCCStrike15_v2_ClientToGCChat)},
  { 2165, 2173, -1, sizeof(::CMsgGCCStrike15_v2_GCToClientChat)},
  { 2175, 2183, -1, sizeof(::CMsgGCCStrike15_v2_ClientAuthKeyCode)},
  { 2185, 2192, -1, sizeof(::CMsgGCCStrike15_GotvSyncPacket)},
  { 2193, 2213, -1, sizeof(::PlayerDecalDigitalSignature)},
  { 2227, 2235, -1, sizeof(::CMsgGCCStrike15_v2_ClientPlayerDecalSign)},
  { 2237, 2244, -1, sizeof(::CMsgGCCStrike15_v2_BetaEnrollment)},
  { 2245, 2254, -1, sizeof(::CMsgGCCStrike15_v2_ClientLogonFatalError)},
  { 2257, 2266, -1, sizeof(::CMsgGCCStrike15_v2_ClientPollState)},
  { 2269, 2284, -1, sizeof(::CMsgGCCStrike15_v2_Party_Register)},
  { 2293, 2305, -1, sizeof(::CMsgGCCStrike15_v2_Party_Search)},
  { 2311, 2324, -1, sizeof(::CMsgGCCStrike15_v2_Party_SearchResults_Entry)},
  { 2331, -1, -1, sizeof(::CMsgGCCStrike15_v2_Party_SearchResults)},
  { 2338, 2346, -1, sizeof(::CMsgGCCStrike15_v2_Party_Invite)},
  { 2348, 2357, -1, sizeof(::CMsgGCCStrike15_v2_Account_RequestCoPlays_Player)},
  { 2360, 2368, -1, sizeof(::CMsgGCCStrike15_v2_Account_RequestCoPlays)},
  { 2370, 2380, -1, sizeof(::CMsgGCCStrike15_v2_ClientToGCRequestTicket)},
  { 2384, 2391, -1, sizeof(::CMsgGCToClientSteamDatagramTicket)},
  { 2392, -1, -1, sizeof(::CMsgGCCStrike15_v2_ClientRequestOffers)},
  { 2398, 2407, -1, sizeof(::CMsgGCCStrike15_v2_ClientRequestSouvenir)},
  { 2410, 2418, -1, sizeof(::CMsgGCCStrike15_v2_ClientAccountBalance)},
  { 2420, 2428, -1, sizeof(::CMsgGCCStrike15_v2_ClientPartyJoinRelay)},
  { 2430, 2438, -1, sizeof(::CMsgGCCStrike15_v2_ClientPartyWarning_Entry)},
  { 2440, -1, -1, sizeof(::CMsgGCCStrike15_v2_ClientPartyWarning)},
  { 2447, 2455, -1, sizeof(::CMsgGCCStrike15_v2_SetEventFavorite)},
  { 2457, 2464, -1, sizeof(::CMsgGCCStrike15_v2_GetEventFavorites_Request)},
  { 2465, 2474, -1, sizeof(::CMsgGCCStrike15_v2_GetEventFavorites_Response)},
  { 2477, 2489, -1, sizeof(::CMsgGCCStrike15_v2_ClientPerfReport_Entry)},
  { 2495, -1, -1, sizeof(::CMsgGCCStrike15_v2_ClientPerfReport)},
  { 2502, 2512, -1, sizeof(::CVDiagnostic)},
  { 2516, 2542, -1, sizeof(::CMsgGCCStrike15_v2_ClientReportValidation)},
  { 2562, 2577, -1, sizeof(::CMsgGCCStrike15_v2_GC2ClientRefuseSecureMode)},
  { 2586, 2594, -1, sizeof(::CMsgGCCStrike15_v2_GC2ClientRequestValidation)},
  { 2596, 2611, -1, sizeof(::CMsgGCCStrike15_v2_GC2ClientInitSystem)},
  { 2620, 2636, -1, sizeof(::CMsgGCCStrike15_v2_GC2ClientInitSystem_Response)},
  { 2646, 2653, -1, sizeof(::CMsgGCCStrike15_v2_SetPlayerLeaderboardSafeName)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::_GameServerPing_default_instance_._instance,
  &::_DataCenterPing_default_instance_._instance,
  &::_DetailedSearchStatistic_default_instance_._instance,
  &::_TournamentPlayer_default_instance_._instance,
  &::_TournamentTeam_default_instance_._instance,
  &::_TournamentEvent_default_instance_._instance,
  &::_GlobalStatistics_default_instance_._instance,
  &::_OperationalStatisticDescription_default_instance_._instance,
  &::_OperationalStatisticElement_default_instance_._instance,
  &::_OperationalStatisticsPacket_default_instance_._instance,
  &::_OperationalVarValue_default_instance_._instance,
  &::_PlayerRankingInfo_PerMapRank_default_instance_._instance,
  &::_PlayerRankingInfo_default_instance_._instance,
  &::_PlayerCommendationInfo_default_instance_._instance,
  &::_PlayerMedalsInfo_default_instance_._instance,
  &::_AccountActivity_default_instance_._instance,
  &::_TournamentMatchSetup_default_instance_._instance,
  &::_ServerHltvInfo_default_instance_._instance,
  &::_IpAddressMask_default_instance_._instance,
  &::_CMsgCsgoSteamUserStatChange_default_instance_._instance,
  &::_XpProgressData_default_instance_._instance,
  &::_MatchEndItemUpdates_default_instance_._instance,
  &::_ScoreLeaderboardData_Entry_default_instance_._instance,
  &::_ScoreLeaderboardData_AccountEntries_default_instance_._instance,
  &::_ScoreLeaderboardData_default_instance_._instance,
  &::_PlayerQuestData_QuestItemData_default_instance_._instance,
  &::_PlayerQuestData_default_instance_._instance,
  &::_DeepPlayerStatsEntry_default_instance_._instance,
  &::_DeepPlayerMatchEvent_default_instance_._instance,
  &::_CMsgGC_ServerQuestUpdateData_default_instance_._instance,
  &::_CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm_default_instance_._instance,
  &::_CMsgGCCStrike15_v2_GC2ServerReservationUpdate_default_instance_._instance,
  &::_CMsgGCCStrike15_v2_MatchmakingStart_default_instance_._instance,
  &::_CMsgGCCStrike15_v2_MatchmakingStop_default_instance_._instance,
  &::_CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_Note_default_instance_._instance,
  &::_CMsgGCCStrike15_v2_MatchmakingClient2ServerPing_default_instance_._instance,
  &::_CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_default_instance_._instance,
  &::_CDataGCCStrike15_v2_TournamentMatchDraft_Entry_default_instance_._instance,
  &::_CDataGCCStrike15_v2_TournamentMatchDraft_default_instance_._instance,
  &::_CPreMatchInfoData_TeamStats_default_instance_._instance,
  &::_CPreMatchInfoData_default_instance_._instance,
  &::_CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve_default_instance_._instance,
  &::_CMsgGCCStrike15_v2_MatchmakingServerReservationResponse_default_instance_._instance,
  &::_CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve_default_instance_._instance,
  &::_CMsgGCCStrike15_v2_MatchmakingServerRoundStats_DropInfo_default_instance_._instance,
  &::_CMsgGCCStrike15_v2_MatchmakingServerRoundStats_default_instance_._instance,
  &::_CMsgGCCStrike15_v2_MatchmakingClient2GCHello_default_instance_._instance,
  &::_CMsgGCCStrike15_v2_MatchmakingGC2ClientHello_default_instance_._instance,
  &::_CMsgGCCStrike15_v2_AccountPrivacySettings_Setting_default_instance_._instance,
  &::_CMsgGCCStrike15_v2_AccountPrivacySettings_default_instance_._instance,
  &::_CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon_default_instance_._instance,
  &::_CMsgGCCStrike15_v2_ClientGCRankUpdate_default_instance_._instance,
  &::_CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate_default_instance_._instance,
  &::_CMsgGCCStrike15_v2_ServerNotificationForUserPenalty_default_instance_._instance,
  &::_CMsgGCCStrike15_v2_ClientReportPlayer_default_instance_._instance,
  &::_CMsgGCCStrike15_v2_ClientCommendPlayer_default_instance_._instance,
  &::_CMsgGCCStrike15_v2_ClientReportServer_default_instance_._instance,
  &::_CMsgGCCStrike15_v2_ClientReportResponse_default_instance_._instance,
  &::_CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends_default_instance_._instance,
  &::_WatchableMatchInfo_default_instance_._instance,
  &::_CMsgGCCStrike15_v2_ClientRequestJoinFriendData_default_instance_._instance,
  &::_CMsgGCCStrike15_v2_ClientRequestJoinServerData_default_instance_._instance,
  &::_CMsgGCCstrike15_v2_ClientRequestNewMission_default_instance_._instance,
  &::_CMsgGCCstrike15_v2_ClientRedeemMissionReward_default_instance_._instance,
  &::_CMsgGCCstrike15_v2_ClientRedeemFreeReward_default_instance_._instance,
  &::_CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded_default_instance_._instance,
  &::_CMsgGCCStrike15_v2_ClientNetworkConfig_default_instance_._instance,
  &::_CMsgGCCStrike15_ClientDeepStats_DeepStatsRange_default_instance_._instance,
  &::_CMsgGCCStrike15_ClientDeepStats_DeepStatsMatch_default_instance_._instance,
  &::_CMsgGCCStrike15_ClientDeepStats_default_instance_._instance,
  &::_CMsgGCCStrike15_v2_WatchInfoUsers_default_instance_._instance,
  &::_CMsgGCCStrike15_v2_ClientRequestPlayersProfile_default_instance_._instance,
  &::_CMsgGCCStrike15_v2_PlayersProfile_default_instance_._instance,
  &::_CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate_default_instance_._instance,
  &::_CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment_default_instance_._instance,
  &::_CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus_default_instance_._instance,
  &::_CClientHeaderOverwatchEvidence_default_instance_._instance,
  &::_CMsgGCCStrike15_v2_GC2ClientTextMsg_default_instance_._instance,
  &::_CMsgGCCStrike15_v2_Client2GCTextMsg_default_instance_._instance,
  &::_CMsgGCCStrike15_v2_MatchEndRunRewardDrops_default_instance_._instance,
  &::_CEconItemPreviewDataBlock_Sticker_default_instance_._instance,
  &::_CEconItemPreviewDataBlock_default_instance_._instance,
  &::_CMsgGCCStrike15_v2_MatchEndRewardDropsNotification_default_instance_._instance,
  &::_CMsgItemAcknowledged_default_instance_._instance,
  &::_CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest_default_instance_._instance,
  &::_CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse_default_instance_._instance,
  &::_CMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames_default_instance_._instance,
  &::_CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser_default_instance_._instance,
  &::_CMsgGCCStrike15_v2_MatchListRequestRecentUserGames_default_instance_._instance,
  &::_CMsgGCCStrike15_v2_MatchListRequestTournamentGames_default_instance_._instance,
  &::_CMsgGCCStrike15_v2_MatchListRequestFullGameInfo_default_instance_._instance,
  &::_CDataGCCStrike15_v2_MatchInfo_default_instance_._instance,
  &::_CDataGCCStrike15_v2_TournamentGroupTeam_default_instance_._instance,
  &::_CDataGCCStrike15_v2_TournamentGroup_Picks_default_instance_._instance,
  &::_CDataGCCStrike15_v2_TournamentGroup_default_instance_._instance,
  &::_CDataGCCStrike15_v2_TournamentSection_default_instance_._instance,
  &::_CDataGCCStrike15_v2_TournamentInfo_default_instance_._instance,
  &::_CMsgGCCStrike15_v2_MatchList_default_instance_._instance,
  &::_CMsgGCCStrike15_v2_MatchListTournamentOperatorMgmt_default_instance_._instance,
  &::_CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick_default_instance_._instance,
  &::_CMsgGCCStrike15_v2_Predictions_default_instance_._instance,
  &::_CMsgGCCStrike15_v2_Fantasy_FantasySlot_default_instance_._instance,
  &::_CMsgGCCStrike15_v2_Fantasy_FantasyTeam_default_instance_._instance,
  &::_CMsgGCCStrike15_v2_Fantasy_default_instance_._instance,
  &::_CAttribute_String_default_instance_._instance,
  &::_CMsgLegacySource1ClientWelcome_Location_default_instance_._instance,
  &::_CMsgLegacySource1ClientWelcome_default_instance_._instance,
  &::_CMsgCStrike15Welcome_default_instance_._instance,
  &::_CMsgGCCStrike15_v2_ClientVarValueNotificationInfo_default_instance_._instance,
  &::_CMsgGCCStrike15_v2_ServerVarValueNotificationInfo_default_instance_._instance,
  &::_CMsgGCCStrike15_v2_GiftsLeaderboardRequest_default_instance_._instance,
  &::_CMsgGCCStrike15_v2_GiftsLeaderboardResponse_GiftLeaderboardEntry_default_instance_._instance,
  &::_CMsgGCCStrike15_v2_GiftsLeaderboardResponse_default_instance_._instance,
  &::_CMsgGCCStrike15_v2_ClientSubmitSurveyVote_default_instance_._instance,
  &::_CMsgGCCStrike15_v2_Server2GCClientValidate_default_instance_._instance,
  &::_CMsgGCCStrike15_v2_GC2ClientTournamentInfo_default_instance_._instance,
  &::_CSOEconCoupon_default_instance_._instance,
  &::_CSOAccountItemPersonalStore_default_instance_._instance,
  &::_CSOAccountXpShop_default_instance_._instance,
  &::_CSOAccountKeychainRemoveToolCharges_default_instance_._instance,
  &::_CSOQuestProgress_default_instance_._instance,
  &::_CSOAccountSeasonalOperation_default_instance_._instance,
  &::_CSOAccountRecurringSubscription_default_instance_._instance,
  &::_CSOPersonaDataPublic_default_instance_._instance,
  &::_CMsgGCCStrike15_v2_GC2ClientNotifyXPShop_default_instance_._instance,
  &::_CMsgGCCStrike15_v2_Client2GcAckXPShopTracks_default_instance_._instance,
  &::_CMsgGC_GlobalGame_Subscribe_default_instance_._instance,
  &::_CMsgGC_GlobalGame_Unsubscribe_default_instance_._instance,
  &::_CMsgGC_GlobalGame_Play_default_instance_._instance,
  &::_CMsgGCCStrike15_v2_AcknowledgePenalty_default_instance_._instance,
  &::_CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin_default_instance_._instance,
  &::_CMsgGCCStrike15_v2_Client2GCStreamUnlock_default_instance_._instance,
  &::_CMsgGCCStrike15_v2_ClientToGCRequestElevate_default_instance_._instance,
  &::_CMsgGCCStrike15_v2_ClientToGCChat_default_instance_._instance,
  &::_CMsgGCCStrike15_v2_GCToClientChat_default_instance_._instance,
  &::_CMsgGCCStrike15_v2_ClientAuthKeyCode_default_instance_._instance,
  &::_CMsgGCCStrike15_GotvSyncPacket_default_instance_._instance,
  &::_PlayerDecalDigitalSignature_default_instance_._instance,
  &::_CMsgGCCStrike15_v2_ClientPlayerDecalSign_default_instance_._instance,
  &::_CMsgGCCStrike15_v2_BetaEnrollment_default_instance_._instance,
  &::_CMsgGCCStrike15_v2_ClientLogonFatalError_default_instance_._instance,
  &::_CMsgGCCStrike15_v2_ClientPollState_default_instance_._instance,
  &::_CMsgGCCStrike15_v2_Party_Register_default_instance_._instance,
  &::_CMsgGCCStrike15_v2_Party_Search_default_instance_._instance,
  &::_CMsgGCCStrike15_v2_Party_SearchResults_Entry_default_instance_._instance,
  &::_CMsgGCCStrike15_v2_Party_SearchResults_default_instance_._instance,
  &::_CMsgGCCStrike15_v2_Party_Invite_default_instance_._instance,
  &::_CMsgGCCStrike15_v2_Account_RequestCoPlays_Player_default_instance_._instance,
  &::_CMsgGCCStrike15_v2_Account_RequestCoPlays_default_instance_._instance,
  &::_CMsgGCCStrike15_v2_ClientToGCRequestTicket_default_instance_._instance,
  &::_CMsgGCToClientSteamDatagramTicket_default_instance_._instance,
  &::_CMsgGCCStrike15_v2_ClientRequestOffers_default_instance_._instance,
  &::_CMsgGCCStrike15_v2_ClientRequestSouvenir_default_instance_._instance,
  &::_CMsgGCCStrike15_v2_ClientAccountBalance_default_instance_._instance,
  &::_CMsgGCCStrike15_v2_ClientPartyJoinRelay_default_instance_._instance,
  &::_CMsgGCCStrike15_v2_ClientPartyWarning_Entry_default_instance_._instance,
  &::_CMsgGCCStrike15_v2_ClientPartyWarning_default_instance_._instance,
  &::_CMsgGCCStrike15_v2_SetEventFavorite_default_instance_._instance,
  &::_CMsgGCCStrike15_v2_GetEventFavorites_Request_default_instance_._instance,
  &::_CMsgGCCStrike15_v2_GetEventFavorites_Response_default_instance_._instance,
  &::_CMsgGCCStrike15_v2_ClientPerfReport_Entry_default_instance_._instance,
  &::_CMsgGCCStrike15_v2_ClientPerfReport_default_instance_._instance,
  &::_CVDiagnostic_default_instance_._instance,
  &::_CMsgGCCStrike15_v2_ClientReportValidation_default_instance_._instance,
  &::_CMsgGCCStrike15_v2_GC2ClientRefuseSecureMode_default_instance_._instance,
  &::_CMsgGCCStrike15_v2_GC2ClientRequestValidation_default_instance_._instance,
  &::_CMsgGCCStrike15_v2_GC2ClientInitSystem_default_instance_._instance,
  &::_CMsgGCCStrike15_v2_GC2ClientInitSystem_Response_default_instance_._instance,
  &::_CMsgGCCStrike15_v2_SetPlayerLeaderboardSafeName_default_instance_._instance,
};

const char descriptor_table_protodef_cstrike15_5fgcmessages_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\032cstrike15_gcmessages.proto\032\023steammessa"
  "ges.proto\032\027engine_gcmessages.proto\032\026gcsd"
  "k_gcmessages.proto\"=\n\016GameServerPing\022\014\n\004"
  "ping\030\002 \001(\005\022\n\n\002ip\030\003 \001(\r\022\021\n\tinstances\030\005 \001("
  "\r\"6\n\016DataCenterPing\022\026\n\016data_center_id\030\001 "
  "\001(\007\022\014\n\004ping\030\002 \001(\021\"`\n\027DetailedSearchStati"
  "stic\022\021\n\tgame_type\030\001 \001(\r\022\027\n\017search_time_a"
  "vg\030\002 \001(\r\022\031\n\021players_searching\030\004 \001(\r\"\247\001\n\020"
  "TournamentPlayer\022\022\n\naccount_id\030\001 \001(\r\022\023\n\013"
  "player_nick\030\002 \001(\t\022\023\n\013player_name\030\003 \001(\t\022\022"
  "\n\nplayer_dob\030\004 \001(\r\022\023\n\013player_flag\030\005 \001(\t\022"
  "\027\n\017player_location\030\006 \001(\t\022\023\n\013player_desc\030"
  "\007 \001(\t\"}\n\016TournamentTeam\022\017\n\007team_id\030\001 \001(\005"
  "\022\020\n\010team_tag\030\002 \001(\t\022\021\n\tteam_flag\030\003 \001(\t\022\021\n"
  "\tteam_name\030\004 \001(\t\022\"\n\007players\030\005 \003(\0132\021.Tour"
  "namentPlayer\"\337\001\n\017TournamentEvent\022\020\n\010even"
  "t_id\030\001 \001(\005\022\021\n\tevent_tag\030\002 \001(\t\022\022\n\nevent_n"
  "ame\030\003 \001(\t\022\030\n\020event_time_start\030\004 \001(\r\022\026\n\016e"
  "vent_time_end\030\005 \001(\r\022\024\n\014event_public\030\006 \001("
  "\005\022\026\n\016event_stage_id\030\007 \001(\005\022\030\n\020event_stage"
  "_name\030\010 \001(\t\022\031\n\021active_section_id\030\t \001(\r\"\342"
  "\003\n\020GlobalStatistics\022\026\n\016players_online\030\001 "
  "\001(\r\022\026\n\016servers_online\030\002 \001(\r\022\031\n\021players_s"
  "earching\030\003 \001(\r\022\031\n\021servers_available\030\004 \001("
  "\r\022\027\n\017ongoing_matches\030\005 \001(\r\022\027\n\017search_tim"
  "e_avg\030\006 \001(\r\0223\n\021search_statistics\030\007 \003(\0132\030"
  ".DetailedSearchStatistic\022\025\n\rmain_post_ur"
  "l\030\010 \001(\t\022\036\n\026required_appid_version\030\t \001(\r\022"
  "\032\n\022pricesheet_version\030\n \001(\r\022\036\n\026twitch_st"
  "reams_version\030\013 \001(\r\022!\n\031active_tournament"
  "_eventid\030\014 \001(\r\022\030\n\020active_survey_id\030\r \001(\r"
  "\022\023\n\013rtime32_cur\030\016 \001(\r\022\033\n\023rtime32_event_s"
  "tart\030\017 \001(\r\022\037\n\027required_appid_version2\030\020 "
  "\001(\r\">\n\037OperationalStatisticDescription\022\014"
  "\n\004name\030\001 \001(\t\022\r\n\005idkey\030\002 \001(\r\"<\n\033Operation"
  "alStatisticElement\022\r\n\005idkey\030\001 \001(\r\022\016\n\006val"
  "ues\030\002 \003(\005\"r\n\033OperationalStatisticsPacket"
  "\022\020\n\010packetid\030\001 \001(\005\022\023\n\013mstimestamp\030\002 \001(\005\022"
  ",\n\006values\030\003 \003(\0132\034.OperationalStatisticEl"
  "ement\"S\n\023OperationalVarValue\022\014\n\004name\030\001 \001"
  "(\t\022\016\n\006ivalue\030\002 \001(\005\022\016\n\006fvalue\030\003 \001(\002\022\016\n\006sv"
  "alue\030\004 \001(\014\"\215\003\n\021PlayerRankingInfo\022\022\n\nacco"
  "unt_id\030\001 \001(\r\022\017\n\007rank_id\030\002 \001(\r\022\014\n\004wins\030\003 "
  "\001(\r\022\023\n\013rank_change\030\004 \001(\002\022\024\n\014rank_type_id"
  "\030\006 \001(\r\022\022\n\ntv_control\030\007 \001(\r\022\031\n\021rank_windo"
  "w_stats\030\010 \001(\004\022\030\n\020leaderboard_name\030\t \001(\t\022"
  "\023\n\013rank_if_win\030\n \001(\r\022\024\n\014rank_if_lose\030\013 \001"
  "(\r\022\023\n\013rank_if_tie\030\014 \001(\r\0223\n\014per_map_rank\030"
  "\r \003(\0132\035.PlayerRankingInfo.PerMapRank\022\037\n\027"
  "leaderboard_name_status\030\016 \001(\r\032;\n\nPerMapR"
  "ank\022\016\n\006map_id\030\001 \001(\r\022\017\n\007rank_id\030\002 \001(\r\022\014\n\004"
  "wins\030\003 \001(\r\"X\n\026PlayerCommendationInfo\022\024\n\014"
  "cmd_friendly\030\001 \001(\r\022\024\n\014cmd_teaching\030\002 \001(\r"
  "\022\022\n\ncmd_leader\030\004 \001(\r\"V\n\020PlayerMedalsInfo"
  "\022\034\n\024display_items_defidx\030\007 \003(\r\022$\n\034featur"
  "ed_display_item_defidx\030\010 \001(\r\"O\n\017AccountA"
  "ctivity\022\020\n\010activity\030\001 \001(\r\022\014\n\004mode\030\002 \001(\r\022"
  "\013\n\003map\030\003 \001(\r\022\017\n\007matchid\030\004 \001(\004\"g\n\024Tournam"
  "entMatchSetup\022\020\n\010event_id\030\001 \001(\005\022\022\n\nteam_"
  "id_ct\030\002 \001(\005\022\021\n\tteam_id_t\030\003 \001(\005\022\026\n\016event_"
  "stage_id\030\004 \001(\005\"\317\003\n\016ServerHltvInfo\022\023\n\013tv_"
  "udp_port\030\001 \001(\r\022\024\n\014tv_watch_key\030\002 \001(\004\022\020\n\010"
  "tv_slots\030\003 \001(\r\022\022\n\ntv_clients\030\004 \001(\r\022\022\n\ntv"
  "_proxies\030\005 \001(\r\022\017\n\007tv_time\030\006 \001(\r\022\021\n\tgame_"
  "type\030\010 \001(\r\022\025\n\rgame_mapgroup\030\t \001(\t\022\020\n\010gam"
  "e_map\030\n \001(\t\022\031\n\021tv_master_steamid\030\013 \001(\004\022\026"
  "\n\016tv_local_slots\030\014 \001(\r\022\030\n\020tv_local_clien"
  "ts\030\r \001(\r\022\030\n\020tv_local_proxies\030\016 \001(\r\022\026\n\016tv"
  "_relay_slots\030\017 \001(\r\022\030\n\020tv_relay_clients\030\020"
  " \001(\r\022\030\n\020tv_relay_proxies\030\021 \001(\r\022\030\n\020tv_rel"
  "ay_address\030\022 \001(\r\022\025\n\rtv_relay_port\030\023 \001(\r\022"
  "\030\n\020tv_relay_steamid\030\024 \001(\004\022\r\n\005flags\030\025 \001(\r"
  "\"X\n\rIpAddressMask\022\t\n\001a\030\001 \001(\r\022\t\n\001b\030\002 \001(\r\022"
  "\t\n\001c\030\003 \001(\r\022\t\n\001d\030\004 \001(\r\022\014\n\004bits\030\005 \001(\r\022\r\n\005t"
  "oken\030\006 \001(\r\"Z\n\033CMsgCsgoSteamUserStatChang"
  "e\022\032\n\022ecsgosteamuserstat\030\001 \001(\005\022\r\n\005delta\030\002"
  " \001(\005\022\020\n\010absolute\030\003 \001(\010\"8\n\016XpProgressData"
  "\022\021\n\txp_points\030\001 \001(\r\022\023\n\013xp_category\030\002 \001(\005"
  "\"_\n\023MatchEndItemUpdates\022\017\n\007item_id\030\001 \001(\004"
  "\022\030\n\020item_attr_defidx\030\002 \001(\r\022\035\n\025item_attr_"
  "delta_value\030\003 \001(\r\"\270\002\n\024ScoreLeaderboardDa"
  "ta\022\020\n\010quest_id\030\001 \001(\004\022\r\n\005score\030\002 \001(\r\022<\n\016a"
  "ccountentries\030\003 \003(\0132$.ScoreLeaderboardDa"
  "ta.AccountEntries\0221\n\014matchentries\030\005 \003(\0132"
  "\033.ScoreLeaderboardData.Entry\022\030\n\020leaderbo"
  "ard_name\030\006 \001(\t\032!\n\005Entry\022\013\n\003tag\030\001 \001(\r\022\013\n\003"
  "val\030\002 \001(\r\032Q\n\016AccountEntries\022\021\n\taccountid"
  "\030\001 \001(\r\022,\n\007entries\030\002 \003(\0132\033.ScoreLeaderboa"
  "rdData.Entry\"\254\003\n\017PlayerQuestData\022\032\n\022ques"
  "ter_account_id\030\001 \001(\r\0227\n\017quest_item_data\030"
  "\002 \003(\0132\036.PlayerQuestData.QuestItemData\022)\n"
  "\020xp_progress_data\030\003 \003(\0132\017.XpProgressData"
  "\022\023\n\013time_played\030\004 \001(\r\022\024\n\014mm_game_mode\030\005 "
  "\001(\r\022*\n\014item_updates\030\006 \003(\0132\024.MatchEndItem"
  "Updates\022!\n\031operation_points_eligible\030\007 \001"
  "(\010\0225\n\017userstatchanges\030\010 \003(\0132\034.CMsgCsgoSt"
  "eamUserStatChange\032h\n\rQuestItemData\022\020\n\010qu"
  "est_id\030\001 \001(\004\022\"\n\032quest_normal_points_earn"
  "ed\030\002 \001(\005\022!\n\031quest_bonus_points_earned\030\003 "
  "\001(\005\"\226\005\n\024DeepPlayerStatsEntry\022\021\n\taccounti"
  "d\030\001 \001(\r\022\020\n\010match_id\030\002 \001(\004\022\024\n\014mm_game_mod"
  "e\030\003 \001(\r\022\r\n\005mapid\030\004 \001(\r\022\025\n\rb_starting_ct\030"
  "\005 \001(\010\022\025\n\rmatch_outcome\030\006 \001(\r\022\022\n\nrounds_w"
  "on\030\007 \001(\r\022\023\n\013rounds_lost\030\010 \001(\r\022\022\n\nstat_sc"
  "ore\030\t \001(\r\022\023\n\013stat_deaths\030\014 \001(\r\022\021\n\tstat_m"
  "vps\030\r \001(\r\022\023\n\013enemy_kills\030\016 \001(\r\022\027\n\017enemy_"
  "headshots\030\017 \001(\r\022\021\n\tenemy_2ks\030\020 \001(\r\022\021\n\ten"
  "emy_3ks\030\021 \001(\r\022\021\n\tenemy_4ks\030\022 \001(\r\022\024\n\014tota"
  "l_damage\030\023 \001(\r\022\037\n\027engagements_entry_coun"
  "t\030\027 \001(\r\022\036\n\026engagements_entry_wins\030\030 \001(\r\022"
  "\035\n\025engagements_1v1_count\030\031 \001(\r\022\034\n\024engage"
  "ments_1v1_wins\030\032 \001(\r\022\035\n\025engagements_1v2_"
  "count\030\033 \001(\r\022\034\n\024engagements_1v2_wins\030\034 \001("
  "\r\022\025\n\rutility_count\030\035 \001(\r\022\027\n\017utility_succ"
  "ess\030\036 \001(\r\022\023\n\013flash_count\030  \001(\r\022\025\n\rflash_"
  "success\030! \001(\r\022\r\n\005mates\030\" \003(\r\"\261\002\n\024DeepPla"
  "yerMatchEvent\022\021\n\taccountid\030\001 \001(\r\022\020\n\010matc"
  "h_id\030\002 \001(\004\022\020\n\010event_id\030\003 \001(\r\022\022\n\nevent_ty"
  "pe\030\004 \001(\r\022\024\n\014b_playing_ct\030\005 \001(\010\022\022\n\nuser_p"
  "os_x\030\006 \001(\005\022\022\n\nuser_pos_y\030\007 \001(\005\022\022\n\nuser_p"
  "os_z\030\014 \001(\005\022\023\n\013user_defidx\030\010 \001(\r\022\023\n\013other"
  "_pos_x\030\t \001(\005\022\023\n\013other_pos_y\030\n \001(\005\022\023\n\013oth"
  "er_pos_z\030\r \001(\005\022\024\n\014other_defidx\030\013 \001(\r\022\022\n\n"
  "event_data\030\016 \001(\005\"\264\001\n\034CMsgGC_ServerQuestU"
  "pdateData\022+\n\021player_quest_data\030\001 \003(\0132\020.P"
  "layerQuestData\022\023\n\013binary_data\030\002 \001(\014\022\024\n\014m"
  "m_game_mode\030\003 \001(\r\022-\n\016missionlbsdata\030\004 \001("
  "\0132\025.ScoreLeaderboardData\022\r\n\005flags\030\005 \001(\r\""
  "o\n.CMsgGCCStrike15_v2_MatchmakingGC2Serv"
  "erConfirm\022\r\n\005token\030\001 \001(\r\022\r\n\005stamp\030\002 \001(\r\022"
  "\020\n\010exchange\030\003 \001(\004\022\r\n\005retry\030\004 \001(\r\"o\n-CMsg"
  "GCCStrike15_v2_GC2ServerReservationUpdat"
  "e\022\036\n\026viewers_external_total\030\001 \001(\r\022\036\n\026vie"
  "wers_external_steam\030\002 \001(\r\"\345\001\n#CMsgGCCStr"
  "ike15_v2_MatchmakingStart\022\023\n\013account_ids"
  "\030\001 \003(\r\022\021\n\tgame_type\030\002 \001(\r\022\023\n\013ticket_data"
  "\030\003 \001(\t\022\026\n\016client_version\030\004 \001(\r\022/\n\020tourna"
  "ment_match\030\005 \001(\0132\025.TournamentMatchSetup\022"
  "\022\n\nprime_only\030\006 \001(\010\022\022\n\ntv_control\030\007 \001(\r\022"
  "\020\n\010lobby_id\030\010 \001(\004\"5\n\"CMsgGCCStrike15_v2_"
  "MatchmakingStop\022\017\n\007abandon\030\001 \001(\005\"y\n2CMsg"
  "GCCStrike15_v2_MatchmakingGC2ClientUpdat"
  "e_Note\022\014\n\004type\030\001 \001(\005\022\021\n\tregion_id\030\002 \001(\005\022"
  "\020\n\010region_r\030\003 \001(\002\022\020\n\010distance\030\004 \001(\002\"\307\002\n/"
  "CMsgGCCStrike15_v2_MatchmakingClient2Ser"
  "verPing\022(\n\017gameserverpings\030\001 \003(\0132\017.GameS"
  "erverPing\022\024\n\014offset_index\030\002 \001(\005\022\023\n\013final"
  "_batch\030\003 \001(\005\022*\n\021data_center_pings\030\004 \003(\0132"
  "\017.DataCenterPing\022\020\n\010max_ping\030\005 \001(\r\022\022\n\nte"
  "st_token\030\006 \001(\007\022\022\n\nsearch_key\030\007 \001(\014\022B\n\005no"
  "tes\030\010 \003(\01323.CMsgGCCStrike15_v2_Matchmaki"
  "ngGC2ClientUpdate_Note\022\025\n\rdebug_message\030"
  "\t \001(\t\"\226\005\n-CMsgGCCStrike15_v2_Matchmaking"
  "GC2ClientUpdate\022\023\n\013matchmaking\030\001 \001(\005\022#\n\033"
  "waiting_account_id_sessions\030\002 \003(\r\022\r\n\005err"
  "or\030\003 \001(\t\022(\n ongoingmatch_account_id_sess"
  "ions\030\006 \003(\r\022\'\n\014global_stats\030\007 \001(\0132\021.Globa"
  "lStatistics\022$\n\034failping_account_id_sessi"
  "ons\030\010 \003(\r\022#\n\033penalty_account_id_sessions"
  "\030\t \003(\r\022%\n\035failready_account_id_sessions\030"
  "\n \003(\r\022%\n\035vacbanned_account_id_sessions\030\013"
  " \003(\r\022-\n\025server_ipaddress_mask\030\014 \001(\0132\016.Ip"
  "AddressMask\022B\n\005notes\030\r \003(\01323.CMsgGCCStri"
  "ke15_v2_MatchmakingGC2ClientUpdate_Note\022"
  ")\n!penalty_account_id_sessions_green\030\016 \003"
  "(\r\022\"\n\032insufficientlevel_sessions\030\017 \003(\r\022$"
  "\n\034vsncheck_account_id_sessions\030\020 \003(\r\022\"\n\032"
  "launcher_mismatch_sessions\030\021 \003(\r\022$\n\034inse"
  "cure_account_id_sessions\030\022 \003(\r\"\277\004\n(CData"
  "GCCStrike15_v2_TournamentMatchDraft\022\020\n\010e"
  "vent_id\030\001 \001(\005\022\026\n\016event_stage_id\030\002 \001(\005\022\021\n"
  "\tteam_id_0\030\003 \001(\005\022\021\n\tteam_id_1\030\004 \001(\005\022\022\n\nm"
  "aps_count\030\005 \001(\005\022\024\n\014maps_current\030\006 \001(\005\022\025\n"
  "\rteam_id_start\030\007 \001(\005\022\025\n\rteam_id_veto1\030\010 "
  "\001(\005\022\025\n\rteam_id_pickn\030\t \001(\005\022\?\n\006drafts\030\n \003"
  "(\0132/.CDataGCCStrike15_v2_TournamentMatch"
  "Draft.Entry\022\024\n\014vote_mapid_0\030\013 \003(\005\022\024\n\014vot"
  "e_mapid_1\030\014 \003(\005\022\024\n\014vote_mapid_2\030\r \003(\005\022\024\n"
  "\014vote_mapid_3\030\016 \003(\005\022\024\n\014vote_mapid_4\030\017 \003("
  "\005\022\024\n\014vote_mapid_5\030\020 \003(\005\022\032\n\022vote_starting"
  "_side\030\021 \003(\005\022\022\n\nvote_phase\030\022 \001(\005\022\030\n\020vote_"
  "phase_start\030\023 \001(\002\022\031\n\021vote_phase_length\030\024"
  " \001(\002\032*\n\005Entry\022\r\n\005mapid\030\001 \001(\005\022\022\n\nteam_id_"
  "ct\030\002 \001(\005\"\373\001\n\021CPreMatchInfoData\022\027\n\017predic"
  "tions_pct\030\001 \001(\005\0228\n\005draft\030\004 \001(\0132).CDataGC"
  "CStrike15_v2_TournamentMatchDraft\022+\n\005sta"
  "ts\030\005 \003(\0132\034.CPreMatchInfoData.TeamStats\022\014"
  "\n\004wins\030\006 \003(\005\032X\n\tTeamStats\022\031\n\021match_info_"
  "idxtxt\030\001 \001(\005\022\026\n\016match_info_txt\030\002 \001(\t\022\030\n\020"
  "match_info_teams\030\003 \003(\t\"\221\005\n.CMsgGCCStrike"
  "15_v2_MatchmakingGC2ServerReserve\022\023\n\013acc"
  "ount_ids\030\001 \003(\r\022\021\n\tgame_type\030\002 \001(\r\022\020\n\010mat"
  "ch_id\030\003 \001(\004\022\026\n\016server_version\030\004 \001(\r\022\r\n\005f"
  "lags\030\022 \001(\r\022$\n\010rankings\030\005 \003(\0132\022.PlayerRan"
  "kingInfo\022\026\n\016encryption_key\030\006 \001(\004\022\032\n\022encr"
  "yption_key_pub\030\007 \001(\004\022\021\n\tparty_ids\030\010 \003(\r\022"
  "!\n\twhitelist\030\t \003(\0132\016.IpAddressMask\022\031\n\021tv"
  "_master_steamid\030\n \001(\004\022*\n\020tournament_even"
  "t\030\013 \001(\0132\020.TournamentEvent\022)\n\020tournament_"
  "teams\030\014 \003(\0132\017.TournamentTeam\022&\n\036tourname"
  "nt_casters_account_ids\030\r \003(\r\022\030\n\020tv_relay"
  "_steamid\030\016 \001(\004\022*\n\016pre_match_data\030\017 \001(\0132\022"
  ".CPreMatchInfoData\022\033\n\023rtime32_event_star"
  "t\030\020 \001(\r\022\022\n\ntv_control\030\021 \001(\r\022+\n\rop_var_va"
  "lues\030\023 \003(\0132\024.OperationalVarValue\022\027\n\017soca"
  "che_control\030\024 \001(\r\022\027\n\017teammate_colors\030\025 \003"
  "(\005\"\340\004\n7CMsgGCCStrike15_v2_MatchmakingSer"
  "verReservationResponse\022\025\n\rreservationid\030"
  "\001 \001(\004\022D\n\013reservation\030\002 \001(\0132/.CMsgGCCStri"
  "ke15_v2_MatchmakingGC2ServerReserve\022\013\n\003m"
  "ap\030\003 \001(\t\022\033\n\023gc_reservation_sent\030\004 \001(\004\022\026\n"
  "\016server_version\030\005 \001(\r\022 \n\007tv_info\030\006 \001(\0132\017"
  ".ServerHltvInfo\022\036\n\026reward_player_account"
  "s\030\007 \003(\r\022\034\n\024idle_player_accounts\030\010 \003(\r\022 \n"
  "\030reward_item_attr_def_idx\030\t \001(\r\022\036\n\026rewar"
  "d_item_attr_value\030\n \001(\r\022#\n\033reward_item_a"
  "ttr_reward_idx\030\013 \001(\r\022\030\n\020reward_drop_list"
  "\030\014 \001(\r\022\026\n\016tournament_tag\030\r \001(\t\022!\n\031legacy"
  "_steamdatagram_port\030\016 \001(\r\022\035\n\025steamdatagr"
  "am_routing\030\021 \001(\r\022\022\n\ntest_token\030\017 \001(\007\022\r\n\005"
  "flags\030\020 \001(\r\022\023\n\013system_load\030\022 \001(\r\022\023\n\013cpus"
  "_online\030\023 \001(\r\"\256\002\n.CMsgGCCStrike15_v2_Mat"
  "chmakingGC2ClientReserve\022\020\n\010serverid\030\001 \001"
  "(\004\022\025\n\rdirect_udp_ip\030\002 \001(\r\022\027\n\017direct_udp_"
  "port\030\003 \001(\r\022\025\n\rreservationid\030\004 \001(\004\022D\n\013res"
  "ervation\030\005 \001(\0132/.CMsgGCCStrike15_v2_Matc"
  "hmakingGC2ServerReserve\022\013\n\003map\030\006 \001(\t\022\026\n\016"
  "server_address\030\007 \001(\t\022 \n\007gs_ping\030\010 \001(\0132\017."
  "DataCenterPing\022\026\n\016gs_location_id\030\t \001(\r\"\202"
  "\007\n.CMsgGCCStrike15_v2_MatchmakingServerR"
  "oundStats\022\025\n\rreservationid\030\001 \001(\004\022D\n\013rese"
  "rvation\030\002 \001(\0132/.CMsgGCCStrike15_v2_Match"
  "makingGC2ServerReserve\022\013\n\003map\030\003 \001(\t\022\r\n\005r"
  "ound\030\004 \001(\005\022\r\n\005kills\030\005 \003(\005\022\017\n\007assists\030\006 \003"
  "(\005\022\016\n\006deaths\030\007 \003(\005\022\016\n\006scores\030\010 \003(\005\022\r\n\005pi"
  "ngs\030\t \003(\005\022\024\n\014round_result\030\n \001(\005\022\024\n\014match"
  "_result\030\013 \001(\005\022\023\n\013team_scores\030\014 \003(\005\022@\n\007co"
  "nfirm\030\r \001(\0132/.CMsgGCCStrike15_v2_Matchma"
  "kingGC2ServerConfirm\022\031\n\021reservation_stag"
  "e\030\016 \001(\005\022\026\n\016match_duration\030\017 \001(\005\022\023\n\013enemy"
  "_kills\030\020 \003(\005\022\027\n\017enemy_headshots\030\021 \003(\005\022\021\n"
  "\tenemy_3ks\030\022 \003(\005\022\021\n\tenemy_4ks\030\023 \003(\005\022\021\n\te"
  "nemy_5ks\030\024 \003(\005\022\014\n\004mvps\030\025 \003(\005\022\030\n\020spectato"
  "rs_count\030\026 \001(\r\022\033\n\023spectators_count_tv\030\027 "
  "\001(\r\022\034\n\024spectators_count_lnk\030\030 \001(\r\022\027\n\017ene"
  "my_kills_agg\030\031 \003(\005\022K\n\tdrop_info\030\032 \001(\01328."
  "CMsgGCCStrike15_v2_MatchmakingServerRoun"
  "dStats.DropInfo\022\030\n\020b_switched_teams\030\033 \001("
  "\010\022\021\n\tenemy_2ks\030\034 \003(\005\022\026\n\016player_spawned\030\035"
  " \003(\005\022\030\n\020team_spawn_count\030\036 \003(\005\022\022\n\nmax_ro"
  "unds\030\037 \001(\r\022\016\n\006map_id\030  \001(\005\032\037\n\010DropInfo\022\023"
  "\n\013account_mvp\030\001 \001(\r\".\n,CMsgGCCStrike15_v"
  "2_MatchmakingClient2GCHello\"\345\005\n,CMsgGCCS"
  "trike15_v2_MatchmakingGC2ClientHello\022\022\n\n"
  "account_id\030\001 \001(\r\022E\n\014ongoingmatch\030\002 \001(\0132/"
  ".CMsgGCCStrike15_v2_MatchmakingGC2Client"
  "Reserve\022\'\n\014global_stats\030\003 \001(\0132\021.GlobalSt"
  "atistics\022\027\n\017penalty_seconds\030\004 \001(\r\022\026\n\016pen"
  "alty_reason\030\005 \001(\r\022\022\n\nvac_banned\030\006 \001(\005\022#\n"
  "\007ranking\030\007 \001(\0132\022.PlayerRankingInfo\022-\n\014co"
  "mmendation\030\010 \001(\0132\027.PlayerCommendationInf"
  "o\022!\n\006medals\030\t \001(\0132\021.PlayerMedalsInfo\022*\n\020"
  "my_current_event\030\n \001(\0132\020.TournamentEvent"
  "\022/\n\026my_current_event_teams\030\013 \003(\0132\017.Tourn"
  "amentTeam\022(\n\017my_current_team\030\014 \001(\0132\017.Tou"
  "rnamentTeam\0221\n\027my_current_event_stages\030\r"
  " \003(\0132\020.TournamentEvent\022\023\n\013survey_vote\030\016 "
  "\001(\r\022\"\n\010activity\030\017 \001(\0132\020.AccountActivity\022"
  "\024\n\014player_level\030\021 \001(\005\022\025\n\rplayer_cur_xp\030\022"
  " \001(\005\022\035\n\025player_xp_bonus_flags\030\023 \001(\005\022$\n\010r"
  "ankings\030\024 \003(\0132\022.PlayerRankingInfo\022\020\n\010owc"
  "aseid\030\025 \001(\004\"\251\001\n)CMsgGCCStrike15_v2_Accou"
  "ntPrivacySettings\022D\n\010settings\030\001 \003(\01322.CM"
  "sgGCCStrike15_v2_AccountPrivacySettings."
  "Setting\0326\n\007Setting\022\024\n\014setting_type\030\001 \001(\r"
  "\022\025\n\rsetting_value\030\002 \001(\r\"\277\001\n.CMsgGCCStrik"
  "e15_v2_MatchmakingGC2ClientAbandon\022\022\n\nac"
  "count_id\030\001 \001(\r\022H\n\017abandoned_match\030\002 \001(\0132"
  "/.CMsgGCCStrike15_v2_MatchmakingGC2Clien"
  "tReserve\022\027\n\017penalty_seconds\030\003 \001(\r\022\026\n\016pen"
  "alty_reason\030\004 \001(\r\"M\n%CMsgGCCStrike15_v2_"
  "ClientGCRankUpdate\022$\n\010rankings\030\001 \003(\0132\022.P"
  "layerRankingInfo\"L\n3CMsgGCCStrike15_v2_M"
  "atchmakingOperator2GCBlogUpdate\022\025\n\rmain_"
  "post_url\030\001 \001(\t\"\212\001\n3CMsgGCCStrike15_v2_Se"
  "rverNotificationForUserPenalty\022\022\n\naccoun"
  "t_id\030\001 \001(\r\022\016\n\006reason\030\002 \001(\r\022\017\n\007seconds\030\003 "
  "\001(\r\022\036\n\026communication_cooldown\030\004 \001(\010\"\355\001\n%"
  "CMsgGCCStrike15_v2_ClientReportPlayer\022\022\n"
  "\naccount_id\030\001 \001(\r\022\022\n\nrpt_aimbot\030\002 \001(\r\022\024\n"
  "\014rpt_wallhack\030\003 \001(\r\022\025\n\rrpt_speedhack\030\004 \001"
  "(\r\022\024\n\014rpt_teamharm\030\005 \001(\r\022\025\n\rrpt_textabus"
  "e\030\006 \001(\r\022\026\n\016rpt_voiceabuse\030\007 \001(\r\022\020\n\010match"
  "_id\030\010 \001(\004\022\030\n\020report_from_demo\030\t \001(\010\"\215\001\n&"
  "CMsgGCCStrike15_v2_ClientCommendPlayer\022\022"
  "\n\naccount_id\030\001 \001(\r\022\020\n\010match_id\030\010 \001(\004\022-\n\014"
  "commendation\030\t \001(\0132\027.PlayerCommendationI"
  "nfo\022\016\n\006tokens\030\n \001(\r\"\265\001\n%CMsgGCCStrike15_"
  "v2_ClientReportServer\022\024\n\014rpt_poorperf\030\001 "
  "\001(\r\022\031\n\021rpt_abusivemodels\030\002 \001(\r\022\023\n\013rpt_ba"
  "dmotd\030\003 \001(\r\022\030\n\020rpt_listingabuse\030\004 \001(\r\022\032\n"
  "\022rpt_inventoryabuse\030\005 \001(\r\022\020\n\010match_id\030\010 "
  "\001(\004\"\251\001\n\'CMsgGCCStrike15_v2_ClientReportR"
  "esponse\022\027\n\017confirmation_id\030\001 \001(\004\022\022\n\nacco"
  "unt_id\030\002 \001(\r\022\021\n\tserver_ip\030\003 \001(\r\022\025\n\rrespo"
  "nse_type\030\004 \001(\r\022\027\n\017response_result\030\005 \001(\r\022"
  "\016\n\006tokens\030\006 \001(\r\"\303\001\n0CMsgGCCStrike15_v2_C"
  "lientRequestWatchInfoFriends\022\022\n\nrequest_"
  "id\030\001 \001(\r\022\023\n\013account_ids\030\002 \003(\r\022\020\n\010serveri"
  "d\030\003 \001(\004\022\017\n\007matchid\030\004 \001(\004\022\027\n\017client_launc"
  "her\030\005 \001(\r\022*\n\021data_center_pings\030\006 \003(\0132\017.D"
  "ataCenterPing\"\260\002\n\022WatchableMatchInfo\022\021\n\t"
  "server_ip\030\001 \001(\r\022\017\n\007tv_port\030\002 \001(\r\022\025\n\rtv_s"
  "pectators\030\003 \001(\r\022\017\n\007tv_time\030\004 \001(\r\022\031\n\021tv_w"
  "atch_password\030\005 \001(\014\022\032\n\022cl_decryptdata_ke"
  "y\030\006 \001(\004\022\036\n\026cl_decryptdata_key_pub\030\007 \001(\004\022"
  "\021\n\tgame_type\030\010 \001(\r\022\025\n\rgame_mapgroup\030\t \001("
  "\t\022\020\n\010game_map\030\n \001(\t\022\021\n\tserver_id\030\013 \001(\004\022\020"
  "\n\010match_id\030\014 \001(\004\022\026\n\016reservation_id\030\r \001(\004"
  "\"\313\001\n.CMsgGCCStrike15_v2_ClientRequestJoi"
  "nFriendData\022\017\n\007version\030\001 \001(\r\022\022\n\naccount_"
  "id\030\002 \001(\r\022\022\n\njoin_token\030\003 \001(\r\022\020\n\010join_ipp"
  "\030\004 \001(\r\022<\n\003res\030\005 \001(\0132/.CMsgGCCStrike15_v2"
  "_MatchmakingGC2ClientReserve\022\020\n\010errormsg"
  "\030\006 \001(\t\"\337\001\n.CMsgGCCStrike15_v2_ClientRequ"
  "estJoinServerData\022\017\n\007version\030\001 \001(\r\022\022\n\nac"
  "count_id\030\002 \001(\r\022\020\n\010serverid\030\003 \001(\004\022\021\n\tserv"
  "er_ip\030\004 \001(\r\022\023\n\013server_port\030\005 \001(\r\022<\n\003res\030"
  "\006 \001(\0132/.CMsgGCCStrike15_v2_MatchmakingGC"
  "2ClientReserve\022\020\n\010errormsg\030\007 \001(\t\"U\n*CMsg"
  "GCCstrike15_v2_ClientRequestNewMission\022\022"
  "\n\nmission_id\030\002 \001(\r\022\023\n\013campaign_id\030\003 \001(\r\""
  "\211\001\n,CMsgGCCstrike15_v2_ClientRedeemMissi"
  "onReward\022\023\n\013campaign_id\030\001 \001(\r\022\021\n\tredeem_"
  "id\030\002 \001(\r\022\032\n\022redeemable_balance\030\003 \001(\r\022\025\n\r"
  "expected_cost\030\004 \001(\r\"o\n)CMsgGCCstrike15_v"
  "2_ClientRedeemFreeReward\022\027\n\017generation_t"
  "ime\030\001 \001(\r\022\032\n\022redeemable_balance\030\002 \001(\r\022\r\n"
  "\005items\030\003 \003(\004\"\271\002\n,CMsgGCCstrike15_v2_GC2S"
  "erverNotifyXPRewarded\022)\n\020xp_progress_dat"
  "a\030\001 \003(\0132\017.XpProgressData\022\022\n\naccount_id\030\002"
  " \001(\r\022\022\n\ncurrent_xp\030\003 \001(\r\022\025\n\rcurrent_leve"
  "l\030\004 \001(\r\022\027\n\017upgraded_defidx\030\005 \001(\r\022 \n\030oper"
  "ation_points_awarded\030\006 \001(\r\022\024\n\014free_rewar"
  "ds\030\007 \001(\r\022\032\n\022xp_trail_remaining\030\010 \001(\r\022\032\n\022"
  "xp_trail_xp_needed\030\t \001(\005\022\026\n\016xp_trail_lev"
  "el\030\n \001(\r\"6\n&CMsgGCCStrike15_v2_ClientNet"
  "workConfig\022\014\n\004data\030\001 \001(\014\"\325\002\n\037CMsgGCCStri"
  "ke15_ClientDeepStats\022\022\n\naccount_id\030\001 \001(\r"
  "\022>\n\005range\030\002 \001(\0132/.CMsgGCCStrike15_Client"
  "DeepStats.DeepStatsRange\022@\n\007matches\030\003 \003("
  "\0132/.CMsgGCCStrike15_ClientDeepStats.Deep"
  "StatsMatch\032<\n\016DeepStatsRange\022\r\n\005begin\030\001 "
  "\001(\r\022\013\n\003end\030\002 \001(\r\022\016\n\006frozen\030\003 \001(\010\032^\n\016Deep"
  "StatsMatch\022%\n\006player\030\001 \001(\0132\025.DeepPlayerS"
  "tatsEntry\022%\n\006events\030\002 \003(\0132\025.DeepPlayerMa"
  "tchEvent\"\232\001\n!CMsgGCCStrike15_v2_WatchInf"
  "oUsers\022\022\n\nrequest_id\030\001 \001(\r\022\023\n\013account_id"
  "s\030\002 \003(\r\0222\n\025watchable_match_infos\030\003 \003(\0132\023"
  ".WatchableMatchInfo\022\030\n\020extended_timeout\030"
  "\005 \001(\r\"\234\001\n.CMsgGCCStrike15_v2_ClientReque"
  "stPlayersProfile\022\036\n\026request_id__deprecat"
  "ed\030\001 \001(\r\022\037\n\027account_ids__deprecated\030\002 \003("
  "\r\022\022\n\naccount_id\030\003 \001(\r\022\025\n\rrequest_level\030\004"
  " \001(\r\"\200\001\n!CMsgGCCStrike15_v2_PlayersProfi"
  "le\022\022\n\nrequest_id\030\001 \001(\r\022G\n\020account_profil"
  "es\030\002 \003(\0132-.CMsgGCCStrike15_v2_Matchmakin"
  "gGC2ClientHello\"\314\001\n,CMsgGCCStrike15_v2_P"
  "layerOverwatchCaseUpdate\022\016\n\006caseid\030\001 \001(\004"
  "\022\021\n\tsuspectid\030\003 \001(\r\022\022\n\nfractionid\030\004 \001(\r\022"
  "\022\n\nrpt_aimbot\030\005 \001(\r\022\024\n\014rpt_wallhack\030\006 \001("
  "\r\022\025\n\rrpt_speedhack\030\007 \001(\r\022\024\n\014rpt_teamharm"
  "\030\010 \001(\r\022\016\n\006reason\030\t \001(\r\"\215\002\n0CMsgGCCStrike"
  "15_v2_PlayerOverwatchCaseAssignment\022\016\n\006c"
  "aseid\030\001 \001(\004\022\017\n\007caseurl\030\002 \001(\t\022\017\n\007verdict\030"
  "\003 \001(\r\022\021\n\ttimestamp\030\004 \001(\r\022\027\n\017throttleseco"
  "nds\030\005 \001(\r\022\021\n\tsuspectid\030\006 \001(\r\022\022\n\nfraction"
  "id\030\007 \001(\r\022\021\n\tnumrounds\030\010 \001(\r\022\026\n\016fractionr"
  "ounds\030\t \001(\r\022\031\n\021streakconvictions\030\n \001(\005\022\016"
  "\n\006reason\030\013 \001(\r\"P\n,CMsgGCCStrike15_v2_Pla"
  "yerOverwatchCaseStatus\022\016\n\006caseid\030\001 \001(\004\022\020"
  "\n\010statusid\030\002 \001(\r\"C\n\036CClientHeaderOverwat"
  "chEvidence\022\021\n\taccountid\030\001 \001(\r\022\016\n\006caseid\030"
  "\002 \001(\004\"P\n#CMsgGCCStrike15_v2_GC2ClientTex"
  "tMsg\022\n\n\002id\030\001 \001(\r\022\014\n\004type\030\002 \001(\r\022\017\n\007payloa"
  "d\030\003 \001(\014\"\?\n#CMsgGCCStrike15_v2_Client2GCT"
  "extMsg\022\n\n\002id\030\001 \001(\r\022\014\n\004args\030\002 \003(\014\"\266\001\n)CMs"
  "gGCCStrike15_v2_MatchEndRunRewardDrops\022L"
  "\n\nserverinfo\030\003 \001(\01328.CMsgGCCStrike15_v2_"
  "MatchmakingServerReservationResponse\022;\n\024"
  "match_end_quest_data\030\004 \001(\0132\035.CMsgGC_Serv"
  "erQuestUpdateData\"\225\005\n\031CEconItemPreviewDa"
  "taBlock\022\021\n\taccountid\030\001 \001(\r\022\016\n\006itemid\030\002 \001"
  "(\004\022\020\n\010defindex\030\003 \001(\r\022\022\n\npaintindex\030\004 \001(\r"
  "\022\016\n\006rarity\030\005 \001(\r\022\017\n\007quality\030\006 \001(\r\022\021\n\tpai"
  "ntwear\030\007 \001(\r\022\021\n\tpaintseed\030\010 \001(\r\022\032\n\022kille"
  "aterscoretype\030\t \001(\r\022\026\n\016killeatervalue\030\n "
  "\001(\r\022\022\n\ncustomname\030\013 \001(\t\0224\n\010stickers\030\014 \003("
  "\0132\".CEconItemPreviewDataBlock.Sticker\022\021\n"
  "\tinventory\030\r \001(\r\022\016\n\006origin\030\016 \001(\r\022\017\n\007ques"
  "tid\030\017 \001(\r\022\022\n\ndropreason\030\020 \001(\r\022\022\n\nmusicin"
  "dex\030\021 \001(\r\022\020\n\010entindex\030\022 \001(\005\022\020\n\010petindex\030"
  "\023 \001(\r\0225\n\tkeychains\030\024 \003(\0132\".CEconItemPrev"
  "iewDataBlock.Sticker\032\262\001\n\007Sticker\022\014\n\004slot"
  "\030\001 \001(\r\022\022\n\nsticker_id\030\002 \001(\r\022\014\n\004wear\030\003 \001(\002"
  "\022\r\n\005scale\030\004 \001(\002\022\020\n\010rotation\030\005 \001(\002\022\017\n\007tin"
  "t_id\030\006 \001(\r\022\020\n\010offset_x\030\007 \001(\002\022\020\n\010offset_y"
  "\030\010 \001(\002\022\020\n\010offset_z\030\t \001(\002\022\017\n\007pattern\030\n \001("
  "\r\"b\n2CMsgGCCStrike15_v2_MatchEndRewardDr"
  "opsNotification\022,\n\010iteminfo\030\006 \001(\0132\032.CEco"
  "nItemPreviewDataBlock\"D\n\024CMsgItemAcknowl"
  "edged\022,\n\010iteminfo\030\001 \001(\0132\032.CEconItemPrevi"
  "ewDataBlock\"}\n7CMsgGCCStrike15_v2_Client"
  "2GCEconPreviewDataBlockRequest\022\017\n\007param_"
  "s\030\001 \001(\004\022\017\n\007param_a\030\002 \001(\004\022\017\n\007param_d\030\003 \001("
  "\004\022\017\n\007param_m\030\004 \001(\004\"h\n8CMsgGCCStrike15_v2"
  "_Client2GCEconPreviewDataBlockResponse\022,"
  "\n\010iteminfo\030\001 \001(\0132\032.CEconItemPreviewDataB"
  "lock\"5\n3CMsgGCCStrike15_v2_MatchListRequ"
  "estCurrentLiveGames\"G\n2CMsgGCCStrike15_v"
  "2_MatchListRequestLiveGameForUser\022\021\n\tacc"
  "ountid\030\001 \001(\r\"G\n2CMsgGCCStrike15_v2_Match"
  "ListRequestRecentUserGames\022\021\n\taccountid\030"
  "\001 \001(\r\"E\n2CMsgGCCStrike15_v2_MatchListReq"
  "uestTournamentGames\022\017\n\007eventid\030\001 \001(\005\"d\n/"
  "CMsgGCCStrike15_v2_MatchListRequestFullG"
  "ameInfo\022\017\n\007matchid\030\001 \001(\004\022\021\n\toutcomeid\030\002 "
  "\001(\004\022\r\n\005token\030\003 \001(\r\"\210\002\n\035CDataGCCStrike15_"
  "v2_MatchInfo\022\017\n\007matchid\030\001 \001(\004\022\021\n\tmatchti"
  "me\030\002 \001(\r\022/\n\022watchablematchinfo\030\003 \001(\0132\023.W"
  "atchableMatchInfo\022J\n\021roundstats_legacy\030\004"
  " \001(\0132/.CMsgGCCStrike15_v2_MatchmakingSer"
  "verRoundStats\022F\n\rroundstatsall\030\005 \003(\0132/.C"
  "MsgGCCStrike15_v2_MatchmakingServerRound"
  "Stats\"^\n\'CDataGCCStrike15_v2_TournamentG"
  "roupTeam\022\017\n\007team_id\030\001 \001(\005\022\r\n\005score\030\002 \001(\005"
  "\022\023\n\013correctpick\030\003 \001(\010\"\331\002\n#CDataGCCStrike"
  "15_v2_TournamentGroup\022\017\n\007groupid\030\001 \001(\r\022\014"
  "\n\004name\030\002 \001(\t\022\014\n\004desc\030\003 \001(\t\022\031\n\021picks__dep"
  "recated\030\004 \001(\r\0227\n\005teams\030\005 \003(\0132(.CDataGCCS"
  "trike15_v2_TournamentGroupTeam\022\021\n\tstage_"
  "ids\030\006 \003(\005\022\031\n\021picklockuntiltime\030\007 \001(\r\022\025\n\r"
  "pickableteams\030\010 \001(\r\022\027\n\017points_per_pick\030\t"
  " \001(\r\0229\n\005picks\030\n \003(\0132*.CDataGCCStrike15_v"
  "2_TournamentGroup.Picks\032\030\n\005Picks\022\017\n\007pick"
  "ids\030\001 \003(\005\"\214\001\n%CDataGCCStrike15_v2_Tourna"
  "mentSection\022\021\n\tsectionid\030\001 \001(\r\022\014\n\004name\030\002"
  " \001(\t\022\014\n\004desc\030\003 \001(\t\0224\n\006groups\030\004 \003(\0132$.CDa"
  "taGCCStrike15_v2_TournamentGroup\"\265\001\n\"CDa"
  "taGCCStrike15_v2_TournamentInfo\0228\n\010secti"
  "ons\030\001 \003(\0132&.CDataGCCStrike15_v2_Tourname"
  "ntSection\022*\n\020tournament_event\030\002 \001(\0132\020.To"
  "urnamentEvent\022)\n\020tournament_teams\030\003 \003(\0132"
  "\017.TournamentTeam\"\353\001\n\034CMsgGCCStrike15_v2_"
  "MatchList\022\024\n\014msgrequestid\030\001 \001(\r\022\021\n\taccou"
  "ntid\030\002 \001(\r\022\022\n\nservertime\030\003 \001(\r\022/\n\007matche"
  "s\030\004 \003(\0132\036.CDataGCCStrike15_v2_MatchInfo\022"
  " \n\007streams\030\005 \003(\0132\017.TournamentTeam\022;\n\016tou"
  "rnamentinfo\030\006 \001(\0132#.CDataGCCStrike15_v2_"
  "TournamentInfo\"\211\001\n2CMsgGCCStrike15_v2_Ma"
  "tchListTournamentOperatorMgmt\022\017\n\007eventid"
  "\030\001 \001(\005\022/\n\007matches\030\002 \003(\0132\036.CDataGCCStrike"
  "15_v2_MatchInfo\022\021\n\taccountid\030\003 \001(\r\"\357\001\n\036C"
  "MsgGCCStrike15_v2_Predictions\022\020\n\010event_i"
  "d\030\001 \001(\r\022R\n\026group_match_team_picks\030\002 \003(\0132"
  "2.CMsgGCCStrike15_v2_Predictions.GroupMa"
  "tchTeamPick\032g\n\022GroupMatchTeamPick\022\021\n\tsec"
  "tionid\030\001 \001(\005\022\017\n\007groupid\030\002 \001(\005\022\r\n\005index\030\003"
  " \001(\005\022\016\n\006teamid\030\004 \001(\005\022\016\n\006itemid\030\005 \001(\004\"\373\001\n"
  "\032CMsgGCCStrike15_v2_Fantasy\022\020\n\010event_id\030"
  "\001 \001(\r\0226\n\005teams\030\002 \003(\0132\'.CMsgGCCStrike15_v"
  "2_Fantasy.FantasyTeam\0329\n\013FantasySlot\022\014\n\004"
  "type\030\001 \001(\005\022\014\n\004pick\030\002 \001(\005\022\016\n\006itemid\030\003 \001(\004"
  "\032X\n\013FantasyTeam\022\021\n\tsectionid\030\001 \001(\005\0226\n\005sl"
  "ots\030\002 \003(\0132\'.CMsgGCCStrike15_v2_Fantasy.F"
  "antasySlot\"\"\n\021CAttribute_String\022\r\n\005value"
  "\030\001 \001(\t\"\316\003\n\036CMsgLegacySource1ClientWelcom"
  "e\022\017\n\007version\030\001 \001(\r\022\021\n\tgame_data\030\002 \001(\014\022;\n"
  "\033outofdate_subscribed_caches\030\003 \003(\0132\026.CMs"
  "gSOCacheSubscribed\022A\n\032uptodate_subscribe"
  "d_caches\030\004 \003(\0132\035.CMsgSOCacheSubscription"
  "Check\022:\n\010location\030\005 \001(\0132(.CMsgLegacySour"
  "ce1ClientWelcome.Location\022\022\n\ngame_data2\030"
  "\006 \001(\014\022$\n\034rtime32_gc_welcome_timestamp\030\007 "
  "\001(\r\022\020\n\010currency\030\010 \001(\r\022\017\n\007balance\030\t \001(\r\022\023"
  "\n\013balance_url\030\n \001(\t\022\030\n\020txn_country_code\030"
  "\013 \001(\t\032@\n\010Location\022\020\n\010latitude\030\001 \001(\002\022\021\n\tl"
  "ongitude\030\002 \001(\002\022\017\n\007country\030\003 \001(\t\"\304\001\n\024CMsg"
  "CStrike15Welcome\022\027\n\017store_item_hash\030\005 \001("
  "\r\022\037\n\027timeplayedconsecutively\030\006 \001(\r\022\031\n\021ti"
  "me_first_played\030\n \001(\r\022\030\n\020last_time_playe"
  "d\030\014 \001(\r\022\027\n\017last_ip_address\030\r \001(\r\022\022\n\ngsco"
  "okieid\030\022 \001(\004\022\020\n\010uniqueid\030\023 \001(\004\"\233\001\n1CMsgG"
  "CCStrike15_v2_ClientVarValueNotification"
  "Info\022\022\n\nvalue_name\030\001 \001(\t\022\021\n\tvalue_int\030\002 "
  "\001(\005\022\023\n\013server_addr\030\003 \001(\r\022\023\n\013server_port\030"
  "\004 \001(\r\022\025\n\rchoked_blocks\030\005 \003(\t\"z\n1CMsgGCCS"
  "trike15_v2_ServerVarValueNotificationInf"
  "o\022\021\n\taccountid\030\001 \001(\r\022\022\n\nviewangles\030\002 \003(\r"
  "\022\014\n\004type\030\003 \001(\r\022\020\n\010userdata\030\004 \003(\r\",\n*CMsg"
  "GCCStrike15_v2_GiftsLeaderboardRequest\"\235"
  "\002\n+CMsgGCCStrike15_v2_GiftsLeaderboardRe"
  "sponse\022\022\n\nservertime\030\001 \001(\r\022\033\n\023time_perio"
  "d_seconds\030\002 \001(\r\022\031\n\021total_gifts_given\030\003 \001"
  "(\r\022\024\n\014total_givers\030\004 \001(\r\022R\n\007entries\030\005 \003("
  "\0132A.CMsgGCCStrike15_v2_GiftsLeaderboardR"
  "esponse.GiftLeaderboardEntry\0328\n\024GiftLead"
  "erboardEntry\022\021\n\taccountid\030\001 \001(\r\022\r\n\005gifts"
  "\030\002 \001(\r\"L\n)CMsgGCCStrike15_v2_ClientSubmi"
  "tSurveyVote\022\021\n\tsurvey_id\030\001 \001(\r\022\014\n\004vote\030\002"
  " \001(\r\"\?\n*CMsgGCCStrike15_v2_Server2GCClie"
  "ntValidate\022\021\n\taccountid\030\001 \001(\r\"r\n*CMsgGCC"
  "Strike15_v2_GC2ClientTournamentInfo\022\017\n\007e"
  "ventid\030\001 \001(\r\022\017\n\007stageid\030\002 \001(\r\022\021\n\tgame_ty"
  "pe\030\003 \001(\r\022\017\n\007teamids\030\004 \003(\r\"O\n\rCSOEconCoup"
  "on\022\025\n\007entryid\030\001 \001(\rB\004\200\246\035\001\022\016\n\006defidx\030\002 \001("
  "\r\022\027\n\017expiration_date\030\003 \001(\007\"a\n\033CSOAccount"
  "ItemPersonalStore\022\027\n\017generation_time\030\001 \001"
  "(\r\022\032\n\022redeemable_balance\030\002 \001(\r\022\r\n\005items\030"
  "\003 \003(\004\"Z\n\020CSOAccountXpShop\022\027\n\017generation_"
  "time\030\001 \001(\r\022\032\n\022redeemable_balance\030\002 \001(\r\022\021"
  "\n\txp_tracks\030\003 \003(\r\"6\n#CSOAccountKeychainR"
  "emoveToolCharges\022\017\n\007charges\030\001 \001(\r\"Y\n\020CSO"
  "QuestProgress\022\025\n\007questid\030\001 \001(\rB\004\200\246\035\001\022\030\n\020"
  "points_remaining\030\002 \001(\r\022\024\n\014bonus_points\030\003"
  " \001(\r\"\315\001\n\033CSOAccountSeasonalOperation\022\032\n\014"
  "season_value\030\001 \001(\rB\004\200\246\035\001\022\025\n\rtier_unlocke"
  "d\030\002 \001(\r\022\025\n\rpremium_tiers\030\003 \001(\r\022\022\n\nmissio"
  "n_id\030\004 \001(\r\022\032\n\022missions_completed\030\005 \001(\r\022\032"
  "\n\022redeemable_balance\030\006 \001(\r\022\030\n\020season_pas"
  "s_time\030\007 \001(\r\"R\n\037CSOAccountRecurringSubsc"
  "ription\022\027\n\017time_next_cycle\030\001 \001(\r\022\026\n\016time"
  "_initiated\030\002 \001(\r\"\257\001\n\024CSOPersonaDataPubli"
  "c\022\024\n\014player_level\030\001 \001(\005\022-\n\014commendation\030"
  "\002 \001(\0132\027.PlayerCommendationInfo\022\026\n\016elevat"
  "ed_state\030\003 \001(\010\022\"\n\032xp_trail_timestamp_ref"
  "resh\030\004 \001(\r\022\026\n\016xp_trail_level\030\005 \001(\r\"\240\001\n(C"
  "MsgGCCStrike15_v2_GC2ClientNotifyXPShop\022"
  "#\n\010prematch\030\001 \001(\0132\021.CSOAccountXpShop\022$\n\t"
  "postmatch\030\002 \001(\0132\021.CSOAccountXpShop\022\022\n\ncu"
  "rrent_xp\030\003 \001(\r\022\025\n\rcurrent_level\030\004 \001(\r\"-\n"
  "+CMsgGCCStrike15_v2_Client2GcAckXPShopTr"
  "acks\"-\n\033CMsgGC_GlobalGame_Subscribe\022\016\n\006t"
  "icket\030\001 \001(\004\"1\n\035CMsgGC_GlobalGame_Unsubsc"
  "ribe\022\020\n\010timeleft\030\001 \001(\005\"P\n\026CMsgGC_GlobalG"
  "ame_Play\022\016\n\006ticket\030\001 \001(\004\022\022\n\ngametimems\030\002"
  " \001(\r\022\022\n\nmsperpoint\030\003 \001(\r\"=\n%CMsgGCCStrik"
  "e15_v2_AcknowledgePenalty\022\024\n\014acknowledge"
  "d\030\001 \001(\005\"{\n/CMsgGCCStrike15_v2_Client2GCR"
  "equestPrestigeCoin\022\020\n\010defindex\030\001 \001(\r\022\021\n\t"
  "upgradeid\030\002 \001(\004\022\r\n\005hours\030\003 \001(\r\022\024\n\014presti"
  "getime\030\004 \001(\r\"F\n(CMsgGCCStrike15_v2_Clien"
  "t2GCStreamUnlock\022\016\n\006ticket\030\001 \001(\004\022\n\n\002os\030\002"
  " \001(\005\"<\n+CMsgGCCStrike15_v2_ClientToGCReq"
  "uestElevate\022\r\n\005stage\030\001 \001(\r\"C\n!CMsgGCCStr"
  "ike15_v2_ClientToGCChat\022\020\n\010match_id\030\001 \001("
  "\004\022\014\n\004text\030\002 \001(\t\"E\n!CMsgGCCStrike15_v2_GC"
  "ToClientChat\022\022\n\naccount_id\030\001 \001(\r\022\014\n\004text"
  "\030\002 \001(\t\"E\n$CMsgGCCStrike15_v2_ClientAuthK"
  "eyCode\022\017\n\007eventid\030\001 \001(\r\022\014\n\004code\030\002 \001(\t\"F\n"
  "\036CMsgGCCStrike15_GotvSyncPacket\022$\n\004data\030"
  "\001 \001(\0132\026.CEngineGotvSyncPacket\"\223\002\n\033Player"
  "DecalDigitalSignature\022\021\n\tsignature\030\001 \001(\014"
  "\022\021\n\taccountid\030\002 \001(\r\022\r\n\005rtime\030\003 \001(\r\022\016\n\006en"
  "dpos\030\004 \003(\002\022\020\n\010startpos\030\005 \003(\002\022\014\n\004left\030\006 \003"
  "(\002\022\021\n\ttx_defidx\030\007 \001(\r\022\020\n\010entindex\030\010 \001(\005\022"
  "\016\n\006hitbox\030\t \001(\r\022\024\n\014creationtime\030\n \001(\002\022\021\n"
  "\tequipslot\030\013 \001(\r\022\020\n\010trace_id\030\014 \001(\r\022\016\n\006no"
  "rmal\030\r \003(\002\022\017\n\007tint_id\030\016 \001(\r\"f\n(CMsgGCCSt"
  "rike15_v2_ClientPlayerDecalSign\022*\n\004data\030"
  "\001 \001(\0132\034.PlayerDecalDigitalSignature\022\016\n\006i"
  "temid\030\002 \001(\004\"4\n!CMsgGCCStrike15_v2_BetaEn"
  "rollment\022\017\n\007eresult\030\001 \001(\r\"_\n(CMsgGCCStri"
  "ke15_v2_ClientLogonFatalError\022\021\n\terrorco"
  "de\030\001 \001(\r\022\017\n\007message\030\002 \001(\t\022\017\n\007country\030\003 \001"
  "(\t\"S\n\"CMsgGCCStrike15_v2_ClientPollState"
  "\022\016\n\006pollid\030\001 \001(\r\022\r\n\005names\030\002 \003(\t\022\016\n\006value"
  "s\030\003 \003(\005\"\244\001\n!CMsgGCCStrike15_v2_Party_Reg"
  "ister\022\n\n\002id\030\001 \001(\r\022\013\n\003ver\030\002 \001(\r\022\013\n\003apr\030\003 "
  "\001(\r\022\013\n\003ark\030\004 \001(\r\022\013\n\003nby\030\005 \001(\r\022\013\n\003grp\030\006 \001"
  "(\r\022\r\n\005slots\030\007 \001(\r\022\020\n\010launcher\030\010 \001(\r\022\021\n\tg"
  "ame_type\030\t \001(\r\"{\n\037CMsgGCCStrike15_v2_Par"
  "ty_Search\022\013\n\003ver\030\001 \001(\r\022\013\n\003apr\030\002 \001(\r\022\013\n\003a"
  "rk\030\003 \001(\r\022\014\n\004grps\030\004 \003(\r\022\020\n\010launcher\030\005 \001(\r"
  "\022\021\n\tgame_type\030\006 \001(\r\"\327\001\n&CMsgGCCStrike15_"
  "v2_Party_SearchResults\022>\n\007entries\030\001 \003(\0132"
  "-.CMsgGCCStrike15_v2_Party_SearchResults"
  ".Entry\032m\n\005Entry\022\n\n\002id\030\001 \001(\r\022\013\n\003grp\030\002 \001(\r"
  "\022\021\n\tgame_type\030\003 \001(\r\022\013\n\003apr\030\004 \001(\r\022\013\n\003ark\030"
  "\005 \001(\r\022\013\n\003loc\030\006 \001(\r\022\021\n\taccountid\030\007 \001(\r\"E\n"
  "\037CMsgGCCStrike15_v2_Party_Invite\022\021\n\tacco"
  "untid\030\001 \001(\r\022\017\n\007lobbyid\030\002 \001(\r\"\302\001\n)CMsgGCC"
  "Strike15_v2_Account_RequestCoPlays\022B\n\007pl"
  "ayers\030\001 \003(\01321.CMsgGCCStrike15_v2_Account"
  "_RequestCoPlays.Player\022\022\n\nservertime\030\002 \001"
  "(\r\032=\n\006Player\022\021\n\taccountid\030\001 \001(\r\022\020\n\010rtcop"
  "lay\030\002 \001(\r\022\016\n\006online\030\003 \001(\010\"\244\001\n*CMsgGCCStr"
  "ike15_v2_ClientToGCRequestTicket\022\033\n\023auth"
  "orized_steam_id\030\001 \001(\006\022\034\n\024authorized_publ"
  "ic_ip\030\002 \001(\007\022\033\n\023gameserver_steam_id\030\003 \001(\006"
  "\022\036\n\026gameserver_sdr_routing\030\005 \001(\t\">\n!CMsg"
  "GCToClientSteamDatagramTicket\022\031\n\021seriali"
  "zed_ticket\030\020 \001(\014\"(\n&CMsgGCCStrike15_v2_C"
  "lientRequestOffers\"\\\n(CMsgGCCStrike15_v2"
  "_ClientRequestSouvenir\022\016\n\006itemid\030\001 \001(\004\022\017"
  "\n\007matchid\030\002 \001(\004\022\017\n\007eventid\030\003 \001(\005\"F\n\'CMsg"
  "GCCStrike15_v2_ClientAccountBalance\022\016\n\006a"
  "mount\030\001 \001(\004\022\013\n\003url\030\002 \001(\t\"M\n\'CMsgGCCStrik"
  "e15_v2_ClientPartyJoinRelay\022\021\n\taccountid"
  "\030\001 \001(\r\022\017\n\007lobbyid\030\002 \001(\004\"\224\001\n%CMsgGCCStrik"
  "e15_v2_ClientPartyWarning\022=\n\007entries\030\001 \003"
  "(\0132,.CMsgGCCStrike15_v2_ClientPartyWarni"
  "ng.Entry\032,\n\005Entry\022\021\n\taccountid\030\001 \001(\r\022\020\n\010"
  "warntype\030\002 \001(\r\"K\n#CMsgGCCStrike15_v2_Set"
  "EventFavorite\022\017\n\007eventid\030\001 \001(\004\022\023\n\013is_fav"
  "orite\030\002 \001(\010\"B\n,CMsgGCCStrike15_v2_GetEve"
  "ntFavorites_Request\022\022\n\nall_events\030\001 \001(\010\""
  "r\n-CMsgGCCStrike15_v2_GetEventFavorites_"
  "Response\022\022\n\nall_events\030\001 \001(\010\022\026\n\016json_fav"
  "orites\030\002 \001(\t\022\025\n\rjson_featured\030\003 \001(\t\"\325\001\n#"
  "CMsgGCCStrike15_v2_ClientPerfReport\022;\n\007e"
  "ntries\030\001 \003(\0132*.CMsgGCCStrike15_v2_Client"
  "PerfReport.Entry\032q\n\005Entry\022\023\n\013perfcounter"
  "\030\001 \001(\r\022\016\n\006length\030\002 \001(\r\022\021\n\treference\030\003 \001("
  "\014\022\016\n\006actual\030\004 \001(\014\022\020\n\010sourceid\030\005 \001(\r\022\016\n\006s"
  "tatus\030\006 \001(\r\"Q\n\014CVDiagnostic\022\n\n\002id\030\001 \001(\r\022"
  "\020\n\010extended\030\002 \001(\r\022\r\n\005value\030\003 \001(\004\022\024\n\014stri"
  "ng_value\030\004 \001(\t\"\360\003\n)CMsgGCCStrike15_v2_Cl"
  "ientReportValidation\022\023\n\013file_report\030\001 \001("
  "\t\022\024\n\014command_line\030\002 \001(\t\022\023\n\013total_files\030\003"
  " \001(\r\022\026\n\016internal_error\030\004 \001(\r\022\022\n\ntrust_ti"
  "me\030\005 \001(\r\022\025\n\rcount_pending\030\006 \001(\r\022\027\n\017count"
  "_completed\030\007 \001(\r\022\022\n\nprocess_id\030\010 \001(\r\022\021\n\t"
  "osversion\030\t \001(\005\022\033\n\023clientreportversion\030\n"
  " \001(\r\022\021\n\tstatus_id\030\013 \001(\r\022\023\n\013diagnostic1\030\014"
  " \001(\r\022\023\n\013diagnostic2\030\r \001(\004\022\023\n\013diagnostic3"
  "\030\016 \001(\004\022\030\n\020last_launch_data\030\017 \001(\t\022\024\n\014repo"
  "rt_count\030\020 \001(\r\022\023\n\013client_time\030\021 \001(\004\022\023\n\013d"
  "iagnostic4\030\022 \001(\004\022\023\n\013diagnostic5\030\023 \001(\004\022\"\n"
  "\013diagnostics\030\024 \003(\0132\r.CVDiagnostic\"\250\002\n,CM"
  "sgGCCStrike15_v2_GC2ClientRefuseSecureMo"
  "de\022\023\n\013file_report\030\001 \001(\t\022\033\n\023offer_insecur"
  "e_mode\030\002 \001(\010\022\031\n\021offer_secure_mode\030\003 \001(\010\022"
  "\030\n\020show_unsigned_ui\030\004 \001(\010\022\021\n\tkick_user\030\005"
  " \001(\010\022\027\n\017show_trusted_ui\030\006 \001(\010\022 \n\030show_wa"
  "rning_not_trusted\030\007 \001(\010\022\"\n\032show_warning_"
  "not_trusted_2\030\010 \001(\010\022\037\n\027files_prevented_t"
  "rusted\030\t \001(\t\"T\n-CMsgGCCStrike15_v2_GC2Cl"
  "ientRequestValidation\022\023\n\013full_report\030\001 \001"
  "(\010\022\016\n\006module\030\002 \001(\t\"\313\001\n&CMsgGCCStrike15_v"
  "2_GC2ClientInitSystem\022\014\n\004load\030\001 \001(\010\022\014\n\004n"
  "ame\030\002 \001(\t\022\022\n\noutputname\030\003 \001(\t\022\020\n\010key_dat"
  "a\030\004 \001(\014\022\020\n\010sha_hash\030\005 \001(\014\022\016\n\006cookie\030\006 \001("
  "\005\022\020\n\010manifest\030\007 \001(\t\022\026\n\016system_package\030\010 "
  "\001(\014\022\023\n\013load_system\030\t \001(\010\"\245\002\n/CMsgGCCStri"
  "ke15_v2_GC2ClientInitSystem_Response\022\017\n\007"
  "success\030\001 \001(\010\022\022\n\ndiagnostic\030\002 \001(\t\022\020\n\010sha"
  "_hash\030\003 \001(\014\022\020\n\010response\030\004 \001(\005\022\023\n\013error_c"
  "ode1\030\005 \001(\005\022\023\n\013error_code2\030\006 \001(\005\022\016\n\006handl"
  "e\030\007 \001(\003\022E\n\014einit_result\030\010 \001(\0162\022.EInitSys"
  "temResult:\033k_EInitSystemResult_Invalid\022\023"
  "\n\013aux_system1\030\t \001(\005\022\023\n\013aux_system2\030\n \001(\005"
  "\"P\n/CMsgGCCStrike15_v2_SetPlayerLeaderbo"
  "ardSafeName\022\035\n\025leaderboard_safe_name\030\001 \001"
  "(\t*\361(\n\nECsgoGCMsg\022\036\n\031k_EMsgGCCStrike15_v"
  "2_Base\020\214G\022*\n%k_EMsgGCCStrike15_v2_Matchm"
  "akingStart\020\215G\022)\n$k_EMsgGCCStrike15_v2_Ma"
  "tchmakingStop\020\216G\0226\n1k_EMsgGCCStrike15_v2"
  "_MatchmakingClient2ServerPing\020\217G\0224\n/k_EM"
  "sgGCCStrike15_v2_MatchmakingGC2ClientUpd"
  "ate\020\220G\022>\n9k_EMsgGCCStrike15_v2_Matchmaki"
  "ngServerReservationResponse\020\222G\0225\n0k_EMsg"
  "GCCStrike15_v2_MatchmakingGC2ClientReser"
  "ve\020\223G\0223\n.k_EMsgGCCStrike15_v2_Matchmakin"
  "gClient2GCHello\020\225G\0223\n.k_EMsgGCCStrike15_"
  "v2_MatchmakingGC2ClientHello\020\226G\0225\n0k_EMs"
  "gGCCStrike15_v2_MatchmakingGC2ClientAban"
  "don\020\230G\022:\n5k_EMsgGCCStrike15_v2_Matchmaki"
  "ngOperator2GCBlogUpdate\020\235G\022:\n5k_EMsgGCCS"
  "trike15_v2_ServerNotificationForUserPena"
  "lty\020\236G\022,\n\'k_EMsgGCCStrike15_v2_ClientRep"
  "ortPlayer\020\237G\022,\n\'k_EMsgGCCStrike15_v2_Cli"
  "entReportServer\020\240G\022-\n(k_EMsgGCCStrike15_"
  "v2_ClientCommendPlayer\020\241G\022.\n)k_EMsgGCCSt"
  "rike15_v2_ClientReportResponse\020\242G\0222\n-k_E"
  "MsgGCCStrike15_v2_ClientCommendPlayerQue"
  "ry\020\243G\022:\n5k_EMsgGCCStrike15_v2_ClientComm"
  "endPlayerQueryResponse\020\244G\022(\n#k_EMsgGCCSt"
  "rike15_v2_WatchInfoUsers\020\246G\0225\n0k_EMsgGCC"
  "Strike15_v2_ClientRequestPlayersProfile\020"
  "\247G\022(\n#k_EMsgGCCStrike15_v2_PlayersProfil"
  "e\020\250G\0223\n.k_EMsgGCCStrike15_v2_PlayerOverw"
  "atchCaseUpdate\020\253G\0227\n2k_EMsgGCCStrike15_v"
  "2_PlayerOverwatchCaseAssignment\020\254G\0223\n.k_"
  "EMsgGCCStrike15_v2_PlayerOverwatchCaseSt"
  "atus\020\255G\022*\n%k_EMsgGCCStrike15_v2_GC2Clien"
  "tTextMsg\020\256G\022*\n%k_EMsgGCCStrike15_v2_Clie"
  "nt2GCTextMsg\020\257G\0220\n+k_EMsgGCCStrike15_v2_"
  "MatchEndRunRewardDrops\020\260G\0229\n4k_EMsgGCCSt"
  "rike15_v2_MatchEndRewardDropsNotificatio"
  "n\020\261G\0228\n3k_EMsgGCCStrike15_v2_ClientReque"
  "stWatchInfoFriends2\020\262G\022#\n\036k_EMsgGCCStrik"
  "e15_v2_MatchList\020\263G\022:\n5k_EMsgGCCStrike15"
  "_v2_MatchListRequestCurrentLiveGames\020\264G\022"
  "9\n4k_EMsgGCCStrike15_v2_MatchListRequest"
  "RecentUserGames\020\265G\0224\n/k_EMsgGCCStrike15_"
  "v2_GC2ServerReservationUpdate\020\266G\0228\n3k_EM"
  "sgGCCStrike15_v2_ClientVarValueNotificat"
  "ionInfo\020\270G\0229\n4k_EMsgGCCStrike15_v2_Match"
  "ListRequestTournamentGames\020\272G\0226\n1k_EMsgG"
  "CCStrike15_v2_MatchListRequestFullGameIn"
  "fo\020\273G\0221\n,k_EMsgGCCStrike15_v2_GiftsLeade"
  "rboardRequest\020\274G\0222\n-k_EMsgGCCStrike15_v2"
  "_GiftsLeaderboardResponse\020\275G\0228\n3k_EMsgGC"
  "CStrike15_v2_ServerVarValueNotificationI"
  "nfo\020\276G\0220\n+k_EMsgGCCStrike15_v2_ClientSub"
  "mitSurveyVote\020\300G\0221\n,k_EMsgGCCStrike15_v2"
  "_Server2GCClientValidate\020\301G\0229\n4k_EMsgGCC"
  "Strike15_v2_MatchListRequestLiveGameForU"
  "ser\020\302G\022>\n9k_EMsgGCCStrike15_v2_Client2GC"
  "EconPreviewDataBlockRequest\020\304G\022\?\n:k_EMsg"
  "GCCStrike15_v2_Client2GCEconPreviewDataB"
  "lockResponse\020\305G\0220\n+k_EMsgGCCStrike15_v2_"
  "AccountPrivacySettings\020\306G\022+\n&k_EMsgGCCSt"
  "rike15_v2_SetMyActivityInfo\020\307G\022\?\n:k_EMsg"
  "GCCStrike15_v2_MatchListRequestTournamen"
  "tPredictions\020\310G\022>\n9k_EMsgGCCStrike15_v2_"
  "MatchListUploadTournamentPredictions\020\311G\022"
  "&\n!k_EMsgGCCStrike15_v2_DraftSummary\020\312G\022"
  "5\n0k_EMsgGCCStrike15_v2_ClientRequestJoi"
  "nFriendData\020\313G\0225\n0k_EMsgGCCStrike15_v2_C"
  "lientRequestJoinServerData\020\314G\0221\n,k_EMsgG"
  "CCStrike15_v2_ClientRequestNewMission\020\315G"
  "\0221\n,k_EMsgGCCStrike15_v2_GC2ClientTourna"
  "mentInfo\020\317G\022\"\n\035k_EMsgGC_GlobalGame_Subsc"
  "ribe\020\320G\022$\n\037k_EMsgGC_GlobalGame_Unsubscri"
  "be\020\321G\022\035\n\030k_EMsgGC_GlobalGame_Play\020\322G\022,\n\'"
  "k_EMsgGCCStrike15_v2_AcknowledgePenalty\020"
  "\323G\0226\n1k_EMsgGCCStrike15_v2_Client2GCRequ"
  "estPrestigeCoin\020\324G\022.\n)k_EMsgGCCStrike15_"
  "v2_GC2ClientGlobalStats\020\325G\022/\n*k_EMsgGCCS"
  "trike15_v2_Client2GCStreamUnlock\020\326G\0222\n-k"
  "_EMsgGCCStrike15_v2_FantasyRequestClient"
  "Data\020\327G\0221\n,k_EMsgGCCStrike15_v2_FantasyU"
  "pdateClientData\020\330G\0227\n2k_EMsgGCCStrike15_"
  "v2_GCToClientSteamdatagramTicket\020\331G\0221\n,k"
  "_EMsgGCCStrike15_v2_ClientToGCRequestTic"
  "ket\020\332G\0222\n-k_EMsgGCCStrike15_v2_ClientToG"
  "CRequestElevate\020\333G\022$\n\037k_EMsgGCCStrike15_"
  "v2_GlobalChat\020\334G\022.\n)k_EMsgGCCStrike15_v2"
  "_GlobalChat_Subscribe\020\335G\0220\n+k_EMsgGCCStr"
  "ike15_v2_GlobalChat_Unsubscribe\020\336G\022+\n&k_"
  "EMsgGCCStrike15_v2_ClientAuthKeyCode\020\337G\022"
  "(\n#k_EMsgGCCStrike15_v2_GotvSyncPacket\020\340"
  "G\022/\n*k_EMsgGCCStrike15_v2_ClientPlayerDe"
  "calSign\020\341G\022/\n*k_EMsgGCCStrike15_v2_Clien"
  "tLogonFatalError\020\343G\022)\n$k_EMsgGCCStrike15"
  "_v2_ClientPollState\020\344G\022(\n#k_EMsgGCCStrik"
  "e15_v2_Party_Register\020\345G\022*\n%k_EMsgGCCStr"
  "ike15_v2_Party_Unregister\020\346G\022&\n!k_EMsgGC"
  "CStrike15_v2_Party_Search\020\347G\022&\n!k_EMsgGC"
  "CStrike15_v2_Party_Invite\020\350G\0220\n+k_EMsgGC"
  "CStrike15_v2_Account_RequestCoPlays\020\351G\022,"
  "\n\'k_EMsgGCCStrike15_v2_ClientGCRankUpdat"
  "e\020\352G\022-\n(k_EMsgGCCStrike15_v2_ClientReque"
  "stOffers\020\353G\022.\n)k_EMsgGCCStrike15_v2_Clie"
  "ntAccountBalance\020\354G\022.\n)k_EMsgGCCStrike15"
  "_v2_ClientPartyJoinRelay\020\355G\022,\n\'k_EMsgGCC"
  "Strike15_v2_ClientPartyWarning\020\356G\022*\n%k_E"
  "MsgGCCStrike15_v2_SetEventFavorite\020\360G\0223\n"
  ".k_EMsgGCCStrike15_v2_GetEventFavorites_"
  "Request\020\361G\022*\n%k_EMsgGCCStrike15_v2_Clien"
  "tPerfReport\020\362G\0224\n/k_EMsgGCCStrike15_v2_G"
  "etEventFavorites_Response\020\363G\022/\n*k_EMsgGC"
  "CStrike15_v2_ClientRequestSouvenir\020\364G\0220\n"
  "+k_EMsgGCCStrike15_v2_ClientReportValida"
  "tion\020\365G\0223\n.k_EMsgGCCStrike15_v2_GC2Clien"
  "tRefuseSecureMode\020\366G\0224\n/k_EMsgGCCStrike1"
  "5_v2_GC2ClientRequestValidation\020\367G\0223\n.k_"
  "EMsgGCCStrike15_v2_ClientRedeemMissionRe"
  "ward\020\371G\022&\n!k_EMsgGCCStrike15_ClientDeepS"
  "tats\020\372G\0222\n-k_EMsgGCCStrike15_StartAgreem"
  "entSessionInGame\020\373G\022-\n(k_EMsgGCCStrike15"
  "_v2_GC2ClientInitSystem\020\374G\0226\n1k_EMsgGCCS"
  "trike15_v2_GC2ClientInitSystem_Response\020"
  "\375G\022\'\n\"k_EMsgGCCStrike15_v2_PrivateQueues"
  "\020\376G\0229\n4k_EMsgGCCStrike15_v2_MatchListTou"
  "rnamentOperatorMgmt\020\377G\022(\n#k_EMsgGCCStrik"
  "e15_v2_BetaEnrollment\020\201H\0226\n1k_EMsgGCCStr"
  "ike15_v2_SetPlayerLeaderboardSafeName\020\202H"
  "\0220\n+k_EMsgGCCStrike15_v2_ClientRedeemFre"
  "eReward\020\203H\022-\n(k_EMsgGCCStrike15_v2_Clien"
  "tNetworkConfig\020\204H\022/\n*k_EMsgGCCStrike15_v"
  "2_GC2ClientNotifyXPShop\020\205H\0222\n-k_EMsgGCCS"
  "trike15_v2_Client2GcAckXPShopTracks\020\206H*\230"
  "\001\n\022ECsgoSteamUserStat\022&\n\"k_ECsgoSteamUse"
  "rStat_XpEarnedGames\020\001\022-\n)k_ECsgoSteamUse"
  "rStat_MatchWinsCompetitive\020\002\022+\n\'k_ECsgoS"
  "teamUserStat_SurvivedDangerZone\020\003*\241\001\n\027EC"
  "lientReportingVersion\022(\n$k_EClientReport"
  "ingVersion_OldVersion\020\000\022)\n%k_EClientRepo"
  "rtingVersion_BetaVersion\020\001\0221\n-k_EClientR"
  "eportingVersion_SupportsTrustedMode\020\002*\276\002"
  "\n\021EInitSystemResult\022\037\n\033k_EInitSystemResu"
  "lt_Invalid\020\000\022\037\n\033k_EInitSystemResult_Succ"
  "ess\020\001\022\034\n\030k_EInitSystemResult_None\020\002\022 \n\034k"
  "_EInitSystemResult_NotFound\020\003\022 \n\034k_EInit"
  "SystemResult_Existing\020\004\022\"\n\036k_EInitSystem"
  "Result_FailedOpen\020\005\022 \n\034k_EInitSystemResu"
  "lt_Mismatch\020\006\022\"\n\036k_EInitSystemResult_Fai"
  "ledInit\020\007\022\033\n\027k_EInitSystemResult_Max\020\010"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_cstrike15_5fgcmessages_2eproto_deps[3] = {
  &::descriptor_table_engine_5fgcmessages_2eproto,
  &::descriptor_table_gcsdk_5fgcmessages_2eproto,
  &::descriptor_table_steammessages_2eproto,
};
static ::_pbi::once_flag descriptor_table_cstrike15_5fgcmessages_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_cstrike15_5fgcmessages_2eproto = {
    false, false, 32438, descriptor_table_protodef_cstrike15_5fgcmessages_2eproto,
    "cstrike15_gcmessages.proto",
    &descriptor_table_cstrike15_5fgcmessages_2eproto_once, descriptor_table_cstrike15_5fgcmessages_2eproto_deps, 3, 169,
    schemas, file_default_instances, TableStruct_cstrike15_5fgcmessages_2eproto::offsets,
    file_level_metadata_cstrike15_5fgcmessages_2eproto, file_level_enum_descriptors_cstrike15_5fgcmessages_2eproto,
    file_level_service_descriptors_cstrike15_5fgcmessages_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_cstrike15_5fgcmessages_2eproto_getter() {
  return &descriptor_table_cstrike15_5fgcmessages_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_cstrike15_5fgcmessages_2eproto(&descriptor_table_cstrike15_5fgcmessages_2eproto);
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ECsgoGCMsg_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_cstrike15_5fgcmessages_2eproto);
  return file_level_enum_descriptors_cstrike15_5fgcmessages_2eproto[0];
}
bool ECsgoGCMsg_IsValid(int value) {
  switch (value) {
    case 9100:
    case 9101:
    case 9102:
    case 9103:
    case 9104:
    case 9106:
    case 9107:
    case 9109:
    case 9110:
    case 9112:
    case 9117:
    case 9118:
    case 9119:
    case 9120:
    case 9121:
    case 9122:
    case 9123:
    case 9124:
    case 9126:
    case 9127:
    case 9128:
    case 9131:
    case 9132:
    case 9133:
    case 9134:
    case 9135:
    case 9136:
    case 9137:
    case 9138:
    case 9139:
    case 9140:
    case 9141:
    case 9142:
    case 9144:
    case 9146:
    case 9147:
    case 9148:
    case 9149:
    case 9150:
    case 9152:
    case 9153:
    case 9154:
    case 9156:
    case 9157:
    case 9158:
    case 9159:
    case 9160:
    case 9161:
    case 9162:
    case 9163:
    case 9164:
    case 9165:
    case 9167:
    case 9168:
    case 9169:
    case 9170:
    case 9171:
    case 9172:
    case 9173:
    case 9174:
    case 9175:
    case 9176:
    case 9177:
    case 9178:
    case 9179:
    case 9180:
    case 9181:
    case 9182:
    case 9183:
    case 9184:
    case 9185:
    case 9187:
    case 9188:
    case 9189:
    case 9190:
    case 9191:
    case 9192:
    case 9193:
    case 9194:
    case 9195:
    case 9196:
    case 9197:
    case 9198:
    case 9200:
    case 9201:
    case 9202:
    case 9203:
    case 9204:
    case 9205:
    case 9206:
    case 9207:
    case 9209:
    case 9210:
    case 9211:
    case 9212:
    case 9213:
    case 9214:
    case 9215:
    case 9217:
    case 9218:
    case 9219:
    case 9220:
    case 9221:
    case 9222:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ECsgoSteamUserStat_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_cstrike15_5fgcmessages_2eproto);
  return file_level_enum_descriptors_cstrike15_5fgcmessages_2eproto[1];
}
bool ECsgoSteamUserStat_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EClientReportingVersion_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_cstrike15_5fgcmessages_2eproto);
  return file_level_enum_descriptors_cstrike15_5fgcmessages_2eproto[2];
}
bool EClientReportingVersion_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EInitSystemResult_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_cstrike15_5fgcmessages_2eproto);
  return file_level_enum_descriptors_cstrike15_5fgcmessages_2eproto[3];
}
bool EInitSystemResult_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class GameServerPing::_Internal {
 public:
  using HasBits = decltype(std::declval<GameServerPing>()._impl_._has_bits_);
  static void set_has_ping(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_ip(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_instances(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

GameServerPing::GameServerPing(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:GameServerPing)
}
GameServerPing::GameServerPing(const GameServerPing& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GameServerPing* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.ping_){}
    , decltype(_impl_.ip_){}
    , decltype(_impl_.instances_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.ping_, &from._impl_.ping_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.instances_) -
    reinterpret_cast<char*>(&_impl_.ping_)) + sizeof(_impl_.instances_));
  // @@protoc_insertion_point(copy_constructor:GameServerPing)
}

inline void GameServerPing::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.ping_){0}
    , decltype(_impl_.ip_){0u}
    , decltype(_impl_.instances_){0u}
  };
}

GameServerPing::~GameServerPing() {
  // @@protoc_insertion_point(destructor:GameServerPing)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GameServerPing::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GameServerPing::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GameServerPing::Clear() {
// @@protoc_insertion_point(message_clear_start:GameServerPing)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.ping_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.instances_) -
        reinterpret_cast<char*>(&_impl_.ping_)) + sizeof(_impl_.instances_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GameServerPing::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 ping = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_ping(&has_bits);
          _impl_.ping_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 ip = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_ip(&has_bits);
          _impl_.ip_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 instances = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_instances(&has_bits);
          _impl_.instances_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GameServerPing::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GameServerPing)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 ping = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_ping(), target);
  }

  // optional uint32 ip = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_ip(), target);
  }

  // optional uint32 instances = 5;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_instances(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameServerPing)
  return target;
}

size_t GameServerPing::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameServerPing)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional int32 ping = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_ping());
    }

    // optional uint32 ip = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_ip());
    }

    // optional uint32 instances = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_instances());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GameServerPing::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GameServerPing::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GameServerPing::GetClassData() const { return &_class_data_; }


void GameServerPing::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GameServerPing*>(&to_msg);
  auto& from = static_cast<const GameServerPing&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:GameServerPing)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.ping_ = from._impl_.ping_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.ip_ = from._impl_.ip_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.instances_ = from._impl_.instances_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GameServerPing::CopyFrom(const GameServerPing& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameServerPing)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameServerPing::IsInitialized() const {
  return true;
}

void GameServerPing::InternalSwap(GameServerPing* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GameServerPing, _impl_.instances_)
      + sizeof(GameServerPing::_impl_.instances_)
      - PROTOBUF_FIELD_OFFSET(GameServerPing, _impl_.ping_)>(
          reinterpret_cast<char*>(&_impl_.ping_),
          reinterpret_cast<char*>(&other->_impl_.ping_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GameServerPing::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cstrike15_5fgcmessages_2eproto_getter, &descriptor_table_cstrike15_5fgcmessages_2eproto_once,
      file_level_metadata_cstrike15_5fgcmessages_2eproto[0]);
}

// ===================================================================

class DataCenterPing::_Internal {
 public:
  using HasBits = decltype(std::declval<DataCenterPing>()._impl_._has_bits_);
  static void set_has_data_center_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_ping(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

DataCenterPing::DataCenterPing(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:DataCenterPing)
}
DataCenterPing::DataCenterPing(const DataCenterPing& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DataCenterPing* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.data_center_id_){}
    , decltype(_impl_.ping_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.data_center_id_, &from._impl_.data_center_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.ping_) -
    reinterpret_cast<char*>(&_impl_.data_center_id_)) + sizeof(_impl_.ping_));
  // @@protoc_insertion_point(copy_constructor:DataCenterPing)
}

inline void DataCenterPing::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.data_center_id_){0u}
    , decltype(_impl_.ping_){0}
  };
}

DataCenterPing::~DataCenterPing() {
  // @@protoc_insertion_point(destructor:DataCenterPing)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DataCenterPing::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void DataCenterPing::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DataCenterPing::Clear() {
// @@protoc_insertion_point(message_clear_start:DataCenterPing)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.data_center_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.ping_) -
        reinterpret_cast<char*>(&_impl_.data_center_id_)) + sizeof(_impl_.ping_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DataCenterPing::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional fixed32 data_center_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          _Internal::set_has_data_center_id(&has_bits);
          _impl_.data_center_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint32_t>(ptr);
          ptr += sizeof(uint32_t);
        } else
          goto handle_unusual;
        continue;
      // optional sint32 ping = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_ping(&has_bits);
          _impl_.ping_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DataCenterPing::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DataCenterPing)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional fixed32 data_center_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed32ToArray(1, this->_internal_data_center_id(), target);
  }

  // optional sint32 ping = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt32ToArray(2, this->_internal_ping(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DataCenterPing)
  return target;
}

size_t DataCenterPing::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DataCenterPing)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional fixed32 data_center_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 4;
    }

    // optional sint32 ping = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::SInt32SizePlusOne(this->_internal_ping());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DataCenterPing::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DataCenterPing::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DataCenterPing::GetClassData() const { return &_class_data_; }


void DataCenterPing::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DataCenterPing*>(&to_msg);
  auto& from = static_cast<const DataCenterPing&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:DataCenterPing)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.data_center_id_ = from._impl_.data_center_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.ping_ = from._impl_.ping_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DataCenterPing::CopyFrom(const DataCenterPing& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DataCenterPing)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DataCenterPing::IsInitialized() const {
  return true;
}

void DataCenterPing::InternalSwap(DataCenterPing* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DataCenterPing, _impl_.ping_)
      + sizeof(DataCenterPing::_impl_.ping_)
      - PROTOBUF_FIELD_OFFSET(DataCenterPing, _impl_.data_center_id_)>(
          reinterpret_cast<char*>(&_impl_.data_center_id_),
          reinterpret_cast<char*>(&other->_impl_.data_center_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DataCenterPing::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cstrike15_5fgcmessages_2eproto_getter, &descriptor_table_cstrike15_5fgcmessages_2eproto_once,
      file_level_metadata_cstrike15_5fgcmessages_2eproto[1]);
}

// ===================================================================

class DetailedSearchStatistic::_Internal {
 public:
  using HasBits = decltype(std::declval<DetailedSearchStatistic>()._impl_._has_bits_);
  static void set_has_game_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_search_time_avg(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_players_searching(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

DetailedSearchStatistic::DetailedSearchStatistic(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:DetailedSearchStatistic)
}
DetailedSearchStatistic::DetailedSearchStatistic(const DetailedSearchStatistic& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DetailedSearchStatistic* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.game_type_){}
    , decltype(_impl_.search_time_avg_){}
    , decltype(_impl_.players_searching_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.game_type_, &from._impl_.game_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.players_searching_) -
    reinterpret_cast<char*>(&_impl_.game_type_)) + sizeof(_impl_.players_searching_));
  // @@protoc_insertion_point(copy_constructor:DetailedSearchStatistic)
}

inline void DetailedSearchStatistic::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.game_type_){0u}
    , decltype(_impl_.search_time_avg_){0u}
    , decltype(_impl_.players_searching_){0u}
  };
}

DetailedSearchStatistic::~DetailedSearchStatistic() {
  // @@protoc_insertion_point(destructor:DetailedSearchStatistic)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DetailedSearchStatistic::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void DetailedSearchStatistic::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DetailedSearchStatistic::Clear() {
// @@protoc_insertion_point(message_clear_start:DetailedSearchStatistic)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.game_type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.players_searching_) -
        reinterpret_cast<char*>(&_impl_.game_type_)) + sizeof(_impl_.players_searching_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DetailedSearchStatistic::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 game_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_game_type(&has_bits);
          _impl_.game_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 search_time_avg = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_search_time_avg(&has_bits);
          _impl_.search_time_avg_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 players_searching = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_players_searching(&has_bits);
          _impl_.players_searching_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DetailedSearchStatistic::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DetailedSearchStatistic)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 game_type = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_game_type(), target);
  }

  // optional uint32 search_time_avg = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_search_time_avg(), target);
  }

  // optional uint32 players_searching = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_players_searching(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DetailedSearchStatistic)
  return target;
}

size_t DetailedSearchStatistic::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DetailedSearchStatistic)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint32 game_type = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_game_type());
    }

    // optional uint32 search_time_avg = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_search_time_avg());
    }

    // optional uint32 players_searching = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_players_searching());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DetailedSearchStatistic::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DetailedSearchStatistic::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DetailedSearchStatistic::GetClassData() const { return &_class_data_; }


void DetailedSearchStatistic::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DetailedSearchStatistic*>(&to_msg);
  auto& from = static_cast<const DetailedSearchStatistic&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:DetailedSearchStatistic)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.game_type_ = from._impl_.game_type_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.search_time_avg_ = from._impl_.search_time_avg_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.players_searching_ = from._impl_.players_searching_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DetailedSearchStatistic::CopyFrom(const DetailedSearchStatistic& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DetailedSearchStatistic)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DetailedSearchStatistic::IsInitialized() const {
  return true;
}

void DetailedSearchStatistic::InternalSwap(DetailedSearchStatistic* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DetailedSearchStatistic, _impl_.players_searching_)
      + sizeof(DetailedSearchStatistic::_impl_.players_searching_)
      - PROTOBUF_FIELD_OFFSET(DetailedSearchStatistic, _impl_.game_type_)>(
          reinterpret_cast<char*>(&_impl_.game_type_),
          reinterpret_cast<char*>(&other->_impl_.game_type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DetailedSearchStatistic::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cstrike15_5fgcmessages_2eproto_getter, &descriptor_table_cstrike15_5fgcmessages_2eproto_once,
      file_level_metadata_cstrike15_5fgcmessages_2eproto[2]);
}

// ===================================================================

class TournamentPlayer::_Internal {
 public:
  using HasBits = decltype(std::declval<TournamentPlayer>()._impl_._has_bits_);
  static void set_has_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_player_nick(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_player_name(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_player_dob(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_player_flag(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_player_location(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_player_desc(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

TournamentPlayer::TournamentPlayer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TournamentPlayer)
}
TournamentPlayer::TournamentPlayer(const TournamentPlayer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TournamentPlayer* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.player_nick_){}
    , decltype(_impl_.player_name_){}
    , decltype(_impl_.player_flag_){}
    , decltype(_impl_.player_location_){}
    , decltype(_impl_.player_desc_){}
    , decltype(_impl_.account_id_){}
    , decltype(_impl_.player_dob_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.player_nick_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.player_nick_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_player_nick()) {
    _this->_impl_.player_nick_.Set(from._internal_player_nick(), 
      _this->GetArenaForAllocation());
  }
  _impl_.player_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.player_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_player_name()) {
    _this->_impl_.player_name_.Set(from._internal_player_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.player_flag_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.player_flag_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_player_flag()) {
    _this->_impl_.player_flag_.Set(from._internal_player_flag(), 
      _this->GetArenaForAllocation());
  }
  _impl_.player_location_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.player_location_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_player_location()) {
    _this->_impl_.player_location_.Set(from._internal_player_location(), 
      _this->GetArenaForAllocation());
  }
  _impl_.player_desc_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.player_desc_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_player_desc()) {
    _this->_impl_.player_desc_.Set(from._internal_player_desc(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.account_id_, &from._impl_.account_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.player_dob_) -
    reinterpret_cast<char*>(&_impl_.account_id_)) + sizeof(_impl_.player_dob_));
  // @@protoc_insertion_point(copy_constructor:TournamentPlayer)
}

inline void TournamentPlayer::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.player_nick_){}
    , decltype(_impl_.player_name_){}
    , decltype(_impl_.player_flag_){}
    , decltype(_impl_.player_location_){}
    , decltype(_impl_.player_desc_){}
    , decltype(_impl_.account_id_){0u}
    , decltype(_impl_.player_dob_){0u}
  };
  _impl_.player_nick_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.player_nick_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.player_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.player_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.player_flag_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.player_flag_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.player_location_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.player_location_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.player_desc_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.player_desc_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TournamentPlayer::~TournamentPlayer() {
  // @@protoc_insertion_point(destructor:TournamentPlayer)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TournamentPlayer::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.player_nick_.Destroy();
  _impl_.player_name_.Destroy();
  _impl_.player_flag_.Destroy();
  _impl_.player_location_.Destroy();
  _impl_.player_desc_.Destroy();
}

void TournamentPlayer::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TournamentPlayer::Clear() {
// @@protoc_insertion_point(message_clear_start:TournamentPlayer)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.player_nick_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.player_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.player_flag_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.player_location_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.player_desc_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x00000060u) {
    ::memset(&_impl_.account_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.player_dob_) -
        reinterpret_cast<char*>(&_impl_.account_id_)) + sizeof(_impl_.player_dob_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TournamentPlayer::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 account_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_account_id(&has_bits);
          _impl_.account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string player_nick = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_player_nick();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "TournamentPlayer.player_nick");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string player_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_player_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "TournamentPlayer.player_name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional uint32 player_dob = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_player_dob(&has_bits);
          _impl_.player_dob_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string player_flag = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_player_flag();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "TournamentPlayer.player_flag");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string player_location = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_player_location();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "TournamentPlayer.player_location");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string player_desc = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_player_desc();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "TournamentPlayer.player_desc");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TournamentPlayer::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TournamentPlayer)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_account_id(), target);
  }

  // optional string player_nick = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_player_nick().data(), static_cast<int>(this->_internal_player_nick().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TournamentPlayer.player_nick");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_player_nick(), target);
  }

  // optional string player_name = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_player_name().data(), static_cast<int>(this->_internal_player_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TournamentPlayer.player_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_player_name(), target);
  }

  // optional uint32 player_dob = 4;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_player_dob(), target);
  }

  // optional string player_flag = 5;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_player_flag().data(), static_cast<int>(this->_internal_player_flag().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TournamentPlayer.player_flag");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_player_flag(), target);
  }

  // optional string player_location = 6;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_player_location().data(), static_cast<int>(this->_internal_player_location().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TournamentPlayer.player_location");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_player_location(), target);
  }

  // optional string player_desc = 7;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_player_desc().data(), static_cast<int>(this->_internal_player_desc().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TournamentPlayer.player_desc");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_player_desc(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TournamentPlayer)
  return target;
}

size_t TournamentPlayer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TournamentPlayer)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional string player_nick = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_player_nick());
    }

    // optional string player_name = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_player_name());
    }

    // optional string player_flag = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_player_flag());
    }

    // optional string player_location = 6;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_player_location());
    }

    // optional string player_desc = 7;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_player_desc());
    }

    // optional uint32 account_id = 1;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_account_id());
    }

    // optional uint32 player_dob = 4;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_player_dob());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TournamentPlayer::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TournamentPlayer::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TournamentPlayer::GetClassData() const { return &_class_data_; }


void TournamentPlayer::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TournamentPlayer*>(&to_msg);
  auto& from = static_cast<const TournamentPlayer&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TournamentPlayer)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_player_nick(from._internal_player_nick());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_player_name(from._internal_player_name());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_player_flag(from._internal_player_flag());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_set_player_location(from._internal_player_location());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_set_player_desc(from._internal_player_desc());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.account_id_ = from._impl_.account_id_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.player_dob_ = from._impl_.player_dob_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TournamentPlayer::CopyFrom(const TournamentPlayer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TournamentPlayer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TournamentPlayer::IsInitialized() const {
  return true;
}

void TournamentPlayer::InternalSwap(TournamentPlayer* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.player_nick_, lhs_arena,
      &other->_impl_.player_nick_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.player_name_, lhs_arena,
      &other->_impl_.player_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.player_flag_, lhs_arena,
      &other->_impl_.player_flag_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.player_location_, lhs_arena,
      &other->_impl_.player_location_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.player_desc_, lhs_arena,
      &other->_impl_.player_desc_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TournamentPlayer, _impl_.player_dob_)
      + sizeof(TournamentPlayer::_impl_.player_dob_)
      - PROTOBUF_FIELD_OFFSET(TournamentPlayer, _impl_.account_id_)>(
          reinterpret_cast<char*>(&_impl_.account_id_),
          reinterpret_cast<char*>(&other->_impl_.account_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TournamentPlayer::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cstrike15_5fgcmessages_2eproto_getter, &descriptor_table_cstrike15_5fgcmessages_2eproto_once,
      file_level_metadata_cstrike15_5fgcmessages_2eproto[3]);
}

// ===================================================================

class TournamentTeam::_Internal {
 public:
  using HasBits = decltype(std::declval<TournamentTeam>()._impl_._has_bits_);
  static void set_has_team_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_team_tag(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_team_flag(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_team_name(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

TournamentTeam::TournamentTeam(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TournamentTeam)
}
TournamentTeam::TournamentTeam(const TournamentTeam& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TournamentTeam* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.players_){from._impl_.players_}
    , decltype(_impl_.team_tag_){}
    , decltype(_impl_.team_flag_){}
    , decltype(_impl_.team_name_){}
    , decltype(_impl_.team_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.team_tag_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.team_tag_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_team_tag()) {
    _this->_impl_.team_tag_.Set(from._internal_team_tag(), 
      _this->GetArenaForAllocation());
  }
  _impl_.team_flag_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.team_flag_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_team_flag()) {
    _this->_impl_.team_flag_.Set(from._internal_team_flag(), 
      _this->GetArenaForAllocation());
  }
  _impl_.team_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.team_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_team_name()) {
    _this->_impl_.team_name_.Set(from._internal_team_name(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.team_id_ = from._impl_.team_id_;
  // @@protoc_insertion_point(copy_constructor:TournamentTeam)
}

inline void TournamentTeam::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.players_){arena}
    , decltype(_impl_.team_tag_){}
    , decltype(_impl_.team_flag_){}
    , decltype(_impl_.team_name_){}
    , decltype(_impl_.team_id_){0}
  };
  _impl_.team_tag_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.team_tag_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.team_flag_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.team_flag_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.team_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.team_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TournamentTeam::~TournamentTeam() {
  // @@protoc_insertion_point(destructor:TournamentTeam)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TournamentTeam::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.players_.~RepeatedPtrField();
  _impl_.team_tag_.Destroy();
  _impl_.team_flag_.Destroy();
  _impl_.team_name_.Destroy();
}

void TournamentTeam::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TournamentTeam::Clear() {
// @@protoc_insertion_point(message_clear_start:TournamentTeam)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.players_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.team_tag_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.team_flag_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.team_name_.ClearNonDefaultToEmpty();
    }
  }
  _impl_.team_id_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TournamentTeam::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 team_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_team_id(&has_bits);
          _impl_.team_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string team_tag = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_team_tag();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "TournamentTeam.team_tag");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string team_flag = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_team_flag();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "TournamentTeam.team_flag");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string team_name = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_team_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "TournamentTeam.team_name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // repeated .TournamentPlayer players = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_players(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TournamentTeam::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TournamentTeam)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 team_id = 1;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_team_id(), target);
  }

  // optional string team_tag = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_team_tag().data(), static_cast<int>(this->_internal_team_tag().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TournamentTeam.team_tag");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_team_tag(), target);
  }

  // optional string team_flag = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_team_flag().data(), static_cast<int>(this->_internal_team_flag().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TournamentTeam.team_flag");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_team_flag(), target);
  }

  // optional string team_name = 4;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_team_name().data(), static_cast<int>(this->_internal_team_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TournamentTeam.team_name");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_team_name(), target);
  }

  // repeated .TournamentPlayer players = 5;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_players_size()); i < n; i++) {
    const auto& repfield = this->_internal_players(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TournamentTeam)
  return target;
}

size_t TournamentTeam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TournamentTeam)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TournamentPlayer players = 5;
  total_size += 1UL * this->_internal_players_size();
  for (const auto& msg : this->_impl_.players_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string team_tag = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_team_tag());
    }

    // optional string team_flag = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_team_flag());
    }

    // optional string team_name = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_team_name());
    }

    // optional int32 team_id = 1;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_team_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TournamentTeam::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TournamentTeam::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TournamentTeam::GetClassData() const { return &_class_data_; }


void TournamentTeam::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TournamentTeam*>(&to_msg);
  auto& from = static_cast<const TournamentTeam&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TournamentTeam)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.players_.MergeFrom(from._impl_.players_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_team_tag(from._internal_team_tag());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_team_flag(from._internal_team_flag());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_team_name(from._internal_team_name());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.team_id_ = from._impl_.team_id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TournamentTeam::CopyFrom(const TournamentTeam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TournamentTeam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TournamentTeam::IsInitialized() const {
  return true;
}

void TournamentTeam::InternalSwap(TournamentTeam* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.players_.InternalSwap(&other->_impl_.players_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.team_tag_, lhs_arena,
      &other->_impl_.team_tag_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.team_flag_, lhs_arena,
      &other->_impl_.team_flag_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.team_name_, lhs_arena,
      &other->_impl_.team_name_, rhs_arena
  );
  swap(_impl_.team_id_, other->_impl_.team_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TournamentTeam::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cstrike15_5fgcmessages_2eproto_getter, &descriptor_table_cstrike15_5fgcmessages_2eproto_once,
      file_level_metadata_cstrike15_5fgcmessages_2eproto[4]);
}

// ===================================================================

class TournamentEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<TournamentEvent>()._impl_._has_bits_);
  static void set_has_event_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_event_tag(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_event_name(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_event_time_start(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_event_time_end(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_event_public(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_event_stage_id(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_event_stage_name(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_active_section_id(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
};

TournamentEvent::TournamentEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TournamentEvent)
}
TournamentEvent::TournamentEvent(const TournamentEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TournamentEvent* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.event_tag_){}
    , decltype(_impl_.event_name_){}
    , decltype(_impl_.event_stage_name_){}
    , decltype(_impl_.event_id_){}
    , decltype(_impl_.event_time_start_){}
    , decltype(_impl_.event_time_end_){}
    , decltype(_impl_.event_public_){}
    , decltype(_impl_.event_stage_id_){}
    , decltype(_impl_.active_section_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.event_tag_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.event_tag_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_event_tag()) {
    _this->_impl_.event_tag_.Set(from._internal_event_tag(), 
      _this->GetArenaForAllocation());
  }
  _impl_.event_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.event_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_event_name()) {
    _this->_impl_.event_name_.Set(from._internal_event_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.event_stage_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.event_stage_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_event_stage_name()) {
    _this->_impl_.event_stage_name_.Set(from._internal_event_stage_name(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.event_id_, &from._impl_.event_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.active_section_id_) -
    reinterpret_cast<char*>(&_impl_.event_id_)) + sizeof(_impl_.active_section_id_));
  // @@protoc_insertion_point(copy_constructor:TournamentEvent)
}

inline void TournamentEvent::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.event_tag_){}
    , decltype(_impl_.event_name_){}
    , decltype(_impl_.event_stage_name_){}
    , decltype(_impl_.event_id_){0}
    , decltype(_impl_.event_time_start_){0u}
    , decltype(_impl_.event_time_end_){0u}
    , decltype(_impl_.event_public_){0}
    , decltype(_impl_.event_stage_id_){0}
    , decltype(_impl_.active_section_id_){0u}
  };
  _impl_.event_tag_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.event_tag_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.event_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.event_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.event_stage_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.event_stage_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TournamentEvent::~TournamentEvent() {
  // @@protoc_insertion_point(destructor:TournamentEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TournamentEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.event_tag_.Destroy();
  _impl_.event_name_.Destroy();
  _impl_.event_stage_name_.Destroy();
}

void TournamentEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TournamentEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:TournamentEvent)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.event_tag_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.event_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.event_stage_name_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x000000f8u) {
    ::memset(&_impl_.event_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.event_stage_id_) -
        reinterpret_cast<char*>(&_impl_.event_id_)) + sizeof(_impl_.event_stage_id_));
  }
  _impl_.active_section_id_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TournamentEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 event_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_event_id(&has_bits);
          _impl_.event_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string event_tag = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_event_tag();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "TournamentEvent.event_tag");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string event_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_event_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "TournamentEvent.event_name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional uint32 event_time_start = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_event_time_start(&has_bits);
          _impl_.event_time_start_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 event_time_end = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_event_time_end(&has_bits);
          _impl_.event_time_end_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 event_public = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_event_public(&has_bits);
          _impl_.event_public_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 event_stage_id = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_event_stage_id(&has_bits);
          _impl_.event_stage_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string event_stage_name = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_event_stage_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "TournamentEvent.event_stage_name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional uint32 active_section_id = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_active_section_id(&has_bits);
          _impl_.active_section_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TournamentEvent::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TournamentEvent)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 event_id = 1;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_event_id(), target);
  }

  // optional string event_tag = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_event_tag().data(), static_cast<int>(this->_internal_event_tag().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TournamentEvent.event_tag");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_event_tag(), target);
  }

  // optional string event_name = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_event_name().data(), static_cast<int>(this->_internal_event_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TournamentEvent.event_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_event_name(), target);
  }

  // optional uint32 event_time_start = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_event_time_start(), target);
  }

  // optional uint32 event_time_end = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_event_time_end(), target);
  }

  // optional int32 event_public = 6;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(6, this->_internal_event_public(), target);
  }

  // optional int32 event_stage_id = 7;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(7, this->_internal_event_stage_id(), target);
  }

  // optional string event_stage_name = 8;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_event_stage_name().data(), static_cast<int>(this->_internal_event_stage_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TournamentEvent.event_stage_name");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_event_stage_name(), target);
  }

  // optional uint32 active_section_id = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(9, this->_internal_active_section_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TournamentEvent)
  return target;
}

size_t TournamentEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TournamentEvent)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string event_tag = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_event_tag());
    }

    // optional string event_name = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_event_name());
    }

    // optional string event_stage_name = 8;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_event_stage_name());
    }

    // optional int32 event_id = 1;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_event_id());
    }

    // optional uint32 event_time_start = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_event_time_start());
    }

    // optional uint32 event_time_end = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_event_time_end());
    }

    // optional int32 event_public = 6;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_event_public());
    }

    // optional int32 event_stage_id = 7;
    if (cached_has_bits & 0x00000080u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_event_stage_id());
    }

  }
  // optional uint32 active_section_id = 9;
  if (cached_has_bits & 0x00000100u) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_active_section_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TournamentEvent::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TournamentEvent::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TournamentEvent::GetClassData() const { return &_class_data_; }


void TournamentEvent::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TournamentEvent*>(&to_msg);
  auto& from = static_cast<const TournamentEvent&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TournamentEvent)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_event_tag(from._internal_event_tag());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_event_name(from._internal_event_name());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_event_stage_name(from._internal_event_stage_name());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.event_id_ = from._impl_.event_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.event_time_start_ = from._impl_.event_time_start_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.event_time_end_ = from._impl_.event_time_end_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.event_public_ = from._impl_.event_public_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.event_stage_id_ = from._impl_.event_stage_id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    _this->_internal_set_active_section_id(from._internal_active_section_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TournamentEvent::CopyFrom(const TournamentEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TournamentEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TournamentEvent::IsInitialized() const {
  return true;
}

void TournamentEvent::InternalSwap(TournamentEvent* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.event_tag_, lhs_arena,
      &other->_impl_.event_tag_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.event_name_, lhs_arena,
      &other->_impl_.event_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.event_stage_name_, lhs_arena,
      &other->_impl_.event_stage_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TournamentEvent, _impl_.active_section_id_)
      + sizeof(TournamentEvent::_impl_.active_section_id_)
      - PROTOBUF_FIELD_OFFSET(TournamentEvent, _impl_.event_id_)>(
          reinterpret_cast<char*>(&_impl_.event_id_),
          reinterpret_cast<char*>(&other->_impl_.event_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TournamentEvent::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cstrike15_5fgcmessages_2eproto_getter, &descriptor_table_cstrike15_5fgcmessages_2eproto_once,
      file_level_metadata_cstrike15_5fgcmessages_2eproto[5]);
}

// ===================================================================

class GlobalStatistics::_Internal {
 public:
  using HasBits = decltype(std::declval<GlobalStatistics>()._impl_._has_bits_);
  static void set_has_players_online(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_servers_online(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_players_searching(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_servers_available(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_ongoing_matches(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_search_time_avg(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_main_post_url(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_required_appid_version(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_pricesheet_version(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_twitch_streams_version(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_active_tournament_eventid(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_active_survey_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_rtime32_cur(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_rtime32_event_start(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_required_appid_version2(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
};

GlobalStatistics::GlobalStatistics(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:GlobalStatistics)
}
GlobalStatistics::GlobalStatistics(const GlobalStatistics& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GlobalStatistics* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.search_statistics_){from._impl_.search_statistics_}
    , decltype(_impl_.main_post_url_){}
    , decltype(_impl_.players_online_){}
    , decltype(_impl_.servers_online_){}
    , decltype(_impl_.players_searching_){}
    , decltype(_impl_.servers_available_){}
    , decltype(_impl_.ongoing_matches_){}
    , decltype(_impl_.search_time_avg_){}
    , decltype(_impl_.required_appid_version_){}
    , decltype(_impl_.pricesheet_version_){}
    , decltype(_impl_.twitch_streams_version_){}
    , decltype(_impl_.active_tournament_eventid_){}
    , decltype(_impl_.active_survey_id_){}
    , decltype(_impl_.rtime32_cur_){}
    , decltype(_impl_.rtime32_event_start_){}
    , decltype(_impl_.required_appid_version2_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.main_post_url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.main_post_url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_main_post_url()) {
    _this->_impl_.main_post_url_.Set(from._internal_main_post_url(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.players_online_, &from._impl_.players_online_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.required_appid_version2_) -
    reinterpret_cast<char*>(&_impl_.players_online_)) + sizeof(_impl_.required_appid_version2_));
  // @@protoc_insertion_point(copy_constructor:GlobalStatistics)
}

inline void GlobalStatistics::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.search_statistics_){arena}
    , decltype(_impl_.main_post_url_){}
    , decltype(_impl_.players_online_){0u}
    , decltype(_impl_.servers_online_){0u}
    , decltype(_impl_.players_searching_){0u}
    , decltype(_impl_.servers_available_){0u}
    , decltype(_impl_.ongoing_matches_){0u}
    , decltype(_impl_.search_time_avg_){0u}
    , decltype(_impl_.required_appid_version_){0u}
    , decltype(_impl_.pricesheet_version_){0u}
    , decltype(_impl_.twitch_streams_version_){0u}
    , decltype(_impl_.active_tournament_eventid_){0u}
    , decltype(_impl_.active_survey_id_){0u}
    , decltype(_impl_.rtime32_cur_){0u}
    , decltype(_impl_.rtime32_event_start_){0u}
    , decltype(_impl_.required_appid_version2_){0u}
  };
  _impl_.main_post_url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.main_post_url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GlobalStatistics::~GlobalStatistics() {
  // @@protoc_insertion_point(destructor:GlobalStatistics)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GlobalStatistics::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.search_statistics_.~RepeatedPtrField();
  _impl_.main_post_url_.Destroy();
}

void GlobalStatistics::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GlobalStatistics::Clear() {
// @@protoc_insertion_point(message_clear_start:GlobalStatistics)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.search_statistics_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.main_post_url_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&_impl_.players_online_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.required_appid_version_) -
        reinterpret_cast<char*>(&_impl_.players_online_)) + sizeof(_impl_.required_appid_version_));
  }
  if (cached_has_bits & 0x00007f00u) {
    ::memset(&_impl_.pricesheet_version_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.required_appid_version2_) -
        reinterpret_cast<char*>(&_impl_.pricesheet_version_)) + sizeof(_impl_.required_appid_version2_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GlobalStatistics::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 players_online = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_players_online(&has_bits);
          _impl_.players_online_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 servers_online = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_servers_online(&has_bits);
          _impl_.servers_online_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 players_searching = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_players_searching(&has_bits);
          _impl_.players_searching_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 servers_available = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_servers_available(&has_bits);
          _impl_.servers_available_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 ongoing_matches = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_ongoing_matches(&has_bits);
          _impl_.ongoing_matches_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 search_time_avg = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_search_time_avg(&has_bits);
          _impl_.search_time_avg_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .DetailedSearchStatistic search_statistics = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_search_statistics(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional string main_post_url = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_main_post_url();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "GlobalStatistics.main_post_url");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional uint32 required_appid_version = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_required_appid_version(&has_bits);
          _impl_.required_appid_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 pricesheet_version = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_pricesheet_version(&has_bits);
          _impl_.pricesheet_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 twitch_streams_version = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _Internal::set_has_twitch_streams_version(&has_bits);
          _impl_.twitch_streams_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 active_tournament_eventid = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _Internal::set_has_active_tournament_eventid(&has_bits);
          _impl_.active_tournament_eventid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 active_survey_id = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _Internal::set_has_active_survey_id(&has_bits);
          _impl_.active_survey_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 rtime32_cur = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          _Internal::set_has_rtime32_cur(&has_bits);
          _impl_.rtime32_cur_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 rtime32_event_start = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          _Internal::set_has_rtime32_event_start(&has_bits);
          _impl_.rtime32_event_start_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 required_appid_version2 = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          _Internal::set_has_required_appid_version2(&has_bits);
          _impl_.required_appid_version2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GlobalStatistics::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GlobalStatistics)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 players_online = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_players_online(), target);
  }

  // optional uint32 servers_online = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_servers_online(), target);
  }

  // optional uint32 players_searching = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_players_searching(), target);
  }

  // optional uint32 servers_available = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_servers_available(), target);
  }

  // optional uint32 ongoing_matches = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_ongoing_matches(), target);
  }

  // optional uint32 search_time_avg = 6;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_search_time_avg(), target);
  }

  // repeated .DetailedSearchStatistic search_statistics = 7;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_search_statistics_size()); i < n; i++) {
    const auto& repfield = this->_internal_search_statistics(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(7, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional string main_post_url = 8;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_main_post_url().data(), static_cast<int>(this->_internal_main_post_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "GlobalStatistics.main_post_url");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_main_post_url(), target);
  }

  // optional uint32 required_appid_version = 9;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(9, this->_internal_required_appid_version(), target);
  }

  // optional uint32 pricesheet_version = 10;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(10, this->_internal_pricesheet_version(), target);
  }

  // optional uint32 twitch_streams_version = 11;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(11, this->_internal_twitch_streams_version(), target);
  }

  // optional uint32 active_tournament_eventid = 12;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(12, this->_internal_active_tournament_eventid(), target);
  }

  // optional uint32 active_survey_id = 13;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(13, this->_internal_active_survey_id(), target);
  }

  // optional uint32 rtime32_cur = 14;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(14, this->_internal_rtime32_cur(), target);
  }

  // optional uint32 rtime32_event_start = 15;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(15, this->_internal_rtime32_event_start(), target);
  }

  // optional uint32 required_appid_version2 = 16;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(16, this->_internal_required_appid_version2(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GlobalStatistics)
  return target;
}

size_t GlobalStatistics::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GlobalStatistics)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .DetailedSearchStatistic search_statistics = 7;
  total_size += 1UL * this->_internal_search_statistics_size();
  for (const auto& msg : this->_impl_.search_statistics_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string main_post_url = 8;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_main_post_url());
    }

    // optional uint32 players_online = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_players_online());
    }

    // optional uint32 servers_online = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_servers_online());
    }

    // optional uint32 players_searching = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_players_searching());
    }

    // optional uint32 servers_available = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_servers_available());
    }

    // optional uint32 ongoing_matches = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_ongoing_matches());
    }

    // optional uint32 search_time_avg = 6;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_search_time_avg());
    }

    // optional uint32 required_appid_version = 9;
    if (cached_has_bits & 0x00000080u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_required_appid_version());
    }

  }
  if (cached_has_bits & 0x00007f00u) {
    // optional uint32 pricesheet_version = 10;
    if (cached_has_bits & 0x00000100u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_pricesheet_version());
    }

    // optional uint32 twitch_streams_version = 11;
    if (cached_has_bits & 0x00000200u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_twitch_streams_version());
    }

    // optional uint32 active_tournament_eventid = 12;
    if (cached_has_bits & 0x00000400u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_active_tournament_eventid());
    }

    // optional uint32 active_survey_id = 13;
    if (cached_has_bits & 0x00000800u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_active_survey_id());
    }

    // optional uint32 rtime32_cur = 14;
    if (cached_has_bits & 0x00001000u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_rtime32_cur());
    }

    // optional uint32 rtime32_event_start = 15;
    if (cached_has_bits & 0x00002000u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_rtime32_event_start());
    }

    // optional uint32 required_appid_version2 = 16;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_required_appid_version2());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GlobalStatistics::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GlobalStatistics::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GlobalStatistics::GetClassData() const { return &_class_data_; }


void GlobalStatistics::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GlobalStatistics*>(&to_msg);
  auto& from = static_cast<const GlobalStatistics&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:GlobalStatistics)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.search_statistics_.MergeFrom(from._impl_.search_statistics_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_main_post_url(from._internal_main_post_url());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.players_online_ = from._impl_.players_online_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.servers_online_ = from._impl_.servers_online_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.players_searching_ = from._impl_.players_searching_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.servers_available_ = from._impl_.servers_available_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.ongoing_matches_ = from._impl_.ongoing_matches_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.search_time_avg_ = from._impl_.search_time_avg_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.required_appid_version_ = from._impl_.required_appid_version_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00007f00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.pricesheet_version_ = from._impl_.pricesheet_version_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.twitch_streams_version_ = from._impl_.twitch_streams_version_;
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_impl_.active_tournament_eventid_ = from._impl_.active_tournament_eventid_;
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_impl_.active_survey_id_ = from._impl_.active_survey_id_;
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_impl_.rtime32_cur_ = from._impl_.rtime32_cur_;
    }
    if (cached_has_bits & 0x00002000u) {
      _this->_impl_.rtime32_event_start_ = from._impl_.rtime32_event_start_;
    }
    if (cached_has_bits & 0x00004000u) {
      _this->_impl_.required_appid_version2_ = from._impl_.required_appid_version2_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GlobalStatistics::CopyFrom(const GlobalStatistics& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GlobalStatistics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GlobalStatistics::IsInitialized() const {
  return true;
}

void GlobalStatistics::InternalSwap(GlobalStatistics* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.search_statistics_.InternalSwap(&other->_impl_.search_statistics_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.main_post_url_, lhs_arena,
      &other->_impl_.main_post_url_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GlobalStatistics, _impl_.required_appid_version2_)
      + sizeof(GlobalStatistics::_impl_.required_appid_version2_)
      - PROTOBUF_FIELD_OFFSET(GlobalStatistics, _impl_.players_online_)>(
          reinterpret_cast<char*>(&_impl_.players_online_),
          reinterpret_cast<char*>(&other->_impl_.players_online_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GlobalStatistics::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cstrike15_5fgcmessages_2eproto_getter, &descriptor_table_cstrike15_5fgcmessages_2eproto_once,
      file_level_metadata_cstrike15_5fgcmessages_2eproto[6]);
}

// ===================================================================

class OperationalStatisticDescription::_Internal {
 public:
  using HasBits = decltype(std::declval<OperationalStatisticDescription>()._impl_._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_idkey(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

OperationalStatisticDescription::OperationalStatisticDescription(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:OperationalStatisticDescription)
}
OperationalStatisticDescription::OperationalStatisticDescription(const OperationalStatisticDescription& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  OperationalStatisticDescription* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_){}
    , decltype(_impl_.idkey_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.idkey_ = from._impl_.idkey_;
  // @@protoc_insertion_point(copy_constructor:OperationalStatisticDescription)
}

inline void OperationalStatisticDescription::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_){}
    , decltype(_impl_.idkey_){0u}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

OperationalStatisticDescription::~OperationalStatisticDescription() {
  // @@protoc_insertion_point(destructor:OperationalStatisticDescription)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void OperationalStatisticDescription::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
}

void OperationalStatisticDescription::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void OperationalStatisticDescription::Clear() {
// @@protoc_insertion_point(message_clear_start:OperationalStatisticDescription)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.name_.ClearNonDefaultToEmpty();
  }
  _impl_.idkey_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OperationalStatisticDescription::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "OperationalStatisticDescription.name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional uint32 idkey = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_idkey(&has_bits);
          _impl_.idkey_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* OperationalStatisticDescription::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:OperationalStatisticDescription)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "OperationalStatisticDescription.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // optional uint32 idkey = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_idkey(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:OperationalStatisticDescription)
  return target;
}

size_t OperationalStatisticDescription::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:OperationalStatisticDescription)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional uint32 idkey = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_idkey());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OperationalStatisticDescription::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    OperationalStatisticDescription::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OperationalStatisticDescription::GetClassData() const { return &_class_data_; }


void OperationalStatisticDescription::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<OperationalStatisticDescription*>(&to_msg);
  auto& from = static_cast<const OperationalStatisticDescription&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:OperationalStatisticDescription)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.idkey_ = from._impl_.idkey_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void OperationalStatisticDescription::CopyFrom(const OperationalStatisticDescription& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:OperationalStatisticDescription)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OperationalStatisticDescription::IsInitialized() const {
  return true;
}

void OperationalStatisticDescription::InternalSwap(OperationalStatisticDescription* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  swap(_impl_.idkey_, other->_impl_.idkey_);
}

::PROTOBUF_NAMESPACE_ID::Metadata OperationalStatisticDescription::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cstrike15_5fgcmessages_2eproto_getter, &descriptor_table_cstrike15_5fgcmessages_2eproto_once,
      file_level_metadata_cstrike15_5fgcmessages_2eproto[7]);
}

// ===================================================================

class OperationalStatisticElement::_Internal {
 public:
  using HasBits = decltype(std::declval<OperationalStatisticElement>()._impl_._has_bits_);
  static void set_has_idkey(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

OperationalStatisticElement::OperationalStatisticElement(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:OperationalStatisticElement)
}
OperationalStatisticElement::OperationalStatisticElement(const OperationalStatisticElement& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  OperationalStatisticElement* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.values_){from._impl_.values_}
    , decltype(_impl_.idkey_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.idkey_ = from._impl_.idkey_;
  // @@protoc_insertion_point(copy_constructor:OperationalStatisticElement)
}

inline void OperationalStatisticElement::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.values_){arena}
    , decltype(_impl_.idkey_){0u}
  };
}

OperationalStatisticElement::~OperationalStatisticElement() {
  // @@protoc_insertion_point(destructor:OperationalStatisticElement)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void OperationalStatisticElement::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.values_.~RepeatedField();
}

void OperationalStatisticElement::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void OperationalStatisticElement::Clear() {
// @@protoc_insertion_point(message_clear_start:OperationalStatisticElement)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.values_.Clear();
  _impl_.idkey_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OperationalStatisticElement::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 idkey = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_idkey(&has_bits);
          _impl_.idkey_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 values = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_values(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<16>(ptr));
        } else if (static_cast<uint8_t>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_values(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* OperationalStatisticElement::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:OperationalStatisticElement)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 idkey = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_idkey(), target);
  }

  // repeated int32 values = 2;
  for (int i = 0, n = this->_internal_values_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_values(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:OperationalStatisticElement)
  return target;
}

size_t OperationalStatisticElement::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:OperationalStatisticElement)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 values = 2;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.values_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_values_size());
    total_size += data_size;
  }

  // optional uint32 idkey = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_idkey());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OperationalStatisticElement::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    OperationalStatisticElement::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OperationalStatisticElement::GetClassData() const { return &_class_data_; }


void OperationalStatisticElement::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<OperationalStatisticElement*>(&to_msg);
  auto& from = static_cast<const OperationalStatisticElement&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:OperationalStatisticElement)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.values_.MergeFrom(from._impl_.values_);
  if (from._internal_has_idkey()) {
    _this->_internal_set_idkey(from._internal_idkey());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void OperationalStatisticElement::CopyFrom(const OperationalStatisticElement& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:OperationalStatisticElement)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OperationalStatisticElement::IsInitialized() const {
  return true;
}

void OperationalStatisticElement::InternalSwap(OperationalStatisticElement* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.values_.InternalSwap(&other->_impl_.values_);
  swap(_impl_.idkey_, other->_impl_.idkey_);
}

::PROTOBUF_NAMESPACE_ID::Metadata OperationalStatisticElement::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cstrike15_5fgcmessages_2eproto_getter, &descriptor_table_cstrike15_5fgcmessages_2eproto_once,
      file_level_metadata_cstrike15_5fgcmessages_2eproto[8]);
}

// ===================================================================

class OperationalStatisticsPacket::_Internal {
 public:
  using HasBits = decltype(std::declval<OperationalStatisticsPacket>()._impl_._has_bits_);
  static void set_has_packetid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_mstimestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

OperationalStatisticsPacket::OperationalStatisticsPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:OperationalStatisticsPacket)
}
OperationalStatisticsPacket::OperationalStatisticsPacket(const OperationalStatisticsPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  OperationalStatisticsPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.values_){from._impl_.values_}
    , decltype(_impl_.packetid_){}
    , decltype(_impl_.mstimestamp_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.packetid_, &from._impl_.packetid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.mstimestamp_) -
    reinterpret_cast<char*>(&_impl_.packetid_)) + sizeof(_impl_.mstimestamp_));
  // @@protoc_insertion_point(copy_constructor:OperationalStatisticsPacket)
}

inline void OperationalStatisticsPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.values_){arena}
    , decltype(_impl_.packetid_){0}
    , decltype(_impl_.mstimestamp_){0}
  };
}

OperationalStatisticsPacket::~OperationalStatisticsPacket() {
  // @@protoc_insertion_point(destructor:OperationalStatisticsPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void OperationalStatisticsPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.values_.~RepeatedPtrField();
}

void OperationalStatisticsPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void OperationalStatisticsPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:OperationalStatisticsPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.values_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.packetid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.mstimestamp_) -
        reinterpret_cast<char*>(&_impl_.packetid_)) + sizeof(_impl_.mstimestamp_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OperationalStatisticsPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 packetid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_packetid(&has_bits);
          _impl_.packetid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 mstimestamp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_mstimestamp(&has_bits);
          _impl_.mstimestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .OperationalStatisticElement values = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_values(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* OperationalStatisticsPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:OperationalStatisticsPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 packetid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_packetid(), target);
  }

  // optional int32 mstimestamp = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_mstimestamp(), target);
  }

  // repeated .OperationalStatisticElement values = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_values_size()); i < n; i++) {
    const auto& repfield = this->_internal_values(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:OperationalStatisticsPacket)
  return target;
}

size_t OperationalStatisticsPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:OperationalStatisticsPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .OperationalStatisticElement values = 3;
  total_size += 1UL * this->_internal_values_size();
  for (const auto& msg : this->_impl_.values_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int32 packetid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_packetid());
    }

    // optional int32 mstimestamp = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_mstimestamp());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OperationalStatisticsPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    OperationalStatisticsPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OperationalStatisticsPacket::GetClassData() const { return &_class_data_; }


void OperationalStatisticsPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<OperationalStatisticsPacket*>(&to_msg);
  auto& from = static_cast<const OperationalStatisticsPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:OperationalStatisticsPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.values_.MergeFrom(from._impl_.values_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.packetid_ = from._impl_.packetid_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.mstimestamp_ = from._impl_.mstimestamp_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void OperationalStatisticsPacket::CopyFrom(const OperationalStatisticsPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:OperationalStatisticsPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OperationalStatisticsPacket::IsInitialized() const {
  return true;
}

void OperationalStatisticsPacket::InternalSwap(OperationalStatisticsPacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.values_.InternalSwap(&other->_impl_.values_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(OperationalStatisticsPacket, _impl_.mstimestamp_)
      + sizeof(OperationalStatisticsPacket::_impl_.mstimestamp_)
      - PROTOBUF_FIELD_OFFSET(OperationalStatisticsPacket, _impl_.packetid_)>(
          reinterpret_cast<char*>(&_impl_.packetid_),
          reinterpret_cast<char*>(&other->_impl_.packetid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata OperationalStatisticsPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cstrike15_5fgcmessages_2eproto_getter, &descriptor_table_cstrike15_5fgcmessages_2eproto_once,
      file_level_metadata_cstrike15_5fgcmessages_2eproto[9]);
}

// ===================================================================

class OperationalVarValue::_Internal {
 public:
  using HasBits = decltype(std::declval<OperationalVarValue>()._impl_._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_ivalue(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_fvalue(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_svalue(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

OperationalVarValue::OperationalVarValue(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:OperationalVarValue)
}
OperationalVarValue::OperationalVarValue(const OperationalVarValue& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  OperationalVarValue* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_){}
    , decltype(_impl_.svalue_){}
    , decltype(_impl_.ivalue_){}
    , decltype(_impl_.fvalue_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.svalue_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.svalue_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_svalue()) {
    _this->_impl_.svalue_.Set(from._internal_svalue(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.ivalue_, &from._impl_.ivalue_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.fvalue_) -
    reinterpret_cast<char*>(&_impl_.ivalue_)) + sizeof(_impl_.fvalue_));
  // @@protoc_insertion_point(copy_constructor:OperationalVarValue)
}

inline void OperationalVarValue::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_){}
    , decltype(_impl_.svalue_){}
    , decltype(_impl_.ivalue_){0}
    , decltype(_impl_.fvalue_){0}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.svalue_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.svalue_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

OperationalVarValue::~OperationalVarValue() {
  // @@protoc_insertion_point(destructor:OperationalVarValue)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void OperationalVarValue::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
  _impl_.svalue_.Destroy();
}

void OperationalVarValue::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void OperationalVarValue::Clear() {
// @@protoc_insertion_point(message_clear_start:OperationalVarValue)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.svalue_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000000cu) {
    ::memset(&_impl_.ivalue_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.fvalue_) -
        reinterpret_cast<char*>(&_impl_.ivalue_)) + sizeof(_impl_.fvalue_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OperationalVarValue::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "OperationalVarValue.name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional int32 ivalue = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_ivalue(&has_bits);
          _impl_.ivalue_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float fvalue = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _Internal::set_has_fvalue(&has_bits);
          _impl_.fvalue_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional bytes svalue = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_svalue();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* OperationalVarValue::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:OperationalVarValue)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "OperationalVarValue.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // optional int32 ivalue = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_ivalue(), target);
  }

  // optional float fvalue = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_fvalue(), target);
  }

  // optional bytes svalue = 4;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_svalue(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:OperationalVarValue)
  return target;
}

size_t OperationalVarValue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:OperationalVarValue)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional bytes svalue = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_svalue());
    }

    // optional int32 ivalue = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_ivalue());
    }

    // optional float fvalue = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OperationalVarValue::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    OperationalVarValue::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OperationalVarValue::GetClassData() const { return &_class_data_; }


void OperationalVarValue::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<OperationalVarValue*>(&to_msg);
  auto& from = static_cast<const OperationalVarValue&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:OperationalVarValue)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_svalue(from._internal_svalue());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.ivalue_ = from._impl_.ivalue_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.fvalue_ = from._impl_.fvalue_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void OperationalVarValue::CopyFrom(const OperationalVarValue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:OperationalVarValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OperationalVarValue::IsInitialized() const {
  return true;
}

void OperationalVarValue::InternalSwap(OperationalVarValue* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.svalue_, lhs_arena,
      &other->_impl_.svalue_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(OperationalVarValue, _impl_.fvalue_)
      + sizeof(OperationalVarValue::_impl_.fvalue_)
      - PROTOBUF_FIELD_OFFSET(OperationalVarValue, _impl_.ivalue_)>(
          reinterpret_cast<char*>(&_impl_.ivalue_),
          reinterpret_cast<char*>(&other->_impl_.ivalue_));
}

::PROTOBUF_NAMESPACE_ID::Metadata OperationalVarValue::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cstrike15_5fgcmessages_2eproto_getter, &descriptor_table_cstrike15_5fgcmessages_2eproto_once,
      file_level_metadata_cstrike15_5fgcmessages_2eproto[10]);
}

// ===================================================================

class PlayerRankingInfo_PerMapRank::_Internal {
 public:
  using HasBits = decltype(std::declval<PlayerRankingInfo_PerMapRank>()._impl_._has_bits_);
  static void set_has_map_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_rank_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_wins(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

PlayerRankingInfo_PerMapRank::PlayerRankingInfo_PerMapRank(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:PlayerRankingInfo.PerMapRank)
}
PlayerRankingInfo_PerMapRank::PlayerRankingInfo_PerMapRank(const PlayerRankingInfo_PerMapRank& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PlayerRankingInfo_PerMapRank* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.map_id_){}
    , decltype(_impl_.rank_id_){}
    , decltype(_impl_.wins_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.map_id_, &from._impl_.map_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.wins_) -
    reinterpret_cast<char*>(&_impl_.map_id_)) + sizeof(_impl_.wins_));
  // @@protoc_insertion_point(copy_constructor:PlayerRankingInfo.PerMapRank)
}

inline void PlayerRankingInfo_PerMapRank::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.map_id_){0u}
    , decltype(_impl_.rank_id_){0u}
    , decltype(_impl_.wins_){0u}
  };
}

PlayerRankingInfo_PerMapRank::~PlayerRankingInfo_PerMapRank() {
  // @@protoc_insertion_point(destructor:PlayerRankingInfo.PerMapRank)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PlayerRankingInfo_PerMapRank::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PlayerRankingInfo_PerMapRank::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PlayerRankingInfo_PerMapRank::Clear() {
// @@protoc_insertion_point(message_clear_start:PlayerRankingInfo.PerMapRank)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.map_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.wins_) -
        reinterpret_cast<char*>(&_impl_.map_id_)) + sizeof(_impl_.wins_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PlayerRankingInfo_PerMapRank::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 map_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_map_id(&has_bits);
          _impl_.map_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 rank_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_rank_id(&has_bits);
          _impl_.rank_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 wins = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_wins(&has_bits);
          _impl_.wins_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PlayerRankingInfo_PerMapRank::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlayerRankingInfo.PerMapRank)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 map_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_map_id(), target);
  }

  // optional uint32 rank_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_rank_id(), target);
  }

  // optional uint32 wins = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_wins(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlayerRankingInfo.PerMapRank)
  return target;
}

size_t PlayerRankingInfo_PerMapRank::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlayerRankingInfo.PerMapRank)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint32 map_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_map_id());
    }

    // optional uint32 rank_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_rank_id());
    }

    // optional uint32 wins = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_wins());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PlayerRankingInfo_PerMapRank::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PlayerRankingInfo_PerMapRank::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PlayerRankingInfo_PerMapRank::GetClassData() const { return &_class_data_; }


void PlayerRankingInfo_PerMapRank::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PlayerRankingInfo_PerMapRank*>(&to_msg);
  auto& from = static_cast<const PlayerRankingInfo_PerMapRank&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:PlayerRankingInfo.PerMapRank)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.map_id_ = from._impl_.map_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.rank_id_ = from._impl_.rank_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.wins_ = from._impl_.wins_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PlayerRankingInfo_PerMapRank::CopyFrom(const PlayerRankingInfo_PerMapRank& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlayerRankingInfo.PerMapRank)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerRankingInfo_PerMapRank::IsInitialized() const {
  return true;
}

void PlayerRankingInfo_PerMapRank::InternalSwap(PlayerRankingInfo_PerMapRank* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PlayerRankingInfo_PerMapRank, _impl_.wins_)
      + sizeof(PlayerRankingInfo_PerMapRank::_impl_.wins_)
      - PROTOBUF_FIELD_OFFSET(PlayerRankingInfo_PerMapRank, _impl_.map_id_)>(
          reinterpret_cast<char*>(&_impl_.map_id_),
          reinterpret_cast<char*>(&other->_impl_.map_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PlayerRankingInfo_PerMapRank::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cstrike15_5fgcmessages_2eproto_getter, &descriptor_table_cstrike15_5fgcmessages_2eproto_once,
      file_level_metadata_cstrike15_5fgcmessages_2eproto[11]);
}

// ===================================================================

class PlayerRankingInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<PlayerRankingInfo>()._impl_._has_bits_);
  static void set_has_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_rank_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_wins(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_rank_change(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_rank_type_id(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_tv_control(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_rank_window_stats(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_leaderboard_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_rank_if_win(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_rank_if_lose(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_rank_if_tie(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_leaderboard_name_status(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
};

PlayerRankingInfo::PlayerRankingInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:PlayerRankingInfo)
}
PlayerRankingInfo::PlayerRankingInfo(const PlayerRankingInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PlayerRankingInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.per_map_rank_){from._impl_.per_map_rank_}
    , decltype(_impl_.leaderboard_name_){}
    , decltype(_impl_.account_id_){}
    , decltype(_impl_.rank_id_){}
    , decltype(_impl_.wins_){}
    , decltype(_impl_.rank_change_){}
    , decltype(_impl_.rank_type_id_){}
    , decltype(_impl_.tv_control_){}
    , decltype(_impl_.rank_window_stats_){}
    , decltype(_impl_.rank_if_win_){}
    , decltype(_impl_.rank_if_lose_){}
    , decltype(_impl_.rank_if_tie_){}
    , decltype(_impl_.leaderboard_name_status_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.leaderboard_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.leaderboard_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_leaderboard_name()) {
    _this->_impl_.leaderboard_name_.Set(from._internal_leaderboard_name(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.account_id_, &from._impl_.account_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.leaderboard_name_status_) -
    reinterpret_cast<char*>(&_impl_.account_id_)) + sizeof(_impl_.leaderboard_name_status_));
  // @@protoc_insertion_point(copy_constructor:PlayerRankingInfo)
}

inline void PlayerRankingInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.per_map_rank_){arena}
    , decltype(_impl_.leaderboard_name_){}
    , decltype(_impl_.account_id_){0u}
    , decltype(_impl_.rank_id_){0u}
    , decltype(_impl_.wins_){0u}
    , decltype(_impl_.rank_change_){0}
    , decltype(_impl_.rank_type_id_){0u}
    , decltype(_impl_.tv_control_){0u}
    , decltype(_impl_.rank_window_stats_){uint64_t{0u}}
    , decltype(_impl_.rank_if_win_){0u}
    , decltype(_impl_.rank_if_lose_){0u}
    , decltype(_impl_.rank_if_tie_){0u}
    , decltype(_impl_.leaderboard_name_status_){0u}
  };
  _impl_.leaderboard_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.leaderboard_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PlayerRankingInfo::~PlayerRankingInfo() {
  // @@protoc_insertion_point(destructor:PlayerRankingInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PlayerRankingInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.per_map_rank_.~RepeatedPtrField();
  _impl_.leaderboard_name_.Destroy();
}

void PlayerRankingInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PlayerRankingInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:PlayerRankingInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.per_map_rank_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.leaderboard_name_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&_impl_.account_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.rank_window_stats_) -
        reinterpret_cast<char*>(&_impl_.account_id_)) + sizeof(_impl_.rank_window_stats_));
  }
  if (cached_has_bits & 0x00000f00u) {
    ::memset(&_impl_.rank_if_win_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.leaderboard_name_status_) -
        reinterpret_cast<char*>(&_impl_.rank_if_win_)) + sizeof(_impl_.leaderboard_name_status_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PlayerRankingInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 account_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_account_id(&has_bits);
          _impl_.account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 rank_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_rank_id(&has_bits);
          _impl_.rank_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 wins = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_wins(&has_bits);
          _impl_.wins_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float rank_change = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          _Internal::set_has_rank_change(&has_bits);
          _impl_.rank_change_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 rank_type_id = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_rank_type_id(&has_bits);
          _impl_.rank_type_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 tv_control = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_tv_control(&has_bits);
          _impl_.tv_control_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 rank_window_stats = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_rank_window_stats(&has_bits);
          _impl_.rank_window_stats_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string leaderboard_name = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_leaderboard_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "PlayerRankingInfo.leaderboard_name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional uint32 rank_if_win = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_rank_if_win(&has_bits);
          _impl_.rank_if_win_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 rank_if_lose = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _Internal::set_has_rank_if_lose(&has_bits);
          _impl_.rank_if_lose_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 rank_if_tie = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _Internal::set_has_rank_if_tie(&has_bits);
          _impl_.rank_if_tie_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .PlayerRankingInfo.PerMapRank per_map_rank = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_per_map_rank(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<106>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional uint32 leaderboard_name_status = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          _Internal::set_has_leaderboard_name_status(&has_bits);
          _impl_.leaderboard_name_status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PlayerRankingInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlayerRankingInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_account_id(), target);
  }

  // optional uint32 rank_id = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_rank_id(), target);
  }

  // optional uint32 wins = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_wins(), target);
  }

  // optional float rank_change = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(4, this->_internal_rank_change(), target);
  }

  // optional uint32 rank_type_id = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_rank_type_id(), target);
  }

  // optional uint32 tv_control = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(7, this->_internal_tv_control(), target);
  }

  // optional uint64 rank_window_stats = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(8, this->_internal_rank_window_stats(), target);
  }

  // optional string leaderboard_name = 9;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_leaderboard_name().data(), static_cast<int>(this->_internal_leaderboard_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "PlayerRankingInfo.leaderboard_name");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_leaderboard_name(), target);
  }

  // optional uint32 rank_if_win = 10;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(10, this->_internal_rank_if_win(), target);
  }

  // optional uint32 rank_if_lose = 11;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(11, this->_internal_rank_if_lose(), target);
  }

  // optional uint32 rank_if_tie = 12;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(12, this->_internal_rank_if_tie(), target);
  }

  // repeated .PlayerRankingInfo.PerMapRank per_map_rank = 13;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_per_map_rank_size()); i < n; i++) {
    const auto& repfield = this->_internal_per_map_rank(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(13, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional uint32 leaderboard_name_status = 14;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(14, this->_internal_leaderboard_name_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlayerRankingInfo)
  return target;
}

size_t PlayerRankingInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlayerRankingInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .PlayerRankingInfo.PerMapRank per_map_rank = 13;
  total_size += 1UL * this->_internal_per_map_rank_size();
  for (const auto& msg : this->_impl_.per_map_rank_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string leaderboard_name = 9;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_leaderboard_name());
    }

    // optional uint32 account_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_account_id());
    }

    // optional uint32 rank_id = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_rank_id());
    }

    // optional uint32 wins = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_wins());
    }

    // optional float rank_change = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 4;
    }

    // optional uint32 rank_type_id = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_rank_type_id());
    }

    // optional uint32 tv_control = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_tv_control());
    }

    // optional uint64 rank_window_stats = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_rank_window_stats());
    }

  }
  if (cached_has_bits & 0x00000f00u) {
    // optional uint32 rank_if_win = 10;
    if (cached_has_bits & 0x00000100u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_rank_if_win());
    }

    // optional uint32 rank_if_lose = 11;
    if (cached_has_bits & 0x00000200u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_rank_if_lose());
    }

    // optional uint32 rank_if_tie = 12;
    if (cached_has_bits & 0x00000400u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_rank_if_tie());
    }

    // optional uint32 leaderboard_name_status = 14;
    if (cached_has_bits & 0x00000800u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_leaderboard_name_status());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PlayerRankingInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PlayerRankingInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PlayerRankingInfo::GetClassData() const { return &_class_data_; }


void PlayerRankingInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PlayerRankingInfo*>(&to_msg);
  auto& from = static_cast<const PlayerRankingInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:PlayerRankingInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.per_map_rank_.MergeFrom(from._impl_.per_map_rank_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_leaderboard_name(from._internal_leaderboard_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.account_id_ = from._impl_.account_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.rank_id_ = from._impl_.rank_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.wins_ = from._impl_.wins_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.rank_change_ = from._impl_.rank_change_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.rank_type_id_ = from._impl_.rank_type_id_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.tv_control_ = from._impl_.tv_control_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.rank_window_stats_ = from._impl_.rank_window_stats_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000f00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.rank_if_win_ = from._impl_.rank_if_win_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.rank_if_lose_ = from._impl_.rank_if_lose_;
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_impl_.rank_if_tie_ = from._impl_.rank_if_tie_;
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_impl_.leaderboard_name_status_ = from._impl_.leaderboard_name_status_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PlayerRankingInfo::CopyFrom(const PlayerRankingInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlayerRankingInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerRankingInfo::IsInitialized() const {
  return true;
}

void PlayerRankingInfo::InternalSwap(PlayerRankingInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.per_map_rank_.InternalSwap(&other->_impl_.per_map_rank_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.leaderboard_name_, lhs_arena,
      &other->_impl_.leaderboard_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PlayerRankingInfo, _impl_.leaderboard_name_status_)
      + sizeof(PlayerRankingInfo::_impl_.leaderboard_name_status_)
      - PROTOBUF_FIELD_OFFSET(PlayerRankingInfo, _impl_.account_id_)>(
          reinterpret_cast<char*>(&_impl_.account_id_),
          reinterpret_cast<char*>(&other->_impl_.account_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PlayerRankingInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cstrike15_5fgcmessages_2eproto_getter, &descriptor_table_cstrike15_5fgcmessages_2eproto_once,
      file_level_metadata_cstrike15_5fgcmessages_2eproto[12]);
}

// ===================================================================

class PlayerCommendationInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<PlayerCommendationInfo>()._impl_._has_bits_);
  static void set_has_cmd_friendly(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_cmd_teaching(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_cmd_leader(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

PlayerCommendationInfo::PlayerCommendationInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:PlayerCommendationInfo)
}
PlayerCommendationInfo::PlayerCommendationInfo(const PlayerCommendationInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PlayerCommendationInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.cmd_friendly_){}
    , decltype(_impl_.cmd_teaching_){}
    , decltype(_impl_.cmd_leader_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.cmd_friendly_, &from._impl_.cmd_friendly_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.cmd_leader_) -
    reinterpret_cast<char*>(&_impl_.cmd_friendly_)) + sizeof(_impl_.cmd_leader_));
  // @@protoc_insertion_point(copy_constructor:PlayerCommendationInfo)
}

inline void PlayerCommendationInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.cmd_friendly_){0u}
    , decltype(_impl_.cmd_teaching_){0u}
    , decltype(_impl_.cmd_leader_){0u}
  };
}

PlayerCommendationInfo::~PlayerCommendationInfo() {
  // @@protoc_insertion_point(destructor:PlayerCommendationInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PlayerCommendationInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PlayerCommendationInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PlayerCommendationInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:PlayerCommendationInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.cmd_friendly_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.cmd_leader_) -
        reinterpret_cast<char*>(&_impl_.cmd_friendly_)) + sizeof(_impl_.cmd_leader_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PlayerCommendationInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 cmd_friendly = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_cmd_friendly(&has_bits);
          _impl_.cmd_friendly_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 cmd_teaching = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_cmd_teaching(&has_bits);
          _impl_.cmd_teaching_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 cmd_leader = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_cmd_leader(&has_bits);
          _impl_.cmd_leader_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PlayerCommendationInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlayerCommendationInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 cmd_friendly = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_cmd_friendly(), target);
  }

  // optional uint32 cmd_teaching = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_cmd_teaching(), target);
  }

  // optional uint32 cmd_leader = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_cmd_leader(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlayerCommendationInfo)
  return target;
}

size_t PlayerCommendationInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlayerCommendationInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint32 cmd_friendly = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_cmd_friendly());
    }

    // optional uint32 cmd_teaching = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_cmd_teaching());
    }

    // optional uint32 cmd_leader = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_cmd_leader());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PlayerCommendationInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PlayerCommendationInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PlayerCommendationInfo::GetClassData() const { return &_class_data_; }


void PlayerCommendationInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PlayerCommendationInfo*>(&to_msg);
  auto& from = static_cast<const PlayerCommendationInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:PlayerCommendationInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.cmd_friendly_ = from._impl_.cmd_friendly_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.cmd_teaching_ = from._impl_.cmd_teaching_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.cmd_leader_ = from._impl_.cmd_leader_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PlayerCommendationInfo::CopyFrom(const PlayerCommendationInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlayerCommendationInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerCommendationInfo::IsInitialized() const {
  return true;
}

void PlayerCommendationInfo::InternalSwap(PlayerCommendationInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PlayerCommendationInfo, _impl_.cmd_leader_)
      + sizeof(PlayerCommendationInfo::_impl_.cmd_leader_)
      - PROTOBUF_FIELD_OFFSET(PlayerCommendationInfo, _impl_.cmd_friendly_)>(
          reinterpret_cast<char*>(&_impl_.cmd_friendly_),
          reinterpret_cast<char*>(&other->_impl_.cmd_friendly_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PlayerCommendationInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cstrike15_5fgcmessages_2eproto_getter, &descriptor_table_cstrike15_5fgcmessages_2eproto_once,
      file_level_metadata_cstrike15_5fgcmessages_2eproto[13]);
}

// ===================================================================

class PlayerMedalsInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<PlayerMedalsInfo>()._impl_._has_bits_);
  static void set_has_featured_display_item_defidx(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

PlayerMedalsInfo::PlayerMedalsInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:PlayerMedalsInfo)
}
PlayerMedalsInfo::PlayerMedalsInfo(const PlayerMedalsInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PlayerMedalsInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.display_items_defidx_){from._impl_.display_items_defidx_}
    , decltype(_impl_.featured_display_item_defidx_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.featured_display_item_defidx_ = from._impl_.featured_display_item_defidx_;
  // @@protoc_insertion_point(copy_constructor:PlayerMedalsInfo)
}

inline void PlayerMedalsInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.display_items_defidx_){arena}
    , decltype(_impl_.featured_display_item_defidx_){0u}
  };
}

PlayerMedalsInfo::~PlayerMedalsInfo() {
  // @@protoc_insertion_point(destructor:PlayerMedalsInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PlayerMedalsInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.display_items_defidx_.~RepeatedField();
}

void PlayerMedalsInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PlayerMedalsInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:PlayerMedalsInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.display_items_defidx_.Clear();
  _impl_.featured_display_item_defidx_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PlayerMedalsInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated uint32 display_items_defidx = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_display_items_defidx(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<56>(ptr));
        } else if (static_cast<uint8_t>(tag) == 58) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_display_items_defidx(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 featured_display_item_defidx = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_featured_display_item_defidx(&has_bits);
          _impl_.featured_display_item_defidx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PlayerMedalsInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlayerMedalsInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 display_items_defidx = 7;
  for (int i = 0, n = this->_internal_display_items_defidx_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(7, this->_internal_display_items_defidx(i), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 featured_display_item_defidx = 8;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(8, this->_internal_featured_display_item_defidx(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlayerMedalsInfo)
  return target;
}

size_t PlayerMedalsInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlayerMedalsInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 display_items_defidx = 7;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.display_items_defidx_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_display_items_defidx_size());
    total_size += data_size;
  }

  // optional uint32 featured_display_item_defidx = 8;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_featured_display_item_defidx());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PlayerMedalsInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PlayerMedalsInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PlayerMedalsInfo::GetClassData() const { return &_class_data_; }


void PlayerMedalsInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PlayerMedalsInfo*>(&to_msg);
  auto& from = static_cast<const PlayerMedalsInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:PlayerMedalsInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.display_items_defidx_.MergeFrom(from._impl_.display_items_defidx_);
  if (from._internal_has_featured_display_item_defidx()) {
    _this->_internal_set_featured_display_item_defidx(from._internal_featured_display_item_defidx());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PlayerMedalsInfo::CopyFrom(const PlayerMedalsInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlayerMedalsInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerMedalsInfo::IsInitialized() const {
  return true;
}

void PlayerMedalsInfo::InternalSwap(PlayerMedalsInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.display_items_defidx_.InternalSwap(&other->_impl_.display_items_defidx_);
  swap(_impl_.featured_display_item_defidx_, other->_impl_.featured_display_item_defidx_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PlayerMedalsInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cstrike15_5fgcmessages_2eproto_getter, &descriptor_table_cstrike15_5fgcmessages_2eproto_once,
      file_level_metadata_cstrike15_5fgcmessages_2eproto[14]);
}

// ===================================================================

class AccountActivity::_Internal {
 public:
  using HasBits = decltype(std::declval<AccountActivity>()._impl_._has_bits_);
  static void set_has_activity(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_map(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_matchid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

AccountActivity::AccountActivity(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:AccountActivity)
}
AccountActivity::AccountActivity(const AccountActivity& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AccountActivity* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.activity_){}
    , decltype(_impl_.mode_){}
    , decltype(_impl_.matchid_){}
    , decltype(_impl_.map_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.activity_, &from._impl_.activity_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.map_) -
    reinterpret_cast<char*>(&_impl_.activity_)) + sizeof(_impl_.map_));
  // @@protoc_insertion_point(copy_constructor:AccountActivity)
}

inline void AccountActivity::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.activity_){0u}
    , decltype(_impl_.mode_){0u}
    , decltype(_impl_.matchid_){uint64_t{0u}}
    , decltype(_impl_.map_){0u}
  };
}

AccountActivity::~AccountActivity() {
  // @@protoc_insertion_point(destructor:AccountActivity)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AccountActivity::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void AccountActivity::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AccountActivity::Clear() {
// @@protoc_insertion_point(message_clear_start:AccountActivity)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&_impl_.activity_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.map_) -
        reinterpret_cast<char*>(&_impl_.activity_)) + sizeof(_impl_.map_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AccountActivity::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 activity = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_activity(&has_bits);
          _impl_.activity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 mode = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_mode(&has_bits);
          _impl_.mode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 map = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_map(&has_bits);
          _impl_.map_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 matchid = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_matchid(&has_bits);
          _impl_.matchid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AccountActivity::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:AccountActivity)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 activity = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_activity(), target);
  }

  // optional uint32 mode = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_mode(), target);
  }

  // optional uint32 map = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_map(), target);
  }

  // optional uint64 matchid = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(4, this->_internal_matchid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AccountActivity)
  return target;
}

size_t AccountActivity::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AccountActivity)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional uint32 activity = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_activity());
    }

    // optional uint32 mode = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_mode());
    }

    // optional uint64 matchid = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_matchid());
    }

    // optional uint32 map = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_map());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AccountActivity::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AccountActivity::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AccountActivity::GetClassData() const { return &_class_data_; }


void AccountActivity::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AccountActivity*>(&to_msg);
  auto& from = static_cast<const AccountActivity&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:AccountActivity)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.activity_ = from._impl_.activity_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.mode_ = from._impl_.mode_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.matchid_ = from._impl_.matchid_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.map_ = from._impl_.map_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AccountActivity::CopyFrom(const AccountActivity& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AccountActivity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AccountActivity::IsInitialized() const {
  return true;
}

void AccountActivity::InternalSwap(AccountActivity* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AccountActivity, _impl_.map_)
      + sizeof(AccountActivity::_impl_.map_)
      - PROTOBUF_FIELD_OFFSET(AccountActivity, _impl_.activity_)>(
          reinterpret_cast<char*>(&_impl_.activity_),
          reinterpret_cast<char*>(&other->_impl_.activity_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AccountActivity::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cstrike15_5fgcmessages_2eproto_getter, &descriptor_table_cstrike15_5fgcmessages_2eproto_once,
      file_level_metadata_cstrike15_5fgcmessages_2eproto[15]);
}

// ===================================================================

class TournamentMatchSetup::_Internal {
 public:
  using HasBits = decltype(std::declval<TournamentMatchSetup>()._impl_._has_bits_);
  static void set_has_event_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_team_id_ct(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_team_id_t(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_event_stage_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

TournamentMatchSetup::TournamentMatchSetup(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TournamentMatchSetup)
}
TournamentMatchSetup::TournamentMatchSetup(const TournamentMatchSetup& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TournamentMatchSetup* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.event_id_){}
    , decltype(_impl_.team_id_ct_){}
    , decltype(_impl_.team_id_t_){}
    , decltype(_impl_.event_stage_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.event_id_, &from._impl_.event_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.event_stage_id_) -
    reinterpret_cast<char*>(&_impl_.event_id_)) + sizeof(_impl_.event_stage_id_));
  // @@protoc_insertion_point(copy_constructor:TournamentMatchSetup)
}

inline void TournamentMatchSetup::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.event_id_){0}
    , decltype(_impl_.team_id_ct_){0}
    , decltype(_impl_.team_id_t_){0}
    , decltype(_impl_.event_stage_id_){0}
  };
}

TournamentMatchSetup::~TournamentMatchSetup() {
  // @@protoc_insertion_point(destructor:TournamentMatchSetup)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TournamentMatchSetup::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void TournamentMatchSetup::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TournamentMatchSetup::Clear() {
// @@protoc_insertion_point(message_clear_start:TournamentMatchSetup)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&_impl_.event_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.event_stage_id_) -
        reinterpret_cast<char*>(&_impl_.event_id_)) + sizeof(_impl_.event_stage_id_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TournamentMatchSetup::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 event_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_event_id(&has_bits);
          _impl_.event_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 team_id_ct = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_team_id_ct(&has_bits);
          _impl_.team_id_ct_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 team_id_t = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_team_id_t(&has_bits);
          _impl_.team_id_t_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 event_stage_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_event_stage_id(&has_bits);
          _impl_.event_stage_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TournamentMatchSetup::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TournamentMatchSetup)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 event_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_event_id(), target);
  }

  // optional int32 team_id_ct = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_team_id_ct(), target);
  }

  // optional int32 team_id_t = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_team_id_t(), target);
  }

  // optional int32 event_stage_id = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_event_stage_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TournamentMatchSetup)
  return target;
}

size_t TournamentMatchSetup::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TournamentMatchSetup)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional int32 event_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_event_id());
    }

    // optional int32 team_id_ct = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_team_id_ct());
    }

    // optional int32 team_id_t = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_team_id_t());
    }

    // optional int32 event_stage_id = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_event_stage_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TournamentMatchSetup::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TournamentMatchSetup::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TournamentMatchSetup::GetClassData() const { return &_class_data_; }


void TournamentMatchSetup::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TournamentMatchSetup*>(&to_msg);
  auto& from = static_cast<const TournamentMatchSetup&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TournamentMatchSetup)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.event_id_ = from._impl_.event_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.team_id_ct_ = from._impl_.team_id_ct_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.team_id_t_ = from._impl_.team_id_t_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.event_stage_id_ = from._impl_.event_stage_id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TournamentMatchSetup::CopyFrom(const TournamentMatchSetup& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TournamentMatchSetup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TournamentMatchSetup::IsInitialized() const {
  return true;
}

void TournamentMatchSetup::InternalSwap(TournamentMatchSetup* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TournamentMatchSetup, _impl_.event_stage_id_)
      + sizeof(TournamentMatchSetup::_impl_.event_stage_id_)
      - PROTOBUF_FIELD_OFFSET(TournamentMatchSetup, _impl_.event_id_)>(
          reinterpret_cast<char*>(&_impl_.event_id_),
          reinterpret_cast<char*>(&other->_impl_.event_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TournamentMatchSetup::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cstrike15_5fgcmessages_2eproto_getter, &descriptor_table_cstrike15_5fgcmessages_2eproto_once,
      file_level_metadata_cstrike15_5fgcmessages_2eproto[16]);
}

// ===================================================================

class ServerHltvInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<ServerHltvInfo>()._impl_._has_bits_);
  static void set_has_tv_udp_port(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_tv_watch_key(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_tv_slots(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_tv_clients(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_tv_proxies(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_tv_time(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_game_type(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_game_mapgroup(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_game_map(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_tv_master_steamid(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_tv_local_slots(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_tv_local_clients(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_tv_local_proxies(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_tv_relay_slots(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_tv_relay_clients(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_tv_relay_proxies(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_tv_relay_address(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_tv_relay_port(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_tv_relay_steamid(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_flags(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
};

ServerHltvInfo::ServerHltvInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ServerHltvInfo)
}
ServerHltvInfo::ServerHltvInfo(const ServerHltvInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ServerHltvInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.game_mapgroup_){}
    , decltype(_impl_.game_map_){}
    , decltype(_impl_.tv_watch_key_){}
    , decltype(_impl_.tv_udp_port_){}
    , decltype(_impl_.tv_slots_){}
    , decltype(_impl_.tv_clients_){}
    , decltype(_impl_.tv_proxies_){}
    , decltype(_impl_.tv_time_){}
    , decltype(_impl_.game_type_){}
    , decltype(_impl_.tv_master_steamid_){}
    , decltype(_impl_.tv_local_slots_){}
    , decltype(_impl_.tv_local_clients_){}
    , decltype(_impl_.tv_local_proxies_){}
    , decltype(_impl_.tv_relay_slots_){}
    , decltype(_impl_.tv_relay_clients_){}
    , decltype(_impl_.tv_relay_proxies_){}
    , decltype(_impl_.tv_relay_address_){}
    , decltype(_impl_.tv_relay_port_){}
    , decltype(_impl_.tv_relay_steamid_){}
    , decltype(_impl_.flags_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.game_mapgroup_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.game_mapgroup_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_game_mapgroup()) {
    _this->_impl_.game_mapgroup_.Set(from._internal_game_mapgroup(), 
      _this->GetArenaForAllocation());
  }
  _impl_.game_map_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.game_map_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_game_map()) {
    _this->_impl_.game_map_.Set(from._internal_game_map(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.tv_watch_key_, &from._impl_.tv_watch_key_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.flags_) -
    reinterpret_cast<char*>(&_impl_.tv_watch_key_)) + sizeof(_impl_.flags_));
  // @@protoc_insertion_point(copy_constructor:ServerHltvInfo)
}

inline void ServerHltvInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.game_mapgroup_){}
    , decltype(_impl_.game_map_){}
    , decltype(_impl_.tv_watch_key_){uint64_t{0u}}
    , decltype(_impl_.tv_udp_port_){0u}
    , decltype(_impl_.tv_slots_){0u}
    , decltype(_impl_.tv_clients_){0u}
    , decltype(_impl_.tv_proxies_){0u}
    , decltype(_impl_.tv_time_){0u}
    , decltype(_impl_.game_type_){0u}
    , decltype(_impl_.tv_master_steamid_){uint64_t{0u}}
    , decltype(_impl_.tv_local_slots_){0u}
    , decltype(_impl_.tv_local_clients_){0u}
    , decltype(_impl_.tv_local_proxies_){0u}
    , decltype(_impl_.tv_relay_slots_){0u}
    , decltype(_impl_.tv_relay_clients_){0u}
    , decltype(_impl_.tv_relay_proxies_){0u}
    , decltype(_impl_.tv_relay_address_){0u}
    , decltype(_impl_.tv_relay_port_){0u}
    , decltype(_impl_.tv_relay_steamid_){uint64_t{0u}}
    , decltype(_impl_.flags_){0u}
  };
  _impl_.game_mapgroup_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.game_mapgroup_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.game_map_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.game_map_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ServerHltvInfo::~ServerHltvInfo() {
  // @@protoc_insertion_point(destructor:ServerHltvInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ServerHltvInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.game_mapgroup_.Destroy();
  _impl_.game_map_.Destroy();
}

void ServerHltvInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ServerHltvInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:ServerHltvInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.game_mapgroup_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.game_map_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x000000fcu) {
    ::memset(&_impl_.tv_watch_key_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.tv_time_) -
        reinterpret_cast<char*>(&_impl_.tv_watch_key_)) + sizeof(_impl_.tv_time_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&_impl_.game_type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.tv_relay_proxies_) -
        reinterpret_cast<char*>(&_impl_.game_type_)) + sizeof(_impl_.tv_relay_proxies_));
  }
  if (cached_has_bits & 0x000f0000u) {
    ::memset(&_impl_.tv_relay_address_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.flags_) -
        reinterpret_cast<char*>(&_impl_.tv_relay_address_)) + sizeof(_impl_.flags_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ServerHltvInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 tv_udp_port = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_tv_udp_port(&has_bits);
          _impl_.tv_udp_port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 tv_watch_key = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_tv_watch_key(&has_bits);
          _impl_.tv_watch_key_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 tv_slots = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_tv_slots(&has_bits);
          _impl_.tv_slots_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 tv_clients = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_tv_clients(&has_bits);
          _impl_.tv_clients_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 tv_proxies = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_tv_proxies(&has_bits);
          _impl_.tv_proxies_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 tv_time = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_tv_time(&has_bits);
          _impl_.tv_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 game_type = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_game_type(&has_bits);
          _impl_.game_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string game_mapgroup = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_game_mapgroup();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "ServerHltvInfo.game_mapgroup");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string game_map = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          auto str = _internal_mutable_game_map();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "ServerHltvInfo.game_map");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional uint64 tv_master_steamid = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _Internal::set_has_tv_master_steamid(&has_bits);
          _impl_.tv_master_steamid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 tv_local_slots = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _Internal::set_has_tv_local_slots(&has_bits);
          _impl_.tv_local_slots_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 tv_local_clients = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _Internal::set_has_tv_local_clients(&has_bits);
          _impl_.tv_local_clients_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 tv_local_proxies = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          _Internal::set_has_tv_local_proxies(&has_bits);
          _impl_.tv_local_proxies_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 tv_relay_slots = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          _Internal::set_has_tv_relay_slots(&has_bits);
          _impl_.tv_relay_slots_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 tv_relay_clients = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          _Internal::set_has_tv_relay_clients(&has_bits);
          _impl_.tv_relay_clients_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 tv_relay_proxies = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          _Internal::set_has_tv_relay_proxies(&has_bits);
          _impl_.tv_relay_proxies_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 tv_relay_address = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 144)) {
          _Internal::set_has_tv_relay_address(&has_bits);
          _impl_.tv_relay_address_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 tv_relay_port = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 152)) {
          _Internal::set_has_tv_relay_port(&has_bits);
          _impl_.tv_relay_port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 tv_relay_steamid = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 160)) {
          _Internal::set_has_tv_relay_steamid(&has_bits);
          _impl_.tv_relay_steamid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 flags = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 168)) {
          _Internal::set_has_flags(&has_bits);
          _impl_.flags_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ServerHltvInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ServerHltvInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 tv_udp_port = 1;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_tv_udp_port(), target);
  }

  // optional uint64 tv_watch_key = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_tv_watch_key(), target);
  }

  // optional uint32 tv_slots = 3;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_tv_slots(), target);
  }

  // optional uint32 tv_clients = 4;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_tv_clients(), target);
  }

  // optional uint32 tv_proxies = 5;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_tv_proxies(), target);
  }

  // optional uint32 tv_time = 6;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_tv_time(), target);
  }

  // optional uint32 game_type = 8;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(8, this->_internal_game_type(), target);
  }

  // optional string game_mapgroup = 9;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_game_mapgroup().data(), static_cast<int>(this->_internal_game_mapgroup().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ServerHltvInfo.game_mapgroup");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_game_mapgroup(), target);
  }

  // optional string game_map = 10;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_game_map().data(), static_cast<int>(this->_internal_game_map().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ServerHltvInfo.game_map");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_game_map(), target);
  }

  // optional uint64 tv_master_steamid = 11;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(11, this->_internal_tv_master_steamid(), target);
  }

  // optional uint32 tv_local_slots = 12;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(12, this->_internal_tv_local_slots(), target);
  }

  // optional uint32 tv_local_clients = 13;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(13, this->_internal_tv_local_clients(), target);
  }

  // optional uint32 tv_local_proxies = 14;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(14, this->_internal_tv_local_proxies(), target);
  }

  // optional uint32 tv_relay_slots = 15;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(15, this->_internal_tv_relay_slots(), target);
  }

  // optional uint32 tv_relay_clients = 16;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(16, this->_internal_tv_relay_clients(), target);
  }

  // optional uint32 tv_relay_proxies = 17;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(17, this->_internal_tv_relay_proxies(), target);
  }

  // optional uint32 tv_relay_address = 18;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(18, this->_internal_tv_relay_address(), target);
  }

  // optional uint32 tv_relay_port = 19;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(19, this->_internal_tv_relay_port(), target);
  }

  // optional uint64 tv_relay_steamid = 20;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(20, this->_internal_tv_relay_steamid(), target);
  }

  // optional uint32 flags = 21;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(21, this->_internal_flags(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ServerHltvInfo)
  return target;
}

size_t ServerHltvInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ServerHltvInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string game_mapgroup = 9;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_game_mapgroup());
    }

    // optional string game_map = 10;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_game_map());
    }

    // optional uint64 tv_watch_key = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_tv_watch_key());
    }

    // optional uint32 tv_udp_port = 1;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_tv_udp_port());
    }

    // optional uint32 tv_slots = 3;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_tv_slots());
    }

    // optional uint32 tv_clients = 4;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_tv_clients());
    }

    // optional uint32 tv_proxies = 5;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_tv_proxies());
    }

    // optional uint32 tv_time = 6;
    if (cached_has_bits & 0x00000080u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_tv_time());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional uint32 game_type = 8;
    if (cached_has_bits & 0x00000100u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_game_type());
    }

    // optional uint64 tv_master_steamid = 11;
    if (cached_has_bits & 0x00000200u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_tv_master_steamid());
    }

    // optional uint32 tv_local_slots = 12;
    if (cached_has_bits & 0x00000400u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_tv_local_slots());
    }

    // optional uint32 tv_local_clients = 13;
    if (cached_has_bits & 0x00000800u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_tv_local_clients());
    }

    // optional uint32 tv_local_proxies = 14;
    if (cached_has_bits & 0x00001000u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_tv_local_proxies());
    }

    // optional uint32 tv_relay_slots = 15;
    if (cached_has_bits & 0x00002000u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_tv_relay_slots());
    }

    // optional uint32 tv_relay_clients = 16;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_tv_relay_clients());
    }

    // optional uint32 tv_relay_proxies = 17;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_tv_relay_proxies());
    }

  }
  if (cached_has_bits & 0x000f0000u) {
    // optional uint32 tv_relay_address = 18;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_tv_relay_address());
    }

    // optional uint32 tv_relay_port = 19;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_tv_relay_port());
    }

    // optional uint64 tv_relay_steamid = 20;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt64Size(
          this->_internal_tv_relay_steamid());
    }

    // optional uint32 flags = 21;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_flags());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ServerHltvInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ServerHltvInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ServerHltvInfo::GetClassData() const { return &_class_data_; }


void ServerHltvInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ServerHltvInfo*>(&to_msg);
  auto& from = static_cast<const ServerHltvInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ServerHltvInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_game_mapgroup(from._internal_game_mapgroup());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_game_map(from._internal_game_map());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.tv_watch_key_ = from._impl_.tv_watch_key_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.tv_udp_port_ = from._impl_.tv_udp_port_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.tv_slots_ = from._impl_.tv_slots_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.tv_clients_ = from._impl_.tv_clients_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.tv_proxies_ = from._impl_.tv_proxies_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.tv_time_ = from._impl_.tv_time_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.game_type_ = from._impl_.game_type_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.tv_master_steamid_ = from._impl_.tv_master_steamid_;
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_impl_.tv_local_slots_ = from._impl_.tv_local_slots_;
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_impl_.tv_local_clients_ = from._impl_.tv_local_clients_;
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_impl_.tv_local_proxies_ = from._impl_.tv_local_proxies_;
    }
    if (cached_has_bits & 0x00002000u) {
      _this->_impl_.tv_relay_slots_ = from._impl_.tv_relay_slots_;
    }
    if (cached_has_bits & 0x00004000u) {
      _this->_impl_.tv_relay_clients_ = from._impl_.tv_relay_clients_;
    }
    if (cached_has_bits & 0x00008000u) {
      _this->_impl_.tv_relay_proxies_ = from._impl_.tv_relay_proxies_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x000f0000u) {
    if (cached_has_bits & 0x00010000u) {
      _this->_impl_.tv_relay_address_ = from._impl_.tv_relay_address_;
    }
    if (cached_has_bits & 0x00020000u) {
      _this->_impl_.tv_relay_port_ = from._impl_.tv_relay_port_;
    }
    if (cached_has_bits & 0x00040000u) {
      _this->_impl_.tv_relay_steamid_ = from._impl_.tv_relay_steamid_;
    }
    if (cached_has_bits & 0x00080000u) {
      _this->_impl_.flags_ = from._impl_.flags_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ServerHltvInfo::CopyFrom(const ServerHltvInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ServerHltvInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerHltvInfo::IsInitialized() const {
  return true;
}

void ServerHltvInfo::InternalSwap(ServerHltvInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.game_mapgroup_, lhs_arena,
      &other->_impl_.game_mapgroup_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.game_map_, lhs_arena,
      &other->_impl_.game_map_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ServerHltvInfo, _impl_.flags_)
      + sizeof(ServerHltvInfo::_impl_.flags_)
      - PROTOBUF_FIELD_OFFSET(ServerHltvInfo, _impl_.tv_watch_key_)>(
          reinterpret_cast<char*>(&_impl_.tv_watch_key_),
          reinterpret_cast<char*>(&other->_impl_.tv_watch_key_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ServerHltvInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cstrike15_5fgcmessages_2eproto_getter, &descriptor_table_cstrike15_5fgcmessages_2eproto_once,
      file_level_metadata_cstrike15_5fgcmessages_2eproto[17]);
}

// ===================================================================

class IpAddressMask::_Internal {
 public:
  using HasBits = decltype(std::declval<IpAddressMask>()._impl_._has_bits_);
  static void set_has_a(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_b(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_c(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_d(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_bits(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_token(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

IpAddressMask::IpAddressMask(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:IpAddressMask)
}
IpAddressMask::IpAddressMask(const IpAddressMask& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  IpAddressMask* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.a_){}
    , decltype(_impl_.b_){}
    , decltype(_impl_.c_){}
    , decltype(_impl_.d_){}
    , decltype(_impl_.bits_){}
    , decltype(_impl_.token_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.a_, &from._impl_.a_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.token_) -
    reinterpret_cast<char*>(&_impl_.a_)) + sizeof(_impl_.token_));
  // @@protoc_insertion_point(copy_constructor:IpAddressMask)
}

inline void IpAddressMask::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.a_){0u}
    , decltype(_impl_.b_){0u}
    , decltype(_impl_.c_){0u}
    , decltype(_impl_.d_){0u}
    , decltype(_impl_.bits_){0u}
    , decltype(_impl_.token_){0u}
  };
}

IpAddressMask::~IpAddressMask() {
  // @@protoc_insertion_point(destructor:IpAddressMask)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void IpAddressMask::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void IpAddressMask::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void IpAddressMask::Clear() {
// @@protoc_insertion_point(message_clear_start:IpAddressMask)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    ::memset(&_impl_.a_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.token_) -
        reinterpret_cast<char*>(&_impl_.a_)) + sizeof(_impl_.token_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IpAddressMask::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 a = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_a(&has_bits);
          _impl_.a_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 b = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_b(&has_bits);
          _impl_.b_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 c = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_c(&has_bits);
          _impl_.c_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 d = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_d(&has_bits);
          _impl_.d_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 bits = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_bits(&has_bits);
          _impl_.bits_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 token = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_token(&has_bits);
          _impl_.token_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* IpAddressMask::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:IpAddressMask)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 a = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_a(), target);
  }

  // optional uint32 b = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_b(), target);
  }

  // optional uint32 c = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_c(), target);
  }

  // optional uint32 d = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_d(), target);
  }

  // optional uint32 bits = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_bits(), target);
  }

  // optional uint32 token = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_token(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IpAddressMask)
  return target;
}

size_t IpAddressMask::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IpAddressMask)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional uint32 a = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_a());
    }

    // optional uint32 b = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_b());
    }

    // optional uint32 c = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_c());
    }

    // optional uint32 d = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_d());
    }

    // optional uint32 bits = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_bits());
    }

    // optional uint32 token = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_token());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData IpAddressMask::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    IpAddressMask::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*IpAddressMask::GetClassData() const { return &_class_data_; }


void IpAddressMask::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<IpAddressMask*>(&to_msg);
  auto& from = static_cast<const IpAddressMask&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:IpAddressMask)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.a_ = from._impl_.a_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.b_ = from._impl_.b_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.c_ = from._impl_.c_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.d_ = from._impl_.d_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.bits_ = from._impl_.bits_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.token_ = from._impl_.token_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void IpAddressMask::CopyFrom(const IpAddressMask& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IpAddressMask)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IpAddressMask::IsInitialized() const {
  return true;
}

void IpAddressMask::InternalSwap(IpAddressMask* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(IpAddressMask, _impl_.token_)
      + sizeof(IpAddressMask::_impl_.token_)
      - PROTOBUF_FIELD_OFFSET(IpAddressMask, _impl_.a_)>(
          reinterpret_cast<char*>(&_impl_.a_),
          reinterpret_cast<char*>(&other->_impl_.a_));
}

::PROTOBUF_NAMESPACE_ID::Metadata IpAddressMask::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cstrike15_5fgcmessages_2eproto_getter, &descriptor_table_cstrike15_5fgcmessages_2eproto_once,
      file_level_metadata_cstrike15_5fgcmessages_2eproto[18]);
}

// ===================================================================

class CMsgCsgoSteamUserStatChange::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgCsgoSteamUserStatChange>()._impl_._has_bits_);
  static void set_has_ecsgosteamuserstat(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_delta(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_absolute(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CMsgCsgoSteamUserStatChange::CMsgCsgoSteamUserStatChange(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgCsgoSteamUserStatChange)
}
CMsgCsgoSteamUserStatChange::CMsgCsgoSteamUserStatChange(const CMsgCsgoSteamUserStatChange& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgCsgoSteamUserStatChange* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.ecsgosteamuserstat_){}
    , decltype(_impl_.delta_){}
    , decltype(_impl_.absolute_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.ecsgosteamuserstat_, &from._impl_.ecsgosteamuserstat_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.absolute_) -
    reinterpret_cast<char*>(&_impl_.ecsgosteamuserstat_)) + sizeof(_impl_.absolute_));
  // @@protoc_insertion_point(copy_constructor:CMsgCsgoSteamUserStatChange)
}

inline void CMsgCsgoSteamUserStatChange::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.ecsgosteamuserstat_){0}
    , decltype(_impl_.delta_){0}
    , decltype(_impl_.absolute_){false}
  };
}

CMsgCsgoSteamUserStatChange::~CMsgCsgoSteamUserStatChange() {
  // @@protoc_insertion_point(destructor:CMsgCsgoSteamUserStatChange)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgCsgoSteamUserStatChange::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgCsgoSteamUserStatChange::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgCsgoSteamUserStatChange::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgCsgoSteamUserStatChange)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.ecsgosteamuserstat_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.absolute_) -
        reinterpret_cast<char*>(&_impl_.ecsgosteamuserstat_)) + sizeof(_impl_.absolute_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgCsgoSteamUserStatChange::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 ecsgosteamuserstat = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_ecsgosteamuserstat(&has_bits);
          _impl_.ecsgosteamuserstat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 delta = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_delta(&has_bits);
          _impl_.delta_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool absolute = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_absolute(&has_bits);
          _impl_.absolute_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgCsgoSteamUserStatChange::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgCsgoSteamUserStatChange)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 ecsgosteamuserstat = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_ecsgosteamuserstat(), target);
  }

  // optional int32 delta = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_delta(), target);
  }

  // optional bool absolute = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_absolute(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgCsgoSteamUserStatChange)
  return target;
}

size_t CMsgCsgoSteamUserStatChange::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgCsgoSteamUserStatChange)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional int32 ecsgosteamuserstat = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_ecsgosteamuserstat());
    }

    // optional int32 delta = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_delta());
    }

    // optional bool absolute = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgCsgoSteamUserStatChange::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgCsgoSteamUserStatChange::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgCsgoSteamUserStatChange::GetClassData() const { return &_class_data_; }


void CMsgCsgoSteamUserStatChange::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgCsgoSteamUserStatChange*>(&to_msg);
  auto& from = static_cast<const CMsgCsgoSteamUserStatChange&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgCsgoSteamUserStatChange)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.ecsgosteamuserstat_ = from._impl_.ecsgosteamuserstat_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.delta_ = from._impl_.delta_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.absolute_ = from._impl_.absolute_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgCsgoSteamUserStatChange::CopyFrom(const CMsgCsgoSteamUserStatChange& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgCsgoSteamUserStatChange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgCsgoSteamUserStatChange::IsInitialized() const {
  return true;
}

void CMsgCsgoSteamUserStatChange::InternalSwap(CMsgCsgoSteamUserStatChange* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgCsgoSteamUserStatChange, _impl_.absolute_)
      + sizeof(CMsgCsgoSteamUserStatChange::_impl_.absolute_)
      - PROTOBUF_FIELD_OFFSET(CMsgCsgoSteamUserStatChange, _impl_.ecsgosteamuserstat_)>(
          reinterpret_cast<char*>(&_impl_.ecsgosteamuserstat_),
          reinterpret_cast<char*>(&other->_impl_.ecsgosteamuserstat_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgCsgoSteamUserStatChange::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cstrike15_5fgcmessages_2eproto_getter, &descriptor_table_cstrike15_5fgcmessages_2eproto_once,
      file_level_metadata_cstrike15_5fgcmessages_2eproto[19]);
}

// ===================================================================

class XpProgressData::_Internal {
 public:
  using HasBits = decltype(std::declval<XpProgressData>()._impl_._has_bits_);
  static void set_has_xp_points(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_xp_category(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

XpProgressData::XpProgressData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:XpProgressData)
}
XpProgressData::XpProgressData(const XpProgressData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  XpProgressData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.xp_points_){}
    , decltype(_impl_.xp_category_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.xp_points_, &from._impl_.xp_points_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.xp_category_) -
    reinterpret_cast<char*>(&_impl_.xp_points_)) + sizeof(_impl_.xp_category_));
  // @@protoc_insertion_point(copy_constructor:XpProgressData)
}

inline void XpProgressData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.xp_points_){0u}
    , decltype(_impl_.xp_category_){0}
  };
}

XpProgressData::~XpProgressData() {
  // @@protoc_insertion_point(destructor:XpProgressData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void XpProgressData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void XpProgressData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void XpProgressData::Clear() {
// @@protoc_insertion_point(message_clear_start:XpProgressData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.xp_points_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.xp_category_) -
        reinterpret_cast<char*>(&_impl_.xp_points_)) + sizeof(_impl_.xp_category_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* XpProgressData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 xp_points = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_xp_points(&has_bits);
          _impl_.xp_points_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 xp_category = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_xp_category(&has_bits);
          _impl_.xp_category_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* XpProgressData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:XpProgressData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 xp_points = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_xp_points(), target);
  }

  // optional int32 xp_category = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_xp_category(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:XpProgressData)
  return target;
}

size_t XpProgressData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:XpProgressData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 xp_points = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_xp_points());
    }

    // optional int32 xp_category = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_xp_category());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData XpProgressData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    XpProgressData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*XpProgressData::GetClassData() const { return &_class_data_; }


void XpProgressData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<XpProgressData*>(&to_msg);
  auto& from = static_cast<const XpProgressData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:XpProgressData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.xp_points_ = from._impl_.xp_points_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.xp_category_ = from._impl_.xp_category_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void XpProgressData::CopyFrom(const XpProgressData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:XpProgressData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool XpProgressData::IsInitialized() const {
  return true;
}

void XpProgressData::InternalSwap(XpProgressData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(XpProgressData, _impl_.xp_category_)
      + sizeof(XpProgressData::_impl_.xp_category_)
      - PROTOBUF_FIELD_OFFSET(XpProgressData, _impl_.xp_points_)>(
          reinterpret_cast<char*>(&_impl_.xp_points_),
          reinterpret_cast<char*>(&other->_impl_.xp_points_));
}

::PROTOBUF_NAMESPACE_ID::Metadata XpProgressData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cstrike15_5fgcmessages_2eproto_getter, &descriptor_table_cstrike15_5fgcmessages_2eproto_once,
      file_level_metadata_cstrike15_5fgcmessages_2eproto[20]);
}

// ===================================================================

class MatchEndItemUpdates::_Internal {
 public:
  using HasBits = decltype(std::declval<MatchEndItemUpdates>()._impl_._has_bits_);
  static void set_has_item_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_item_attr_defidx(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_item_attr_delta_value(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

MatchEndItemUpdates::MatchEndItemUpdates(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:MatchEndItemUpdates)
}
MatchEndItemUpdates::MatchEndItemUpdates(const MatchEndItemUpdates& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MatchEndItemUpdates* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.item_id_){}
    , decltype(_impl_.item_attr_defidx_){}
    , decltype(_impl_.item_attr_delta_value_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.item_id_, &from._impl_.item_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.item_attr_delta_value_) -
    reinterpret_cast<char*>(&_impl_.item_id_)) + sizeof(_impl_.item_attr_delta_value_));
  // @@protoc_insertion_point(copy_constructor:MatchEndItemUpdates)
}

inline void MatchEndItemUpdates::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.item_id_){uint64_t{0u}}
    , decltype(_impl_.item_attr_defidx_){0u}
    , decltype(_impl_.item_attr_delta_value_){0u}
  };
}

MatchEndItemUpdates::~MatchEndItemUpdates() {
  // @@protoc_insertion_point(destructor:MatchEndItemUpdates)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MatchEndItemUpdates::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void MatchEndItemUpdates::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MatchEndItemUpdates::Clear() {
// @@protoc_insertion_point(message_clear_start:MatchEndItemUpdates)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.item_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.item_attr_delta_value_) -
        reinterpret_cast<char*>(&_impl_.item_id_)) + sizeof(_impl_.item_attr_delta_value_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MatchEndItemUpdates::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 item_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_item_id(&has_bits);
          _impl_.item_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 item_attr_defidx = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_item_attr_defidx(&has_bits);
          _impl_.item_attr_defidx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 item_attr_delta_value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_item_attr_delta_value(&has_bits);
          _impl_.item_attr_delta_value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MatchEndItemUpdates::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:MatchEndItemUpdates)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint64 item_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_item_id(), target);
  }

  // optional uint32 item_attr_defidx = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_item_attr_defidx(), target);
  }

  // optional uint32 item_attr_delta_value = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_item_attr_delta_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MatchEndItemUpdates)
  return target;
}

size_t MatchEndItemUpdates::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MatchEndItemUpdates)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint64 item_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_item_id());
    }

    // optional uint32 item_attr_defidx = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_item_attr_defidx());
    }

    // optional uint32 item_attr_delta_value = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_item_attr_delta_value());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MatchEndItemUpdates::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MatchEndItemUpdates::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MatchEndItemUpdates::GetClassData() const { return &_class_data_; }


void MatchEndItemUpdates::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MatchEndItemUpdates*>(&to_msg);
  auto& from = static_cast<const MatchEndItemUpdates&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:MatchEndItemUpdates)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.item_id_ = from._impl_.item_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.item_attr_defidx_ = from._impl_.item_attr_defidx_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.item_attr_delta_value_ = from._impl_.item_attr_delta_value_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MatchEndItemUpdates::CopyFrom(const MatchEndItemUpdates& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MatchEndItemUpdates)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MatchEndItemUpdates::IsInitialized() const {
  return true;
}

void MatchEndItemUpdates::InternalSwap(MatchEndItemUpdates* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MatchEndItemUpdates, _impl_.item_attr_delta_value_)
      + sizeof(MatchEndItemUpdates::_impl_.item_attr_delta_value_)
      - PROTOBUF_FIELD_OFFSET(MatchEndItemUpdates, _impl_.item_id_)>(
          reinterpret_cast<char*>(&_impl_.item_id_),
          reinterpret_cast<char*>(&other->_impl_.item_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MatchEndItemUpdates::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cstrike15_5fgcmessages_2eproto_getter, &descriptor_table_cstrike15_5fgcmessages_2eproto_once,
      file_level_metadata_cstrike15_5fgcmessages_2eproto[21]);
}

// ===================================================================

class ScoreLeaderboardData_Entry::_Internal {
 public:
  using HasBits = decltype(std::declval<ScoreLeaderboardData_Entry>()._impl_._has_bits_);
  static void set_has_tag(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_val(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

ScoreLeaderboardData_Entry::ScoreLeaderboardData_Entry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ScoreLeaderboardData.Entry)
}
ScoreLeaderboardData_Entry::ScoreLeaderboardData_Entry(const ScoreLeaderboardData_Entry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ScoreLeaderboardData_Entry* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.tag_){}
    , decltype(_impl_.val_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.tag_, &from._impl_.tag_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.val_) -
    reinterpret_cast<char*>(&_impl_.tag_)) + sizeof(_impl_.val_));
  // @@protoc_insertion_point(copy_constructor:ScoreLeaderboardData.Entry)
}

inline void ScoreLeaderboardData_Entry::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.tag_){0u}
    , decltype(_impl_.val_){0u}
  };
}

ScoreLeaderboardData_Entry::~ScoreLeaderboardData_Entry() {
  // @@protoc_insertion_point(destructor:ScoreLeaderboardData.Entry)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ScoreLeaderboardData_Entry::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ScoreLeaderboardData_Entry::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ScoreLeaderboardData_Entry::Clear() {
// @@protoc_insertion_point(message_clear_start:ScoreLeaderboardData.Entry)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.tag_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.val_) -
        reinterpret_cast<char*>(&_impl_.tag_)) + sizeof(_impl_.val_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ScoreLeaderboardData_Entry::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 tag = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_tag(&has_bits);
          _impl_.tag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 val = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_val(&has_bits);
          _impl_.val_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ScoreLeaderboardData_Entry::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ScoreLeaderboardData.Entry)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 tag = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_tag(), target);
  }

  // optional uint32 val = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_val(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ScoreLeaderboardData.Entry)
  return target;
}

size_t ScoreLeaderboardData_Entry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ScoreLeaderboardData.Entry)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 tag = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_tag());
    }

    // optional uint32 val = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_val());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ScoreLeaderboardData_Entry::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ScoreLeaderboardData_Entry::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ScoreLeaderboardData_Entry::GetClassData() const { return &_class_data_; }


void ScoreLeaderboardData_Entry::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ScoreLeaderboardData_Entry*>(&to_msg);
  auto& from = static_cast<const ScoreLeaderboardData_Entry&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ScoreLeaderboardData.Entry)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.tag_ = from._impl_.tag_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.val_ = from._impl_.val_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ScoreLeaderboardData_Entry::CopyFrom(const ScoreLeaderboardData_Entry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ScoreLeaderboardData.Entry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScoreLeaderboardData_Entry::IsInitialized() const {
  return true;
}

void ScoreLeaderboardData_Entry::InternalSwap(ScoreLeaderboardData_Entry* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ScoreLeaderboardData_Entry, _impl_.val_)
      + sizeof(ScoreLeaderboardData_Entry::_impl_.val_)
      - PROTOBUF_FIELD_OFFSET(ScoreLeaderboardData_Entry, _impl_.tag_)>(
          reinterpret_cast<char*>(&_impl_.tag_),
          reinterpret_cast<char*>(&other->_impl_.tag_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ScoreLeaderboardData_Entry::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cstrike15_5fgcmessages_2eproto_getter, &descriptor_table_cstrike15_5fgcmessages_2eproto_once,
      file_level_metadata_cstrike15_5fgcmessages_2eproto[22]);
}

// ===================================================================

class ScoreLeaderboardData_AccountEntries::_Internal {
 public:
  using HasBits = decltype(std::declval<ScoreLeaderboardData_AccountEntries>()._impl_._has_bits_);
  static void set_has_accountid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ScoreLeaderboardData_AccountEntries::ScoreLeaderboardData_AccountEntries(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ScoreLeaderboardData.AccountEntries)
}
ScoreLeaderboardData_AccountEntries::ScoreLeaderboardData_AccountEntries(const ScoreLeaderboardData_AccountEntries& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ScoreLeaderboardData_AccountEntries* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.entries_){from._impl_.entries_}
    , decltype(_impl_.accountid_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.accountid_ = from._impl_.accountid_;
  // @@protoc_insertion_point(copy_constructor:ScoreLeaderboardData.AccountEntries)
}

inline void ScoreLeaderboardData_AccountEntries::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.entries_){arena}
    , decltype(_impl_.accountid_){0u}
  };
}

ScoreLeaderboardData_AccountEntries::~ScoreLeaderboardData_AccountEntries() {
  // @@protoc_insertion_point(destructor:ScoreLeaderboardData.AccountEntries)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ScoreLeaderboardData_AccountEntries::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.entries_.~RepeatedPtrField();
}

void ScoreLeaderboardData_AccountEntries::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ScoreLeaderboardData_AccountEntries::Clear() {
// @@protoc_insertion_point(message_clear_start:ScoreLeaderboardData.AccountEntries)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.entries_.Clear();
  _impl_.accountid_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ScoreLeaderboardData_AccountEntries::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 accountid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_accountid(&has_bits);
          _impl_.accountid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .ScoreLeaderboardData.Entry entries = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_entries(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ScoreLeaderboardData_AccountEntries::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ScoreLeaderboardData.AccountEntries)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 accountid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_accountid(), target);
  }

  // repeated .ScoreLeaderboardData.Entry entries = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_entries_size()); i < n; i++) {
    const auto& repfield = this->_internal_entries(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ScoreLeaderboardData.AccountEntries)
  return target;
}

size_t ScoreLeaderboardData_AccountEntries::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ScoreLeaderboardData.AccountEntries)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ScoreLeaderboardData.Entry entries = 2;
  total_size += 1UL * this->_internal_entries_size();
  for (const auto& msg : this->_impl_.entries_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional uint32 accountid = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_accountid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ScoreLeaderboardData_AccountEntries::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ScoreLeaderboardData_AccountEntries::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ScoreLeaderboardData_AccountEntries::GetClassData() const { return &_class_data_; }


void ScoreLeaderboardData_AccountEntries::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ScoreLeaderboardData_AccountEntries*>(&to_msg);
  auto& from = static_cast<const ScoreLeaderboardData_AccountEntries&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ScoreLeaderboardData.AccountEntries)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.entries_.MergeFrom(from._impl_.entries_);
  if (from._internal_has_accountid()) {
    _this->_internal_set_accountid(from._internal_accountid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ScoreLeaderboardData_AccountEntries::CopyFrom(const ScoreLeaderboardData_AccountEntries& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ScoreLeaderboardData.AccountEntries)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScoreLeaderboardData_AccountEntries::IsInitialized() const {
  return true;
}

void ScoreLeaderboardData_AccountEntries::InternalSwap(ScoreLeaderboardData_AccountEntries* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.entries_.InternalSwap(&other->_impl_.entries_);
  swap(_impl_.accountid_, other->_impl_.accountid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ScoreLeaderboardData_AccountEntries::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cstrike15_5fgcmessages_2eproto_getter, &descriptor_table_cstrike15_5fgcmessages_2eproto_once,
      file_level_metadata_cstrike15_5fgcmessages_2eproto[23]);
}

// ===================================================================

class ScoreLeaderboardData::_Internal {
 public:
  using HasBits = decltype(std::declval<ScoreLeaderboardData>()._impl_._has_bits_);
  static void set_has_quest_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_score(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_leaderboard_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ScoreLeaderboardData::ScoreLeaderboardData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ScoreLeaderboardData)
}
ScoreLeaderboardData::ScoreLeaderboardData(const ScoreLeaderboardData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ScoreLeaderboardData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.accountentries_){from._impl_.accountentries_}
    , decltype(_impl_.matchentries_){from._impl_.matchentries_}
    , decltype(_impl_.leaderboard_name_){}
    , decltype(_impl_.quest_id_){}
    , decltype(_impl_.score_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.leaderboard_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.leaderboard_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_leaderboard_name()) {
    _this->_impl_.leaderboard_name_.Set(from._internal_leaderboard_name(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.quest_id_, &from._impl_.quest_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.score_) -
    reinterpret_cast<char*>(&_impl_.quest_id_)) + sizeof(_impl_.score_));
  // @@protoc_insertion_point(copy_constructor:ScoreLeaderboardData)
}

inline void ScoreLeaderboardData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.accountentries_){arena}
    , decltype(_impl_.matchentries_){arena}
    , decltype(_impl_.leaderboard_name_){}
    , decltype(_impl_.quest_id_){uint64_t{0u}}
    , decltype(_impl_.score_){0u}
  };
  _impl_.leaderboard_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.leaderboard_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ScoreLeaderboardData::~ScoreLeaderboardData() {
  // @@protoc_insertion_point(destructor:ScoreLeaderboardData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ScoreLeaderboardData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.accountentries_.~RepeatedPtrField();
  _impl_.matchentries_.~RepeatedPtrField();
  _impl_.leaderboard_name_.Destroy();
}

void ScoreLeaderboardData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ScoreLeaderboardData::Clear() {
// @@protoc_insertion_point(message_clear_start:ScoreLeaderboardData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.accountentries_.Clear();
  _impl_.matchentries_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.leaderboard_name_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&_impl_.quest_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.score_) -
        reinterpret_cast<char*>(&_impl_.quest_id_)) + sizeof(_impl_.score_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ScoreLeaderboardData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 quest_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_quest_id(&has_bits);
          _impl_.quest_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 score = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_score(&has_bits);
          _impl_.score_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .ScoreLeaderboardData.AccountEntries accountentries = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_accountentries(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .ScoreLeaderboardData.Entry matchentries = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_matchentries(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional string leaderboard_name = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_leaderboard_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "ScoreLeaderboardData.leaderboard_name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ScoreLeaderboardData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ScoreLeaderboardData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint64 quest_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_quest_id(), target);
  }

  // optional uint32 score = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_score(), target);
  }

  // repeated .ScoreLeaderboardData.AccountEntries accountentries = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_accountentries_size()); i < n; i++) {
    const auto& repfield = this->_internal_accountentries(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .ScoreLeaderboardData.Entry matchentries = 5;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_matchentries_size()); i < n; i++) {
    const auto& repfield = this->_internal_matchentries(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional string leaderboard_name = 6;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_leaderboard_name().data(), static_cast<int>(this->_internal_leaderboard_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ScoreLeaderboardData.leaderboard_name");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_leaderboard_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ScoreLeaderboardData)
  return target;
}

size_t ScoreLeaderboardData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ScoreLeaderboardData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ScoreLeaderboardData.AccountEntries accountentries = 3;
  total_size += 1UL * this->_internal_accountentries_size();
  for (const auto& msg : this->_impl_.accountentries_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .ScoreLeaderboardData.Entry matchentries = 5;
  total_size += 1UL * this->_internal_matchentries_size();
  for (const auto& msg : this->_impl_.matchentries_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string leaderboard_name = 6;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_leaderboard_name());
    }

    // optional uint64 quest_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_quest_id());
    }

    // optional uint32 score = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_score());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ScoreLeaderboardData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ScoreLeaderboardData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ScoreLeaderboardData::GetClassData() const { return &_class_data_; }


void ScoreLeaderboardData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ScoreLeaderboardData*>(&to_msg);
  auto& from = static_cast<const ScoreLeaderboardData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ScoreLeaderboardData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.accountentries_.MergeFrom(from._impl_.accountentries_);
  _this->_impl_.matchentries_.MergeFrom(from._impl_.matchentries_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_leaderboard_name(from._internal_leaderboard_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.quest_id_ = from._impl_.quest_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.score_ = from._impl_.score_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ScoreLeaderboardData::CopyFrom(const ScoreLeaderboardData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ScoreLeaderboardData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScoreLeaderboardData::IsInitialized() const {
  return true;
}

void ScoreLeaderboardData::InternalSwap(ScoreLeaderboardData* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.accountentries_.InternalSwap(&other->_impl_.accountentries_);
  _impl_.matchentries_.InternalSwap(&other->_impl_.matchentries_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.leaderboard_name_, lhs_arena,
      &other->_impl_.leaderboard_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ScoreLeaderboardData, _impl_.score_)
      + sizeof(ScoreLeaderboardData::_impl_.score_)
      - PROTOBUF_FIELD_OFFSET(ScoreLeaderboardData, _impl_.quest_id_)>(
          reinterpret_cast<char*>(&_impl_.quest_id_),
          reinterpret_cast<char*>(&other->_impl_.quest_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ScoreLeaderboardData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cstrike15_5fgcmessages_2eproto_getter, &descriptor_table_cstrike15_5fgcmessages_2eproto_once,
      file_level_metadata_cstrike15_5fgcmessages_2eproto[24]);
}

// ===================================================================

class PlayerQuestData_QuestItemData::_Internal {
 public:
  using HasBits = decltype(std::declval<PlayerQuestData_QuestItemData>()._impl_._has_bits_);
  static void set_has_quest_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_quest_normal_points_earned(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_quest_bonus_points_earned(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

PlayerQuestData_QuestItemData::PlayerQuestData_QuestItemData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:PlayerQuestData.QuestItemData)
}
PlayerQuestData_QuestItemData::PlayerQuestData_QuestItemData(const PlayerQuestData_QuestItemData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PlayerQuestData_QuestItemData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.quest_id_){}
    , decltype(_impl_.quest_normal_points_earned_){}
    , decltype(_impl_.quest_bonus_points_earned_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.quest_id_, &from._impl_.quest_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.quest_bonus_points_earned_) -
    reinterpret_cast<char*>(&_impl_.quest_id_)) + sizeof(_impl_.quest_bonus_points_earned_));
  // @@protoc_insertion_point(copy_constructor:PlayerQuestData.QuestItemData)
}

inline void PlayerQuestData_QuestItemData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.quest_id_){uint64_t{0u}}
    , decltype(_impl_.quest_normal_points_earned_){0}
    , decltype(_impl_.quest_bonus_points_earned_){0}
  };
}

PlayerQuestData_QuestItemData::~PlayerQuestData_QuestItemData() {
  // @@protoc_insertion_point(destructor:PlayerQuestData.QuestItemData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PlayerQuestData_QuestItemData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PlayerQuestData_QuestItemData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PlayerQuestData_QuestItemData::Clear() {
// @@protoc_insertion_point(message_clear_start:PlayerQuestData.QuestItemData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.quest_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.quest_bonus_points_earned_) -
        reinterpret_cast<char*>(&_impl_.quest_id_)) + sizeof(_impl_.quest_bonus_points_earned_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PlayerQuestData_QuestItemData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 quest_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_quest_id(&has_bits);
          _impl_.quest_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 quest_normal_points_earned = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_quest_normal_points_earned(&has_bits);
          _impl_.quest_normal_points_earned_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 quest_bonus_points_earned = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_quest_bonus_points_earned(&has_bits);
          _impl_.quest_bonus_points_earned_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PlayerQuestData_QuestItemData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlayerQuestData.QuestItemData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint64 quest_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_quest_id(), target);
  }

  // optional int32 quest_normal_points_earned = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_quest_normal_points_earned(), target);
  }

  // optional int32 quest_bonus_points_earned = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_quest_bonus_points_earned(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlayerQuestData.QuestItemData)
  return target;
}

size_t PlayerQuestData_QuestItemData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlayerQuestData.QuestItemData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint64 quest_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_quest_id());
    }

    // optional int32 quest_normal_points_earned = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_quest_normal_points_earned());
    }

    // optional int32 quest_bonus_points_earned = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_quest_bonus_points_earned());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PlayerQuestData_QuestItemData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PlayerQuestData_QuestItemData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PlayerQuestData_QuestItemData::GetClassData() const { return &_class_data_; }


void PlayerQuestData_QuestItemData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PlayerQuestData_QuestItemData*>(&to_msg);
  auto& from = static_cast<const PlayerQuestData_QuestItemData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:PlayerQuestData.QuestItemData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.quest_id_ = from._impl_.quest_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.quest_normal_points_earned_ = from._impl_.quest_normal_points_earned_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.quest_bonus_points_earned_ = from._impl_.quest_bonus_points_earned_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PlayerQuestData_QuestItemData::CopyFrom(const PlayerQuestData_QuestItemData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlayerQuestData.QuestItemData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerQuestData_QuestItemData::IsInitialized() const {
  return true;
}

void PlayerQuestData_QuestItemData::InternalSwap(PlayerQuestData_QuestItemData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PlayerQuestData_QuestItemData, _impl_.quest_bonus_points_earned_)
      + sizeof(PlayerQuestData_QuestItemData::_impl_.quest_bonus_points_earned_)
      - PROTOBUF_FIELD_OFFSET(PlayerQuestData_QuestItemData, _impl_.quest_id_)>(
          reinterpret_cast<char*>(&_impl_.quest_id_),
          reinterpret_cast<char*>(&other->_impl_.quest_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PlayerQuestData_QuestItemData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cstrike15_5fgcmessages_2eproto_getter, &descriptor_table_cstrike15_5fgcmessages_2eproto_once,
      file_level_metadata_cstrike15_5fgcmessages_2eproto[25]);
}

// ===================================================================

class PlayerQuestData::_Internal {
 public:
  using HasBits = decltype(std::declval<PlayerQuestData>()._impl_._has_bits_);
  static void set_has_quester_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_time_played(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_mm_game_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_operation_points_eligible(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

PlayerQuestData::PlayerQuestData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:PlayerQuestData)
}
PlayerQuestData::PlayerQuestData(const PlayerQuestData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PlayerQuestData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.quest_item_data_){from._impl_.quest_item_data_}
    , decltype(_impl_.xp_progress_data_){from._impl_.xp_progress_data_}
    , decltype(_impl_.item_updates_){from._impl_.item_updates_}
    , decltype(_impl_.userstatchanges_){from._impl_.userstatchanges_}
    , decltype(_impl_.quester_account_id_){}
    , decltype(_impl_.time_played_){}
    , decltype(_impl_.mm_game_mode_){}
    , decltype(_impl_.operation_points_eligible_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.quester_account_id_, &from._impl_.quester_account_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.operation_points_eligible_) -
    reinterpret_cast<char*>(&_impl_.quester_account_id_)) + sizeof(_impl_.operation_points_eligible_));
  // @@protoc_insertion_point(copy_constructor:PlayerQuestData)
}

inline void PlayerQuestData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.quest_item_data_){arena}
    , decltype(_impl_.xp_progress_data_){arena}
    , decltype(_impl_.item_updates_){arena}
    , decltype(_impl_.userstatchanges_){arena}
    , decltype(_impl_.quester_account_id_){0u}
    , decltype(_impl_.time_played_){0u}
    , decltype(_impl_.mm_game_mode_){0u}
    , decltype(_impl_.operation_points_eligible_){false}
  };
}

PlayerQuestData::~PlayerQuestData() {
  // @@protoc_insertion_point(destructor:PlayerQuestData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PlayerQuestData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.quest_item_data_.~RepeatedPtrField();
  _impl_.xp_progress_data_.~RepeatedPtrField();
  _impl_.item_updates_.~RepeatedPtrField();
  _impl_.userstatchanges_.~RepeatedPtrField();
}

void PlayerQuestData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PlayerQuestData::Clear() {
// @@protoc_insertion_point(message_clear_start:PlayerQuestData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.quest_item_data_.Clear();
  _impl_.xp_progress_data_.Clear();
  _impl_.item_updates_.Clear();
  _impl_.userstatchanges_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&_impl_.quester_account_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.operation_points_eligible_) -
        reinterpret_cast<char*>(&_impl_.quester_account_id_)) + sizeof(_impl_.operation_points_eligible_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PlayerQuestData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 quester_account_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_quester_account_id(&has_bits);
          _impl_.quester_account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .PlayerQuestData.QuestItemData quest_item_data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_quest_item_data(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .XpProgressData xp_progress_data = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_xp_progress_data(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional uint32 time_played = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_time_played(&has_bits);
          _impl_.time_played_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 mm_game_mode = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_mm_game_mode(&has_bits);
          _impl_.mm_game_mode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .MatchEndItemUpdates item_updates = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_item_updates(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional bool operation_points_eligible = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_operation_points_eligible(&has_bits);
          _impl_.operation_points_eligible_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .CMsgCsgoSteamUserStatChange userstatchanges = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_userstatchanges(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PlayerQuestData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlayerQuestData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 quester_account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_quester_account_id(), target);
  }

  // repeated .PlayerQuestData.QuestItemData quest_item_data = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_quest_item_data_size()); i < n; i++) {
    const auto& repfield = this->_internal_quest_item_data(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .XpProgressData xp_progress_data = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_xp_progress_data_size()); i < n; i++) {
    const auto& repfield = this->_internal_xp_progress_data(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional uint32 time_played = 4;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_time_played(), target);
  }

  // optional uint32 mm_game_mode = 5;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_mm_game_mode(), target);
  }

  // repeated .MatchEndItemUpdates item_updates = 6;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_item_updates_size()); i < n; i++) {
    const auto& repfield = this->_internal_item_updates(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(6, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional bool operation_points_eligible = 7;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(7, this->_internal_operation_points_eligible(), target);
  }

  // repeated .CMsgCsgoSteamUserStatChange userstatchanges = 8;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_userstatchanges_size()); i < n; i++) {
    const auto& repfield = this->_internal_userstatchanges(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(8, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlayerQuestData)
  return target;
}

size_t PlayerQuestData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlayerQuestData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .PlayerQuestData.QuestItemData quest_item_data = 2;
  total_size += 1UL * this->_internal_quest_item_data_size();
  for (const auto& msg : this->_impl_.quest_item_data_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .XpProgressData xp_progress_data = 3;
  total_size += 1UL * this->_internal_xp_progress_data_size();
  for (const auto& msg : this->_impl_.xp_progress_data_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .MatchEndItemUpdates item_updates = 6;
  total_size += 1UL * this->_internal_item_updates_size();
  for (const auto& msg : this->_impl_.item_updates_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .CMsgCsgoSteamUserStatChange userstatchanges = 8;
  total_size += 1UL * this->_internal_userstatchanges_size();
  for (const auto& msg : this->_impl_.userstatchanges_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional uint32 quester_account_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_quester_account_id());
    }

    // optional uint32 time_played = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_time_played());
    }

    // optional uint32 mm_game_mode = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_mm_game_mode());
    }

    // optional bool operation_points_eligible = 7;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PlayerQuestData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PlayerQuestData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PlayerQuestData::GetClassData() const { return &_class_data_; }


void PlayerQuestData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PlayerQuestData*>(&to_msg);
  auto& from = static_cast<const PlayerQuestData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:PlayerQuestData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.quest_item_data_.MergeFrom(from._impl_.quest_item_data_);
  _this->_impl_.xp_progress_data_.MergeFrom(from._impl_.xp_progress_data_);
  _this->_impl_.item_updates_.MergeFrom(from._impl_.item_updates_);
  _this->_impl_.userstatchanges_.MergeFrom(from._impl_.userstatchanges_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.quester_account_id_ = from._impl_.quester_account_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.time_played_ = from._impl_.time_played_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.mm_game_mode_ = from._impl_.mm_game_mode_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.operation_points_eligible_ = from._impl_.operation_points_eligible_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PlayerQuestData::CopyFrom(const PlayerQuestData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlayerQuestData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerQuestData::IsInitialized() const {
  return true;
}

void PlayerQuestData::InternalSwap(PlayerQuestData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.quest_item_data_.InternalSwap(&other->_impl_.quest_item_data_);
  _impl_.xp_progress_data_.InternalSwap(&other->_impl_.xp_progress_data_);
  _impl_.item_updates_.InternalSwap(&other->_impl_.item_updates_);
  _impl_.userstatchanges_.InternalSwap(&other->_impl_.userstatchanges_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PlayerQuestData, _impl_.operation_points_eligible_)
      + sizeof(PlayerQuestData::_impl_.operation_points_eligible_)
      - PROTOBUF_FIELD_OFFSET(PlayerQuestData, _impl_.quester_account_id_)>(
          reinterpret_cast<char*>(&_impl_.quester_account_id_),
          reinterpret_cast<char*>(&other->_impl_.quester_account_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PlayerQuestData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cstrike15_5fgcmessages_2eproto_getter, &descriptor_table_cstrike15_5fgcmessages_2eproto_once,
      file_level_metadata_cstrike15_5fgcmessages_2eproto[26]);
}

// ===================================================================

class DeepPlayerStatsEntry::_Internal {
 public:
  using HasBits = decltype(std::declval<DeepPlayerStatsEntry>()._impl_._has_bits_);
  static void set_has_accountid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_match_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_mm_game_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_mapid(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_b_starting_ct(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_match_outcome(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_rounds_won(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_rounds_lost(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_stat_score(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_stat_deaths(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_stat_mvps(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_enemy_kills(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_enemy_headshots(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_enemy_2ks(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_enemy_3ks(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_enemy_4ks(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_total_damage(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_engagements_entry_count(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_engagements_entry_wins(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_engagements_1v1_count(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_engagements_1v1_wins(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_engagements_1v2_count(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static void set_has_engagements_1v2_wins(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static void set_has_utility_count(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static void set_has_utility_success(HasBits* has_bits) {
    (*has_bits)[0] |= 16777216u;
  }
  static void set_has_flash_count(HasBits* has_bits) {
    (*has_bits)[0] |= 33554432u;
  }
  static void set_has_flash_success(HasBits* has_bits) {
    (*has_bits)[0] |= 67108864u;
  }
};

DeepPlayerStatsEntry::DeepPlayerStatsEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:DeepPlayerStatsEntry)
}
DeepPlayerStatsEntry::DeepPlayerStatsEntry(const DeepPlayerStatsEntry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DeepPlayerStatsEntry* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.mates_){from._impl_.mates_}
    , decltype(_impl_.match_id_){}
    , decltype(_impl_.accountid_){}
    , decltype(_impl_.mm_game_mode_){}
    , decltype(_impl_.mapid_){}
    , decltype(_impl_.b_starting_ct_){}
    , decltype(_impl_.match_outcome_){}
    , decltype(_impl_.rounds_won_){}
    , decltype(_impl_.rounds_lost_){}
    , decltype(_impl_.stat_score_){}
    , decltype(_impl_.stat_deaths_){}
    , decltype(_impl_.stat_mvps_){}
    , decltype(_impl_.enemy_kills_){}
    , decltype(_impl_.enemy_headshots_){}
    , decltype(_impl_.enemy_2ks_){}
    , decltype(_impl_.enemy_3ks_){}
    , decltype(_impl_.enemy_4ks_){}
    , decltype(_impl_.total_damage_){}
    , decltype(_impl_.engagements_entry_count_){}
    , decltype(_impl_.engagements_entry_wins_){}
    , decltype(_impl_.engagements_1v1_count_){}
    , decltype(_impl_.engagements_1v1_wins_){}
    , decltype(_impl_.engagements_1v2_count_){}
    , decltype(_impl_.engagements_1v2_wins_){}
    , decltype(_impl_.utility_count_){}
    , decltype(_impl_.utility_success_){}
    , decltype(_impl_.flash_count_){}
    , decltype(_impl_.flash_success_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.match_id_, &from._impl_.match_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.flash_success_) -
    reinterpret_cast<char*>(&_impl_.match_id_)) + sizeof(_impl_.flash_success_));
  // @@protoc_insertion_point(copy_constructor:DeepPlayerStatsEntry)
}

inline void DeepPlayerStatsEntry::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.mates_){arena}
    , decltype(_impl_.match_id_){uint64_t{0u}}
    , decltype(_impl_.accountid_){0u}
    , decltype(_impl_.mm_game_mode_){0u}
    , decltype(_impl_.mapid_){0u}
    , decltype(_impl_.b_starting_ct_){false}
    , decltype(_impl_.match_outcome_){0u}
    , decltype(_impl_.rounds_won_){0u}
    , decltype(_impl_.rounds_lost_){0u}
    , decltype(_impl_.stat_score_){0u}
    , decltype(_impl_.stat_deaths_){0u}
    , decltype(_impl_.stat_mvps_){0u}
    , decltype(_impl_.enemy_kills_){0u}
    , decltype(_impl_.enemy_headshots_){0u}
    , decltype(_impl_.enemy_2ks_){0u}
    , decltype(_impl_.enemy_3ks_){0u}
    , decltype(_impl_.enemy_4ks_){0u}
    , decltype(_impl_.total_damage_){0u}
    , decltype(_impl_.engagements_entry_count_){0u}
    , decltype(_impl_.engagements_entry_wins_){0u}
    , decltype(_impl_.engagements_1v1_count_){0u}
    , decltype(_impl_.engagements_1v1_wins_){0u}
    , decltype(_impl_.engagements_1v2_count_){0u}
    , decltype(_impl_.engagements_1v2_wins_){0u}
    , decltype(_impl_.utility_count_){0u}
    , decltype(_impl_.utility_success_){0u}
    , decltype(_impl_.flash_count_){0u}
    , decltype(_impl_.flash_success_){0u}
  };
}

DeepPlayerStatsEntry::~DeepPlayerStatsEntry() {
  // @@protoc_insertion_point(destructor:DeepPlayerStatsEntry)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DeepPlayerStatsEntry::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.mates_.~RepeatedField();
}

void DeepPlayerStatsEntry::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DeepPlayerStatsEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:DeepPlayerStatsEntry)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.mates_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&_impl_.match_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.rounds_lost_) -
        reinterpret_cast<char*>(&_impl_.match_id_)) + sizeof(_impl_.rounds_lost_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&_impl_.stat_score_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.enemy_4ks_) -
        reinterpret_cast<char*>(&_impl_.stat_score_)) + sizeof(_impl_.enemy_4ks_));
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&_impl_.total_damage_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.utility_count_) -
        reinterpret_cast<char*>(&_impl_.total_damage_)) + sizeof(_impl_.utility_count_));
  }
  if (cached_has_bits & 0x07000000u) {
    ::memset(&_impl_.utility_success_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.flash_success_) -
        reinterpret_cast<char*>(&_impl_.utility_success_)) + sizeof(_impl_.flash_success_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeepPlayerStatsEntry::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 accountid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_accountid(&has_bits);
          _impl_.accountid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 match_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_match_id(&has_bits);
          _impl_.match_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 mm_game_mode = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_mm_game_mode(&has_bits);
          _impl_.mm_game_mode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 mapid = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_mapid(&has_bits);
          _impl_.mapid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool b_starting_ct = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_b_starting_ct(&has_bits);
          _impl_.b_starting_ct_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 match_outcome = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_match_outcome(&has_bits);
          _impl_.match_outcome_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 rounds_won = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_rounds_won(&has_bits);
          _impl_.rounds_won_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 rounds_lost = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_rounds_lost(&has_bits);
          _impl_.rounds_lost_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 stat_score = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_stat_score(&has_bits);
          _impl_.stat_score_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 stat_deaths = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _Internal::set_has_stat_deaths(&has_bits);
          _impl_.stat_deaths_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 stat_mvps = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _Internal::set_has_stat_mvps(&has_bits);
          _impl_.stat_mvps_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 enemy_kills = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          _Internal::set_has_enemy_kills(&has_bits);
          _impl_.enemy_kills_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 enemy_headshots = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          _Internal::set_has_enemy_headshots(&has_bits);
          _impl_.enemy_headshots_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 enemy_2ks = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          _Internal::set_has_enemy_2ks(&has_bits);
          _impl_.enemy_2ks_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 enemy_3ks = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          _Internal::set_has_enemy_3ks(&has_bits);
          _impl_.enemy_3ks_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 enemy_4ks = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 144)) {
          _Internal::set_has_enemy_4ks(&has_bits);
          _impl_.enemy_4ks_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 total_damage = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 152)) {
          _Internal::set_has_total_damage(&has_bits);
          _impl_.total_damage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 engagements_entry_count = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 184)) {
          _Internal::set_has_engagements_entry_count(&has_bits);
          _impl_.engagements_entry_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 engagements_entry_wins = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 192)) {
          _Internal::set_has_engagements_entry_wins(&has_bits);
          _impl_.engagements_entry_wins_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 engagements_1v1_count = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 200)) {
          _Internal::set_has_engagements_1v1_count(&has_bits);
          _impl_.engagements_1v1_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 engagements_1v1_wins = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 208)) {
          _Internal::set_has_engagements_1v1_wins(&has_bits);
          _impl_.engagements_1v1_wins_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 engagements_1v2_count = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 216)) {
          _Internal::set_has_engagements_1v2_count(&has_bits);
          _impl_.engagements_1v2_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 engagements_1v2_wins = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 224)) {
          _Internal::set_has_engagements_1v2_wins(&has_bits);
          _impl_.engagements_1v2_wins_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 utility_count = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 232)) {
          _Internal::set_has_utility_count(&has_bits);
          _impl_.utility_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 utility_success = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 240)) {
          _Internal::set_has_utility_success(&has_bits);
          _impl_.utility_success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 flash_count = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 0)) {
          _Internal::set_has_flash_count(&has_bits);
          _impl_.flash_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 flash_success = 33;
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_flash_success(&has_bits);
          _impl_.flash_success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 mates = 34;
      case 34:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_mates(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<272>(ptr));
        } else if (static_cast<uint8_t>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_mates(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DeepPlayerStatsEntry::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DeepPlayerStatsEntry)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 accountid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_accountid(), target);
  }

  // optional uint64 match_id = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_match_id(), target);
  }

  // optional uint32 mm_game_mode = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_mm_game_mode(), target);
  }

  // optional uint32 mapid = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_mapid(), target);
  }

  // optional bool b_starting_ct = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_b_starting_ct(), target);
  }

  // optional uint32 match_outcome = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_match_outcome(), target);
  }

  // optional uint32 rounds_won = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(7, this->_internal_rounds_won(), target);
  }

  // optional uint32 rounds_lost = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(8, this->_internal_rounds_lost(), target);
  }

  // optional uint32 stat_score = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(9, this->_internal_stat_score(), target);
  }

  // optional uint32 stat_deaths = 12;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(12, this->_internal_stat_deaths(), target);
  }

  // optional uint32 stat_mvps = 13;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(13, this->_internal_stat_mvps(), target);
  }

  // optional uint32 enemy_kills = 14;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(14, this->_internal_enemy_kills(), target);
  }

  // optional uint32 enemy_headshots = 15;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(15, this->_internal_enemy_headshots(), target);
  }

  // optional uint32 enemy_2ks = 16;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(16, this->_internal_enemy_2ks(), target);
  }

  // optional uint32 enemy_3ks = 17;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(17, this->_internal_enemy_3ks(), target);
  }

  // optional uint32 enemy_4ks = 18;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(18, this->_internal_enemy_4ks(), target);
  }

  // optional uint32 total_damage = 19;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(19, this->_internal_total_damage(), target);
  }

  // optional uint32 engagements_entry_count = 23;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(23, this->_internal_engagements_entry_count(), target);
  }

  // optional uint32 engagements_entry_wins = 24;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(24, this->_internal_engagements_entry_wins(), target);
  }

  // optional uint32 engagements_1v1_count = 25;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(25, this->_internal_engagements_1v1_count(), target);
  }

  // optional uint32 engagements_1v1_wins = 26;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(26, this->_internal_engagements_1v1_wins(), target);
  }

  // optional uint32 engagements_1v2_count = 27;
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(27, this->_internal_engagements_1v2_count(), target);
  }

  // optional uint32 engagements_1v2_wins = 28;
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(28, this->_internal_engagements_1v2_wins(), target);
  }

  // optional uint32 utility_count = 29;
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(29, this->_internal_utility_count(), target);
  }

  // optional uint32 utility_success = 30;
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(30, this->_internal_utility_success(), target);
  }

  // optional uint32 flash_count = 32;
  if (cached_has_bits & 0x02000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(32, this->_internal_flash_count(), target);
  }

  // optional uint32 flash_success = 33;
  if (cached_has_bits & 0x04000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(33, this->_internal_flash_success(), target);
  }

  // repeated uint32 mates = 34;
  for (int i = 0, n = this->_internal_mates_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(34, this->_internal_mates(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DeepPlayerStatsEntry)
  return target;
}

size_t DeepPlayerStatsEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DeepPlayerStatsEntry)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 mates = 34;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.mates_);
    total_size += 2 *
                  ::_pbi::FromIntSize(this->_internal_mates_size());
    total_size += data_size;
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional uint64 match_id = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_match_id());
    }

    // optional uint32 accountid = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_accountid());
    }

    // optional uint32 mm_game_mode = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_mm_game_mode());
    }

    // optional uint32 mapid = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_mapid());
    }

    // optional bool b_starting_ct = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional uint32 match_outcome = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_match_outcome());
    }

    // optional uint32 rounds_won = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_rounds_won());
    }

    // optional uint32 rounds_lost = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_rounds_lost());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional uint32 stat_score = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_stat_score());
    }

    // optional uint32 stat_deaths = 12;
    if (cached_has_bits & 0x00000200u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_stat_deaths());
    }

    // optional uint32 stat_mvps = 13;
    if (cached_has_bits & 0x00000400u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_stat_mvps());
    }

    // optional uint32 enemy_kills = 14;
    if (cached_has_bits & 0x00000800u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_enemy_kills());
    }

    // optional uint32 enemy_headshots = 15;
    if (cached_has_bits & 0x00001000u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_enemy_headshots());
    }

    // optional uint32 enemy_2ks = 16;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_enemy_2ks());
    }

    // optional uint32 enemy_3ks = 17;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_enemy_3ks());
    }

    // optional uint32 enemy_4ks = 18;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_enemy_4ks());
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional uint32 total_damage = 19;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_total_damage());
    }

    // optional uint32 engagements_entry_count = 23;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_engagements_entry_count());
    }

    // optional uint32 engagements_entry_wins = 24;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_engagements_entry_wins());
    }

    // optional uint32 engagements_1v1_count = 25;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_engagements_1v1_count());
    }

    // optional uint32 engagements_1v1_wins = 26;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_engagements_1v1_wins());
    }

    // optional uint32 engagements_1v2_count = 27;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_engagements_1v2_count());
    }

    // optional uint32 engagements_1v2_wins = 28;
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_engagements_1v2_wins());
    }

    // optional uint32 utility_count = 29;
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_utility_count());
    }

  }
  if (cached_has_bits & 0x07000000u) {
    // optional uint32 utility_success = 30;
    if (cached_has_bits & 0x01000000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_utility_success());
    }

    // optional uint32 flash_count = 32;
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_flash_count());
    }

    // optional uint32 flash_success = 33;
    if (cached_has_bits & 0x04000000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_flash_success());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DeepPlayerStatsEntry::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DeepPlayerStatsEntry::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DeepPlayerStatsEntry::GetClassData() const { return &_class_data_; }


void DeepPlayerStatsEntry::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DeepPlayerStatsEntry*>(&to_msg);
  auto& from = static_cast<const DeepPlayerStatsEntry&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:DeepPlayerStatsEntry)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.mates_.MergeFrom(from._impl_.mates_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.match_id_ = from._impl_.match_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.accountid_ = from._impl_.accountid_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.mm_game_mode_ = from._impl_.mm_game_mode_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.mapid_ = from._impl_.mapid_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.b_starting_ct_ = from._impl_.b_starting_ct_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.match_outcome_ = from._impl_.match_outcome_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.rounds_won_ = from._impl_.rounds_won_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.rounds_lost_ = from._impl_.rounds_lost_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.stat_score_ = from._impl_.stat_score_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.stat_deaths_ = from._impl_.stat_deaths_;
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_impl_.stat_mvps_ = from._impl_.stat_mvps_;
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_impl_.enemy_kills_ = from._impl_.enemy_kills_;
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_impl_.enemy_headshots_ = from._impl_.enemy_headshots_;
    }
    if (cached_has_bits & 0x00002000u) {
      _this->_impl_.enemy_2ks_ = from._impl_.enemy_2ks_;
    }
    if (cached_has_bits & 0x00004000u) {
      _this->_impl_.enemy_3ks_ = from._impl_.enemy_3ks_;
    }
    if (cached_has_bits & 0x00008000u) {
      _this->_impl_.enemy_4ks_ = from._impl_.enemy_4ks_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      _this->_impl_.total_damage_ = from._impl_.total_damage_;
    }
    if (cached_has_bits & 0x00020000u) {
      _this->_impl_.engagements_entry_count_ = from._impl_.engagements_entry_count_;
    }
    if (cached_has_bits & 0x00040000u) {
      _this->_impl_.engagements_entry_wins_ = from._impl_.engagements_entry_wins_;
    }
    if (cached_has_bits & 0x00080000u) {
      _this->_impl_.engagements_1v1_count_ = from._impl_.engagements_1v1_count_;
    }
    if (cached_has_bits & 0x00100000u) {
      _this->_impl_.engagements_1v1_wins_ = from._impl_.engagements_1v1_wins_;
    }
    if (cached_has_bits & 0x00200000u) {
      _this->_impl_.engagements_1v2_count_ = from._impl_.engagements_1v2_count_;
    }
    if (cached_has_bits & 0x00400000u) {
      _this->_impl_.engagements_1v2_wins_ = from._impl_.engagements_1v2_wins_;
    }
    if (cached_has_bits & 0x00800000u) {
      _this->_impl_.utility_count_ = from._impl_.utility_count_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x07000000u) {
    if (cached_has_bits & 0x01000000u) {
      _this->_impl_.utility_success_ = from._impl_.utility_success_;
    }
    if (cached_has_bits & 0x02000000u) {
      _this->_impl_.flash_count_ = from._impl_.flash_count_;
    }
    if (cached_has_bits & 0x04000000u) {
      _this->_impl_.flash_success_ = from._impl_.flash_success_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DeepPlayerStatsEntry::CopyFrom(const DeepPlayerStatsEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DeepPlayerStatsEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeepPlayerStatsEntry::IsInitialized() const {
  return true;
}

void DeepPlayerStatsEntry::InternalSwap(DeepPlayerStatsEntry* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.mates_.InternalSwap(&other->_impl_.mates_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DeepPlayerStatsEntry, _impl_.flash_success_)
      + sizeof(DeepPlayerStatsEntry::_impl_.flash_success_)
      - PROTOBUF_FIELD_OFFSET(DeepPlayerStatsEntry, _impl_.match_id_)>(
          reinterpret_cast<char*>(&_impl_.match_id_),
          reinterpret_cast<char*>(&other->_impl_.match_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DeepPlayerStatsEntry::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cstrike15_5fgcmessages_2eproto_getter, &descriptor_table_cstrike15_5fgcmessages_2eproto_once,
      file_level_metadata_cstrike15_5fgcmessages_2eproto[27]);
}

// ===================================================================

class DeepPlayerMatchEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<DeepPlayerMatchEvent>()._impl_._has_bits_);
  static void set_has_accountid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_match_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_event_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_event_type(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_b_playing_ct(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_user_pos_x(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_user_pos_y(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_user_pos_z(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_user_defidx(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_other_pos_x(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_other_pos_y(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_other_pos_z(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_other_defidx(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_event_data(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
};

DeepPlayerMatchEvent::DeepPlayerMatchEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:DeepPlayerMatchEvent)
}
DeepPlayerMatchEvent::DeepPlayerMatchEvent(const DeepPlayerMatchEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DeepPlayerMatchEvent* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.match_id_){}
    , decltype(_impl_.accountid_){}
    , decltype(_impl_.event_id_){}
    , decltype(_impl_.event_type_){}
    , decltype(_impl_.b_playing_ct_){}
    , decltype(_impl_.user_pos_x_){}
    , decltype(_impl_.user_pos_y_){}
    , decltype(_impl_.user_defidx_){}
    , decltype(_impl_.other_pos_x_){}
    , decltype(_impl_.other_pos_y_){}
    , decltype(_impl_.other_defidx_){}
    , decltype(_impl_.user_pos_z_){}
    , decltype(_impl_.other_pos_z_){}
    , decltype(_impl_.event_data_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.match_id_, &from._impl_.match_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.event_data_) -
    reinterpret_cast<char*>(&_impl_.match_id_)) + sizeof(_impl_.event_data_));
  // @@protoc_insertion_point(copy_constructor:DeepPlayerMatchEvent)
}

inline void DeepPlayerMatchEvent::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.match_id_){uint64_t{0u}}
    , decltype(_impl_.accountid_){0u}
    , decltype(_impl_.event_id_){0u}
    , decltype(_impl_.event_type_){0u}
    , decltype(_impl_.b_playing_ct_){false}
    , decltype(_impl_.user_pos_x_){0}
    , decltype(_impl_.user_pos_y_){0}
    , decltype(_impl_.user_defidx_){0u}
    , decltype(_impl_.other_pos_x_){0}
    , decltype(_impl_.other_pos_y_){0}
    , decltype(_impl_.other_defidx_){0u}
    , decltype(_impl_.user_pos_z_){0}
    , decltype(_impl_.other_pos_z_){0}
    , decltype(_impl_.event_data_){0}
  };
}

DeepPlayerMatchEvent::~DeepPlayerMatchEvent() {
  // @@protoc_insertion_point(destructor:DeepPlayerMatchEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DeepPlayerMatchEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void DeepPlayerMatchEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DeepPlayerMatchEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:DeepPlayerMatchEvent)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&_impl_.match_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.user_defidx_) -
        reinterpret_cast<char*>(&_impl_.match_id_)) + sizeof(_impl_.user_defidx_));
  }
  if (cached_has_bits & 0x00003f00u) {
    ::memset(&_impl_.other_pos_x_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.event_data_) -
        reinterpret_cast<char*>(&_impl_.other_pos_x_)) + sizeof(_impl_.event_data_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeepPlayerMatchEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 accountid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_accountid(&has_bits);
          _impl_.accountid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 match_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_match_id(&has_bits);
          _impl_.match_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 event_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_event_id(&has_bits);
          _impl_.event_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 event_type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_event_type(&has_bits);
          _impl_.event_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool b_playing_ct = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_b_playing_ct(&has_bits);
          _impl_.b_playing_ct_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 user_pos_x = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_user_pos_x(&has_bits);
          _impl_.user_pos_x_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 user_pos_y = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_user_pos_y(&has_bits);
          _impl_.user_pos_y_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 user_defidx = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_user_defidx(&has_bits);
          _impl_.user_defidx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 other_pos_x = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_other_pos_x(&has_bits);
          _impl_.other_pos_x_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 other_pos_y = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_other_pos_y(&has_bits);
          _impl_.other_pos_y_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 other_defidx = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _Internal::set_has_other_defidx(&has_bits);
          _impl_.other_defidx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 user_pos_z = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _Internal::set_has_user_pos_z(&has_bits);
          _impl_.user_pos_z_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 other_pos_z = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _Internal::set_has_other_pos_z(&has_bits);
          _impl_.other_pos_z_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 event_data = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          _Internal::set_has_event_data(&has_bits);
          _impl_.event_data_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DeepPlayerMatchEvent::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DeepPlayerMatchEvent)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 accountid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_accountid(), target);
  }

  // optional uint64 match_id = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_match_id(), target);
  }

  // optional uint32 event_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_event_id(), target);
  }

  // optional uint32 event_type = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_event_type(), target);
  }

  // optional bool b_playing_ct = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_b_playing_ct(), target);
  }

  // optional int32 user_pos_x = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(6, this->_internal_user_pos_x(), target);
  }

  // optional int32 user_pos_y = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(7, this->_internal_user_pos_y(), target);
  }

  // optional uint32 user_defidx = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(8, this->_internal_user_defidx(), target);
  }

  // optional int32 other_pos_x = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(9, this->_internal_other_pos_x(), target);
  }

  // optional int32 other_pos_y = 10;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(10, this->_internal_other_pos_y(), target);
  }

  // optional uint32 other_defidx = 11;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(11, this->_internal_other_defidx(), target);
  }

  // optional int32 user_pos_z = 12;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(12, this->_internal_user_pos_z(), target);
  }

  // optional int32 other_pos_z = 13;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(13, this->_internal_other_pos_z(), target);
  }

  // optional int32 event_data = 14;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(14, this->_internal_event_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DeepPlayerMatchEvent)
  return target;
}

size_t DeepPlayerMatchEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DeepPlayerMatchEvent)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional uint64 match_id = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_match_id());
    }

    // optional uint32 accountid = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_accountid());
    }

    // optional uint32 event_id = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_event_id());
    }

    // optional uint32 event_type = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_event_type());
    }

    // optional bool b_playing_ct = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional int32 user_pos_x = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_user_pos_x());
    }

    // optional int32 user_pos_y = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_user_pos_y());
    }

    // optional uint32 user_defidx = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_user_defidx());
    }

  }
  if (cached_has_bits & 0x00003f00u) {
    // optional int32 other_pos_x = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_other_pos_x());
    }

    // optional int32 other_pos_y = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_other_pos_y());
    }

    // optional uint32 other_defidx = 11;
    if (cached_has_bits & 0x00000400u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_other_defidx());
    }

    // optional int32 user_pos_z = 12;
    if (cached_has_bits & 0x00000800u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_user_pos_z());
    }

    // optional int32 other_pos_z = 13;
    if (cached_has_bits & 0x00001000u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_other_pos_z());
    }

    // optional int32 event_data = 14;
    if (cached_has_bits & 0x00002000u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_event_data());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DeepPlayerMatchEvent::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DeepPlayerMatchEvent::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DeepPlayerMatchEvent::GetClassData() const { return &_class_data_; }


void DeepPlayerMatchEvent::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DeepPlayerMatchEvent*>(&to_msg);
  auto& from = static_cast<const DeepPlayerMatchEvent&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:DeepPlayerMatchEvent)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.match_id_ = from._impl_.match_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.accountid_ = from._impl_.accountid_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.event_id_ = from._impl_.event_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.event_type_ = from._impl_.event_type_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.b_playing_ct_ = from._impl_.b_playing_ct_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.user_pos_x_ = from._impl_.user_pos_x_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.user_pos_y_ = from._impl_.user_pos_y_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.user_defidx_ = from._impl_.user_defidx_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00003f00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.other_pos_x_ = from._impl_.other_pos_x_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.other_pos_y_ = from._impl_.other_pos_y_;
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_impl_.other_defidx_ = from._impl_.other_defidx_;
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_impl_.user_pos_z_ = from._impl_.user_pos_z_;
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_impl_.other_pos_z_ = from._impl_.other_pos_z_;
    }
    if (cached_has_bits & 0x00002000u) {
      _this->_impl_.event_data_ = from._impl_.event_data_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DeepPlayerMatchEvent::CopyFrom(const DeepPlayerMatchEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DeepPlayerMatchEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeepPlayerMatchEvent::IsInitialized() const {
  return true;
}

void DeepPlayerMatchEvent::InternalSwap(DeepPlayerMatchEvent* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DeepPlayerMatchEvent, _impl_.event_data_)
      + sizeof(DeepPlayerMatchEvent::_impl_.event_data_)
      - PROTOBUF_FIELD_OFFSET(DeepPlayerMatchEvent, _impl_.match_id_)>(
          reinterpret_cast<char*>(&_impl_.match_id_),
          reinterpret_cast<char*>(&other->_impl_.match_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DeepPlayerMatchEvent::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cstrike15_5fgcmessages_2eproto_getter, &descriptor_table_cstrike15_5fgcmessages_2eproto_once,
      file_level_metadata_cstrike15_5fgcmessages_2eproto[28]);
}

// ===================================================================

class CMsgGC_ServerQuestUpdateData::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGC_ServerQuestUpdateData>()._impl_._has_bits_);
  static void set_has_binary_data(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_mm_game_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::ScoreLeaderboardData& missionlbsdata(const CMsgGC_ServerQuestUpdateData* msg);
  static void set_has_missionlbsdata(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_flags(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::ScoreLeaderboardData&
CMsgGC_ServerQuestUpdateData::_Internal::missionlbsdata(const CMsgGC_ServerQuestUpdateData* msg) {
  return *msg->_impl_.missionlbsdata_;
}
CMsgGC_ServerQuestUpdateData::CMsgGC_ServerQuestUpdateData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgGC_ServerQuestUpdateData)
}
CMsgGC_ServerQuestUpdateData::CMsgGC_ServerQuestUpdateData(const CMsgGC_ServerQuestUpdateData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgGC_ServerQuestUpdateData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.player_quest_data_){from._impl_.player_quest_data_}
    , decltype(_impl_.binary_data_){}
    , decltype(_impl_.missionlbsdata_){nullptr}
    , decltype(_impl_.mm_game_mode_){}
    , decltype(_impl_.flags_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.binary_data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.binary_data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_binary_data()) {
    _this->_impl_.binary_data_.Set(from._internal_binary_data(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_missionlbsdata()) {
    _this->_impl_.missionlbsdata_ = new ::ScoreLeaderboardData(*from._impl_.missionlbsdata_);
  }
  ::memcpy(&_impl_.mm_game_mode_, &from._impl_.mm_game_mode_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.flags_) -
    reinterpret_cast<char*>(&_impl_.mm_game_mode_)) + sizeof(_impl_.flags_));
  // @@protoc_insertion_point(copy_constructor:CMsgGC_ServerQuestUpdateData)
}

inline void CMsgGC_ServerQuestUpdateData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.player_quest_data_){arena}
    , decltype(_impl_.binary_data_){}
    , decltype(_impl_.missionlbsdata_){nullptr}
    , decltype(_impl_.mm_game_mode_){0u}
    , decltype(_impl_.flags_){0u}
  };
  _impl_.binary_data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.binary_data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CMsgGC_ServerQuestUpdateData::~CMsgGC_ServerQuestUpdateData() {
  // @@protoc_insertion_point(destructor:CMsgGC_ServerQuestUpdateData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgGC_ServerQuestUpdateData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.player_quest_data_.~RepeatedPtrField();
  _impl_.binary_data_.Destroy();
  if (this != internal_default_instance()) delete _impl_.missionlbsdata_;
}

void CMsgGC_ServerQuestUpdateData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgGC_ServerQuestUpdateData::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGC_ServerQuestUpdateData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.player_quest_data_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.binary_data_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.missionlbsdata_ != nullptr);
      _impl_.missionlbsdata_->Clear();
    }
  }
  if (cached_has_bits & 0x0000000cu) {
    ::memset(&_impl_.mm_game_mode_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.flags_) -
        reinterpret_cast<char*>(&_impl_.mm_game_mode_)) + sizeof(_impl_.flags_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGC_ServerQuestUpdateData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .PlayerQuestData player_quest_data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_player_quest_data(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional bytes binary_data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_binary_data();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 mm_game_mode = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_mm_game_mode(&has_bits);
          _impl_.mm_game_mode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .ScoreLeaderboardData missionlbsdata = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_missionlbsdata(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 flags = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_flags(&has_bits);
          _impl_.flags_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgGC_ServerQuestUpdateData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGC_ServerQuestUpdateData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .PlayerQuestData player_quest_data = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_player_quest_data_size()); i < n; i++) {
    const auto& repfield = this->_internal_player_quest_data(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional bytes binary_data = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_binary_data(), target);
  }

  // optional uint32 mm_game_mode = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_mm_game_mode(), target);
  }

  // optional .ScoreLeaderboardData missionlbsdata = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::missionlbsdata(this),
        _Internal::missionlbsdata(this).GetCachedSize(), target, stream);
  }

  // optional uint32 flags = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_flags(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGC_ServerQuestUpdateData)
  return target;
}

size_t CMsgGC_ServerQuestUpdateData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGC_ServerQuestUpdateData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .PlayerQuestData player_quest_data = 1;
  total_size += 1UL * this->_internal_player_quest_data_size();
  for (const auto& msg : this->_impl_.player_quest_data_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional bytes binary_data = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_binary_data());
    }

    // optional .ScoreLeaderboardData missionlbsdata = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.missionlbsdata_);
    }

    // optional uint32 mm_game_mode = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_mm_game_mode());
    }

    // optional uint32 flags = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_flags());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgGC_ServerQuestUpdateData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgGC_ServerQuestUpdateData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgGC_ServerQuestUpdateData::GetClassData() const { return &_class_data_; }


void CMsgGC_ServerQuestUpdateData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgGC_ServerQuestUpdateData*>(&to_msg);
  auto& from = static_cast<const CMsgGC_ServerQuestUpdateData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgGC_ServerQuestUpdateData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.player_quest_data_.MergeFrom(from._impl_.player_quest_data_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_binary_data(from._internal_binary_data());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_missionlbsdata()->::ScoreLeaderboardData::MergeFrom(
          from._internal_missionlbsdata());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.mm_game_mode_ = from._impl_.mm_game_mode_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.flags_ = from._impl_.flags_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgGC_ServerQuestUpdateData::CopyFrom(const CMsgGC_ServerQuestUpdateData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGC_ServerQuestUpdateData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGC_ServerQuestUpdateData::IsInitialized() const {
  return true;
}

void CMsgGC_ServerQuestUpdateData::InternalSwap(CMsgGC_ServerQuestUpdateData* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.player_quest_data_.InternalSwap(&other->_impl_.player_quest_data_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.binary_data_, lhs_arena,
      &other->_impl_.binary_data_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgGC_ServerQuestUpdateData, _impl_.flags_)
      + sizeof(CMsgGC_ServerQuestUpdateData::_impl_.flags_)
      - PROTOBUF_FIELD_OFFSET(CMsgGC_ServerQuestUpdateData, _impl_.missionlbsdata_)>(
          reinterpret_cast<char*>(&_impl_.missionlbsdata_),
          reinterpret_cast<char*>(&other->_impl_.missionlbsdata_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGC_ServerQuestUpdateData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cstrike15_5fgcmessages_2eproto_getter, &descriptor_table_cstrike15_5fgcmessages_2eproto_once,
      file_level_metadata_cstrike15_5fgcmessages_2eproto[29]);
}

// ===================================================================

class CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm>()._impl_._has_bits_);
  static void set_has_token(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_stamp(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_exchange(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_retry(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm::CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm)
}
CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm::CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm(const CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.token_){}
    , decltype(_impl_.stamp_){}
    , decltype(_impl_.exchange_){}
    , decltype(_impl_.retry_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.token_, &from._impl_.token_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.retry_) -
    reinterpret_cast<char*>(&_impl_.token_)) + sizeof(_impl_.retry_));
  // @@protoc_insertion_point(copy_constructor:CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm)
}

inline void CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.token_){0u}
    , decltype(_impl_.stamp_){0u}
    , decltype(_impl_.exchange_){uint64_t{0u}}
    , decltype(_impl_.retry_){0u}
  };
}

CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm::~CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm() {
  // @@protoc_insertion_point(destructor:CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&_impl_.token_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.retry_) -
        reinterpret_cast<char*>(&_impl_.token_)) + sizeof(_impl_.retry_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 token = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_token(&has_bits);
          _impl_.token_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 stamp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_stamp(&has_bits);
          _impl_.stamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 exchange = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_exchange(&has_bits);
          _impl_.exchange_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 retry = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_retry(&has_bits);
          _impl_.retry_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 token = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_token(), target);
  }

  // optional uint32 stamp = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_stamp(), target);
  }

  // optional uint64 exchange = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal_exchange(), target);
  }

  // optional uint32 retry = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_retry(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm)
  return target;
}

size_t CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional uint32 token = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_token());
    }

    // optional uint32 stamp = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_stamp());
    }

    // optional uint64 exchange = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_exchange());
    }

    // optional uint32 retry = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_retry());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm::GetClassData() const { return &_class_data_; }


void CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm*>(&to_msg);
  auto& from = static_cast<const CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.token_ = from._impl_.token_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.stamp_ = from._impl_.stamp_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.exchange_ = from._impl_.exchange_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.retry_ = from._impl_.retry_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm::CopyFrom(const CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm::IsInitialized() const {
  return true;
}

void CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm::InternalSwap(CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm, _impl_.retry_)
      + sizeof(CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm::_impl_.retry_)
      - PROTOBUF_FIELD_OFFSET(CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm, _impl_.token_)>(
          reinterpret_cast<char*>(&_impl_.token_),
          reinterpret_cast<char*>(&other->_impl_.token_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cstrike15_5fgcmessages_2eproto_getter, &descriptor_table_cstrike15_5fgcmessages_2eproto_once,
      file_level_metadata_cstrike15_5fgcmessages_2eproto[30]);
}

// ===================================================================

class CMsgGCCStrike15_v2_GC2ServerReservationUpdate::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCCStrike15_v2_GC2ServerReservationUpdate>()._impl_._has_bits_);
  static void set_has_viewers_external_total(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_viewers_external_steam(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgGCCStrike15_v2_GC2ServerReservationUpdate::CMsgGCCStrike15_v2_GC2ServerReservationUpdate(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgGCCStrike15_v2_GC2ServerReservationUpdate)
}
CMsgGCCStrike15_v2_GC2ServerReservationUpdate::CMsgGCCStrike15_v2_GC2ServerReservationUpdate(const CMsgGCCStrike15_v2_GC2ServerReservationUpdate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgGCCStrike15_v2_GC2ServerReservationUpdate* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.viewers_external_total_){}
    , decltype(_impl_.viewers_external_steam_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.viewers_external_total_, &from._impl_.viewers_external_total_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.viewers_external_steam_) -
    reinterpret_cast<char*>(&_impl_.viewers_external_total_)) + sizeof(_impl_.viewers_external_steam_));
  // @@protoc_insertion_point(copy_constructor:CMsgGCCStrike15_v2_GC2ServerReservationUpdate)
}

inline void CMsgGCCStrike15_v2_GC2ServerReservationUpdate::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.viewers_external_total_){0u}
    , decltype(_impl_.viewers_external_steam_){0u}
  };
}

CMsgGCCStrike15_v2_GC2ServerReservationUpdate::~CMsgGCCStrike15_v2_GC2ServerReservationUpdate() {
  // @@protoc_insertion_point(destructor:CMsgGCCStrike15_v2_GC2ServerReservationUpdate)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgGCCStrike15_v2_GC2ServerReservationUpdate::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgGCCStrike15_v2_GC2ServerReservationUpdate::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgGCCStrike15_v2_GC2ServerReservationUpdate::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCCStrike15_v2_GC2ServerReservationUpdate)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.viewers_external_total_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.viewers_external_steam_) -
        reinterpret_cast<char*>(&_impl_.viewers_external_total_)) + sizeof(_impl_.viewers_external_steam_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCCStrike15_v2_GC2ServerReservationUpdate::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 viewers_external_total = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_viewers_external_total(&has_bits);
          _impl_.viewers_external_total_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 viewers_external_steam = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_viewers_external_steam(&has_bits);
          _impl_.viewers_external_steam_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgGCCStrike15_v2_GC2ServerReservationUpdate::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCCStrike15_v2_GC2ServerReservationUpdate)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 viewers_external_total = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_viewers_external_total(), target);
  }

  // optional uint32 viewers_external_steam = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_viewers_external_steam(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCCStrike15_v2_GC2ServerReservationUpdate)
  return target;
}

size_t CMsgGCCStrike15_v2_GC2ServerReservationUpdate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCCStrike15_v2_GC2ServerReservationUpdate)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 viewers_external_total = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_viewers_external_total());
    }

    // optional uint32 viewers_external_steam = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_viewers_external_steam());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgGCCStrike15_v2_GC2ServerReservationUpdate::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgGCCStrike15_v2_GC2ServerReservationUpdate::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgGCCStrike15_v2_GC2ServerReservationUpdate::GetClassData() const { return &_class_data_; }


void CMsgGCCStrike15_v2_GC2ServerReservationUpdate::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgGCCStrike15_v2_GC2ServerReservationUpdate*>(&to_msg);
  auto& from = static_cast<const CMsgGCCStrike15_v2_GC2ServerReservationUpdate&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCCStrike15_v2_GC2ServerReservationUpdate)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.viewers_external_total_ = from._impl_.viewers_external_total_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.viewers_external_steam_ = from._impl_.viewers_external_steam_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgGCCStrike15_v2_GC2ServerReservationUpdate::CopyFrom(const CMsgGCCStrike15_v2_GC2ServerReservationUpdate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCCStrike15_v2_GC2ServerReservationUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCCStrike15_v2_GC2ServerReservationUpdate::IsInitialized() const {
  return true;
}

void CMsgGCCStrike15_v2_GC2ServerReservationUpdate::InternalSwap(CMsgGCCStrike15_v2_GC2ServerReservationUpdate* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgGCCStrike15_v2_GC2ServerReservationUpdate, _impl_.viewers_external_steam_)
      + sizeof(CMsgGCCStrike15_v2_GC2ServerReservationUpdate::_impl_.viewers_external_steam_)
      - PROTOBUF_FIELD_OFFSET(CMsgGCCStrike15_v2_GC2ServerReservationUpdate, _impl_.viewers_external_total_)>(
          reinterpret_cast<char*>(&_impl_.viewers_external_total_),
          reinterpret_cast<char*>(&other->_impl_.viewers_external_total_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCCStrike15_v2_GC2ServerReservationUpdate::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cstrike15_5fgcmessages_2eproto_getter, &descriptor_table_cstrike15_5fgcmessages_2eproto_once,
      file_level_metadata_cstrike15_5fgcmessages_2eproto[31]);
}

// ===================================================================

class CMsgGCCStrike15_v2_MatchmakingStart::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCCStrike15_v2_MatchmakingStart>()._impl_._has_bits_);
  static void set_has_game_type(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_ticket_data(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_client_version(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::TournamentMatchSetup& tournament_match(const CMsgGCCStrike15_v2_MatchmakingStart* msg);
  static void set_has_tournament_match(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_prime_only(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_tv_control(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_lobby_id(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

const ::TournamentMatchSetup&
CMsgGCCStrike15_v2_MatchmakingStart::_Internal::tournament_match(const CMsgGCCStrike15_v2_MatchmakingStart* msg) {
  return *msg->_impl_.tournament_match_;
}
CMsgGCCStrike15_v2_MatchmakingStart::CMsgGCCStrike15_v2_MatchmakingStart(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgGCCStrike15_v2_MatchmakingStart)
}
CMsgGCCStrike15_v2_MatchmakingStart::CMsgGCCStrike15_v2_MatchmakingStart(const CMsgGCCStrike15_v2_MatchmakingStart& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgGCCStrike15_v2_MatchmakingStart* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.account_ids_){from._impl_.account_ids_}
    , decltype(_impl_.ticket_data_){}
    , decltype(_impl_.tournament_match_){nullptr}
    , decltype(_impl_.game_type_){}
    , decltype(_impl_.client_version_){}
    , decltype(_impl_.prime_only_){}
    , decltype(_impl_.tv_control_){}
    , decltype(_impl_.lobby_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.ticket_data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ticket_data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_ticket_data()) {
    _this->_impl_.ticket_data_.Set(from._internal_ticket_data(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_tournament_match()) {
    _this->_impl_.tournament_match_ = new ::TournamentMatchSetup(*from._impl_.tournament_match_);
  }
  ::memcpy(&_impl_.game_type_, &from._impl_.game_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.lobby_id_) -
    reinterpret_cast<char*>(&_impl_.game_type_)) + sizeof(_impl_.lobby_id_));
  // @@protoc_insertion_point(copy_constructor:CMsgGCCStrike15_v2_MatchmakingStart)
}

inline void CMsgGCCStrike15_v2_MatchmakingStart::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.account_ids_){arena}
    , decltype(_impl_.ticket_data_){}
    , decltype(_impl_.tournament_match_){nullptr}
    , decltype(_impl_.game_type_){0u}
    , decltype(_impl_.client_version_){0u}
    , decltype(_impl_.prime_only_){false}
    , decltype(_impl_.tv_control_){0u}
    , decltype(_impl_.lobby_id_){uint64_t{0u}}
  };
  _impl_.ticket_data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ticket_data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CMsgGCCStrike15_v2_MatchmakingStart::~CMsgGCCStrike15_v2_MatchmakingStart() {
  // @@protoc_insertion_point(destructor:CMsgGCCStrike15_v2_MatchmakingStart)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgGCCStrike15_v2_MatchmakingStart::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.account_ids_.~RepeatedField();
  _impl_.ticket_data_.Destroy();
  if (this != internal_default_instance()) delete _impl_.tournament_match_;
}

void CMsgGCCStrike15_v2_MatchmakingStart::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgGCCStrike15_v2_MatchmakingStart::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCCStrike15_v2_MatchmakingStart)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.account_ids_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.ticket_data_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.tournament_match_ != nullptr);
      _impl_.tournament_match_->Clear();
    }
  }
  if (cached_has_bits & 0x0000007cu) {
    ::memset(&_impl_.game_type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.lobby_id_) -
        reinterpret_cast<char*>(&_impl_.game_type_)) + sizeof(_impl_.lobby_id_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCCStrike15_v2_MatchmakingStart::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated uint32 account_ids = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_account_ids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<8>(ptr));
        } else if (static_cast<uint8_t>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_account_ids(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 game_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_game_type(&has_bits);
          _impl_.game_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string ticket_data = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_ticket_data();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CMsgGCCStrike15_v2_MatchmakingStart.ticket_data");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional uint32 client_version = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_client_version(&has_bits);
          _impl_.client_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TournamentMatchSetup tournament_match = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_tournament_match(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool prime_only = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_prime_only(&has_bits);
          _impl_.prime_only_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 tv_control = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_tv_control(&has_bits);
          _impl_.tv_control_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 lobby_id = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_lobby_id(&has_bits);
          _impl_.lobby_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgGCCStrike15_v2_MatchmakingStart::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCCStrike15_v2_MatchmakingStart)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 account_ids = 1;
  for (int i = 0, n = this->_internal_account_ids_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_account_ids(i), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 game_type = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_game_type(), target);
  }

  // optional string ticket_data = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_ticket_data().data(), static_cast<int>(this->_internal_ticket_data().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgGCCStrike15_v2_MatchmakingStart.ticket_data");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_ticket_data(), target);
  }

  // optional uint32 client_version = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_client_version(), target);
  }

  // optional .TournamentMatchSetup tournament_match = 5;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::tournament_match(this),
        _Internal::tournament_match(this).GetCachedSize(), target, stream);
  }

  // optional bool prime_only = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(6, this->_internal_prime_only(), target);
  }

  // optional uint32 tv_control = 7;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(7, this->_internal_tv_control(), target);
  }

  // optional uint64 lobby_id = 8;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(8, this->_internal_lobby_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCCStrike15_v2_MatchmakingStart)
  return target;
}

size_t CMsgGCCStrike15_v2_MatchmakingStart::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCCStrike15_v2_MatchmakingStart)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 account_ids = 1;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.account_ids_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_account_ids_size());
    total_size += data_size;
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional string ticket_data = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_ticket_data());
    }

    // optional .TournamentMatchSetup tournament_match = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tournament_match_);
    }

    // optional uint32 game_type = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_game_type());
    }

    // optional uint32 client_version = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_client_version());
    }

    // optional bool prime_only = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional uint32 tv_control = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_tv_control());
    }

    // optional uint64 lobby_id = 8;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_lobby_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgGCCStrike15_v2_MatchmakingStart::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgGCCStrike15_v2_MatchmakingStart::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgGCCStrike15_v2_MatchmakingStart::GetClassData() const { return &_class_data_; }


void CMsgGCCStrike15_v2_MatchmakingStart::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgGCCStrike15_v2_MatchmakingStart*>(&to_msg);
  auto& from = static_cast<const CMsgGCCStrike15_v2_MatchmakingStart&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCCStrike15_v2_MatchmakingStart)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.account_ids_.MergeFrom(from._impl_.account_ids_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_ticket_data(from._internal_ticket_data());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_tournament_match()->::TournamentMatchSetup::MergeFrom(
          from._internal_tournament_match());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.game_type_ = from._impl_.game_type_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.client_version_ = from._impl_.client_version_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.prime_only_ = from._impl_.prime_only_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.tv_control_ = from._impl_.tv_control_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.lobby_id_ = from._impl_.lobby_id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgGCCStrike15_v2_MatchmakingStart::CopyFrom(const CMsgGCCStrike15_v2_MatchmakingStart& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCCStrike15_v2_MatchmakingStart)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCCStrike15_v2_MatchmakingStart::IsInitialized() const {
  return true;
}

void CMsgGCCStrike15_v2_MatchmakingStart::InternalSwap(CMsgGCCStrike15_v2_MatchmakingStart* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.account_ids_.InternalSwap(&other->_impl_.account_ids_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.ticket_data_, lhs_arena,
      &other->_impl_.ticket_data_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgGCCStrike15_v2_MatchmakingStart, _impl_.lobby_id_)
      + sizeof(CMsgGCCStrike15_v2_MatchmakingStart::_impl_.lobby_id_)
      - PROTOBUF_FIELD_OFFSET(CMsgGCCStrike15_v2_MatchmakingStart, _impl_.tournament_match_)>(
          reinterpret_cast<char*>(&_impl_.tournament_match_),
          reinterpret_cast<char*>(&other->_impl_.tournament_match_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCCStrike15_v2_MatchmakingStart::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cstrike15_5fgcmessages_2eproto_getter, &descriptor_table_cstrike15_5fgcmessages_2eproto_once,
      file_level_metadata_cstrike15_5fgcmessages_2eproto[32]);
}

// ===================================================================

class CMsgGCCStrike15_v2_MatchmakingStop::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCCStrike15_v2_MatchmakingStop>()._impl_._has_bits_);
  static void set_has_abandon(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgGCCStrike15_v2_MatchmakingStop::CMsgGCCStrike15_v2_MatchmakingStop(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgGCCStrike15_v2_MatchmakingStop)
}
CMsgGCCStrike15_v2_MatchmakingStop::CMsgGCCStrike15_v2_MatchmakingStop(const CMsgGCCStrike15_v2_MatchmakingStop& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgGCCStrike15_v2_MatchmakingStop* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.abandon_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.abandon_ = from._impl_.abandon_;
  // @@protoc_insertion_point(copy_constructor:CMsgGCCStrike15_v2_MatchmakingStop)
}

inline void CMsgGCCStrike15_v2_MatchmakingStop::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.abandon_){0}
  };
}

CMsgGCCStrike15_v2_MatchmakingStop::~CMsgGCCStrike15_v2_MatchmakingStop() {
  // @@protoc_insertion_point(destructor:CMsgGCCStrike15_v2_MatchmakingStop)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgGCCStrike15_v2_MatchmakingStop::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgGCCStrike15_v2_MatchmakingStop::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgGCCStrike15_v2_MatchmakingStop::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCCStrike15_v2_MatchmakingStop)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.abandon_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCCStrike15_v2_MatchmakingStop::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 abandon = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_abandon(&has_bits);
          _impl_.abandon_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgGCCStrike15_v2_MatchmakingStop::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCCStrike15_v2_MatchmakingStop)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 abandon = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_abandon(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCCStrike15_v2_MatchmakingStop)
  return target;
}

size_t CMsgGCCStrike15_v2_MatchmakingStop::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCCStrike15_v2_MatchmakingStop)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int32 abandon = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_abandon());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgGCCStrike15_v2_MatchmakingStop::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgGCCStrike15_v2_MatchmakingStop::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgGCCStrike15_v2_MatchmakingStop::GetClassData() const { return &_class_data_; }


void CMsgGCCStrike15_v2_MatchmakingStop::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgGCCStrike15_v2_MatchmakingStop*>(&to_msg);
  auto& from = static_cast<const CMsgGCCStrike15_v2_MatchmakingStop&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCCStrike15_v2_MatchmakingStop)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_abandon()) {
    _this->_internal_set_abandon(from._internal_abandon());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgGCCStrike15_v2_MatchmakingStop::CopyFrom(const CMsgGCCStrike15_v2_MatchmakingStop& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCCStrike15_v2_MatchmakingStop)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCCStrike15_v2_MatchmakingStop::IsInitialized() const {
  return true;
}

void CMsgGCCStrike15_v2_MatchmakingStop::InternalSwap(CMsgGCCStrike15_v2_MatchmakingStop* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.abandon_, other->_impl_.abandon_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCCStrike15_v2_MatchmakingStop::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cstrike15_5fgcmessages_2eproto_getter, &descriptor_table_cstrike15_5fgcmessages_2eproto_once,
      file_level_metadata_cstrike15_5fgcmessages_2eproto[33]);
}

// ===================================================================

class CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_Note::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_Note>()._impl_._has_bits_);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_region_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_region_r(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_distance(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_Note::CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_Note(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_Note)
}
CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_Note::CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_Note(const CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_Note& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_Note* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.type_){}
    , decltype(_impl_.region_id_){}
    , decltype(_impl_.region_r_){}
    , decltype(_impl_.distance_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.type_, &from._impl_.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.distance_) -
    reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.distance_));
  // @@protoc_insertion_point(copy_constructor:CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_Note)
}

inline void CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_Note::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.type_){0}
    , decltype(_impl_.region_id_){0}
    , decltype(_impl_.region_r_){0}
    , decltype(_impl_.distance_){0}
  };
}

CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_Note::~CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_Note() {
  // @@protoc_insertion_point(destructor:CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_Note)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_Note::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_Note::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_Note::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_Note)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&_impl_.type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.distance_) -
        reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.distance_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_Note::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_type(&has_bits);
          _impl_.type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 region_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_region_id(&has_bits);
          _impl_.region_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float region_r = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _Internal::set_has_region_r(&has_bits);
          _impl_.region_r_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float distance = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          _Internal::set_has_distance(&has_bits);
          _impl_.distance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_Note::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_Note)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 type = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_type(), target);
  }

  // optional int32 region_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_region_id(), target);
  }

  // optional float region_r = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_region_r(), target);
  }

  // optional float distance = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(4, this->_internal_distance(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_Note)
  return target;
}

size_t CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_Note::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_Note)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional int32 type = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_type());
    }

    // optional int32 region_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_region_id());
    }

    // optional float region_r = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

    // optional float distance = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_Note::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_Note::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_Note::GetClassData() const { return &_class_data_; }


void CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_Note::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_Note*>(&to_msg);
  auto& from = static_cast<const CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_Note&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_Note)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.type_ = from._impl_.type_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.region_id_ = from._impl_.region_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.region_r_ = from._impl_.region_r_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.distance_ = from._impl_.distance_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_Note::CopyFrom(const CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_Note& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_Note)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_Note::IsInitialized() const {
  return true;
}

void CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_Note::InternalSwap(CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_Note* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_Note, _impl_.distance_)
      + sizeof(CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_Note::_impl_.distance_)
      - PROTOBUF_FIELD_OFFSET(CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_Note, _impl_.type_)>(
          reinterpret_cast<char*>(&_impl_.type_),
          reinterpret_cast<char*>(&other->_impl_.type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_Note::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cstrike15_5fgcmessages_2eproto_getter, &descriptor_table_cstrike15_5fgcmessages_2eproto_once,
      file_level_metadata_cstrike15_5fgcmessages_2eproto[34]);
}

// ===================================================================

class CMsgGCCStrike15_v2_MatchmakingClient2ServerPing::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCCStrike15_v2_MatchmakingClient2ServerPing>()._impl_._has_bits_);
  static void set_has_offset_index(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_final_batch(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_max_ping(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_test_token(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_search_key(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_debug_message(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgGCCStrike15_v2_MatchmakingClient2ServerPing::CMsgGCCStrike15_v2_MatchmakingClient2ServerPing(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgGCCStrike15_v2_MatchmakingClient2ServerPing)
}
CMsgGCCStrike15_v2_MatchmakingClient2ServerPing::CMsgGCCStrike15_v2_MatchmakingClient2ServerPing(const CMsgGCCStrike15_v2_MatchmakingClient2ServerPing& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgGCCStrike15_v2_MatchmakingClient2ServerPing* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.gameserverpings_){from._impl_.gameserverpings_}
    , decltype(_impl_.data_center_pings_){from._impl_.data_center_pings_}
    , decltype(_impl_.notes_){from._impl_.notes_}
    , decltype(_impl_.search_key_){}
    , decltype(_impl_.debug_message_){}
    , decltype(_impl_.offset_index_){}
    , decltype(_impl_.final_batch_){}
    , decltype(_impl_.max_ping_){}
    , decltype(_impl_.test_token_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.search_key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.search_key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_search_key()) {
    _this->_impl_.search_key_.Set(from._internal_search_key(), 
      _this->GetArenaForAllocation());
  }
  _impl_.debug_message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.debug_message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_debug_message()) {
    _this->_impl_.debug_message_.Set(from._internal_debug_message(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.offset_index_, &from._impl_.offset_index_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.test_token_) -
    reinterpret_cast<char*>(&_impl_.offset_index_)) + sizeof(_impl_.test_token_));
  // @@protoc_insertion_point(copy_constructor:CMsgGCCStrike15_v2_MatchmakingClient2ServerPing)
}

inline void CMsgGCCStrike15_v2_MatchmakingClient2ServerPing::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.gameserverpings_){arena}
    , decltype(_impl_.data_center_pings_){arena}
    , decltype(_impl_.notes_){arena}
    , decltype(_impl_.search_key_){}
    , decltype(_impl_.debug_message_){}
    , decltype(_impl_.offset_index_){0}
    , decltype(_impl_.final_batch_){0}
    , decltype(_impl_.max_ping_){0u}
    , decltype(_impl_.test_token_){0u}
  };
  _impl_.search_key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.search_key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.debug_message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.debug_message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CMsgGCCStrike15_v2_MatchmakingClient2ServerPing::~CMsgGCCStrike15_v2_MatchmakingClient2ServerPing() {
  // @@protoc_insertion_point(destructor:CMsgGCCStrike15_v2_MatchmakingClient2ServerPing)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgGCCStrike15_v2_MatchmakingClient2ServerPing::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.gameserverpings_.~RepeatedPtrField();
  _impl_.data_center_pings_.~RepeatedPtrField();
  _impl_.notes_.~RepeatedPtrField();
  _impl_.search_key_.Destroy();
  _impl_.debug_message_.Destroy();
}

void CMsgGCCStrike15_v2_MatchmakingClient2ServerPing::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgGCCStrike15_v2_MatchmakingClient2ServerPing::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCCStrike15_v2_MatchmakingClient2ServerPing)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.gameserverpings_.Clear();
  _impl_.data_center_pings_.Clear();
  _impl_.notes_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.search_key_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.debug_message_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000003cu) {
    ::memset(&_impl_.offset_index_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.test_token_) -
        reinterpret_cast<char*>(&_impl_.offset_index_)) + sizeof(_impl_.test_token_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCCStrike15_v2_MatchmakingClient2ServerPing::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .GameServerPing gameserverpings = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_gameserverpings(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional int32 offset_index = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_offset_index(&has_bits);
          _impl_.offset_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 final_batch = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_final_batch(&has_bits);
          _impl_.final_batch_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .DataCenterPing data_center_pings = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_data_center_pings(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional uint32 max_ping = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_max_ping(&has_bits);
          _impl_.max_ping_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional fixed32 test_token = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 53)) {
          _Internal::set_has_test_token(&has_bits);
          _impl_.test_token_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint32_t>(ptr);
          ptr += sizeof(uint32_t);
        } else
          goto handle_unusual;
        continue;
      // optional bytes search_key = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_search_key();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_Note notes = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_notes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional string debug_message = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_debug_message();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CMsgGCCStrike15_v2_MatchmakingClient2ServerPing.debug_message");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgGCCStrike15_v2_MatchmakingClient2ServerPing::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCCStrike15_v2_MatchmakingClient2ServerPing)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .GameServerPing gameserverpings = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_gameserverpings_size()); i < n; i++) {
    const auto& repfield = this->_internal_gameserverpings(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 offset_index = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_offset_index(), target);
  }

  // optional int32 final_batch = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_final_batch(), target);
  }

  // repeated .DataCenterPing data_center_pings = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_data_center_pings_size()); i < n; i++) {
    const auto& repfield = this->_internal_data_center_pings(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional uint32 max_ping = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_max_ping(), target);
  }

  // optional fixed32 test_token = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed32ToArray(6, this->_internal_test_token(), target);
  }

  // optional bytes search_key = 7;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        7, this->_internal_search_key(), target);
  }

  // repeated .CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_Note notes = 8;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_notes_size()); i < n; i++) {
    const auto& repfield = this->_internal_notes(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(8, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional string debug_message = 9;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_debug_message().data(), static_cast<int>(this->_internal_debug_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgGCCStrike15_v2_MatchmakingClient2ServerPing.debug_message");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_debug_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCCStrike15_v2_MatchmakingClient2ServerPing)
  return target;
}

size_t CMsgGCCStrike15_v2_MatchmakingClient2ServerPing::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCCStrike15_v2_MatchmakingClient2ServerPing)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .GameServerPing gameserverpings = 1;
  total_size += 1UL * this->_internal_gameserverpings_size();
  for (const auto& msg : this->_impl_.gameserverpings_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .DataCenterPing data_center_pings = 4;
  total_size += 1UL * this->_internal_data_center_pings_size();
  for (const auto& msg : this->_impl_.data_center_pings_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_Note notes = 8;
  total_size += 1UL * this->_internal_notes_size();
  for (const auto& msg : this->_impl_.notes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional bytes search_key = 7;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_search_key());
    }

    // optional string debug_message = 9;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_debug_message());
    }

    // optional int32 offset_index = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_offset_index());
    }

    // optional int32 final_batch = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_final_batch());
    }

    // optional uint32 max_ping = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_max_ping());
    }

    // optional fixed32 test_token = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 4;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgGCCStrike15_v2_MatchmakingClient2ServerPing::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgGCCStrike15_v2_MatchmakingClient2ServerPing::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgGCCStrike15_v2_MatchmakingClient2ServerPing::GetClassData() const { return &_class_data_; }


void CMsgGCCStrike15_v2_MatchmakingClient2ServerPing::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgGCCStrike15_v2_MatchmakingClient2ServerPing*>(&to_msg);
  auto& from = static_cast<const CMsgGCCStrike15_v2_MatchmakingClient2ServerPing&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCCStrike15_v2_MatchmakingClient2ServerPing)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.gameserverpings_.MergeFrom(from._impl_.gameserverpings_);
  _this->_impl_.data_center_pings_.MergeFrom(from._impl_.data_center_pings_);
  _this->_impl_.notes_.MergeFrom(from._impl_.notes_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_search_key(from._internal_search_key());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_debug_message(from._internal_debug_message());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.offset_index_ = from._impl_.offset_index_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.final_batch_ = from._impl_.final_batch_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.max_ping_ = from._impl_.max_ping_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.test_token_ = from._impl_.test_token_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgGCCStrike15_v2_MatchmakingClient2ServerPing::CopyFrom(const CMsgGCCStrike15_v2_MatchmakingClient2ServerPing& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCCStrike15_v2_MatchmakingClient2ServerPing)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCCStrike15_v2_MatchmakingClient2ServerPing::IsInitialized() const {
  return true;
}

void CMsgGCCStrike15_v2_MatchmakingClient2ServerPing::InternalSwap(CMsgGCCStrike15_v2_MatchmakingClient2ServerPing* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.gameserverpings_.InternalSwap(&other->_impl_.gameserverpings_);
  _impl_.data_center_pings_.InternalSwap(&other->_impl_.data_center_pings_);
  _impl_.notes_.InternalSwap(&other->_impl_.notes_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.search_key_, lhs_arena,
      &other->_impl_.search_key_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.debug_message_, lhs_arena,
      &other->_impl_.debug_message_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgGCCStrike15_v2_MatchmakingClient2ServerPing, _impl_.test_token_)
      + sizeof(CMsgGCCStrike15_v2_MatchmakingClient2ServerPing::_impl_.test_token_)
      - PROTOBUF_FIELD_OFFSET(CMsgGCCStrike15_v2_MatchmakingClient2ServerPing, _impl_.offset_index_)>(
          reinterpret_cast<char*>(&_impl_.offset_index_),
          reinterpret_cast<char*>(&other->_impl_.offset_index_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCCStrike15_v2_MatchmakingClient2ServerPing::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cstrike15_5fgcmessages_2eproto_getter, &descriptor_table_cstrike15_5fgcmessages_2eproto_once,
      file_level_metadata_cstrike15_5fgcmessages_2eproto[35]);
}

// ===================================================================

class CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate>()._impl_._has_bits_);
  static void set_has_matchmaking(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_error(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::GlobalStatistics& global_stats(const CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate* msg);
  static void set_has_global_stats(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::IpAddressMask& server_ipaddress_mask(const CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate* msg);
  static void set_has_server_ipaddress_mask(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::GlobalStatistics&
CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::_Internal::global_stats(const CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate* msg) {
  return *msg->_impl_.global_stats_;
}
const ::IpAddressMask&
CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::_Internal::server_ipaddress_mask(const CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate* msg) {
  return *msg->_impl_.server_ipaddress_mask_;
}
CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate)
}
CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate(const CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.waiting_account_id_sessions_){from._impl_.waiting_account_id_sessions_}
    , decltype(_impl_.ongoingmatch_account_id_sessions_){from._impl_.ongoingmatch_account_id_sessions_}
    , decltype(_impl_.failping_account_id_sessions_){from._impl_.failping_account_id_sessions_}
    , decltype(_impl_.penalty_account_id_sessions_){from._impl_.penalty_account_id_sessions_}
    , decltype(_impl_.failready_account_id_sessions_){from._impl_.failready_account_id_sessions_}
    , decltype(_impl_.vacbanned_account_id_sessions_){from._impl_.vacbanned_account_id_sessions_}
    , decltype(_impl_.notes_){from._impl_.notes_}
    , decltype(_impl_.penalty_account_id_sessions_green_){from._impl_.penalty_account_id_sessions_green_}
    , decltype(_impl_.insufficientlevel_sessions_){from._impl_.insufficientlevel_sessions_}
    , decltype(_impl_.vsncheck_account_id_sessions_){from._impl_.vsncheck_account_id_sessions_}
    , decltype(_impl_.launcher_mismatch_sessions_){from._impl_.launcher_mismatch_sessions_}
    , decltype(_impl_.insecure_account_id_sessions_){from._impl_.insecure_account_id_sessions_}
    , decltype(_impl_.error_){}
    , decltype(_impl_.global_stats_){nullptr}
    , decltype(_impl_.server_ipaddress_mask_){nullptr}
    , decltype(_impl_.matchmaking_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.error_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.error_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_error()) {
    _this->_impl_.error_.Set(from._internal_error(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_global_stats()) {
    _this->_impl_.global_stats_ = new ::GlobalStatistics(*from._impl_.global_stats_);
  }
  if (from._internal_has_server_ipaddress_mask()) {
    _this->_impl_.server_ipaddress_mask_ = new ::IpAddressMask(*from._impl_.server_ipaddress_mask_);
  }
  _this->_impl_.matchmaking_ = from._impl_.matchmaking_;
  // @@protoc_insertion_point(copy_constructor:CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate)
}

inline void CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.waiting_account_id_sessions_){arena}
    , decltype(_impl_.ongoingmatch_account_id_sessions_){arena}
    , decltype(_impl_.failping_account_id_sessions_){arena}
    , decltype(_impl_.penalty_account_id_sessions_){arena}
    , decltype(_impl_.failready_account_id_sessions_){arena}
    , decltype(_impl_.vacbanned_account_id_sessions_){arena}
    , decltype(_impl_.notes_){arena}
    , decltype(_impl_.penalty_account_id_sessions_green_){arena}
    , decltype(_impl_.insufficientlevel_sessions_){arena}
    , decltype(_impl_.vsncheck_account_id_sessions_){arena}
    , decltype(_impl_.launcher_mismatch_sessions_){arena}
    , decltype(_impl_.insecure_account_id_sessions_){arena}
    , decltype(_impl_.error_){}
    , decltype(_impl_.global_stats_){nullptr}
    , decltype(_impl_.server_ipaddress_mask_){nullptr}
    , decltype(_impl_.matchmaking_){0}
  };
  _impl_.error_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.error_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::~CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate() {
  // @@protoc_insertion_point(destructor:CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.waiting_account_id_sessions_.~RepeatedField();
  _impl_.ongoingmatch_account_id_sessions_.~RepeatedField();
  _impl_.failping_account_id_sessions_.~RepeatedField();
  _impl_.penalty_account_id_sessions_.~RepeatedField();
  _impl_.failready_account_id_sessions_.~RepeatedField();
  _impl_.vacbanned_account_id_sessions_.~RepeatedField();
  _impl_.notes_.~RepeatedPtrField();
  _impl_.penalty_account_id_sessions_green_.~RepeatedField();
  _impl_.insufficientlevel_sessions_.~RepeatedField();
  _impl_.vsncheck_account_id_sessions_.~RepeatedField();
  _impl_.launcher_mismatch_sessions_.~RepeatedField();
  _impl_.insecure_account_id_sessions_.~RepeatedField();
  _impl_.error_.Destroy();
  if (this != internal_default_instance()) delete _impl_.global_stats_;
  if (this != internal_default_instance()) delete _impl_.server_ipaddress_mask_;
}

void CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.waiting_account_id_sessions_.Clear();
  _impl_.ongoingmatch_account_id_sessions_.Clear();
  _impl_.failping_account_id_sessions_.Clear();
  _impl_.penalty_account_id_sessions_.Clear();
  _impl_.failready_account_id_sessions_.Clear();
  _impl_.vacbanned_account_id_sessions_.Clear();
  _impl_.notes_.Clear();
  _impl_.penalty_account_id_sessions_green_.Clear();
  _impl_.insufficientlevel_sessions_.Clear();
  _impl_.vsncheck_account_id_sessions_.Clear();
  _impl_.launcher_mismatch_sessions_.Clear();
  _impl_.insecure_account_id_sessions_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.error_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.global_stats_ != nullptr);
      _impl_.global_stats_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.server_ipaddress_mask_ != nullptr);
      _impl_.server_ipaddress_mask_->Clear();
    }
  }
  _impl_.matchmaking_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 matchmaking = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_matchmaking(&has_bits);
          _impl_.matchmaking_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 waiting_account_id_sessions = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_waiting_account_id_sessions(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<16>(ptr));
        } else if (static_cast<uint8_t>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_waiting_account_id_sessions(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string error = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_error();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate.error");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 ongoingmatch_account_id_sessions = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_ongoingmatch_account_id_sessions(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<48>(ptr));
        } else if (static_cast<uint8_t>(tag) == 50) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_ongoingmatch_account_id_sessions(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .GlobalStatistics global_stats = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_global_stats(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 failping_account_id_sessions = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_failping_account_id_sessions(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<64>(ptr));
        } else if (static_cast<uint8_t>(tag) == 66) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_failping_account_id_sessions(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 penalty_account_id_sessions = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_penalty_account_id_sessions(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<72>(ptr));
        } else if (static_cast<uint8_t>(tag) == 74) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_penalty_account_id_sessions(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 failready_account_id_sessions = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_failready_account_id_sessions(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<80>(ptr));
        } else if (static_cast<uint8_t>(tag) == 82) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_failready_account_id_sessions(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 vacbanned_account_id_sessions = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_vacbanned_account_id_sessions(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<88>(ptr));
        } else if (static_cast<uint8_t>(tag) == 90) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_vacbanned_account_id_sessions(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .IpAddressMask server_ipaddress_mask = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_server_ipaddress_mask(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_Note notes = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_notes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<106>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 penalty_account_id_sessions_green = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_penalty_account_id_sessions_green(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<112>(ptr));
        } else if (static_cast<uint8_t>(tag) == 114) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_penalty_account_id_sessions_green(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 insufficientlevel_sessions = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_insufficientlevel_sessions(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<120>(ptr));
        } else if (static_cast<uint8_t>(tag) == 122) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_insufficientlevel_sessions(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 vsncheck_account_id_sessions = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_vsncheck_account_id_sessions(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<128>(ptr));
        } else if (static_cast<uint8_t>(tag) == 130) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_vsncheck_account_id_sessions(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 launcher_mismatch_sessions = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_launcher_mismatch_sessions(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<136>(ptr));
        } else if (static_cast<uint8_t>(tag) == 138) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_launcher_mismatch_sessions(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 insecure_account_id_sessions = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 144)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_insecure_account_id_sessions(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<144>(ptr));
        } else if (static_cast<uint8_t>(tag) == 146) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_insecure_account_id_sessions(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 matchmaking = 1;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_matchmaking(), target);
  }

  // repeated uint32 waiting_account_id_sessions = 2;
  for (int i = 0, n = this->_internal_waiting_account_id_sessions_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_waiting_account_id_sessions(i), target);
  }

  // optional string error = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_error().data(), static_cast<int>(this->_internal_error().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate.error");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_error(), target);
  }

  // repeated uint32 ongoingmatch_account_id_sessions = 6;
  for (int i = 0, n = this->_internal_ongoingmatch_account_id_sessions_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_ongoingmatch_account_id_sessions(i), target);
  }

  // optional .GlobalStatistics global_stats = 7;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::global_stats(this),
        _Internal::global_stats(this).GetCachedSize(), target, stream);
  }

  // repeated uint32 failping_account_id_sessions = 8;
  for (int i = 0, n = this->_internal_failping_account_id_sessions_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(8, this->_internal_failping_account_id_sessions(i), target);
  }

  // repeated uint32 penalty_account_id_sessions = 9;
  for (int i = 0, n = this->_internal_penalty_account_id_sessions_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(9, this->_internal_penalty_account_id_sessions(i), target);
  }

  // repeated uint32 failready_account_id_sessions = 10;
  for (int i = 0, n = this->_internal_failready_account_id_sessions_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(10, this->_internal_failready_account_id_sessions(i), target);
  }

  // repeated uint32 vacbanned_account_id_sessions = 11;
  for (int i = 0, n = this->_internal_vacbanned_account_id_sessions_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(11, this->_internal_vacbanned_account_id_sessions(i), target);
  }

  // optional .IpAddressMask server_ipaddress_mask = 12;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(12, _Internal::server_ipaddress_mask(this),
        _Internal::server_ipaddress_mask(this).GetCachedSize(), target, stream);
  }

  // repeated .CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_Note notes = 13;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_notes_size()); i < n; i++) {
    const auto& repfield = this->_internal_notes(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(13, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated uint32 penalty_account_id_sessions_green = 14;
  for (int i = 0, n = this->_internal_penalty_account_id_sessions_green_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(14, this->_internal_penalty_account_id_sessions_green(i), target);
  }

  // repeated uint32 insufficientlevel_sessions = 15;
  for (int i = 0, n = this->_internal_insufficientlevel_sessions_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(15, this->_internal_insufficientlevel_sessions(i), target);
  }

  // repeated uint32 vsncheck_account_id_sessions = 16;
  for (int i = 0, n = this->_internal_vsncheck_account_id_sessions_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(16, this->_internal_vsncheck_account_id_sessions(i), target);
  }

  // repeated uint32 launcher_mismatch_sessions = 17;
  for (int i = 0, n = this->_internal_launcher_mismatch_sessions_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(17, this->_internal_launcher_mismatch_sessions(i), target);
  }

  // repeated uint32 insecure_account_id_sessions = 18;
  for (int i = 0, n = this->_internal_insecure_account_id_sessions_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(18, this->_internal_insecure_account_id_sessions(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate)
  return target;
}

size_t CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 waiting_account_id_sessions = 2;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.waiting_account_id_sessions_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_waiting_account_id_sessions_size());
    total_size += data_size;
  }

  // repeated uint32 ongoingmatch_account_id_sessions = 6;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.ongoingmatch_account_id_sessions_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_ongoingmatch_account_id_sessions_size());
    total_size += data_size;
  }

  // repeated uint32 failping_account_id_sessions = 8;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.failping_account_id_sessions_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_failping_account_id_sessions_size());
    total_size += data_size;
  }

  // repeated uint32 penalty_account_id_sessions = 9;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.penalty_account_id_sessions_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_penalty_account_id_sessions_size());
    total_size += data_size;
  }

  // repeated uint32 failready_account_id_sessions = 10;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.failready_account_id_sessions_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_failready_account_id_sessions_size());
    total_size += data_size;
  }

  // repeated uint32 vacbanned_account_id_sessions = 11;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.vacbanned_account_id_sessions_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_vacbanned_account_id_sessions_size());
    total_size += data_size;
  }

  // repeated .CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_Note notes = 13;
  total_size += 1UL * this->_internal_notes_size();
  for (const auto& msg : this->_impl_.notes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated uint32 penalty_account_id_sessions_green = 14;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.penalty_account_id_sessions_green_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_penalty_account_id_sessions_green_size());
    total_size += data_size;
  }

  // repeated uint32 insufficientlevel_sessions = 15;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.insufficientlevel_sessions_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_insufficientlevel_sessions_size());
    total_size += data_size;
  }

  // repeated uint32 vsncheck_account_id_sessions = 16;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.vsncheck_account_id_sessions_);
    total_size += 2 *
                  ::_pbi::FromIntSize(this->_internal_vsncheck_account_id_sessions_size());
    total_size += data_size;
  }

  // repeated uint32 launcher_mismatch_sessions = 17;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.launcher_mismatch_sessions_);
    total_size += 2 *
                  ::_pbi::FromIntSize(this->_internal_launcher_mismatch_sessions_size());
    total_size += data_size;
  }

  // repeated uint32 insecure_account_id_sessions = 18;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.insecure_account_id_sessions_);
    total_size += 2 *
                  ::_pbi::FromIntSize(this->_internal_insecure_account_id_sessions_size());
    total_size += data_size;
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string error = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_error());
    }

    // optional .GlobalStatistics global_stats = 7;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.global_stats_);
    }

    // optional .IpAddressMask server_ipaddress_mask = 12;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.server_ipaddress_mask_);
    }

    // optional int32 matchmaking = 1;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_matchmaking());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::GetClassData() const { return &_class_data_; }


void CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate*>(&to_msg);
  auto& from = static_cast<const CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.waiting_account_id_sessions_.MergeFrom(from._impl_.waiting_account_id_sessions_);
  _this->_impl_.ongoingmatch_account_id_sessions_.MergeFrom(from._impl_.ongoingmatch_account_id_sessions_);
  _this->_impl_.failping_account_id_sessions_.MergeFrom(from._impl_.failping_account_id_sessions_);
  _this->_impl_.penalty_account_id_sessions_.MergeFrom(from._impl_.penalty_account_id_sessions_);
  _this->_impl_.failready_account_id_sessions_.MergeFrom(from._impl_.failready_account_id_sessions_);
  _this->_impl_.vacbanned_account_id_sessions_.MergeFrom(from._impl_.vacbanned_account_id_sessions_);
  _this->_impl_.notes_.MergeFrom(from._impl_.notes_);
  _this->_impl_.penalty_account_id_sessions_green_.MergeFrom(from._impl_.penalty_account_id_sessions_green_);
  _this->_impl_.insufficientlevel_sessions_.MergeFrom(from._impl_.insufficientlevel_sessions_);
  _this->_impl_.vsncheck_account_id_sessions_.MergeFrom(from._impl_.vsncheck_account_id_sessions_);
  _this->_impl_.launcher_mismatch_sessions_.MergeFrom(from._impl_.launcher_mismatch_sessions_);
  _this->_impl_.insecure_account_id_sessions_.MergeFrom(from._impl_.insecure_account_id_sessions_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_error(from._internal_error());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_global_stats()->::GlobalStatistics::MergeFrom(
          from._internal_global_stats());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_server_ipaddress_mask()->::IpAddressMask::MergeFrom(
          from._internal_server_ipaddress_mask());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.matchmaking_ = from._impl_.matchmaking_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::CopyFrom(const CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::IsInitialized() const {
  return true;
}

void CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::InternalSwap(CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.waiting_account_id_sessions_.InternalSwap(&other->_impl_.waiting_account_id_sessions_);
  _impl_.ongoingmatch_account_id_sessions_.InternalSwap(&other->_impl_.ongoingmatch_account_id_sessions_);
  _impl_.failping_account_id_sessions_.InternalSwap(&other->_impl_.failping_account_id_sessions_);
  _impl_.penalty_account_id_sessions_.InternalSwap(&other->_impl_.penalty_account_id_sessions_);
  _impl_.failready_account_id_sessions_.InternalSwap(&other->_impl_.failready_account_id_sessions_);
  _impl_.vacbanned_account_id_sessions_.InternalSwap(&other->_impl_.vacbanned_account_id_sessions_);
  _impl_.notes_.InternalSwap(&other->_impl_.notes_);
  _impl_.penalty_account_id_sessions_green_.InternalSwap(&other->_impl_.penalty_account_id_sessions_green_);
  _impl_.insufficientlevel_sessions_.InternalSwap(&other->_impl_.insufficientlevel_sessions_);
  _impl_.vsncheck_account_id_sessions_.InternalSwap(&other->_impl_.vsncheck_account_id_sessions_);
  _impl_.launcher_mismatch_sessions_.InternalSwap(&other->_impl_.launcher_mismatch_sessions_);
  _impl_.insecure_account_id_sessions_.InternalSwap(&other->_impl_.insecure_account_id_sessions_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.error_, lhs_arena,
      &other->_impl_.error_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate, _impl_.matchmaking_)
      + sizeof(CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::_impl_.matchmaking_)
      - PROTOBUF_FIELD_OFFSET(CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate, _impl_.global_stats_)>(
          reinterpret_cast<char*>(&_impl_.global_stats_),
          reinterpret_cast<char*>(&other->_impl_.global_stats_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cstrike15_5fgcmessages_2eproto_getter, &descriptor_table_cstrike15_5fgcmessages_2eproto_once,
      file_level_metadata_cstrike15_5fgcmessages_2eproto[36]);
}

// ===================================================================

class CDataGCCStrike15_v2_TournamentMatchDraft_Entry::_Internal {
 public:
  using HasBits = decltype(std::declval<CDataGCCStrike15_v2_TournamentMatchDraft_Entry>()._impl_._has_bits_);
  static void set_has_mapid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_team_id_ct(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CDataGCCStrike15_v2_TournamentMatchDraft_Entry::CDataGCCStrike15_v2_TournamentMatchDraft_Entry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CDataGCCStrike15_v2_TournamentMatchDraft.Entry)
}
CDataGCCStrike15_v2_TournamentMatchDraft_Entry::CDataGCCStrike15_v2_TournamentMatchDraft_Entry(const CDataGCCStrike15_v2_TournamentMatchDraft_Entry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CDataGCCStrike15_v2_TournamentMatchDraft_Entry* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.mapid_){}
    , decltype(_impl_.team_id_ct_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.mapid_, &from._impl_.mapid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.team_id_ct_) -
    reinterpret_cast<char*>(&_impl_.mapid_)) + sizeof(_impl_.team_id_ct_));
  // @@protoc_insertion_point(copy_constructor:CDataGCCStrike15_v2_TournamentMatchDraft.Entry)
}

inline void CDataGCCStrike15_v2_TournamentMatchDraft_Entry::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.mapid_){0}
    , decltype(_impl_.team_id_ct_){0}
  };
}

CDataGCCStrike15_v2_TournamentMatchDraft_Entry::~CDataGCCStrike15_v2_TournamentMatchDraft_Entry() {
  // @@protoc_insertion_point(destructor:CDataGCCStrike15_v2_TournamentMatchDraft.Entry)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CDataGCCStrike15_v2_TournamentMatchDraft_Entry::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CDataGCCStrike15_v2_TournamentMatchDraft_Entry::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CDataGCCStrike15_v2_TournamentMatchDraft_Entry::Clear() {
// @@protoc_insertion_point(message_clear_start:CDataGCCStrike15_v2_TournamentMatchDraft.Entry)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.mapid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.team_id_ct_) -
        reinterpret_cast<char*>(&_impl_.mapid_)) + sizeof(_impl_.team_id_ct_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDataGCCStrike15_v2_TournamentMatchDraft_Entry::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 mapid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_mapid(&has_bits);
          _impl_.mapid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 team_id_ct = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_team_id_ct(&has_bits);
          _impl_.team_id_ct_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CDataGCCStrike15_v2_TournamentMatchDraft_Entry::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDataGCCStrike15_v2_TournamentMatchDraft.Entry)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 mapid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_mapid(), target);
  }

  // optional int32 team_id_ct = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_team_id_ct(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDataGCCStrike15_v2_TournamentMatchDraft.Entry)
  return target;
}

size_t CDataGCCStrike15_v2_TournamentMatchDraft_Entry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDataGCCStrike15_v2_TournamentMatchDraft.Entry)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int32 mapid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_mapid());
    }

    // optional int32 team_id_ct = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_team_id_ct());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CDataGCCStrike15_v2_TournamentMatchDraft_Entry::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CDataGCCStrike15_v2_TournamentMatchDraft_Entry::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CDataGCCStrike15_v2_TournamentMatchDraft_Entry::GetClassData() const { return &_class_data_; }


void CDataGCCStrike15_v2_TournamentMatchDraft_Entry::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CDataGCCStrike15_v2_TournamentMatchDraft_Entry*>(&to_msg);
  auto& from = static_cast<const CDataGCCStrike15_v2_TournamentMatchDraft_Entry&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CDataGCCStrike15_v2_TournamentMatchDraft.Entry)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.mapid_ = from._impl_.mapid_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.team_id_ct_ = from._impl_.team_id_ct_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CDataGCCStrike15_v2_TournamentMatchDraft_Entry::CopyFrom(const CDataGCCStrike15_v2_TournamentMatchDraft_Entry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDataGCCStrike15_v2_TournamentMatchDraft.Entry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDataGCCStrike15_v2_TournamentMatchDraft_Entry::IsInitialized() const {
  return true;
}

void CDataGCCStrike15_v2_TournamentMatchDraft_Entry::InternalSwap(CDataGCCStrike15_v2_TournamentMatchDraft_Entry* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CDataGCCStrike15_v2_TournamentMatchDraft_Entry, _impl_.team_id_ct_)
      + sizeof(CDataGCCStrike15_v2_TournamentMatchDraft_Entry::_impl_.team_id_ct_)
      - PROTOBUF_FIELD_OFFSET(CDataGCCStrike15_v2_TournamentMatchDraft_Entry, _impl_.mapid_)>(
          reinterpret_cast<char*>(&_impl_.mapid_),
          reinterpret_cast<char*>(&other->_impl_.mapid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CDataGCCStrike15_v2_TournamentMatchDraft_Entry::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cstrike15_5fgcmessages_2eproto_getter, &descriptor_table_cstrike15_5fgcmessages_2eproto_once,
      file_level_metadata_cstrike15_5fgcmessages_2eproto[37]);
}

// ===================================================================

class CDataGCCStrike15_v2_TournamentMatchDraft::_Internal {
 public:
  using HasBits = decltype(std::declval<CDataGCCStrike15_v2_TournamentMatchDraft>()._impl_._has_bits_);
  static void set_has_event_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_event_stage_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_team_id_0(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_team_id_1(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_maps_count(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_maps_current(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_team_id_start(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_team_id_veto1(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_team_id_pickn(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_vote_phase(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_vote_phase_start(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_vote_phase_length(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
};

CDataGCCStrike15_v2_TournamentMatchDraft::CDataGCCStrike15_v2_TournamentMatchDraft(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CDataGCCStrike15_v2_TournamentMatchDraft)
}
CDataGCCStrike15_v2_TournamentMatchDraft::CDataGCCStrike15_v2_TournamentMatchDraft(const CDataGCCStrike15_v2_TournamentMatchDraft& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CDataGCCStrike15_v2_TournamentMatchDraft* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.drafts_){from._impl_.drafts_}
    , decltype(_impl_.vote_mapid_0_){from._impl_.vote_mapid_0_}
    , decltype(_impl_.vote_mapid_1_){from._impl_.vote_mapid_1_}
    , decltype(_impl_.vote_mapid_2_){from._impl_.vote_mapid_2_}
    , decltype(_impl_.vote_mapid_3_){from._impl_.vote_mapid_3_}
    , decltype(_impl_.vote_mapid_4_){from._impl_.vote_mapid_4_}
    , decltype(_impl_.vote_mapid_5_){from._impl_.vote_mapid_5_}
    , decltype(_impl_.vote_starting_side_){from._impl_.vote_starting_side_}
    , decltype(_impl_.event_id_){}
    , decltype(_impl_.event_stage_id_){}
    , decltype(_impl_.team_id_0_){}
    , decltype(_impl_.team_id_1_){}
    , decltype(_impl_.maps_count_){}
    , decltype(_impl_.maps_current_){}
    , decltype(_impl_.team_id_start_){}
    , decltype(_impl_.team_id_veto1_){}
    , decltype(_impl_.team_id_pickn_){}
    , decltype(_impl_.vote_phase_){}
    , decltype(_impl_.vote_phase_start_){}
    , decltype(_impl_.vote_phase_length_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.event_id_, &from._impl_.event_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.vote_phase_length_) -
    reinterpret_cast<char*>(&_impl_.event_id_)) + sizeof(_impl_.vote_phase_length_));
  // @@protoc_insertion_point(copy_constructor:CDataGCCStrike15_v2_TournamentMatchDraft)
}

inline void CDataGCCStrike15_v2_TournamentMatchDraft::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.drafts_){arena}
    , decltype(_impl_.vote_mapid_0_){arena}
    , decltype(_impl_.vote_mapid_1_){arena}
    , decltype(_impl_.vote_mapid_2_){arena}
    , decltype(_impl_.vote_mapid_3_){arena}
    , decltype(_impl_.vote_mapid_4_){arena}
    , decltype(_impl_.vote_mapid_5_){arena}
    , decltype(_impl_.vote_starting_side_){arena}
    , decltype(_impl_.event_id_){0}
    , decltype(_impl_.event_stage_id_){0}
    , decltype(_impl_.team_id_0_){0}
    , decltype(_impl_.team_id_1_){0}
    , decltype(_impl_.maps_count_){0}
    , decltype(_impl_.maps_current_){0}
    , decltype(_impl_.team_id_start_){0}
    , decltype(_impl_.team_id_veto1_){0}
    , decltype(_impl_.team_id_pickn_){0}
    , decltype(_impl_.vote_phase_){0}
    , decltype(_impl_.vote_phase_start_){0}
    , decltype(_impl_.vote_phase_length_){0}
  };
}

CDataGCCStrike15_v2_TournamentMatchDraft::~CDataGCCStrike15_v2_TournamentMatchDraft() {
  // @@protoc_insertion_point(destructor:CDataGCCStrike15_v2_TournamentMatchDraft)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CDataGCCStrike15_v2_TournamentMatchDraft::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.drafts_.~RepeatedPtrField();
  _impl_.vote_mapid_0_.~RepeatedField();
  _impl_.vote_mapid_1_.~RepeatedField();
  _impl_.vote_mapid_2_.~RepeatedField();
  _impl_.vote_mapid_3_.~RepeatedField();
  _impl_.vote_mapid_4_.~RepeatedField();
  _impl_.vote_mapid_5_.~RepeatedField();
  _impl_.vote_starting_side_.~RepeatedField();
}

void CDataGCCStrike15_v2_TournamentMatchDraft::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CDataGCCStrike15_v2_TournamentMatchDraft::Clear() {
// @@protoc_insertion_point(message_clear_start:CDataGCCStrike15_v2_TournamentMatchDraft)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.drafts_.Clear();
  _impl_.vote_mapid_0_.Clear();
  _impl_.vote_mapid_1_.Clear();
  _impl_.vote_mapid_2_.Clear();
  _impl_.vote_mapid_3_.Clear();
  _impl_.vote_mapid_4_.Clear();
  _impl_.vote_mapid_5_.Clear();
  _impl_.vote_starting_side_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&_impl_.event_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.team_id_veto1_) -
        reinterpret_cast<char*>(&_impl_.event_id_)) + sizeof(_impl_.team_id_veto1_));
  }
  if (cached_has_bits & 0x00000f00u) {
    ::memset(&_impl_.team_id_pickn_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.vote_phase_length_) -
        reinterpret_cast<char*>(&_impl_.team_id_pickn_)) + sizeof(_impl_.vote_phase_length_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDataGCCStrike15_v2_TournamentMatchDraft::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 event_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_event_id(&has_bits);
          _impl_.event_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 event_stage_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_event_stage_id(&has_bits);
          _impl_.event_stage_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 team_id_0 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_team_id_0(&has_bits);
          _impl_.team_id_0_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 team_id_1 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_team_id_1(&has_bits);
          _impl_.team_id_1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 maps_count = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_maps_count(&has_bits);
          _impl_.maps_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 maps_current = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_maps_current(&has_bits);
          _impl_.maps_current_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 team_id_start = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_team_id_start(&has_bits);
          _impl_.team_id_start_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 team_id_veto1 = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_team_id_veto1(&has_bits);
          _impl_.team_id_veto1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 team_id_pickn = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_team_id_pickn(&has_bits);
          _impl_.team_id_pickn_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .CDataGCCStrike15_v2_TournamentMatchDraft.Entry drafts = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_drafts(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated int32 vote_mapid_0 = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_vote_mapid_0(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<88>(ptr));
        } else if (static_cast<uint8_t>(tag) == 90) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_vote_mapid_0(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 vote_mapid_1 = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_vote_mapid_1(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<96>(ptr));
        } else if (static_cast<uint8_t>(tag) == 98) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_vote_mapid_1(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 vote_mapid_2 = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_vote_mapid_2(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<104>(ptr));
        } else if (static_cast<uint8_t>(tag) == 106) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_vote_mapid_2(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 vote_mapid_3 = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_vote_mapid_3(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<112>(ptr));
        } else if (static_cast<uint8_t>(tag) == 114) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_vote_mapid_3(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 vote_mapid_4 = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_vote_mapid_4(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<120>(ptr));
        } else if (static_cast<uint8_t>(tag) == 122) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_vote_mapid_4(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 vote_mapid_5 = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_vote_mapid_5(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<128>(ptr));
        } else if (static_cast<uint8_t>(tag) == 130) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_vote_mapid_5(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 vote_starting_side = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_vote_starting_side(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<136>(ptr));
        } else if (static_cast<uint8_t>(tag) == 138) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_vote_starting_side(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 vote_phase = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 144)) {
          _Internal::set_has_vote_phase(&has_bits);
          _impl_.vote_phase_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float vote_phase_start = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 157)) {
          _Internal::set_has_vote_phase_start(&has_bits);
          _impl_.vote_phase_start_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float vote_phase_length = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 165)) {
          _Internal::set_has_vote_phase_length(&has_bits);
          _impl_.vote_phase_length_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CDataGCCStrike15_v2_TournamentMatchDraft::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDataGCCStrike15_v2_TournamentMatchDraft)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 event_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_event_id(), target);
  }

  // optional int32 event_stage_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_event_stage_id(), target);
  }

  // optional int32 team_id_0 = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_team_id_0(), target);
  }

  // optional int32 team_id_1 = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_team_id_1(), target);
  }

  // optional int32 maps_count = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_maps_count(), target);
  }

  // optional int32 maps_current = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(6, this->_internal_maps_current(), target);
  }

  // optional int32 team_id_start = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(7, this->_internal_team_id_start(), target);
  }

  // optional int32 team_id_veto1 = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(8, this->_internal_team_id_veto1(), target);
  }

  // optional int32 team_id_pickn = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(9, this->_internal_team_id_pickn(), target);
  }

  // repeated .CDataGCCStrike15_v2_TournamentMatchDraft.Entry drafts = 10;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_drafts_size()); i < n; i++) {
    const auto& repfield = this->_internal_drafts(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(10, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated int32 vote_mapid_0 = 11;
  for (int i = 0, n = this->_internal_vote_mapid_0_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(11, this->_internal_vote_mapid_0(i), target);
  }

  // repeated int32 vote_mapid_1 = 12;
  for (int i = 0, n = this->_internal_vote_mapid_1_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(12, this->_internal_vote_mapid_1(i), target);
  }

  // repeated int32 vote_mapid_2 = 13;
  for (int i = 0, n = this->_internal_vote_mapid_2_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(13, this->_internal_vote_mapid_2(i), target);
  }

  // repeated int32 vote_mapid_3 = 14;
  for (int i = 0, n = this->_internal_vote_mapid_3_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(14, this->_internal_vote_mapid_3(i), target);
  }

  // repeated int32 vote_mapid_4 = 15;
  for (int i = 0, n = this->_internal_vote_mapid_4_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(15, this->_internal_vote_mapid_4(i), target);
  }

  // repeated int32 vote_mapid_5 = 16;
  for (int i = 0, n = this->_internal_vote_mapid_5_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(16, this->_internal_vote_mapid_5(i), target);
  }

  // repeated int32 vote_starting_side = 17;
  for (int i = 0, n = this->_internal_vote_starting_side_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(17, this->_internal_vote_starting_side(i), target);
  }

  // optional int32 vote_phase = 18;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(18, this->_internal_vote_phase(), target);
  }

  // optional float vote_phase_start = 19;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(19, this->_internal_vote_phase_start(), target);
  }

  // optional float vote_phase_length = 20;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(20, this->_internal_vote_phase_length(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDataGCCStrike15_v2_TournamentMatchDraft)
  return target;
}

size_t CDataGCCStrike15_v2_TournamentMatchDraft::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDataGCCStrike15_v2_TournamentMatchDraft)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CDataGCCStrike15_v2_TournamentMatchDraft.Entry drafts = 10;
  total_size += 1UL * this->_internal_drafts_size();
  for (const auto& msg : this->_impl_.drafts_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated int32 vote_mapid_0 = 11;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.vote_mapid_0_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_vote_mapid_0_size());
    total_size += data_size;
  }

  // repeated int32 vote_mapid_1 = 12;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.vote_mapid_1_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_vote_mapid_1_size());
    total_size += data_size;
  }

  // repeated int32 vote_mapid_2 = 13;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.vote_mapid_2_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_vote_mapid_2_size());
    total_size += data_size;
  }

  // repeated int32 vote_mapid_3 = 14;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.vote_mapid_3_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_vote_mapid_3_size());
    total_size += data_size;
  }

  // repeated int32 vote_mapid_4 = 15;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.vote_mapid_4_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_vote_mapid_4_size());
    total_size += data_size;
  }

  // repeated int32 vote_mapid_5 = 16;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.vote_mapid_5_);
    total_size += 2 *
                  ::_pbi::FromIntSize(this->_internal_vote_mapid_5_size());
    total_size += data_size;
  }

  // repeated int32 vote_starting_side = 17;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.vote_starting_side_);
    total_size += 2 *
                  ::_pbi::FromIntSize(this->_internal_vote_starting_side_size());
    total_size += data_size;
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional int32 event_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_event_id());
    }

    // optional int32 event_stage_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_event_stage_id());
    }

    // optional int32 team_id_0 = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_team_id_0());
    }

    // optional int32 team_id_1 = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_team_id_1());
    }

    // optional int32 maps_count = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_maps_count());
    }

    // optional int32 maps_current = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_maps_current());
    }

    // optional int32 team_id_start = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_team_id_start());
    }

    // optional int32 team_id_veto1 = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_team_id_veto1());
    }

  }
  if (cached_has_bits & 0x00000f00u) {
    // optional int32 team_id_pickn = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_team_id_pickn());
    }

    // optional int32 vote_phase = 18;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_vote_phase());
    }

    // optional float vote_phase_start = 19;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 + 4;
    }

    // optional float vote_phase_length = 20;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 + 4;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CDataGCCStrike15_v2_TournamentMatchDraft::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CDataGCCStrike15_v2_TournamentMatchDraft::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CDataGCCStrike15_v2_TournamentMatchDraft::GetClassData() const { return &_class_data_; }


void CDataGCCStrike15_v2_TournamentMatchDraft::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CDataGCCStrike15_v2_TournamentMatchDraft*>(&to_msg);
  auto& from = static_cast<const CDataGCCStrike15_v2_TournamentMatchDraft&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CDataGCCStrike15_v2_TournamentMatchDraft)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.drafts_.MergeFrom(from._impl_.drafts_);
  _this->_impl_.vote_mapid_0_.MergeFrom(from._impl_.vote_mapid_0_);
  _this->_impl_.vote_mapid_1_.MergeFrom(from._impl_.vote_mapid_1_);
  _this->_impl_.vote_mapid_2_.MergeFrom(from._impl_.vote_mapid_2_);
  _this->_impl_.vote_mapid_3_.MergeFrom(from._impl_.vote_mapid_3_);
  _this->_impl_.vote_mapid_4_.MergeFrom(from._impl_.vote_mapid_4_);
  _this->_impl_.vote_mapid_5_.MergeFrom(from._impl_.vote_mapid_5_);
  _this->_impl_.vote_starting_side_.MergeFrom(from._impl_.vote_starting_side_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.event_id_ = from._impl_.event_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.event_stage_id_ = from._impl_.event_stage_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.team_id_0_ = from._impl_.team_id_0_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.team_id_1_ = from._impl_.team_id_1_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.maps_count_ = from._impl_.maps_count_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.maps_current_ = from._impl_.maps_current_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.team_id_start_ = from._impl_.team_id_start_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.team_id_veto1_ = from._impl_.team_id_veto1_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000f00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.team_id_pickn_ = from._impl_.team_id_pickn_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.vote_phase_ = from._impl_.vote_phase_;
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_impl_.vote_phase_start_ = from._impl_.vote_phase_start_;
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_impl_.vote_phase_length_ = from._impl_.vote_phase_length_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CDataGCCStrike15_v2_TournamentMatchDraft::CopyFrom(const CDataGCCStrike15_v2_TournamentMatchDraft& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDataGCCStrike15_v2_TournamentMatchDraft)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDataGCCStrike15_v2_TournamentMatchDraft::IsInitialized() const {
  return true;
}

void CDataGCCStrike15_v2_TournamentMatchDraft::InternalSwap(CDataGCCStrike15_v2_TournamentMatchDraft* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.drafts_.InternalSwap(&other->_impl_.drafts_);
  _impl_.vote_mapid_0_.InternalSwap(&other->_impl_.vote_mapid_0_);
  _impl_.vote_mapid_1_.InternalSwap(&other->_impl_.vote_mapid_1_);
  _impl_.vote_mapid_2_.InternalSwap(&other->_impl_.vote_mapid_2_);
  _impl_.vote_mapid_3_.InternalSwap(&other->_impl_.vote_mapid_3_);
  _impl_.vote_mapid_4_.InternalSwap(&other->_impl_.vote_mapid_4_);
  _impl_.vote_mapid_5_.InternalSwap(&other->_impl_.vote_mapid_5_);
  _impl_.vote_starting_side_.InternalSwap(&other->_impl_.vote_starting_side_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CDataGCCStrike15_v2_TournamentMatchDraft, _impl_.vote_phase_length_)
      + sizeof(CDataGCCStrike15_v2_TournamentMatchDraft::_impl_.vote_phase_length_)
      - PROTOBUF_FIELD_OFFSET(CDataGCCStrike15_v2_TournamentMatchDraft, _impl_.event_id_)>(
          reinterpret_cast<char*>(&_impl_.event_id_),
          reinterpret_cast<char*>(&other->_impl_.event_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CDataGCCStrike15_v2_TournamentMatchDraft::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cstrike15_5fgcmessages_2eproto_getter, &descriptor_table_cstrike15_5fgcmessages_2eproto_once,
      file_level_metadata_cstrike15_5fgcmessages_2eproto[38]);
}

// ===================================================================

class CPreMatchInfoData_TeamStats::_Internal {
 public:
  using HasBits = decltype(std::declval<CPreMatchInfoData_TeamStats>()._impl_._has_bits_);
  static void set_has_match_info_idxtxt(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_match_info_txt(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CPreMatchInfoData_TeamStats::CPreMatchInfoData_TeamStats(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CPreMatchInfoData.TeamStats)
}
CPreMatchInfoData_TeamStats::CPreMatchInfoData_TeamStats(const CPreMatchInfoData_TeamStats& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CPreMatchInfoData_TeamStats* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.match_info_teams_){from._impl_.match_info_teams_}
    , decltype(_impl_.match_info_txt_){}
    , decltype(_impl_.match_info_idxtxt_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.match_info_txt_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.match_info_txt_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_match_info_txt()) {
    _this->_impl_.match_info_txt_.Set(from._internal_match_info_txt(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.match_info_idxtxt_ = from._impl_.match_info_idxtxt_;
  // @@protoc_insertion_point(copy_constructor:CPreMatchInfoData.TeamStats)
}

inline void CPreMatchInfoData_TeamStats::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.match_info_teams_){arena}
    , decltype(_impl_.match_info_txt_){}
    , decltype(_impl_.match_info_idxtxt_){0}
  };
  _impl_.match_info_txt_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.match_info_txt_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CPreMatchInfoData_TeamStats::~CPreMatchInfoData_TeamStats() {
  // @@protoc_insertion_point(destructor:CPreMatchInfoData.TeamStats)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CPreMatchInfoData_TeamStats::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.match_info_teams_.~RepeatedPtrField();
  _impl_.match_info_txt_.Destroy();
}

void CPreMatchInfoData_TeamStats::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CPreMatchInfoData_TeamStats::Clear() {
// @@protoc_insertion_point(message_clear_start:CPreMatchInfoData.TeamStats)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.match_info_teams_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.match_info_txt_.ClearNonDefaultToEmpty();
  }
  _impl_.match_info_idxtxt_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CPreMatchInfoData_TeamStats::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 match_info_idxtxt = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_match_info_idxtxt(&has_bits);
          _impl_.match_info_idxtxt_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string match_info_txt = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_match_info_txt();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CPreMatchInfoData.TeamStats.match_info_txt");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // repeated string match_info_teams = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_match_info_teams();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            #ifndef NDEBUG
            ::_pbi::VerifyUTF8(str, "CPreMatchInfoData.TeamStats.match_info_teams");
            #endif  // !NDEBUG
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CPreMatchInfoData_TeamStats::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CPreMatchInfoData.TeamStats)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 match_info_idxtxt = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_match_info_idxtxt(), target);
  }

  // optional string match_info_txt = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_match_info_txt().data(), static_cast<int>(this->_internal_match_info_txt().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CPreMatchInfoData.TeamStats.match_info_txt");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_match_info_txt(), target);
  }

  // repeated string match_info_teams = 3;
  for (int i = 0, n = this->_internal_match_info_teams_size(); i < n; i++) {
    const auto& s = this->_internal_match_info_teams(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CPreMatchInfoData.TeamStats.match_info_teams");
    target = stream->WriteString(3, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CPreMatchInfoData.TeamStats)
  return target;
}

size_t CPreMatchInfoData_TeamStats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CPreMatchInfoData.TeamStats)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string match_info_teams = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.match_info_teams_.size());
  for (int i = 0, n = _impl_.match_info_teams_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.match_info_teams_.Get(i));
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string match_info_txt = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_match_info_txt());
    }

    // optional int32 match_info_idxtxt = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_match_info_idxtxt());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CPreMatchInfoData_TeamStats::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CPreMatchInfoData_TeamStats::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CPreMatchInfoData_TeamStats::GetClassData() const { return &_class_data_; }


void CPreMatchInfoData_TeamStats::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CPreMatchInfoData_TeamStats*>(&to_msg);
  auto& from = static_cast<const CPreMatchInfoData_TeamStats&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CPreMatchInfoData.TeamStats)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.match_info_teams_.MergeFrom(from._impl_.match_info_teams_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_match_info_txt(from._internal_match_info_txt());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.match_info_idxtxt_ = from._impl_.match_info_idxtxt_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CPreMatchInfoData_TeamStats::CopyFrom(const CPreMatchInfoData_TeamStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CPreMatchInfoData.TeamStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPreMatchInfoData_TeamStats::IsInitialized() const {
  return true;
}

void CPreMatchInfoData_TeamStats::InternalSwap(CPreMatchInfoData_TeamStats* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.match_info_teams_.InternalSwap(&other->_impl_.match_info_teams_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.match_info_txt_, lhs_arena,
      &other->_impl_.match_info_txt_, rhs_arena
  );
  swap(_impl_.match_info_idxtxt_, other->_impl_.match_info_idxtxt_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CPreMatchInfoData_TeamStats::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cstrike15_5fgcmessages_2eproto_getter, &descriptor_table_cstrike15_5fgcmessages_2eproto_once,
      file_level_metadata_cstrike15_5fgcmessages_2eproto[39]);
}

// ===================================================================

class CPreMatchInfoData::_Internal {
 public:
  using HasBits = decltype(std::declval<CPreMatchInfoData>()._impl_._has_bits_);
  static void set_has_predictions_pct(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::CDataGCCStrike15_v2_TournamentMatchDraft& draft(const CPreMatchInfoData* msg);
  static void set_has_draft(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::CDataGCCStrike15_v2_TournamentMatchDraft&
CPreMatchInfoData::_Internal::draft(const CPreMatchInfoData* msg) {
  return *msg->_impl_.draft_;
}
CPreMatchInfoData::CPreMatchInfoData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CPreMatchInfoData)
}
CPreMatchInfoData::CPreMatchInfoData(const CPreMatchInfoData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CPreMatchInfoData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.stats_){from._impl_.stats_}
    , decltype(_impl_.wins_){from._impl_.wins_}
    , decltype(_impl_.draft_){nullptr}
    , decltype(_impl_.predictions_pct_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_draft()) {
    _this->_impl_.draft_ = new ::CDataGCCStrike15_v2_TournamentMatchDraft(*from._impl_.draft_);
  }
  _this->_impl_.predictions_pct_ = from._impl_.predictions_pct_;
  // @@protoc_insertion_point(copy_constructor:CPreMatchInfoData)
}

inline void CPreMatchInfoData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.stats_){arena}
    , decltype(_impl_.wins_){arena}
    , decltype(_impl_.draft_){nullptr}
    , decltype(_impl_.predictions_pct_){0}
  };
}

CPreMatchInfoData::~CPreMatchInfoData() {
  // @@protoc_insertion_point(destructor:CPreMatchInfoData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CPreMatchInfoData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.stats_.~RepeatedPtrField();
  _impl_.wins_.~RepeatedField();
  if (this != internal_default_instance()) delete _impl_.draft_;
}

void CPreMatchInfoData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CPreMatchInfoData::Clear() {
// @@protoc_insertion_point(message_clear_start:CPreMatchInfoData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.stats_.Clear();
  _impl_.wins_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.draft_ != nullptr);
    _impl_.draft_->Clear();
  }
  _impl_.predictions_pct_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CPreMatchInfoData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 predictions_pct = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_predictions_pct(&has_bits);
          _impl_.predictions_pct_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .CDataGCCStrike15_v2_TournamentMatchDraft draft = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_draft(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .CPreMatchInfoData.TeamStats stats = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_stats(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated int32 wins = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_wins(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<48>(ptr));
        } else if (static_cast<uint8_t>(tag) == 50) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_wins(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CPreMatchInfoData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CPreMatchInfoData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 predictions_pct = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_predictions_pct(), target);
  }

  // optional .CDataGCCStrike15_v2_TournamentMatchDraft draft = 4;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::draft(this),
        _Internal::draft(this).GetCachedSize(), target, stream);
  }

  // repeated .CPreMatchInfoData.TeamStats stats = 5;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_stats_size()); i < n; i++) {
    const auto& repfield = this->_internal_stats(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated int32 wins = 6;
  for (int i = 0, n = this->_internal_wins_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(6, this->_internal_wins(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CPreMatchInfoData)
  return target;
}

size_t CPreMatchInfoData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CPreMatchInfoData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CPreMatchInfoData.TeamStats stats = 5;
  total_size += 1UL * this->_internal_stats_size();
  for (const auto& msg : this->_impl_.stats_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated int32 wins = 6;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.wins_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_wins_size());
    total_size += data_size;
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .CDataGCCStrike15_v2_TournamentMatchDraft draft = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.draft_);
    }

    // optional int32 predictions_pct = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_predictions_pct());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CPreMatchInfoData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CPreMatchInfoData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CPreMatchInfoData::GetClassData() const { return &_class_data_; }


void CPreMatchInfoData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CPreMatchInfoData*>(&to_msg);
  auto& from = static_cast<const CPreMatchInfoData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CPreMatchInfoData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.stats_.MergeFrom(from._impl_.stats_);
  _this->_impl_.wins_.MergeFrom(from._impl_.wins_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_draft()->::CDataGCCStrike15_v2_TournamentMatchDraft::MergeFrom(
          from._internal_draft());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.predictions_pct_ = from._impl_.predictions_pct_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CPreMatchInfoData::CopyFrom(const CPreMatchInfoData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CPreMatchInfoData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPreMatchInfoData::IsInitialized() const {
  return true;
}

void CPreMatchInfoData::InternalSwap(CPreMatchInfoData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.stats_.InternalSwap(&other->_impl_.stats_);
  _impl_.wins_.InternalSwap(&other->_impl_.wins_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CPreMatchInfoData, _impl_.predictions_pct_)
      + sizeof(CPreMatchInfoData::_impl_.predictions_pct_)
      - PROTOBUF_FIELD_OFFSET(CPreMatchInfoData, _impl_.draft_)>(
          reinterpret_cast<char*>(&_impl_.draft_),
          reinterpret_cast<char*>(&other->_impl_.draft_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CPreMatchInfoData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cstrike15_5fgcmessages_2eproto_getter, &descriptor_table_cstrike15_5fgcmessages_2eproto_once,
      file_level_metadata_cstrike15_5fgcmessages_2eproto[40]);
}

// ===================================================================

class CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve>()._impl_._has_bits_);
  static void set_has_game_type(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_match_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_server_version(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_flags(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_encryption_key(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_encryption_key_pub(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_tv_master_steamid(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::TournamentEvent& tournament_event(const CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve* msg);
  static void set_has_tournament_event(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_tv_relay_steamid(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::CPreMatchInfoData& pre_match_data(const CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve* msg);
  static void set_has_pre_match_data(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_rtime32_event_start(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_tv_control(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_socache_control(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
};

const ::TournamentEvent&
CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::_Internal::tournament_event(const CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve* msg) {
  return *msg->_impl_.tournament_event_;
}
const ::CPreMatchInfoData&
CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::_Internal::pre_match_data(const CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve* msg) {
  return *msg->_impl_.pre_match_data_;
}
CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve)
}
CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve(const CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.account_ids_){from._impl_.account_ids_}
    , decltype(_impl_.rankings_){from._impl_.rankings_}
    , decltype(_impl_.party_ids_){from._impl_.party_ids_}
    , decltype(_impl_.whitelist_){from._impl_.whitelist_}
    , decltype(_impl_.tournament_teams_){from._impl_.tournament_teams_}
    , decltype(_impl_.tournament_casters_account_ids_){from._impl_.tournament_casters_account_ids_}
    , decltype(_impl_.op_var_values_){from._impl_.op_var_values_}
    , decltype(_impl_.teammate_colors_){from._impl_.teammate_colors_}
    , decltype(_impl_.tournament_event_){nullptr}
    , decltype(_impl_.pre_match_data_){nullptr}
    , decltype(_impl_.match_id_){}
    , decltype(_impl_.game_type_){}
    , decltype(_impl_.server_version_){}
    , decltype(_impl_.encryption_key_){}
    , decltype(_impl_.encryption_key_pub_){}
    , decltype(_impl_.tv_master_steamid_){}
    , decltype(_impl_.tv_relay_steamid_){}
    , decltype(_impl_.rtime32_event_start_){}
    , decltype(_impl_.tv_control_){}
    , decltype(_impl_.flags_){}
    , decltype(_impl_.socache_control_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_tournament_event()) {
    _this->_impl_.tournament_event_ = new ::TournamentEvent(*from._impl_.tournament_event_);
  }
  if (from._internal_has_pre_match_data()) {
    _this->_impl_.pre_match_data_ = new ::CPreMatchInfoData(*from._impl_.pre_match_data_);
  }
  ::memcpy(&_impl_.match_id_, &from._impl_.match_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.socache_control_) -
    reinterpret_cast<char*>(&_impl_.match_id_)) + sizeof(_impl_.socache_control_));
  // @@protoc_insertion_point(copy_constructor:CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve)
}

inline void CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.account_ids_){arena}
    , decltype(_impl_.rankings_){arena}
    , decltype(_impl_.party_ids_){arena}
    , decltype(_impl_.whitelist_){arena}
    , decltype(_impl_.tournament_teams_){arena}
    , decltype(_impl_.tournament_casters_account_ids_){arena}
    , decltype(_impl_.op_var_values_){arena}
    , decltype(_impl_.teammate_colors_){arena}
    , decltype(_impl_.tournament_event_){nullptr}
    , decltype(_impl_.pre_match_data_){nullptr}
    , decltype(_impl_.match_id_){uint64_t{0u}}
    , decltype(_impl_.game_type_){0u}
    , decltype(_impl_.server_version_){0u}
    , decltype(_impl_.encryption_key_){uint64_t{0u}}
    , decltype(_impl_.encryption_key_pub_){uint64_t{0u}}
    , decltype(_impl_.tv_master_steamid_){uint64_t{0u}}
    , decltype(_impl_.tv_relay_steamid_){uint64_t{0u}}
    , decltype(_impl_.rtime32_event_start_){0u}
    , decltype(_impl_.tv_control_){0u}
    , decltype(_impl_.flags_){0u}
    , decltype(_impl_.socache_control_){0u}
  };
}

CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::~CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve() {
  // @@protoc_insertion_point(destructor:CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.account_ids_.~RepeatedField();
  _impl_.rankings_.~RepeatedPtrField();
  _impl_.party_ids_.~RepeatedField();
  _impl_.whitelist_.~RepeatedPtrField();
  _impl_.tournament_teams_.~RepeatedPtrField();
  _impl_.tournament_casters_account_ids_.~RepeatedField();
  _impl_.op_var_values_.~RepeatedPtrField();
  _impl_.teammate_colors_.~RepeatedField();
  if (this != internal_default_instance()) delete _impl_.tournament_event_;
  if (this != internal_default_instance()) delete _impl_.pre_match_data_;
}

void CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.account_ids_.Clear();
  _impl_.rankings_.Clear();
  _impl_.party_ids_.Clear();
  _impl_.whitelist_.Clear();
  _impl_.tournament_teams_.Clear();
  _impl_.tournament_casters_account_ids_.Clear();
  _impl_.op_var_values_.Clear();
  _impl_.teammate_colors_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.tournament_event_ != nullptr);
      _impl_.tournament_event_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.pre_match_data_ != nullptr);
      _impl_.pre_match_data_->Clear();
    }
  }
  if (cached_has_bits & 0x000000fcu) {
    ::memset(&_impl_.match_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.tv_master_steamid_) -
        reinterpret_cast<char*>(&_impl_.match_id_)) + sizeof(_impl_.tv_master_steamid_));
  }
  if (cached_has_bits & 0x00001f00u) {
    ::memset(&_impl_.tv_relay_steamid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.socache_control_) -
        reinterpret_cast<char*>(&_impl_.tv_relay_steamid_)) + sizeof(_impl_.socache_control_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated uint32 account_ids = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_account_ids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<8>(ptr));
        } else if (static_cast<uint8_t>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_account_ids(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 game_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_game_type(&has_bits);
          _impl_.game_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 match_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_match_id(&has_bits);
          _impl_.match_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 server_version = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_server_version(&has_bits);
          _impl_.server_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .PlayerRankingInfo rankings = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_rankings(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional uint64 encryption_key = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_encryption_key(&has_bits);
          _impl_.encryption_key_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 encryption_key_pub = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_encryption_key_pub(&has_bits);
          _impl_.encryption_key_pub_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 party_ids = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_party_ids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<64>(ptr));
        } else if (static_cast<uint8_t>(tag) == 66) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_party_ids(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .IpAddressMask whitelist = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_whitelist(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional uint64 tv_master_steamid = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_tv_master_steamid(&has_bits);
          _impl_.tv_master_steamid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TournamentEvent tournament_event = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_tournament_event(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .TournamentTeam tournament_teams = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_tournament_teams(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<98>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 tournament_casters_account_ids = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_tournament_casters_account_ids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<104>(ptr));
        } else if (static_cast<uint8_t>(tag) == 106) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_tournament_casters_account_ids(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 tv_relay_steamid = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          _Internal::set_has_tv_relay_steamid(&has_bits);
          _impl_.tv_relay_steamid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .CPreMatchInfoData pre_match_data = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_pre_match_data(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 rtime32_event_start = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          _Internal::set_has_rtime32_event_start(&has_bits);
          _impl_.rtime32_event_start_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 tv_control = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          _Internal::set_has_tv_control(&has_bits);
          _impl_.tv_control_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 flags = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 144)) {
          _Internal::set_has_flags(&has_bits);
          _impl_.flags_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .OperationalVarValue op_var_values = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 154)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_op_var_values(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<154>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional uint32 socache_control = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 160)) {
          _Internal::set_has_socache_control(&has_bits);
          _impl_.socache_control_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 teammate_colors = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 168)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_teammate_colors(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<168>(ptr));
        } else if (static_cast<uint8_t>(tag) == 170) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_teammate_colors(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 account_ids = 1;
  for (int i = 0, n = this->_internal_account_ids_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_account_ids(i), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 game_type = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_game_type(), target);
  }

  // optional uint64 match_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal_match_id(), target);
  }

  // optional uint32 server_version = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_server_version(), target);
  }

  // repeated .PlayerRankingInfo rankings = 5;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_rankings_size()); i < n; i++) {
    const auto& repfield = this->_internal_rankings(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional uint64 encryption_key = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(6, this->_internal_encryption_key(), target);
  }

  // optional uint64 encryption_key_pub = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(7, this->_internal_encryption_key_pub(), target);
  }

  // repeated uint32 party_ids = 8;
  for (int i = 0, n = this->_internal_party_ids_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(8, this->_internal_party_ids(i), target);
  }

  // repeated .IpAddressMask whitelist = 9;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_whitelist_size()); i < n; i++) {
    const auto& repfield = this->_internal_whitelist(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(9, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional uint64 tv_master_steamid = 10;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(10, this->_internal_tv_master_steamid(), target);
  }

  // optional .TournamentEvent tournament_event = 11;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, _Internal::tournament_event(this),
        _Internal::tournament_event(this).GetCachedSize(), target, stream);
  }

  // repeated .TournamentTeam tournament_teams = 12;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_tournament_teams_size()); i < n; i++) {
    const auto& repfield = this->_internal_tournament_teams(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(12, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated uint32 tournament_casters_account_ids = 13;
  for (int i = 0, n = this->_internal_tournament_casters_account_ids_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(13, this->_internal_tournament_casters_account_ids(i), target);
  }

  // optional uint64 tv_relay_steamid = 14;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(14, this->_internal_tv_relay_steamid(), target);
  }

  // optional .CPreMatchInfoData pre_match_data = 15;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(15, _Internal::pre_match_data(this),
        _Internal::pre_match_data(this).GetCachedSize(), target, stream);
  }

  // optional uint32 rtime32_event_start = 16;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(16, this->_internal_rtime32_event_start(), target);
  }

  // optional uint32 tv_control = 17;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(17, this->_internal_tv_control(), target);
  }

  // optional uint32 flags = 18;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(18, this->_internal_flags(), target);
  }

  // repeated .OperationalVarValue op_var_values = 19;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_op_var_values_size()); i < n; i++) {
    const auto& repfield = this->_internal_op_var_values(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(19, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional uint32 socache_control = 20;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(20, this->_internal_socache_control(), target);
  }

  // repeated int32 teammate_colors = 21;
  for (int i = 0, n = this->_internal_teammate_colors_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(21, this->_internal_teammate_colors(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve)
  return target;
}

size_t CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 account_ids = 1;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.account_ids_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_account_ids_size());
    total_size += data_size;
  }

  // repeated .PlayerRankingInfo rankings = 5;
  total_size += 1UL * this->_internal_rankings_size();
  for (const auto& msg : this->_impl_.rankings_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated uint32 party_ids = 8;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.party_ids_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_party_ids_size());
    total_size += data_size;
  }

  // repeated .IpAddressMask whitelist = 9;
  total_size += 1UL * this->_internal_whitelist_size();
  for (const auto& msg : this->_impl_.whitelist_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TournamentTeam tournament_teams = 12;
  total_size += 1UL * this->_internal_tournament_teams_size();
  for (const auto& msg : this->_impl_.tournament_teams_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated uint32 tournament_casters_account_ids = 13;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.tournament_casters_account_ids_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_tournament_casters_account_ids_size());
    total_size += data_size;
  }

  // repeated .OperationalVarValue op_var_values = 19;
  total_size += 2UL * this->_internal_op_var_values_size();
  for (const auto& msg : this->_impl_.op_var_values_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated int32 teammate_colors = 21;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.teammate_colors_);
    total_size += 2 *
                  ::_pbi::FromIntSize(this->_internal_teammate_colors_size());
    total_size += data_size;
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .TournamentEvent tournament_event = 11;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tournament_event_);
    }

    // optional .CPreMatchInfoData pre_match_data = 15;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.pre_match_data_);
    }

    // optional uint64 match_id = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_match_id());
    }

    // optional uint32 game_type = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_game_type());
    }

    // optional uint32 server_version = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_server_version());
    }

    // optional uint64 encryption_key = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_encryption_key());
    }

    // optional uint64 encryption_key_pub = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_encryption_key_pub());
    }

    // optional uint64 tv_master_steamid = 10;
    if (cached_has_bits & 0x00000080u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_tv_master_steamid());
    }

  }
  if (cached_has_bits & 0x00001f00u) {
    // optional uint64 tv_relay_steamid = 14;
    if (cached_has_bits & 0x00000100u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_tv_relay_steamid());
    }

    // optional uint32 rtime32_event_start = 16;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_rtime32_event_start());
    }

    // optional uint32 tv_control = 17;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_tv_control());
    }

    // optional uint32 flags = 18;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_flags());
    }

    // optional uint32 socache_control = 20;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_socache_control());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::GetClassData() const { return &_class_data_; }


void CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve*>(&to_msg);
  auto& from = static_cast<const CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.account_ids_.MergeFrom(from._impl_.account_ids_);
  _this->_impl_.rankings_.MergeFrom(from._impl_.rankings_);
  _this->_impl_.party_ids_.MergeFrom(from._impl_.party_ids_);
  _this->_impl_.whitelist_.MergeFrom(from._impl_.whitelist_);
  _this->_impl_.tournament_teams_.MergeFrom(from._impl_.tournament_teams_);
  _this->_impl_.tournament_casters_account_ids_.MergeFrom(from._impl_.tournament_casters_account_ids_);
  _this->_impl_.op_var_values_.MergeFrom(from._impl_.op_var_values_);
  _this->_impl_.teammate_colors_.MergeFrom(from._impl_.teammate_colors_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_tournament_event()->::TournamentEvent::MergeFrom(
          from._internal_tournament_event());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_pre_match_data()->::CPreMatchInfoData::MergeFrom(
          from._internal_pre_match_data());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.match_id_ = from._impl_.match_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.game_type_ = from._impl_.game_type_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.server_version_ = from._impl_.server_version_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.encryption_key_ = from._impl_.encryption_key_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.encryption_key_pub_ = from._impl_.encryption_key_pub_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.tv_master_steamid_ = from._impl_.tv_master_steamid_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00001f00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.tv_relay_steamid_ = from._impl_.tv_relay_steamid_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.rtime32_event_start_ = from._impl_.rtime32_event_start_;
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_impl_.tv_control_ = from._impl_.tv_control_;
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_impl_.flags_ = from._impl_.flags_;
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_impl_.socache_control_ = from._impl_.socache_control_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::CopyFrom(const CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::IsInitialized() const {
  return true;
}

void CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::InternalSwap(CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.account_ids_.InternalSwap(&other->_impl_.account_ids_);
  _impl_.rankings_.InternalSwap(&other->_impl_.rankings_);
  _impl_.party_ids_.InternalSwap(&other->_impl_.party_ids_);
  _impl_.whitelist_.InternalSwap(&other->_impl_.whitelist_);
  _impl_.tournament_teams_.InternalSwap(&other->_impl_.tournament_teams_);
  _impl_.tournament_casters_account_ids_.InternalSwap(&other->_impl_.tournament_casters_account_ids_);
  _impl_.op_var_values_.InternalSwap(&other->_impl_.op_var_values_);
  _impl_.teammate_colors_.InternalSwap(&other->_impl_.teammate_colors_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve, _impl_.socache_control_)
      + sizeof(CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::_impl_.socache_control_)
      - PROTOBUF_FIELD_OFFSET(CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve, _impl_.tournament_event_)>(
          reinterpret_cast<char*>(&_impl_.tournament_event_),
          reinterpret_cast<char*>(&other->_impl_.tournament_event_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cstrike15_5fgcmessages_2eproto_getter, &descriptor_table_cstrike15_5fgcmessages_2eproto_once,
      file_level_metadata_cstrike15_5fgcmessages_2eproto[41]);
}

// ===================================================================

class CMsgGCCStrike15_v2_MatchmakingServerReservationResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCCStrike15_v2_MatchmakingServerReservationResponse>()._impl_._has_bits_);
  static void set_has_reservationid(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve& reservation(const CMsgGCCStrike15_v2_MatchmakingServerReservationResponse* msg);
  static void set_has_reservation(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_map(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_gc_reservation_sent(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_server_version(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::ServerHltvInfo& tv_info(const CMsgGCCStrike15_v2_MatchmakingServerReservationResponse* msg);
  static void set_has_tv_info(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_reward_item_attr_def_idx(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_reward_item_attr_value(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_reward_item_attr_reward_idx(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_reward_drop_list(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_tournament_tag(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_legacy_steamdatagram_port(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_steamdatagram_routing(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_test_token(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_flags(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_system_load(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_cpus_online(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
};

const ::CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve&
CMsgGCCStrike15_v2_MatchmakingServerReservationResponse::_Internal::reservation(const CMsgGCCStrike15_v2_MatchmakingServerReservationResponse* msg) {
  return *msg->_impl_.reservation_;
}
const ::ServerHltvInfo&
CMsgGCCStrike15_v2_MatchmakingServerReservationResponse::_Internal::tv_info(const CMsgGCCStrike15_v2_MatchmakingServerReservationResponse* msg) {
  return *msg->_impl_.tv_info_;
}
CMsgGCCStrike15_v2_MatchmakingServerReservationResponse::CMsgGCCStrike15_v2_MatchmakingServerReservationResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgGCCStrike15_v2_MatchmakingServerReservationResponse)
}
CMsgGCCStrike15_v2_MatchmakingServerReservationResponse::CMsgGCCStrike15_v2_MatchmakingServerReservationResponse(const CMsgGCCStrike15_v2_MatchmakingServerReservationResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgGCCStrike15_v2_MatchmakingServerReservationResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.reward_player_accounts_){from._impl_.reward_player_accounts_}
    , decltype(_impl_.idle_player_accounts_){from._impl_.idle_player_accounts_}
    , decltype(_impl_.map_){}
    , decltype(_impl_.tournament_tag_){}
    , decltype(_impl_.reservation_){nullptr}
    , decltype(_impl_.tv_info_){nullptr}
    , decltype(_impl_.reservationid_){}
    , decltype(_impl_.gc_reservation_sent_){}
    , decltype(_impl_.server_version_){}
    , decltype(_impl_.reward_item_attr_def_idx_){}
    , decltype(_impl_.reward_item_attr_value_){}
    , decltype(_impl_.reward_item_attr_reward_idx_){}
    , decltype(_impl_.reward_drop_list_){}
    , decltype(_impl_.legacy_steamdatagram_port_){}
    , decltype(_impl_.test_token_){}
    , decltype(_impl_.flags_){}
    , decltype(_impl_.steamdatagram_routing_){}
    , decltype(_impl_.system_load_){}
    , decltype(_impl_.cpus_online_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.map_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.map_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_map()) {
    _this->_impl_.map_.Set(from._internal_map(), 
      _this->GetArenaForAllocation());
  }
  _impl_.tournament_tag_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.tournament_tag_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_tournament_tag()) {
    _this->_impl_.tournament_tag_.Set(from._internal_tournament_tag(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_reservation()) {
    _this->_impl_.reservation_ = new ::CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve(*from._impl_.reservation_);
  }
  if (from._internal_has_tv_info()) {
    _this->_impl_.tv_info_ = new ::ServerHltvInfo(*from._impl_.tv_info_);
  }
  ::memcpy(&_impl_.reservationid_, &from._impl_.reservationid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.cpus_online_) -
    reinterpret_cast<char*>(&_impl_.reservationid_)) + sizeof(_impl_.cpus_online_));
  // @@protoc_insertion_point(copy_constructor:CMsgGCCStrike15_v2_MatchmakingServerReservationResponse)
}

inline void CMsgGCCStrike15_v2_MatchmakingServerReservationResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.reward_player_accounts_){arena}
    , decltype(_impl_.idle_player_accounts_){arena}
    , decltype(_impl_.map_){}
    , decltype(_impl_.tournament_tag_){}
    , decltype(_impl_.reservation_){nullptr}
    , decltype(_impl_.tv_info_){nullptr}
    , decltype(_impl_.reservationid_){uint64_t{0u}}
    , decltype(_impl_.gc_reservation_sent_){uint64_t{0u}}
    , decltype(_impl_.server_version_){0u}
    , decltype(_impl_.reward_item_attr_def_idx_){0u}
    , decltype(_impl_.reward_item_attr_value_){0u}
    , decltype(_impl_.reward_item_attr_reward_idx_){0u}
    , decltype(_impl_.reward_drop_list_){0u}
    , decltype(_impl_.legacy_steamdatagram_port_){0u}
    , decltype(_impl_.test_token_){0u}
    , decltype(_impl_.flags_){0u}
    , decltype(_impl_.steamdatagram_routing_){0u}
    , decltype(_impl_.system_load_){0u}
    , decltype(_impl_.cpus_online_){0u}
  };
  _impl_.map_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.map_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.tournament_tag_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.tournament_tag_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CMsgGCCStrike15_v2_MatchmakingServerReservationResponse::~CMsgGCCStrike15_v2_MatchmakingServerReservationResponse() {
  // @@protoc_insertion_point(destructor:CMsgGCCStrike15_v2_MatchmakingServerReservationResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgGCCStrike15_v2_MatchmakingServerReservationResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.reward_player_accounts_.~RepeatedField();
  _impl_.idle_player_accounts_.~RepeatedField();
  _impl_.map_.Destroy();
  _impl_.tournament_tag_.Destroy();
  if (this != internal_default_instance()) delete _impl_.reservation_;
  if (this != internal_default_instance()) delete _impl_.tv_info_;
}

void CMsgGCCStrike15_v2_MatchmakingServerReservationResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgGCCStrike15_v2_MatchmakingServerReservationResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCCStrike15_v2_MatchmakingServerReservationResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.reward_player_accounts_.Clear();
  _impl_.idle_player_accounts_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.map_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.tournament_tag_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.reservation_ != nullptr);
      _impl_.reservation_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.tv_info_ != nullptr);
      _impl_.tv_info_->Clear();
    }
  }
  if (cached_has_bits & 0x000000f0u) {
    ::memset(&_impl_.reservationid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.reward_item_attr_def_idx_) -
        reinterpret_cast<char*>(&_impl_.reservationid_)) + sizeof(_impl_.reward_item_attr_def_idx_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&_impl_.reward_item_attr_value_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.system_load_) -
        reinterpret_cast<char*>(&_impl_.reward_item_attr_value_)) + sizeof(_impl_.system_load_));
  }
  _impl_.cpus_online_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCCStrike15_v2_MatchmakingServerReservationResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 reservationid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_reservationid(&has_bits);
          _impl_.reservationid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve reservation = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_reservation(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string map = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_map();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CMsgGCCStrike15_v2_MatchmakingServerReservationResponse.map");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional uint64 gc_reservation_sent = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_gc_reservation_sent(&has_bits);
          _impl_.gc_reservation_sent_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 server_version = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_server_version(&has_bits);
          _impl_.server_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .ServerHltvInfo tv_info = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_tv_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 reward_player_accounts = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_reward_player_accounts(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<56>(ptr));
        } else if (static_cast<uint8_t>(tag) == 58) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_reward_player_accounts(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 idle_player_accounts = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_idle_player_accounts(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<64>(ptr));
        } else if (static_cast<uint8_t>(tag) == 66) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_idle_player_accounts(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 reward_item_attr_def_idx = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_reward_item_attr_def_idx(&has_bits);
          _impl_.reward_item_attr_def_idx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 reward_item_attr_value = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_reward_item_attr_value(&has_bits);
          _impl_.reward_item_attr_value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 reward_item_attr_reward_idx = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _Internal::set_has_reward_item_attr_reward_idx(&has_bits);
          _impl_.reward_item_attr_reward_idx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 reward_drop_list = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _Internal::set_has_reward_drop_list(&has_bits);
          _impl_.reward_drop_list_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string tournament_tag = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          auto str = _internal_mutable_tournament_tag();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CMsgGCCStrike15_v2_MatchmakingServerReservationResponse.tournament_tag");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional uint32 legacy_steamdatagram_port = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          _Internal::set_has_legacy_steamdatagram_port(&has_bits);
          _impl_.legacy_steamdatagram_port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional fixed32 test_token = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 125)) {
          _Internal::set_has_test_token(&has_bits);
          _impl_.test_token_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint32_t>(ptr);
          ptr += sizeof(uint32_t);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 flags = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          _Internal::set_has_flags(&has_bits);
          _impl_.flags_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 steamdatagram_routing = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          _Internal::set_has_steamdatagram_routing(&has_bits);
          _impl_.steamdatagram_routing_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 system_load = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 144)) {
          _Internal::set_has_system_load(&has_bits);
          _impl_.system_load_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 cpus_online = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 152)) {
          _Internal::set_has_cpus_online(&has_bits);
          _impl_.cpus_online_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgGCCStrike15_v2_MatchmakingServerReservationResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCCStrike15_v2_MatchmakingServerReservationResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint64 reservationid = 1;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_reservationid(), target);
  }

  // optional .CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve reservation = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::reservation(this),
        _Internal::reservation(this).GetCachedSize(), target, stream);
  }

  // optional string map = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_map().data(), static_cast<int>(this->_internal_map().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgGCCStrike15_v2_MatchmakingServerReservationResponse.map");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_map(), target);
  }

  // optional uint64 gc_reservation_sent = 4;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(4, this->_internal_gc_reservation_sent(), target);
  }

  // optional uint32 server_version = 5;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_server_version(), target);
  }

  // optional .ServerHltvInfo tv_info = 6;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::tv_info(this),
        _Internal::tv_info(this).GetCachedSize(), target, stream);
  }

  // repeated uint32 reward_player_accounts = 7;
  for (int i = 0, n = this->_internal_reward_player_accounts_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(7, this->_internal_reward_player_accounts(i), target);
  }

  // repeated uint32 idle_player_accounts = 8;
  for (int i = 0, n = this->_internal_idle_player_accounts_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(8, this->_internal_idle_player_accounts(i), target);
  }

  // optional uint32 reward_item_attr_def_idx = 9;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(9, this->_internal_reward_item_attr_def_idx(), target);
  }

  // optional uint32 reward_item_attr_value = 10;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(10, this->_internal_reward_item_attr_value(), target);
  }

  // optional uint32 reward_item_attr_reward_idx = 11;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(11, this->_internal_reward_item_attr_reward_idx(), target);
  }

  // optional uint32 reward_drop_list = 12;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(12, this->_internal_reward_drop_list(), target);
  }

  // optional string tournament_tag = 13;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_tournament_tag().data(), static_cast<int>(this->_internal_tournament_tag().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgGCCStrike15_v2_MatchmakingServerReservationResponse.tournament_tag");
    target = stream->WriteStringMaybeAliased(
        13, this->_internal_tournament_tag(), target);
  }

  // optional uint32 legacy_steamdatagram_port = 14;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(14, this->_internal_legacy_steamdatagram_port(), target);
  }

  // optional fixed32 test_token = 15;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed32ToArray(15, this->_internal_test_token(), target);
  }

  // optional uint32 flags = 16;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(16, this->_internal_flags(), target);
  }

  // optional uint32 steamdatagram_routing = 17;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(17, this->_internal_steamdatagram_routing(), target);
  }

  // optional uint32 system_load = 18;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(18, this->_internal_system_load(), target);
  }

  // optional uint32 cpus_online = 19;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(19, this->_internal_cpus_online(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCCStrike15_v2_MatchmakingServerReservationResponse)
  return target;
}

size_t CMsgGCCStrike15_v2_MatchmakingServerReservationResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCCStrike15_v2_MatchmakingServerReservationResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 reward_player_accounts = 7;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.reward_player_accounts_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_reward_player_accounts_size());
    total_size += data_size;
  }

  // repeated uint32 idle_player_accounts = 8;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.idle_player_accounts_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_idle_player_accounts_size());
    total_size += data_size;
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string map = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_map());
    }

    // optional string tournament_tag = 13;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_tournament_tag());
    }

    // optional .CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve reservation = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.reservation_);
    }

    // optional .ServerHltvInfo tv_info = 6;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tv_info_);
    }

    // optional uint64 reservationid = 1;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_reservationid());
    }

    // optional uint64 gc_reservation_sent = 4;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_gc_reservation_sent());
    }

    // optional uint32 server_version = 5;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_server_version());
    }

    // optional uint32 reward_item_attr_def_idx = 9;
    if (cached_has_bits & 0x00000080u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_reward_item_attr_def_idx());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional uint32 reward_item_attr_value = 10;
    if (cached_has_bits & 0x00000100u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_reward_item_attr_value());
    }

    // optional uint32 reward_item_attr_reward_idx = 11;
    if (cached_has_bits & 0x00000200u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_reward_item_attr_reward_idx());
    }

    // optional uint32 reward_drop_list = 12;
    if (cached_has_bits & 0x00000400u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_reward_drop_list());
    }

    // optional uint32 legacy_steamdatagram_port = 14;
    if (cached_has_bits & 0x00000800u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_legacy_steamdatagram_port());
    }

    // optional fixed32 test_token = 15;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 + 4;
    }

    // optional uint32 flags = 16;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_flags());
    }

    // optional uint32 steamdatagram_routing = 17;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_steamdatagram_routing());
    }

    // optional uint32 system_load = 18;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_system_load());
    }

  }
  // optional uint32 cpus_online = 19;
  if (cached_has_bits & 0x00010000u) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_cpus_online());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgGCCStrike15_v2_MatchmakingServerReservationResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgGCCStrike15_v2_MatchmakingServerReservationResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgGCCStrike15_v2_MatchmakingServerReservationResponse::GetClassData() const { return &_class_data_; }


void CMsgGCCStrike15_v2_MatchmakingServerReservationResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgGCCStrike15_v2_MatchmakingServerReservationResponse*>(&to_msg);
  auto& from = static_cast<const CMsgGCCStrike15_v2_MatchmakingServerReservationResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCCStrike15_v2_MatchmakingServerReservationResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.reward_player_accounts_.MergeFrom(from._impl_.reward_player_accounts_);
  _this->_impl_.idle_player_accounts_.MergeFrom(from._impl_.idle_player_accounts_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_map(from._internal_map());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_tournament_tag(from._internal_tournament_tag());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_reservation()->::CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::MergeFrom(
          from._internal_reservation());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_tv_info()->::ServerHltvInfo::MergeFrom(
          from._internal_tv_info());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.reservationid_ = from._impl_.reservationid_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.gc_reservation_sent_ = from._impl_.gc_reservation_sent_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.server_version_ = from._impl_.server_version_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.reward_item_attr_def_idx_ = from._impl_.reward_item_attr_def_idx_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.reward_item_attr_value_ = from._impl_.reward_item_attr_value_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.reward_item_attr_reward_idx_ = from._impl_.reward_item_attr_reward_idx_;
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_impl_.reward_drop_list_ = from._impl_.reward_drop_list_;
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_impl_.legacy_steamdatagram_port_ = from._impl_.legacy_steamdatagram_port_;
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_impl_.test_token_ = from._impl_.test_token_;
    }
    if (cached_has_bits & 0x00002000u) {
      _this->_impl_.flags_ = from._impl_.flags_;
    }
    if (cached_has_bits & 0x00004000u) {
      _this->_impl_.steamdatagram_routing_ = from._impl_.steamdatagram_routing_;
    }
    if (cached_has_bits & 0x00008000u) {
      _this->_impl_.system_load_ = from._impl_.system_load_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00010000u) {
    _this->_internal_set_cpus_online(from._internal_cpus_online());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgGCCStrike15_v2_MatchmakingServerReservationResponse::CopyFrom(const CMsgGCCStrike15_v2_MatchmakingServerReservationResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCCStrike15_v2_MatchmakingServerReservationResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCCStrike15_v2_MatchmakingServerReservationResponse::IsInitialized() const {
  return true;
}

void CMsgGCCStrike15_v2_MatchmakingServerReservationResponse::InternalSwap(CMsgGCCStrike15_v2_MatchmakingServerReservationResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.reward_player_accounts_.InternalSwap(&other->_impl_.reward_player_accounts_);
  _impl_.idle_player_accounts_.InternalSwap(&other->_impl_.idle_player_accounts_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.map_, lhs_arena,
      &other->_impl_.map_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.tournament_tag_, lhs_arena,
      &other->_impl_.tournament_tag_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgGCCStrike15_v2_MatchmakingServerReservationResponse, _impl_.cpus_online_)
      + sizeof(CMsgGCCStrike15_v2_MatchmakingServerReservationResponse::_impl_.cpus_online_)
      - PROTOBUF_FIELD_OFFSET(CMsgGCCStrike15_v2_MatchmakingServerReservationResponse, _impl_.reservation_)>(
          reinterpret_cast<char*>(&_impl_.reservation_),
          reinterpret_cast<char*>(&other->_impl_.reservation_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCCStrike15_v2_MatchmakingServerReservationResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cstrike15_5fgcmessages_2eproto_getter, &descriptor_table_cstrike15_5fgcmessages_2eproto_once,
      file_level_metadata_cstrike15_5fgcmessages_2eproto[42]);
}

// ===================================================================

class CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve>()._impl_._has_bits_);
  static void set_has_serverid(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_direct_udp_ip(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_direct_udp_port(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_reservationid(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve& reservation(const CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve* msg);
  static void set_has_reservation(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_map(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_server_address(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::DataCenterPing& gs_ping(const CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve* msg);
  static void set_has_gs_ping(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_gs_location_id(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
};

const ::CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve&
CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve::_Internal::reservation(const CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve* msg) {
  return *msg->_impl_.reservation_;
}
const ::DataCenterPing&
CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve::_Internal::gs_ping(const CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve* msg) {
  return *msg->_impl_.gs_ping_;
}
CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve::CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve)
}
CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve::CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve(const CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.map_){}
    , decltype(_impl_.server_address_){}
    , decltype(_impl_.reservation_){nullptr}
    , decltype(_impl_.gs_ping_){nullptr}
    , decltype(_impl_.serverid_){}
    , decltype(_impl_.direct_udp_ip_){}
    , decltype(_impl_.direct_udp_port_){}
    , decltype(_impl_.reservationid_){}
    , decltype(_impl_.gs_location_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.map_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.map_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_map()) {
    _this->_impl_.map_.Set(from._internal_map(), 
      _this->GetArenaForAllocation());
  }
  _impl_.server_address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.server_address_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_server_address()) {
    _this->_impl_.server_address_.Set(from._internal_server_address(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_reservation()) {
    _this->_impl_.reservation_ = new ::CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve(*from._impl_.reservation_);
  }
  if (from._internal_has_gs_ping()) {
    _this->_impl_.gs_ping_ = new ::DataCenterPing(*from._impl_.gs_ping_);
  }
  ::memcpy(&_impl_.serverid_, &from._impl_.serverid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.gs_location_id_) -
    reinterpret_cast<char*>(&_impl_.serverid_)) + sizeof(_impl_.gs_location_id_));
  // @@protoc_insertion_point(copy_constructor:CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve)
}

inline void CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.map_){}
    , decltype(_impl_.server_address_){}
    , decltype(_impl_.reservation_){nullptr}
    , decltype(_impl_.gs_ping_){nullptr}
    , decltype(_impl_.serverid_){uint64_t{0u}}
    , decltype(_impl_.direct_udp_ip_){0u}
    , decltype(_impl_.direct_udp_port_){0u}
    , decltype(_impl_.reservationid_){uint64_t{0u}}
    , decltype(_impl_.gs_location_id_){0u}
  };
  _impl_.map_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.map_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.server_address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.server_address_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve::~CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve() {
  // @@protoc_insertion_point(destructor:CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.map_.Destroy();
  _impl_.server_address_.Destroy();
  if (this != internal_default_instance()) delete _impl_.reservation_;
  if (this != internal_default_instance()) delete _impl_.gs_ping_;
}

void CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.map_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.server_address_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.reservation_ != nullptr);
      _impl_.reservation_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.gs_ping_ != nullptr);
      _impl_.gs_ping_->Clear();
    }
  }
  if (cached_has_bits & 0x000000f0u) {
    ::memset(&_impl_.serverid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.reservationid_) -
        reinterpret_cast<char*>(&_impl_.serverid_)) + sizeof(_impl_.reservationid_));
  }
  _impl_.gs_location_id_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 serverid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_serverid(&has_bits);
          _impl_.serverid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 direct_udp_ip = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_direct_udp_ip(&has_bits);
          _impl_.direct_udp_ip_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 direct_udp_port = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_direct_udp_port(&has_bits);
          _impl_.direct_udp_port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 reservationid = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_reservationid(&has_bits);
          _impl_.reservationid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve reservation = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_reservation(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string map = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_map();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve.map");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string server_address = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_server_address();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve.server_address");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional .DataCenterPing gs_ping = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_gs_ping(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 gs_location_id = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_gs_location_id(&has_bits);
          _impl_.gs_location_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint64 serverid = 1;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_serverid(), target);
  }

  // optional uint32 direct_udp_ip = 2;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_direct_udp_ip(), target);
  }

  // optional uint32 direct_udp_port = 3;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_direct_udp_port(), target);
  }

  // optional uint64 reservationid = 4;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(4, this->_internal_reservationid(), target);
  }

  // optional .CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve reservation = 5;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::reservation(this),
        _Internal::reservation(this).GetCachedSize(), target, stream);
  }

  // optional string map = 6;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_map().data(), static_cast<int>(this->_internal_map().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve.map");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_map(), target);
  }

  // optional string server_address = 7;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_server_address().data(), static_cast<int>(this->_internal_server_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve.server_address");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_server_address(), target);
  }

  // optional .DataCenterPing gs_ping = 8;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::gs_ping(this),
        _Internal::gs_ping(this).GetCachedSize(), target, stream);
  }

  // optional uint32 gs_location_id = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(9, this->_internal_gs_location_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve)
  return target;
}

size_t CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string map = 6;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_map());
    }

    // optional string server_address = 7;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_server_address());
    }

    // optional .CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve reservation = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.reservation_);
    }

    // optional .DataCenterPing gs_ping = 8;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.gs_ping_);
    }

    // optional uint64 serverid = 1;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_serverid());
    }

    // optional uint32 direct_udp_ip = 2;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_direct_udp_ip());
    }

    // optional uint32 direct_udp_port = 3;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_direct_udp_port());
    }

    // optional uint64 reservationid = 4;
    if (cached_has_bits & 0x00000080u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_reservationid());
    }

  }
  // optional uint32 gs_location_id = 9;
  if (cached_has_bits & 0x00000100u) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_gs_location_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve::GetClassData() const { return &_class_data_; }


void CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve*>(&to_msg);
  auto& from = static_cast<const CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_map(from._internal_map());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_server_address(from._internal_server_address());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_reservation()->::CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::MergeFrom(
          from._internal_reservation());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_gs_ping()->::DataCenterPing::MergeFrom(
          from._internal_gs_ping());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.serverid_ = from._impl_.serverid_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.direct_udp_ip_ = from._impl_.direct_udp_ip_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.direct_udp_port_ = from._impl_.direct_udp_port_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.reservationid_ = from._impl_.reservationid_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    _this->_internal_set_gs_location_id(from._internal_gs_location_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve::CopyFrom(const CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve::IsInitialized() const {
  return true;
}

void CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve::InternalSwap(CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.map_, lhs_arena,
      &other->_impl_.map_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.server_address_, lhs_arena,
      &other->_impl_.server_address_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve, _impl_.gs_location_id_)
      + sizeof(CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve::_impl_.gs_location_id_)
      - PROTOBUF_FIELD_OFFSET(CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve, _impl_.reservation_)>(
          reinterpret_cast<char*>(&_impl_.reservation_),
          reinterpret_cast<char*>(&other->_impl_.reservation_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cstrike15_5fgcmessages_2eproto_getter, &descriptor_table_cstrike15_5fgcmessages_2eproto_once,
      file_level_metadata_cstrike15_5fgcmessages_2eproto[43]);
}

// ===================================================================

class CMsgGCCStrike15_v2_MatchmakingServerRoundStats_DropInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCCStrike15_v2_MatchmakingServerRoundStats_DropInfo>()._impl_._has_bits_);
  static void set_has_account_mvp(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgGCCStrike15_v2_MatchmakingServerRoundStats_DropInfo::CMsgGCCStrike15_v2_MatchmakingServerRoundStats_DropInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgGCCStrike15_v2_MatchmakingServerRoundStats.DropInfo)
}
CMsgGCCStrike15_v2_MatchmakingServerRoundStats_DropInfo::CMsgGCCStrike15_v2_MatchmakingServerRoundStats_DropInfo(const CMsgGCCStrike15_v2_MatchmakingServerRoundStats_DropInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgGCCStrike15_v2_MatchmakingServerRoundStats_DropInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.account_mvp_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.account_mvp_ = from._impl_.account_mvp_;
  // @@protoc_insertion_point(copy_constructor:CMsgGCCStrike15_v2_MatchmakingServerRoundStats.DropInfo)
}

inline void CMsgGCCStrike15_v2_MatchmakingServerRoundStats_DropInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.account_mvp_){0u}
  };
}

CMsgGCCStrike15_v2_MatchmakingServerRoundStats_DropInfo::~CMsgGCCStrike15_v2_MatchmakingServerRoundStats_DropInfo() {
  // @@protoc_insertion_point(destructor:CMsgGCCStrike15_v2_MatchmakingServerRoundStats.DropInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgGCCStrike15_v2_MatchmakingServerRoundStats_DropInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgGCCStrike15_v2_MatchmakingServerRoundStats_DropInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgGCCStrike15_v2_MatchmakingServerRoundStats_DropInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCCStrike15_v2_MatchmakingServerRoundStats.DropInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.account_mvp_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCCStrike15_v2_MatchmakingServerRoundStats_DropInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 account_mvp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_account_mvp(&has_bits);
          _impl_.account_mvp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgGCCStrike15_v2_MatchmakingServerRoundStats_DropInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCCStrike15_v2_MatchmakingServerRoundStats.DropInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 account_mvp = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_account_mvp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCCStrike15_v2_MatchmakingServerRoundStats.DropInfo)
  return target;
}

size_t CMsgGCCStrike15_v2_MatchmakingServerRoundStats_DropInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCCStrike15_v2_MatchmakingServerRoundStats.DropInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 account_mvp = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_account_mvp());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgGCCStrike15_v2_MatchmakingServerRoundStats_DropInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgGCCStrike15_v2_MatchmakingServerRoundStats_DropInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgGCCStrike15_v2_MatchmakingServerRoundStats_DropInfo::GetClassData() const { return &_class_data_; }


void CMsgGCCStrike15_v2_MatchmakingServerRoundStats_DropInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgGCCStrike15_v2_MatchmakingServerRoundStats_DropInfo*>(&to_msg);
  auto& from = static_cast<const CMsgGCCStrike15_v2_MatchmakingServerRoundStats_DropInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCCStrike15_v2_MatchmakingServerRoundStats.DropInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_account_mvp()) {
    _this->_internal_set_account_mvp(from._internal_account_mvp());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgGCCStrike15_v2_MatchmakingServerRoundStats_DropInfo::CopyFrom(const CMsgGCCStrike15_v2_MatchmakingServerRoundStats_DropInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCCStrike15_v2_MatchmakingServerRoundStats.DropInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCCStrike15_v2_MatchmakingServerRoundStats_DropInfo::IsInitialized() const {
  return true;
}

void CMsgGCCStrike15_v2_MatchmakingServerRoundStats_DropInfo::InternalSwap(CMsgGCCStrike15_v2_MatchmakingServerRoundStats_DropInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.account_mvp_, other->_impl_.account_mvp_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCCStrike15_v2_MatchmakingServerRoundStats_DropInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cstrike15_5fgcmessages_2eproto_getter, &descriptor_table_cstrike15_5fgcmessages_2eproto_once,
      file_level_metadata_cstrike15_5fgcmessages_2eproto[44]);
}

// ===================================================================

class CMsgGCCStrike15_v2_MatchmakingServerRoundStats::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCCStrike15_v2_MatchmakingServerRoundStats>()._impl_._has_bits_);
  static void set_has_reservationid(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve& reservation(const CMsgGCCStrike15_v2_MatchmakingServerRoundStats* msg);
  static void set_has_reservation(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_map(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_round(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_round_result(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_match_result(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm& confirm(const CMsgGCCStrike15_v2_MatchmakingServerRoundStats* msg);
  static void set_has_confirm(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_reservation_stage(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_match_duration(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_spectators_count(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_spectators_count_tv(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_spectators_count_lnk(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static const ::CMsgGCCStrike15_v2_MatchmakingServerRoundStats_DropInfo& drop_info(const CMsgGCCStrike15_v2_MatchmakingServerRoundStats* msg);
  static void set_has_drop_info(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_b_switched_teams(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_max_rounds(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_map_id(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
};

const ::CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve&
CMsgGCCStrike15_v2_MatchmakingServerRoundStats::_Internal::reservation(const CMsgGCCStrike15_v2_MatchmakingServerRoundStats* msg) {
  return *msg->_impl_.reservation_;
}
const ::CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm&
CMsgGCCStrike15_v2_MatchmakingServerRoundStats::_Internal::confirm(const CMsgGCCStrike15_v2_MatchmakingServerRoundStats* msg) {
  return *msg->_impl_.confirm_;
}
const ::CMsgGCCStrike15_v2_MatchmakingServerRoundStats_DropInfo&
CMsgGCCStrike15_v2_MatchmakingServerRoundStats::_Internal::drop_info(const CMsgGCCStrike15_v2_MatchmakingServerRoundStats* msg) {
  return *msg->_impl_.drop_info_;
}
CMsgGCCStrike15_v2_MatchmakingServerRoundStats::CMsgGCCStrike15_v2_MatchmakingServerRoundStats(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgGCCStrike15_v2_MatchmakingServerRoundStats)
}
CMsgGCCStrike15_v2_MatchmakingServerRoundStats::CMsgGCCStrike15_v2_MatchmakingServerRoundStats(const CMsgGCCStrike15_v2_MatchmakingServerRoundStats& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgGCCStrike15_v2_MatchmakingServerRoundStats* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.kills_){from._impl_.kills_}
    , decltype(_impl_.assists_){from._impl_.assists_}
    , decltype(_impl_.deaths_){from._impl_.deaths_}
    , decltype(_impl_.scores_){from._impl_.scores_}
    , decltype(_impl_.pings_){from._impl_.pings_}
    , decltype(_impl_.team_scores_){from._impl_.team_scores_}
    , decltype(_impl_.enemy_kills_){from._impl_.enemy_kills_}
    , decltype(_impl_.enemy_headshots_){from._impl_.enemy_headshots_}
    , decltype(_impl_.enemy_3ks_){from._impl_.enemy_3ks_}
    , decltype(_impl_.enemy_4ks_){from._impl_.enemy_4ks_}
    , decltype(_impl_.enemy_5ks_){from._impl_.enemy_5ks_}
    , decltype(_impl_.mvps_){from._impl_.mvps_}
    , decltype(_impl_.enemy_kills_agg_){from._impl_.enemy_kills_agg_}
    , decltype(_impl_.enemy_2ks_){from._impl_.enemy_2ks_}
    , decltype(_impl_.player_spawned_){from._impl_.player_spawned_}
    , decltype(_impl_.team_spawn_count_){from._impl_.team_spawn_count_}
    , decltype(_impl_.map_){}
    , decltype(_impl_.reservation_){nullptr}
    , decltype(_impl_.confirm_){nullptr}
    , decltype(_impl_.drop_info_){nullptr}
    , decltype(_impl_.reservationid_){}
    , decltype(_impl_.round_){}
    , decltype(_impl_.round_result_){}
    , decltype(_impl_.match_result_){}
    , decltype(_impl_.reservation_stage_){}
    , decltype(_impl_.match_duration_){}
    , decltype(_impl_.spectators_count_){}
    , decltype(_impl_.spectators_count_tv_){}
    , decltype(_impl_.spectators_count_lnk_){}
    , decltype(_impl_.b_switched_teams_){}
    , decltype(_impl_.max_rounds_){}
    , decltype(_impl_.map_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.map_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.map_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_map()) {
    _this->_impl_.map_.Set(from._internal_map(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_reservation()) {
    _this->_impl_.reservation_ = new ::CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve(*from._impl_.reservation_);
  }
  if (from._internal_has_confirm()) {
    _this->_impl_.confirm_ = new ::CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm(*from._impl_.confirm_);
  }
  if (from._internal_has_drop_info()) {
    _this->_impl_.drop_info_ = new ::CMsgGCCStrike15_v2_MatchmakingServerRoundStats_DropInfo(*from._impl_.drop_info_);
  }
  ::memcpy(&_impl_.reservationid_, &from._impl_.reservationid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.map_id_) -
    reinterpret_cast<char*>(&_impl_.reservationid_)) + sizeof(_impl_.map_id_));
  // @@protoc_insertion_point(copy_constructor:CMsgGCCStrike15_v2_MatchmakingServerRoundStats)
}

inline void CMsgGCCStrike15_v2_MatchmakingServerRoundStats::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.kills_){arena}
    , decltype(_impl_.assists_){arena}
    , decltype(_impl_.deaths_){arena}
    , decltype(_impl_.scores_){arena}
    , decltype(_impl_.pings_){arena}
    , decltype(_impl_.team_scores_){arena}
    , decltype(_impl_.enemy_kills_){arena}
    , decltype(_impl_.enemy_headshots_){arena}
    , decltype(_impl_.enemy_3ks_){arena}
    , decltype(_impl_.enemy_4ks_){arena}
    , decltype(_impl_.enemy_5ks_){arena}
    , decltype(_impl_.mvps_){arena}
    , decltype(_impl_.enemy_kills_agg_){arena}
    , decltype(_impl_.enemy_2ks_){arena}
    , decltype(_impl_.player_spawned_){arena}
    , decltype(_impl_.team_spawn_count_){arena}
    , decltype(_impl_.map_){}
    , decltype(_impl_.reservation_){nullptr}
    , decltype(_impl_.confirm_){nullptr}
    , decltype(_impl_.drop_info_){nullptr}
    , decltype(_impl_.reservationid_){uint64_t{0u}}
    , decltype(_impl_.round_){0}
    , decltype(_impl_.round_result_){0}
    , decltype(_impl_.match_result_){0}
    , decltype(_impl_.reservation_stage_){0}
    , decltype(_impl_.match_duration_){0}
    , decltype(_impl_.spectators_count_){0u}
    , decltype(_impl_.spectators_count_tv_){0u}
    , decltype(_impl_.spectators_count_lnk_){0u}
    , decltype(_impl_.b_switched_teams_){false}
    , decltype(_impl_.max_rounds_){0u}
    , decltype(_impl_.map_id_){0}
  };
  _impl_.map_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.map_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CMsgGCCStrike15_v2_MatchmakingServerRoundStats::~CMsgGCCStrike15_v2_MatchmakingServerRoundStats() {
  // @@protoc_insertion_point(destructor:CMsgGCCStrike15_v2_MatchmakingServerRoundStats)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgGCCStrike15_v2_MatchmakingServerRoundStats::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.kills_.~RepeatedField();
  _impl_.assists_.~RepeatedField();
  _impl_.deaths_.~RepeatedField();
  _impl_.scores_.~RepeatedField();
  _impl_.pings_.~RepeatedField();
  _impl_.team_scores_.~RepeatedField();
  _impl_.enemy_kills_.~RepeatedField();
  _impl_.enemy_headshots_.~RepeatedField();
  _impl_.enemy_3ks_.~RepeatedField();
  _impl_.enemy_4ks_.~RepeatedField();
  _impl_.enemy_5ks_.~RepeatedField();
  _impl_.mvps_.~RepeatedField();
  _impl_.enemy_kills_agg_.~RepeatedField();
  _impl_.enemy_2ks_.~RepeatedField();
  _impl_.player_spawned_.~RepeatedField();
  _impl_.team_spawn_count_.~RepeatedField();
  _impl_.map_.Destroy();
  if (this != internal_default_instance()) delete _impl_.reservation_;
  if (this != internal_default_instance()) delete _impl_.confirm_;
  if (this != internal_default_instance()) delete _impl_.drop_info_;
}

void CMsgGCCStrike15_v2_MatchmakingServerRoundStats::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgGCCStrike15_v2_MatchmakingServerRoundStats::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCCStrike15_v2_MatchmakingServerRoundStats)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.kills_.Clear();
  _impl_.assists_.Clear();
  _impl_.deaths_.Clear();
  _impl_.scores_.Clear();
  _impl_.pings_.Clear();
  _impl_.team_scores_.Clear();
  _impl_.enemy_kills_.Clear();
  _impl_.enemy_headshots_.Clear();
  _impl_.enemy_3ks_.Clear();
  _impl_.enemy_4ks_.Clear();
  _impl_.enemy_5ks_.Clear();
  _impl_.mvps_.Clear();
  _impl_.enemy_kills_agg_.Clear();
  _impl_.enemy_2ks_.Clear();
  _impl_.player_spawned_.Clear();
  _impl_.team_spawn_count_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.map_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.reservation_ != nullptr);
      _impl_.reservation_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.confirm_ != nullptr);
      _impl_.confirm_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.drop_info_ != nullptr);
      _impl_.drop_info_->Clear();
    }
  }
  if (cached_has_bits & 0x000000f0u) {
    ::memset(&_impl_.reservationid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.match_result_) -
        reinterpret_cast<char*>(&_impl_.reservationid_)) + sizeof(_impl_.match_result_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&_impl_.reservation_stage_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.map_id_) -
        reinterpret_cast<char*>(&_impl_.reservation_stage_)) + sizeof(_impl_.map_id_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCCStrike15_v2_MatchmakingServerRoundStats::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 reservationid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_reservationid(&has_bits);
          _impl_.reservationid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve reservation = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_reservation(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string map = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_map();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CMsgGCCStrike15_v2_MatchmakingServerRoundStats.map");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional int32 round = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_round(&has_bits);
          _impl_.round_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 kills = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_kills(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<40>(ptr));
        } else if (static_cast<uint8_t>(tag) == 42) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_kills(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 assists = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_assists(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<48>(ptr));
        } else if (static_cast<uint8_t>(tag) == 50) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_assists(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 deaths = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_deaths(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<56>(ptr));
        } else if (static_cast<uint8_t>(tag) == 58) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_deaths(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 scores = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_scores(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<64>(ptr));
        } else if (static_cast<uint8_t>(tag) == 66) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_scores(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 pings = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_pings(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<72>(ptr));
        } else if (static_cast<uint8_t>(tag) == 74) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_pings(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 round_result = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_round_result(&has_bits);
          _impl_.round_result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 match_result = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _Internal::set_has_match_result(&has_bits);
          _impl_.match_result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 team_scores = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_team_scores(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<96>(ptr));
        } else if (static_cast<uint8_t>(tag) == 98) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_team_scores(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm confirm = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_confirm(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 reservation_stage = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          _Internal::set_has_reservation_stage(&has_bits);
          _impl_.reservation_stage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 match_duration = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          _Internal::set_has_match_duration(&has_bits);
          _impl_.match_duration_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 enemy_kills = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_enemy_kills(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<128>(ptr));
        } else if (static_cast<uint8_t>(tag) == 130) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_enemy_kills(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 enemy_headshots = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_enemy_headshots(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<136>(ptr));
        } else if (static_cast<uint8_t>(tag) == 138) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_enemy_headshots(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 enemy_3ks = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 144)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_enemy_3ks(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<144>(ptr));
        } else if (static_cast<uint8_t>(tag) == 146) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_enemy_3ks(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 enemy_4ks = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 152)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_enemy_4ks(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<152>(ptr));
        } else if (static_cast<uint8_t>(tag) == 154) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_enemy_4ks(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 enemy_5ks = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 160)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_enemy_5ks(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<160>(ptr));
        } else if (static_cast<uint8_t>(tag) == 162) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_enemy_5ks(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 mvps = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 168)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_mvps(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<168>(ptr));
        } else if (static_cast<uint8_t>(tag) == 170) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_mvps(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 spectators_count = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 176)) {
          _Internal::set_has_spectators_count(&has_bits);
          _impl_.spectators_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 spectators_count_tv = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 184)) {
          _Internal::set_has_spectators_count_tv(&has_bits);
          _impl_.spectators_count_tv_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 spectators_count_lnk = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 192)) {
          _Internal::set_has_spectators_count_lnk(&has_bits);
          _impl_.spectators_count_lnk_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 enemy_kills_agg = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 200)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_enemy_kills_agg(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<200>(ptr));
        } else if (static_cast<uint8_t>(tag) == 202) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_enemy_kills_agg(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .CMsgGCCStrike15_v2_MatchmakingServerRoundStats.DropInfo drop_info = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 210)) {
          ptr = ctx->ParseMessage(_internal_mutable_drop_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool b_switched_teams = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 216)) {
          _Internal::set_has_b_switched_teams(&has_bits);
          _impl_.b_switched_teams_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 enemy_2ks = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 224)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_enemy_2ks(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<224>(ptr));
        } else if (static_cast<uint8_t>(tag) == 226) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_enemy_2ks(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 player_spawned = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 232)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_player_spawned(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<232>(ptr));
        } else if (static_cast<uint8_t>(tag) == 234) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_player_spawned(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 team_spawn_count = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 240)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_team_spawn_count(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<240>(ptr));
        } else if (static_cast<uint8_t>(tag) == 242) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_team_spawn_count(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 max_rounds = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 248)) {
          _Internal::set_has_max_rounds(&has_bits);
          _impl_.max_rounds_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 map_id = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 0)) {
          _Internal::set_has_map_id(&has_bits);
          _impl_.map_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgGCCStrike15_v2_MatchmakingServerRoundStats::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCCStrike15_v2_MatchmakingServerRoundStats)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint64 reservationid = 1;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_reservationid(), target);
  }

  // optional .CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve reservation = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::reservation(this),
        _Internal::reservation(this).GetCachedSize(), target, stream);
  }

  // optional string map = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_map().data(), static_cast<int>(this->_internal_map().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgGCCStrike15_v2_MatchmakingServerRoundStats.map");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_map(), target);
  }

  // optional int32 round = 4;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_round(), target);
  }

  // repeated int32 kills = 5;
  for (int i = 0, n = this->_internal_kills_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_kills(i), target);
  }

  // repeated int32 assists = 6;
  for (int i = 0, n = this->_internal_assists_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(6, this->_internal_assists(i), target);
  }

  // repeated int32 deaths = 7;
  for (int i = 0, n = this->_internal_deaths_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(7, this->_internal_deaths(i), target);
  }

  // repeated int32 scores = 8;
  for (int i = 0, n = this->_internal_scores_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(8, this->_internal_scores(i), target);
  }

  // repeated int32 pings = 9;
  for (int i = 0, n = this->_internal_pings_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(9, this->_internal_pings(i), target);
  }

  // optional int32 round_result = 10;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(10, this->_internal_round_result(), target);
  }

  // optional int32 match_result = 11;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(11, this->_internal_match_result(), target);
  }

  // repeated int32 team_scores = 12;
  for (int i = 0, n = this->_internal_team_scores_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(12, this->_internal_team_scores(i), target);
  }

  // optional .CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm confirm = 13;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(13, _Internal::confirm(this),
        _Internal::confirm(this).GetCachedSize(), target, stream);
  }

  // optional int32 reservation_stage = 14;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(14, this->_internal_reservation_stage(), target);
  }

  // optional int32 match_duration = 15;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(15, this->_internal_match_duration(), target);
  }

  // repeated int32 enemy_kills = 16;
  for (int i = 0, n = this->_internal_enemy_kills_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(16, this->_internal_enemy_kills(i), target);
  }

  // repeated int32 enemy_headshots = 17;
  for (int i = 0, n = this->_internal_enemy_headshots_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(17, this->_internal_enemy_headshots(i), target);
  }

  // repeated int32 enemy_3ks = 18;
  for (int i = 0, n = this->_internal_enemy_3ks_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(18, this->_internal_enemy_3ks(i), target);
  }

  // repeated int32 enemy_4ks = 19;
  for (int i = 0, n = this->_internal_enemy_4ks_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(19, this->_internal_enemy_4ks(i), target);
  }

  // repeated int32 enemy_5ks = 20;
  for (int i = 0, n = this->_internal_enemy_5ks_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(20, this->_internal_enemy_5ks(i), target);
  }

  // repeated int32 mvps = 21;
  for (int i = 0, n = this->_internal_mvps_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(21, this->_internal_mvps(i), target);
  }

  // optional uint32 spectators_count = 22;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(22, this->_internal_spectators_count(), target);
  }

  // optional uint32 spectators_count_tv = 23;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(23, this->_internal_spectators_count_tv(), target);
  }

  // optional uint32 spectators_count_lnk = 24;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(24, this->_internal_spectators_count_lnk(), target);
  }

  // repeated int32 enemy_kills_agg = 25;
  for (int i = 0, n = this->_internal_enemy_kills_agg_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(25, this->_internal_enemy_kills_agg(i), target);
  }

  // optional .CMsgGCCStrike15_v2_MatchmakingServerRoundStats.DropInfo drop_info = 26;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(26, _Internal::drop_info(this),
        _Internal::drop_info(this).GetCachedSize(), target, stream);
  }

  // optional bool b_switched_teams = 27;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(27, this->_internal_b_switched_teams(), target);
  }

  // repeated int32 enemy_2ks = 28;
  for (int i = 0, n = this->_internal_enemy_2ks_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(28, this->_internal_enemy_2ks(i), target);
  }

  // repeated int32 player_spawned = 29;
  for (int i = 0, n = this->_internal_player_spawned_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(29, this->_internal_player_spawned(i), target);
  }

  // repeated int32 team_spawn_count = 30;
  for (int i = 0, n = this->_internal_team_spawn_count_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(30, this->_internal_team_spawn_count(i), target);
  }

  // optional uint32 max_rounds = 31;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(31, this->_internal_max_rounds(), target);
  }

  // optional int32 map_id = 32;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(32, this->_internal_map_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCCStrike15_v2_MatchmakingServerRoundStats)
  return target;
}

size_t CMsgGCCStrike15_v2_MatchmakingServerRoundStats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCCStrike15_v2_MatchmakingServerRoundStats)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 kills = 5;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.kills_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_kills_size());
    total_size += data_size;
  }

  // repeated int32 assists = 6;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.assists_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_assists_size());
    total_size += data_size;
  }

  // repeated int32 deaths = 7;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.deaths_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_deaths_size());
    total_size += data_size;
  }

  // repeated int32 scores = 8;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.scores_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_scores_size());
    total_size += data_size;
  }

  // repeated int32 pings = 9;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.pings_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_pings_size());
    total_size += data_size;
  }

  // repeated int32 team_scores = 12;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.team_scores_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_team_scores_size());
    total_size += data_size;
  }

  // repeated int32 enemy_kills = 16;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.enemy_kills_);
    total_size += 2 *
                  ::_pbi::FromIntSize(this->_internal_enemy_kills_size());
    total_size += data_size;
  }

  // repeated int32 enemy_headshots = 17;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.enemy_headshots_);
    total_size += 2 *
                  ::_pbi::FromIntSize(this->_internal_enemy_headshots_size());
    total_size += data_size;
  }

  // repeated int32 enemy_3ks = 18;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.enemy_3ks_);
    total_size += 2 *
                  ::_pbi::FromIntSize(this->_internal_enemy_3ks_size());
    total_size += data_size;
  }

  // repeated int32 enemy_4ks = 19;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.enemy_4ks_);
    total_size += 2 *
                  ::_pbi::FromIntSize(this->_internal_enemy_4ks_size());
    total_size += data_size;
  }

  // repeated int32 enemy_5ks = 20;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.enemy_5ks_);
    total_size += 2 *
                  ::_pbi::FromIntSize(this->_internal_enemy_5ks_size());
    total_size += data_size;
  }

  // repeated int32 mvps = 21;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.mvps_);
    total_size += 2 *
                  ::_pbi::FromIntSize(this->_internal_mvps_size());
    total_size += data_size;
  }

  // repeated int32 enemy_kills_agg = 25;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.enemy_kills_agg_);
    total_size += 2 *
                  ::_pbi::FromIntSize(this->_internal_enemy_kills_agg_size());
    total_size += data_size;
  }

  // repeated int32 enemy_2ks = 28;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.enemy_2ks_);
    total_size += 2 *
                  ::_pbi::FromIntSize(this->_internal_enemy_2ks_size());
    total_size += data_size;
  }

  // repeated int32 player_spawned = 29;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.player_spawned_);
    total_size += 2 *
                  ::_pbi::FromIntSize(this->_internal_player_spawned_size());
    total_size += data_size;
  }

  // repeated int32 team_spawn_count = 30;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.team_spawn_count_);
    total_size += 2 *
                  ::_pbi::FromIntSize(this->_internal_team_spawn_count_size());
    total_size += data_size;
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string map = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_map());
    }

    // optional .CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve reservation = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.reservation_);
    }

    // optional .CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm confirm = 13;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.confirm_);
    }

    // optional .CMsgGCCStrike15_v2_MatchmakingServerRoundStats.DropInfo drop_info = 26;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.drop_info_);
    }

    // optional uint64 reservationid = 1;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_reservationid());
    }

    // optional int32 round = 4;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_round());
    }

    // optional int32 round_result = 10;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_round_result());
    }

    // optional int32 match_result = 11;
    if (cached_has_bits & 0x00000080u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_match_result());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional int32 reservation_stage = 14;
    if (cached_has_bits & 0x00000100u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_reservation_stage());
    }

    // optional int32 match_duration = 15;
    if (cached_has_bits & 0x00000200u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_match_duration());
    }

    // optional uint32 spectators_count = 22;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_spectators_count());
    }

    // optional uint32 spectators_count_tv = 23;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_spectators_count_tv());
    }

    // optional uint32 spectators_count_lnk = 24;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_spectators_count_lnk());
    }

    // optional bool b_switched_teams = 27;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 + 1;
    }

    // optional uint32 max_rounds = 31;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_max_rounds());
    }

    // optional int32 map_id = 32;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_map_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgGCCStrike15_v2_MatchmakingServerRoundStats::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgGCCStrike15_v2_MatchmakingServerRoundStats::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgGCCStrike15_v2_MatchmakingServerRoundStats::GetClassData() const { return &_class_data_; }


void CMsgGCCStrike15_v2_MatchmakingServerRoundStats::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgGCCStrike15_v2_MatchmakingServerRoundStats*>(&to_msg);
  auto& from = static_cast<const CMsgGCCStrike15_v2_MatchmakingServerRoundStats&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCCStrike15_v2_MatchmakingServerRoundStats)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.kills_.MergeFrom(from._impl_.kills_);
  _this->_impl_.assists_.MergeFrom(from._impl_.assists_);
  _this->_impl_.deaths_.MergeFrom(from._impl_.deaths_);
  _this->_impl_.scores_.MergeFrom(from._impl_.scores_);
  _this->_impl_.pings_.MergeFrom(from._impl_.pings_);
  _this->_impl_.team_scores_.MergeFrom(from._impl_.team_scores_);
  _this->_impl_.enemy_kills_.MergeFrom(from._impl_.enemy_kills_);
  _this->_impl_.enemy_headshots_.MergeFrom(from._impl_.enemy_headshots_);
  _this->_impl_.enemy_3ks_.MergeFrom(from._impl_.enemy_3ks_);
  _this->_impl_.enemy_4ks_.MergeFrom(from._impl_.enemy_4ks_);
  _this->_impl_.enemy_5ks_.MergeFrom(from._impl_.enemy_5ks_);
  _this->_impl_.mvps_.MergeFrom(from._impl_.mvps_);
  _this->_impl_.enemy_kills_agg_.MergeFrom(from._impl_.enemy_kills_agg_);
  _this->_impl_.enemy_2ks_.MergeFrom(from._impl_.enemy_2ks_);
  _this->_impl_.player_spawned_.MergeFrom(from._impl_.player_spawned_);
  _this->_impl_.team_spawn_count_.MergeFrom(from._impl_.team_spawn_count_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_map(from._internal_map());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_reservation()->::CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve::MergeFrom(
          from._internal_reservation());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_confirm()->::CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm::MergeFrom(
          from._internal_confirm());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_drop_info()->::CMsgGCCStrike15_v2_MatchmakingServerRoundStats_DropInfo::MergeFrom(
          from._internal_drop_info());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.reservationid_ = from._impl_.reservationid_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.round_ = from._impl_.round_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.round_result_ = from._impl_.round_result_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.match_result_ = from._impl_.match_result_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.reservation_stage_ = from._impl_.reservation_stage_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.match_duration_ = from._impl_.match_duration_;
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_impl_.spectators_count_ = from._impl_.spectators_count_;
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_impl_.spectators_count_tv_ = from._impl_.spectators_count_tv_;
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_impl_.spectators_count_lnk_ = from._impl_.spectators_count_lnk_;
    }
    if (cached_has_bits & 0x00002000u) {
      _this->_impl_.b_switched_teams_ = from._impl_.b_switched_teams_;
    }
    if (cached_has_bits & 0x00004000u) {
      _this->_impl_.max_rounds_ = from._impl_.max_rounds_;
    }
    if (cached_has_bits & 0x00008000u) {
      _this->_impl_.map_id_ = from._impl_.map_id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgGCCStrike15_v2_MatchmakingServerRoundStats::CopyFrom(const CMsgGCCStrike15_v2_MatchmakingServerRoundStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCCStrike15_v2_MatchmakingServerRoundStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCCStrike15_v2_MatchmakingServerRoundStats::IsInitialized() const {
  return true;
}

void CMsgGCCStrike15_v2_MatchmakingServerRoundStats::InternalSwap(CMsgGCCStrike15_v2_MatchmakingServerRoundStats* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.kills_.InternalSwap(&other->_impl_.kills_);
  _impl_.assists_.InternalSwap(&other->_impl_.assists_);
  _impl_.deaths_.InternalSwap(&other->_impl_.deaths_);
  _impl_.scores_.InternalSwap(&other->_impl_.scores_);
  _impl_.pings_.InternalSwap(&other->_impl_.pings_);
  _impl_.team_scores_.InternalSwap(&other->_impl_.team_scores_);
  _impl_.enemy_kills_.InternalSwap(&other->_impl_.enemy_kills_);
  _impl_.enemy_headshots_.InternalSwap(&other->_impl_.enemy_headshots_);
  _impl_.enemy_3ks_.InternalSwap(&other->_impl_.enemy_3ks_);
  _impl_.enemy_4ks_.InternalSwap(&other->_impl_.enemy_4ks_);
  _impl_.enemy_5ks_.InternalSwap(&other->_impl_.enemy_5ks_);
  _impl_.mvps_.InternalSwap(&other->_impl_.mvps_);
  _impl_.enemy_kills_agg_.InternalSwap(&other->_impl_.enemy_kills_agg_);
  _impl_.enemy_2ks_.InternalSwap(&other->_impl_.enemy_2ks_);
  _impl_.player_spawned_.InternalSwap(&other->_impl_.player_spawned_);
  _impl_.team_spawn_count_.InternalSwap(&other->_impl_.team_spawn_count_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.map_, lhs_arena,
      &other->_impl_.map_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgGCCStrike15_v2_MatchmakingServerRoundStats, _impl_.map_id_)
      + sizeof(CMsgGCCStrike15_v2_MatchmakingServerRoundStats::_impl_.map_id_)
      - PROTOBUF_FIELD_OFFSET(CMsgGCCStrike15_v2_MatchmakingServerRoundStats, _impl_.reservation_)>(
          reinterpret_cast<char*>(&_impl_.reservation_),
          reinterpret_cast<char*>(&other->_impl_.reservation_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCCStrike15_v2_MatchmakingServerRoundStats::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cstrike15_5fgcmessages_2eproto_getter, &descriptor_table_cstrike15_5fgcmessages_2eproto_once,
      file_level_metadata_cstrike15_5fgcmessages_2eproto[45]);
}

// ===================================================================

class CMsgGCCStrike15_v2_MatchmakingClient2GCHello::_Internal {
 public:
};

CMsgGCCStrike15_v2_MatchmakingClient2GCHello::CMsgGCCStrike15_v2_MatchmakingClient2GCHello(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:CMsgGCCStrike15_v2_MatchmakingClient2GCHello)
}
CMsgGCCStrike15_v2_MatchmakingClient2GCHello::CMsgGCCStrike15_v2_MatchmakingClient2GCHello(const CMsgGCCStrike15_v2_MatchmakingClient2GCHello& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  CMsgGCCStrike15_v2_MatchmakingClient2GCHello* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgGCCStrike15_v2_MatchmakingClient2GCHello)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgGCCStrike15_v2_MatchmakingClient2GCHello::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgGCCStrike15_v2_MatchmakingClient2GCHello::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCCStrike15_v2_MatchmakingClient2GCHello::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cstrike15_5fgcmessages_2eproto_getter, &descriptor_table_cstrike15_5fgcmessages_2eproto_once,
      file_level_metadata_cstrike15_5fgcmessages_2eproto[46]);
}

// ===================================================================

class CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCCStrike15_v2_MatchmakingGC2ClientHello>()._impl_._has_bits_);
  static void set_has_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve& ongoingmatch(const CMsgGCCStrike15_v2_MatchmakingGC2ClientHello* msg);
  static void set_has_ongoingmatch(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::GlobalStatistics& global_stats(const CMsgGCCStrike15_v2_MatchmakingGC2ClientHello* msg);
  static void set_has_global_stats(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_penalty_seconds(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_penalty_reason(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_vac_banned(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static const ::PlayerRankingInfo& ranking(const CMsgGCCStrike15_v2_MatchmakingGC2ClientHello* msg);
  static void set_has_ranking(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::PlayerCommendationInfo& commendation(const CMsgGCCStrike15_v2_MatchmakingGC2ClientHello* msg);
  static void set_has_commendation(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::PlayerMedalsInfo& medals(const CMsgGCCStrike15_v2_MatchmakingGC2ClientHello* msg);
  static void set_has_medals(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::TournamentEvent& my_current_event(const CMsgGCCStrike15_v2_MatchmakingGC2ClientHello* msg);
  static void set_has_my_current_event(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::TournamentTeam& my_current_team(const CMsgGCCStrike15_v2_MatchmakingGC2ClientHello* msg);
  static void set_has_my_current_team(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_survey_vote(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static const ::AccountActivity& activity(const CMsgGCCStrike15_v2_MatchmakingGC2ClientHello* msg);
  static void set_has_activity(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_player_level(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_player_cur_xp(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_player_xp_bonus_flags(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_owcaseid(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
};

const ::CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve&
CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::_Internal::ongoingmatch(const CMsgGCCStrike15_v2_MatchmakingGC2ClientHello* msg) {
  return *msg->_impl_.ongoingmatch_;
}
const ::GlobalStatistics&
CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::_Internal::global_stats(const CMsgGCCStrike15_v2_MatchmakingGC2ClientHello* msg) {
  return *msg->_impl_.global_stats_;
}
const ::PlayerRankingInfo&
CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::_Internal::ranking(const CMsgGCCStrike15_v2_MatchmakingGC2ClientHello* msg) {
  return *msg->_impl_.ranking_;
}
const ::PlayerCommendationInfo&
CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::_Internal::commendation(const CMsgGCCStrike15_v2_MatchmakingGC2ClientHello* msg) {
  return *msg->_impl_.commendation_;
}
const ::PlayerMedalsInfo&
CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::_Internal::medals(const CMsgGCCStrike15_v2_MatchmakingGC2ClientHello* msg) {
  return *msg->_impl_.medals_;
}
const ::TournamentEvent&
CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::_Internal::my_current_event(const CMsgGCCStrike15_v2_MatchmakingGC2ClientHello* msg) {
  return *msg->_impl_.my_current_event_;
}
const ::TournamentTeam&
CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::_Internal::my_current_team(const CMsgGCCStrike15_v2_MatchmakingGC2ClientHello* msg) {
  return *msg->_impl_.my_current_team_;
}
const ::AccountActivity&
CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::_Internal::activity(const CMsgGCCStrike15_v2_MatchmakingGC2ClientHello* msg) {
  return *msg->_impl_.activity_;
}
CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::CMsgGCCStrike15_v2_MatchmakingGC2ClientHello(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgGCCStrike15_v2_MatchmakingGC2ClientHello)
}
CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::CMsgGCCStrike15_v2_MatchmakingGC2ClientHello(const CMsgGCCStrike15_v2_MatchmakingGC2ClientHello& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgGCCStrike15_v2_MatchmakingGC2ClientHello* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.my_current_event_teams_){from._impl_.my_current_event_teams_}
    , decltype(_impl_.my_current_event_stages_){from._impl_.my_current_event_stages_}
    , decltype(_impl_.rankings_){from._impl_.rankings_}
    , decltype(_impl_.ongoingmatch_){nullptr}
    , decltype(_impl_.global_stats_){nullptr}
    , decltype(_impl_.ranking_){nullptr}
    , decltype(_impl_.commendation_){nullptr}
    , decltype(_impl_.medals_){nullptr}
    , decltype(_impl_.my_current_event_){nullptr}
    , decltype(_impl_.my_current_team_){nullptr}
    , decltype(_impl_.activity_){nullptr}
    , decltype(_impl_.account_id_){}
    , decltype(_impl_.penalty_seconds_){}
    , decltype(_impl_.penalty_reason_){}
    , decltype(_impl_.vac_banned_){}
    , decltype(_impl_.survey_vote_){}
    , decltype(_impl_.player_level_){}
    , decltype(_impl_.player_cur_xp_){}
    , decltype(_impl_.player_xp_bonus_flags_){}
    , decltype(_impl_.owcaseid_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_ongoingmatch()) {
    _this->_impl_.ongoingmatch_ = new ::CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve(*from._impl_.ongoingmatch_);
  }
  if (from._internal_has_global_stats()) {
    _this->_impl_.global_stats_ = new ::GlobalStatistics(*from._impl_.global_stats_);
  }
  if (from._internal_has_ranking()) {
    _this->_impl_.ranking_ = new ::PlayerRankingInfo(*from._impl_.ranking_);
  }
  if (from._internal_has_commendation()) {
    _this->_impl_.commendation_ = new ::PlayerCommendationInfo(*from._impl_.commendation_);
  }
  if (from._internal_has_medals()) {
    _this->_impl_.medals_ = new ::PlayerMedalsInfo(*from._impl_.medals_);
  }
  if (from._internal_has_my_current_event()) {
    _this->_impl_.my_current_event_ = new ::TournamentEvent(*from._impl_.my_current_event_);
  }
  if (from._internal_has_my_current_team()) {
    _this->_impl_.my_current_team_ = new ::TournamentTeam(*from._impl_.my_current_team_);
  }
  if (from._internal_has_activity()) {
    _this->_impl_.activity_ = new ::AccountActivity(*from._impl_.activity_);
  }
  ::memcpy(&_impl_.account_id_, &from._impl_.account_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.owcaseid_) -
    reinterpret_cast<char*>(&_impl_.account_id_)) + sizeof(_impl_.owcaseid_));
  // @@protoc_insertion_point(copy_constructor:CMsgGCCStrike15_v2_MatchmakingGC2ClientHello)
}

inline void CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.my_current_event_teams_){arena}
    , decltype(_impl_.my_current_event_stages_){arena}
    , decltype(_impl_.rankings_){arena}
    , decltype(_impl_.ongoingmatch_){nullptr}
    , decltype(_impl_.global_stats_){nullptr}
    , decltype(_impl_.ranking_){nullptr}
    , decltype(_impl_.commendation_){nullptr}
    , decltype(_impl_.medals_){nullptr}
    , decltype(_impl_.my_current_event_){nullptr}
    , decltype(_impl_.my_current_team_){nullptr}
    , decltype(_impl_.activity_){nullptr}
    , decltype(_impl_.account_id_){0u}
    , decltype(_impl_.penalty_seconds_){0u}
    , decltype(_impl_.penalty_reason_){0u}
    , decltype(_impl_.vac_banned_){0}
    , decltype(_impl_.survey_vote_){0u}
    , decltype(_impl_.player_level_){0}
    , decltype(_impl_.player_cur_xp_){0}
    , decltype(_impl_.player_xp_bonus_flags_){0}
    , decltype(_impl_.owcaseid_){uint64_t{0u}}
  };
}

CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::~CMsgGCCStrike15_v2_MatchmakingGC2ClientHello() {
  // @@protoc_insertion_point(destructor:CMsgGCCStrike15_v2_MatchmakingGC2ClientHello)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.my_current_event_teams_.~RepeatedPtrField();
  _impl_.my_current_event_stages_.~RepeatedPtrField();
  _impl_.rankings_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.ongoingmatch_;
  if (this != internal_default_instance()) delete _impl_.global_stats_;
  if (this != internal_default_instance()) delete _impl_.ranking_;
  if (this != internal_default_instance()) delete _impl_.commendation_;
  if (this != internal_default_instance()) delete _impl_.medals_;
  if (this != internal_default_instance()) delete _impl_.my_current_event_;
  if (this != internal_default_instance()) delete _impl_.my_current_team_;
  if (this != internal_default_instance()) delete _impl_.activity_;
}

void CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCCStrike15_v2_MatchmakingGC2ClientHello)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.my_current_event_teams_.Clear();
  _impl_.my_current_event_stages_.Clear();
  _impl_.rankings_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.ongoingmatch_ != nullptr);
      _impl_.ongoingmatch_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.global_stats_ != nullptr);
      _impl_.global_stats_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.ranking_ != nullptr);
      _impl_.ranking_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.commendation_ != nullptr);
      _impl_.commendation_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(_impl_.medals_ != nullptr);
      _impl_.medals_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(_impl_.my_current_event_ != nullptr);
      _impl_.my_current_event_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(_impl_.my_current_team_ != nullptr);
      _impl_.my_current_team_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(_impl_.activity_ != nullptr);
      _impl_.activity_->Clear();
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&_impl_.account_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.player_xp_bonus_flags_) -
        reinterpret_cast<char*>(&_impl_.account_id_)) + sizeof(_impl_.player_xp_bonus_flags_));
  }
  _impl_.owcaseid_ = uint64_t{0u};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 account_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_account_id(&has_bits);
          _impl_.account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve ongoingmatch = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_ongoingmatch(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .GlobalStatistics global_stats = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_global_stats(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 penalty_seconds = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_penalty_seconds(&has_bits);
          _impl_.penalty_seconds_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 penalty_reason = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_penalty_reason(&has_bits);
          _impl_.penalty_reason_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 vac_banned = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_vac_banned(&has_bits);
          _impl_.vac_banned_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .PlayerRankingInfo ranking = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_ranking(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .PlayerCommendationInfo commendation = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_commendation(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .PlayerMedalsInfo medals = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_medals(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TournamentEvent my_current_event = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_my_current_event(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .TournamentTeam my_current_event_teams = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_my_current_event_teams(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<90>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .TournamentTeam my_current_team = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_my_current_team(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .TournamentEvent my_current_event_stages = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_my_current_event_stages(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<106>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional uint32 survey_vote = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          _Internal::set_has_survey_vote(&has_bits);
          _impl_.survey_vote_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .AccountActivity activity = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_activity(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 player_level = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          _Internal::set_has_player_level(&has_bits);
          _impl_.player_level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 player_cur_xp = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 144)) {
          _Internal::set_has_player_cur_xp(&has_bits);
          _impl_.player_cur_xp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 player_xp_bonus_flags = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 152)) {
          _Internal::set_has_player_xp_bonus_flags(&has_bits);
          _impl_.player_xp_bonus_flags_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .PlayerRankingInfo rankings = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_rankings(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<162>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional uint64 owcaseid = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 168)) {
          _Internal::set_has_owcaseid(&has_bits);
          _impl_.owcaseid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCCStrike15_v2_MatchmakingGC2ClientHello)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_account_id(), target);
  }

  // optional .CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve ongoingmatch = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::ongoingmatch(this),
        _Internal::ongoingmatch(this).GetCachedSize(), target, stream);
  }

  // optional .GlobalStatistics global_stats = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::global_stats(this),
        _Internal::global_stats(this).GetCachedSize(), target, stream);
  }

  // optional uint32 penalty_seconds = 4;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_penalty_seconds(), target);
  }

  // optional uint32 penalty_reason = 5;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_penalty_reason(), target);
  }

  // optional int32 vac_banned = 6;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(6, this->_internal_vac_banned(), target);
  }

  // optional .PlayerRankingInfo ranking = 7;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::ranking(this),
        _Internal::ranking(this).GetCachedSize(), target, stream);
  }

  // optional .PlayerCommendationInfo commendation = 8;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::commendation(this),
        _Internal::commendation(this).GetCachedSize(), target, stream);
  }

  // optional .PlayerMedalsInfo medals = 9;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::medals(this),
        _Internal::medals(this).GetCachedSize(), target, stream);
  }

  // optional .TournamentEvent my_current_event = 10;
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, _Internal::my_current_event(this),
        _Internal::my_current_event(this).GetCachedSize(), target, stream);
  }

  // repeated .TournamentTeam my_current_event_teams = 11;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_my_current_event_teams_size()); i < n; i++) {
    const auto& repfield = this->_internal_my_current_event_teams(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(11, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional .TournamentTeam my_current_team = 12;
  if (cached_has_bits & 0x00000040u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(12, _Internal::my_current_team(this),
        _Internal::my_current_team(this).GetCachedSize(), target, stream);
  }

  // repeated .TournamentEvent my_current_event_stages = 13;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_my_current_event_stages_size()); i < n; i++) {
    const auto& repfield = this->_internal_my_current_event_stages(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(13, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional uint32 survey_vote = 14;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(14, this->_internal_survey_vote(), target);
  }

  // optional .AccountActivity activity = 15;
  if (cached_has_bits & 0x00000080u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(15, _Internal::activity(this),
        _Internal::activity(this).GetCachedSize(), target, stream);
  }

  // optional int32 player_level = 17;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(17, this->_internal_player_level(), target);
  }

  // optional int32 player_cur_xp = 18;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(18, this->_internal_player_cur_xp(), target);
  }

  // optional int32 player_xp_bonus_flags = 19;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(19, this->_internal_player_xp_bonus_flags(), target);
  }

  // repeated .PlayerRankingInfo rankings = 20;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_rankings_size()); i < n; i++) {
    const auto& repfield = this->_internal_rankings(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(20, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional uint64 owcaseid = 21;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(21, this->_internal_owcaseid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCCStrike15_v2_MatchmakingGC2ClientHello)
  return target;
}

size_t CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCCStrike15_v2_MatchmakingGC2ClientHello)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TournamentTeam my_current_event_teams = 11;
  total_size += 1UL * this->_internal_my_current_event_teams_size();
  for (const auto& msg : this->_impl_.my_current_event_teams_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TournamentEvent my_current_event_stages = 13;
  total_size += 1UL * this->_internal_my_current_event_stages_size();
  for (const auto& msg : this->_impl_.my_current_event_stages_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .PlayerRankingInfo rankings = 20;
  total_size += 2UL * this->_internal_rankings_size();
  for (const auto& msg : this->_impl_.rankings_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve ongoingmatch = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.ongoingmatch_);
    }

    // optional .GlobalStatistics global_stats = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.global_stats_);
    }

    // optional .PlayerRankingInfo ranking = 7;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.ranking_);
    }

    // optional .PlayerCommendationInfo commendation = 8;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.commendation_);
    }

    // optional .PlayerMedalsInfo medals = 9;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.medals_);
    }

    // optional .TournamentEvent my_current_event = 10;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.my_current_event_);
    }

    // optional .TournamentTeam my_current_team = 12;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.my_current_team_);
    }

    // optional .AccountActivity activity = 15;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.activity_);
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional uint32 account_id = 1;
    if (cached_has_bits & 0x00000100u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_account_id());
    }

    // optional uint32 penalty_seconds = 4;
    if (cached_has_bits & 0x00000200u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_penalty_seconds());
    }

    // optional uint32 penalty_reason = 5;
    if (cached_has_bits & 0x00000400u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_penalty_reason());
    }

    // optional int32 vac_banned = 6;
    if (cached_has_bits & 0x00000800u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_vac_banned());
    }

    // optional uint32 survey_vote = 14;
    if (cached_has_bits & 0x00001000u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_survey_vote());
    }

    // optional int32 player_level = 17;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_player_level());
    }

    // optional int32 player_cur_xp = 18;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_player_cur_xp());
    }

    // optional int32 player_xp_bonus_flags = 19;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_player_xp_bonus_flags());
    }

  }
  // optional uint64 owcaseid = 21;
  if (cached_has_bits & 0x00010000u) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt64Size(
        this->_internal_owcaseid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::GetClassData() const { return &_class_data_; }


void CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgGCCStrike15_v2_MatchmakingGC2ClientHello*>(&to_msg);
  auto& from = static_cast<const CMsgGCCStrike15_v2_MatchmakingGC2ClientHello&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCCStrike15_v2_MatchmakingGC2ClientHello)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.my_current_event_teams_.MergeFrom(from._impl_.my_current_event_teams_);
  _this->_impl_.my_current_event_stages_.MergeFrom(from._impl_.my_current_event_stages_);
  _this->_impl_.rankings_.MergeFrom(from._impl_.rankings_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_ongoingmatch()->::CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve::MergeFrom(
          from._internal_ongoingmatch());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_global_stats()->::GlobalStatistics::MergeFrom(
          from._internal_global_stats());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_ranking()->::PlayerRankingInfo::MergeFrom(
          from._internal_ranking());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_commendation()->::PlayerCommendationInfo::MergeFrom(
          from._internal_commendation());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_mutable_medals()->::PlayerMedalsInfo::MergeFrom(
          from._internal_medals());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_internal_mutable_my_current_event()->::TournamentEvent::MergeFrom(
          from._internal_my_current_event());
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_internal_mutable_my_current_team()->::TournamentTeam::MergeFrom(
          from._internal_my_current_team());
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_internal_mutable_activity()->::AccountActivity::MergeFrom(
          from._internal_activity());
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.account_id_ = from._impl_.account_id_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.penalty_seconds_ = from._impl_.penalty_seconds_;
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_impl_.penalty_reason_ = from._impl_.penalty_reason_;
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_impl_.vac_banned_ = from._impl_.vac_banned_;
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_impl_.survey_vote_ = from._impl_.survey_vote_;
    }
    if (cached_has_bits & 0x00002000u) {
      _this->_impl_.player_level_ = from._impl_.player_level_;
    }
    if (cached_has_bits & 0x00004000u) {
      _this->_impl_.player_cur_xp_ = from._impl_.player_cur_xp_;
    }
    if (cached_has_bits & 0x00008000u) {
      _this->_impl_.player_xp_bonus_flags_ = from._impl_.player_xp_bonus_flags_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00010000u) {
    _this->_internal_set_owcaseid(from._internal_owcaseid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::CopyFrom(const CMsgGCCStrike15_v2_MatchmakingGC2ClientHello& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCCStrike15_v2_MatchmakingGC2ClientHello)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::IsInitialized() const {
  return true;
}

void CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::InternalSwap(CMsgGCCStrike15_v2_MatchmakingGC2ClientHello* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.my_current_event_teams_.InternalSwap(&other->_impl_.my_current_event_teams_);
  _impl_.my_current_event_stages_.InternalSwap(&other->_impl_.my_current_event_stages_);
  _impl_.rankings_.InternalSwap(&other->_impl_.rankings_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgGCCStrike15_v2_MatchmakingGC2ClientHello, _impl_.owcaseid_)
      + sizeof(CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::_impl_.owcaseid_)
      - PROTOBUF_FIELD_OFFSET(CMsgGCCStrike15_v2_MatchmakingGC2ClientHello, _impl_.ongoingmatch_)>(
          reinterpret_cast<char*>(&_impl_.ongoingmatch_),
          reinterpret_cast<char*>(&other->_impl_.ongoingmatch_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCCStrike15_v2_MatchmakingGC2ClientHello::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cstrike15_5fgcmessages_2eproto_getter, &descriptor_table_cstrike15_5fgcmessages_2eproto_once,
      file_level_metadata_cstrike15_5fgcmessages_2eproto[47]);
}

// ===================================================================

class CMsgGCCStrike15_v2_AccountPrivacySettings_Setting::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCCStrike15_v2_AccountPrivacySettings_Setting>()._impl_._has_bits_);
  static void set_has_setting_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_setting_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgGCCStrike15_v2_AccountPrivacySettings_Setting::CMsgGCCStrike15_v2_AccountPrivacySettings_Setting(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgGCCStrike15_v2_AccountPrivacySettings.Setting)
}
CMsgGCCStrike15_v2_AccountPrivacySettings_Setting::CMsgGCCStrike15_v2_AccountPrivacySettings_Setting(const CMsgGCCStrike15_v2_AccountPrivacySettings_Setting& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgGCCStrike15_v2_AccountPrivacySettings_Setting* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.setting_type_){}
    , decltype(_impl_.setting_value_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.setting_type_, &from._impl_.setting_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.setting_value_) -
    reinterpret_cast<char*>(&_impl_.setting_type_)) + sizeof(_impl_.setting_value_));
  // @@protoc_insertion_point(copy_constructor:CMsgGCCStrike15_v2_AccountPrivacySettings.Setting)
}

inline void CMsgGCCStrike15_v2_AccountPrivacySettings_Setting::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.setting_type_){0u}
    , decltype(_impl_.setting_value_){0u}
  };
}

CMsgGCCStrike15_v2_AccountPrivacySettings_Setting::~CMsgGCCStrike15_v2_AccountPrivacySettings_Setting() {
  // @@protoc_insertion_point(destructor:CMsgGCCStrike15_v2_AccountPrivacySettings.Setting)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgGCCStrike15_v2_AccountPrivacySettings_Setting::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgGCCStrike15_v2_AccountPrivacySettings_Setting::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgGCCStrike15_v2_AccountPrivacySettings_Setting::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCCStrike15_v2_AccountPrivacySettings.Setting)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.setting_type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.setting_value_) -
        reinterpret_cast<char*>(&_impl_.setting_type_)) + sizeof(_impl_.setting_value_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCCStrike15_v2_AccountPrivacySettings_Setting::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 setting_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_setting_type(&has_bits);
          _impl_.setting_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 setting_value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_setting_value(&has_bits);
          _impl_.setting_value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgGCCStrike15_v2_AccountPrivacySettings_Setting::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCCStrike15_v2_AccountPrivacySettings.Setting)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 setting_type = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_setting_type(), target);
  }

  // optional uint32 setting_value = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_setting_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCCStrike15_v2_AccountPrivacySettings.Setting)
  return target;
}

size_t CMsgGCCStrike15_v2_AccountPrivacySettings_Setting::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCCStrike15_v2_AccountPrivacySettings.Setting)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 setting_type = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_setting_type());
    }

    // optional uint32 setting_value = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_setting_value());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgGCCStrike15_v2_AccountPrivacySettings_Setting::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgGCCStrike15_v2_AccountPrivacySettings_Setting::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgGCCStrike15_v2_AccountPrivacySettings_Setting::GetClassData() const { return &_class_data_; }


void CMsgGCCStrike15_v2_AccountPrivacySettings_Setting::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgGCCStrike15_v2_AccountPrivacySettings_Setting*>(&to_msg);
  auto& from = static_cast<const CMsgGCCStrike15_v2_AccountPrivacySettings_Setting&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCCStrike15_v2_AccountPrivacySettings.Setting)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.setting_type_ = from._impl_.setting_type_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.setting_value_ = from._impl_.setting_value_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgGCCStrike15_v2_AccountPrivacySettings_Setting::CopyFrom(const CMsgGCCStrike15_v2_AccountPrivacySettings_Setting& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCCStrike15_v2_AccountPrivacySettings.Setting)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCCStrike15_v2_AccountPrivacySettings_Setting::IsInitialized() const {
  return true;
}

void CMsgGCCStrike15_v2_AccountPrivacySettings_Setting::InternalSwap(CMsgGCCStrike15_v2_AccountPrivacySettings_Setting* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgGCCStrike15_v2_AccountPrivacySettings_Setting, _impl_.setting_value_)
      + sizeof(CMsgGCCStrike15_v2_AccountPrivacySettings_Setting::_impl_.setting_value_)
      - PROTOBUF_FIELD_OFFSET(CMsgGCCStrike15_v2_AccountPrivacySettings_Setting, _impl_.setting_type_)>(
          reinterpret_cast<char*>(&_impl_.setting_type_),
          reinterpret_cast<char*>(&other->_impl_.setting_type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCCStrike15_v2_AccountPrivacySettings_Setting::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cstrike15_5fgcmessages_2eproto_getter, &descriptor_table_cstrike15_5fgcmessages_2eproto_once,
      file_level_metadata_cstrike15_5fgcmessages_2eproto[48]);
}

// ===================================================================

class CMsgGCCStrike15_v2_AccountPrivacySettings::_Internal {
 public:
};

CMsgGCCStrike15_v2_AccountPrivacySettings::CMsgGCCStrike15_v2_AccountPrivacySettings(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgGCCStrike15_v2_AccountPrivacySettings)
}
CMsgGCCStrike15_v2_AccountPrivacySettings::CMsgGCCStrike15_v2_AccountPrivacySettings(const CMsgGCCStrike15_v2_AccountPrivacySettings& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgGCCStrike15_v2_AccountPrivacySettings* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.settings_){from._impl_.settings_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgGCCStrike15_v2_AccountPrivacySettings)
}

inline void CMsgGCCStrike15_v2_AccountPrivacySettings::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.settings_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CMsgGCCStrike15_v2_AccountPrivacySettings::~CMsgGCCStrike15_v2_AccountPrivacySettings() {
  // @@protoc_insertion_point(destructor:CMsgGCCStrike15_v2_AccountPrivacySettings)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgGCCStrike15_v2_AccountPrivacySettings::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.settings_.~RepeatedPtrField();
}

void CMsgGCCStrike15_v2_AccountPrivacySettings::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgGCCStrike15_v2_AccountPrivacySettings::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCCStrike15_v2_AccountPrivacySettings)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.settings_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCCStrike15_v2_AccountPrivacySettings::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .CMsgGCCStrike15_v2_AccountPrivacySettings.Setting settings = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_settings(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgGCCStrike15_v2_AccountPrivacySettings::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCCStrike15_v2_AccountPrivacySettings)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CMsgGCCStrike15_v2_AccountPrivacySettings.Setting settings = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_settings_size()); i < n; i++) {
    const auto& repfield = this->_internal_settings(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCCStrike15_v2_AccountPrivacySettings)
  return target;
}

size_t CMsgGCCStrike15_v2_AccountPrivacySettings::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCCStrike15_v2_AccountPrivacySettings)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgGCCStrike15_v2_AccountPrivacySettings.Setting settings = 1;
  total_size += 1UL * this->_internal_settings_size();
  for (const auto& msg : this->_impl_.settings_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgGCCStrike15_v2_AccountPrivacySettings::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgGCCStrike15_v2_AccountPrivacySettings::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgGCCStrike15_v2_AccountPrivacySettings::GetClassData() const { return &_class_data_; }


void CMsgGCCStrike15_v2_AccountPrivacySettings::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgGCCStrike15_v2_AccountPrivacySettings*>(&to_msg);
  auto& from = static_cast<const CMsgGCCStrike15_v2_AccountPrivacySettings&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCCStrike15_v2_AccountPrivacySettings)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.settings_.MergeFrom(from._impl_.settings_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgGCCStrike15_v2_AccountPrivacySettings::CopyFrom(const CMsgGCCStrike15_v2_AccountPrivacySettings& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCCStrike15_v2_AccountPrivacySettings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCCStrike15_v2_AccountPrivacySettings::IsInitialized() const {
  return true;
}

void CMsgGCCStrike15_v2_AccountPrivacySettings::InternalSwap(CMsgGCCStrike15_v2_AccountPrivacySettings* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.settings_.InternalSwap(&other->_impl_.settings_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCCStrike15_v2_AccountPrivacySettings::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cstrike15_5fgcmessages_2eproto_getter, &descriptor_table_cstrike15_5fgcmessages_2eproto_once,
      file_level_metadata_cstrike15_5fgcmessages_2eproto[49]);
}

// ===================================================================

class CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon>()._impl_._has_bits_);
  static void set_has_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve& abandoned_match(const CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon* msg);
  static void set_has_abandoned_match(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_penalty_seconds(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_penalty_reason(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve&
CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon::_Internal::abandoned_match(const CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon* msg) {
  return *msg->_impl_.abandoned_match_;
}
CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon::CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon)
}
CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon::CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon(const CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.abandoned_match_){nullptr}
    , decltype(_impl_.account_id_){}
    , decltype(_impl_.penalty_seconds_){}
    , decltype(_impl_.penalty_reason_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_abandoned_match()) {
    _this->_impl_.abandoned_match_ = new ::CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve(*from._impl_.abandoned_match_);
  }
  ::memcpy(&_impl_.account_id_, &from._impl_.account_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.penalty_reason_) -
    reinterpret_cast<char*>(&_impl_.account_id_)) + sizeof(_impl_.penalty_reason_));
  // @@protoc_insertion_point(copy_constructor:CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon)
}

inline void CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.abandoned_match_){nullptr}
    , decltype(_impl_.account_id_){0u}
    , decltype(_impl_.penalty_seconds_){0u}
    , decltype(_impl_.penalty_reason_){0u}
  };
}

CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon::~CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon() {
  // @@protoc_insertion_point(destructor:CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.abandoned_match_;
}

void CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.abandoned_match_ != nullptr);
    _impl_.abandoned_match_->Clear();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&_impl_.account_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.penalty_reason_) -
        reinterpret_cast<char*>(&_impl_.account_id_)) + sizeof(_impl_.penalty_reason_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 account_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_account_id(&has_bits);
          _impl_.account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve abandoned_match = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_abandoned_match(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 penalty_seconds = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_penalty_seconds(&has_bits);
          _impl_.penalty_seconds_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 penalty_reason = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_penalty_reason(&has_bits);
          _impl_.penalty_reason_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_account_id(), target);
  }

  // optional .CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve abandoned_match = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::abandoned_match(this),
        _Internal::abandoned_match(this).GetCachedSize(), target, stream);
  }

  // optional uint32 penalty_seconds = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_penalty_seconds(), target);
  }

  // optional uint32 penalty_reason = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_penalty_reason(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon)
  return target;
}

size_t CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve abandoned_match = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.abandoned_match_);
    }

    // optional uint32 account_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_account_id());
    }

    // optional uint32 penalty_seconds = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_penalty_seconds());
    }

    // optional uint32 penalty_reason = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_penalty_reason());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon::GetClassData() const { return &_class_data_; }


void CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon*>(&to_msg);
  auto& from = static_cast<const CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_abandoned_match()->::CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve::MergeFrom(
          from._internal_abandoned_match());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.account_id_ = from._impl_.account_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.penalty_seconds_ = from._impl_.penalty_seconds_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.penalty_reason_ = from._impl_.penalty_reason_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon::CopyFrom(const CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon::IsInitialized() const {
  return true;
}

void CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon::InternalSwap(CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon, _impl_.penalty_reason_)
      + sizeof(CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon::_impl_.penalty_reason_)
      - PROTOBUF_FIELD_OFFSET(CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon, _impl_.abandoned_match_)>(
          reinterpret_cast<char*>(&_impl_.abandoned_match_),
          reinterpret_cast<char*>(&other->_impl_.abandoned_match_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cstrike15_5fgcmessages_2eproto_getter, &descriptor_table_cstrike15_5fgcmessages_2eproto_once,
      file_level_metadata_cstrike15_5fgcmessages_2eproto[50]);
}

// ===================================================================

class CMsgGCCStrike15_v2_ClientGCRankUpdate::_Internal {
 public:
};

CMsgGCCStrike15_v2_ClientGCRankUpdate::CMsgGCCStrike15_v2_ClientGCRankUpdate(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgGCCStrike15_v2_ClientGCRankUpdate)
}
CMsgGCCStrike15_v2_ClientGCRankUpdate::CMsgGCCStrike15_v2_ClientGCRankUpdate(const CMsgGCCStrike15_v2_ClientGCRankUpdate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgGCCStrike15_v2_ClientGCRankUpdate* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.rankings_){from._impl_.rankings_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgGCCStrike15_v2_ClientGCRankUpdate)
}

inline void CMsgGCCStrike15_v2_ClientGCRankUpdate::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.rankings_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CMsgGCCStrike15_v2_ClientGCRankUpdate::~CMsgGCCStrike15_v2_ClientGCRankUpdate() {
  // @@protoc_insertion_point(destructor:CMsgGCCStrike15_v2_ClientGCRankUpdate)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgGCCStrike15_v2_ClientGCRankUpdate::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.rankings_.~RepeatedPtrField();
}

void CMsgGCCStrike15_v2_ClientGCRankUpdate::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgGCCStrike15_v2_ClientGCRankUpdate::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCCStrike15_v2_ClientGCRankUpdate)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.rankings_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCCStrike15_v2_ClientGCRankUpdate::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .PlayerRankingInfo rankings = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_rankings(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgGCCStrike15_v2_ClientGCRankUpdate::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCCStrike15_v2_ClientGCRankUpdate)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .PlayerRankingInfo rankings = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_rankings_size()); i < n; i++) {
    const auto& repfield = this->_internal_rankings(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCCStrike15_v2_ClientGCRankUpdate)
  return target;
}

size_t CMsgGCCStrike15_v2_ClientGCRankUpdate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCCStrike15_v2_ClientGCRankUpdate)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .PlayerRankingInfo rankings = 1;
  total_size += 1UL * this->_internal_rankings_size();
  for (const auto& msg : this->_impl_.rankings_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgGCCStrike15_v2_ClientGCRankUpdate::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgGCCStrike15_v2_ClientGCRankUpdate::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgGCCStrike15_v2_ClientGCRankUpdate::GetClassData() const { return &_class_data_; }


void CMsgGCCStrike15_v2_ClientGCRankUpdate::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgGCCStrike15_v2_ClientGCRankUpdate*>(&to_msg);
  auto& from = static_cast<const CMsgGCCStrike15_v2_ClientGCRankUpdate&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCCStrike15_v2_ClientGCRankUpdate)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.rankings_.MergeFrom(from._impl_.rankings_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgGCCStrike15_v2_ClientGCRankUpdate::CopyFrom(const CMsgGCCStrike15_v2_ClientGCRankUpdate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCCStrike15_v2_ClientGCRankUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCCStrike15_v2_ClientGCRankUpdate::IsInitialized() const {
  return true;
}

void CMsgGCCStrike15_v2_ClientGCRankUpdate::InternalSwap(CMsgGCCStrike15_v2_ClientGCRankUpdate* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.rankings_.InternalSwap(&other->_impl_.rankings_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCCStrike15_v2_ClientGCRankUpdate::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cstrike15_5fgcmessages_2eproto_getter, &descriptor_table_cstrike15_5fgcmessages_2eproto_once,
      file_level_metadata_cstrike15_5fgcmessages_2eproto[51]);
}

// ===================================================================

class CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate>()._impl_._has_bits_);
  static void set_has_main_post_url(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate::CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate)
}
CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate::CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate(const CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.main_post_url_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.main_post_url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.main_post_url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_main_post_url()) {
    _this->_impl_.main_post_url_.Set(from._internal_main_post_url(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate)
}

inline void CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.main_post_url_){}
  };
  _impl_.main_post_url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.main_post_url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate::~CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate() {
  // @@protoc_insertion_point(destructor:CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.main_post_url_.Destroy();
}

void CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.main_post_url_.ClearNonDefaultToEmpty();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string main_post_url = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_main_post_url();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate.main_post_url");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string main_post_url = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_main_post_url().data(), static_cast<int>(this->_internal_main_post_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate.main_post_url");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_main_post_url(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate)
  return target;
}

size_t CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string main_post_url = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_main_post_url());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate::GetClassData() const { return &_class_data_; }


void CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate*>(&to_msg);
  auto& from = static_cast<const CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_main_post_url()) {
    _this->_internal_set_main_post_url(from._internal_main_post_url());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate::CopyFrom(const CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate::IsInitialized() const {
  return true;
}

void CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate::InternalSwap(CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.main_post_url_, lhs_arena,
      &other->_impl_.main_post_url_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cstrike15_5fgcmessages_2eproto_getter, &descriptor_table_cstrike15_5fgcmessages_2eproto_once,
      file_level_metadata_cstrike15_5fgcmessages_2eproto[52]);
}

// ===================================================================

class CMsgGCCStrike15_v2_ServerNotificationForUserPenalty::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCCStrike15_v2_ServerNotificationForUserPenalty>()._impl_._has_bits_);
  static void set_has_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_reason(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_seconds(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_communication_cooldown(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

CMsgGCCStrike15_v2_ServerNotificationForUserPenalty::CMsgGCCStrike15_v2_ServerNotificationForUserPenalty(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgGCCStrike15_v2_ServerNotificationForUserPenalty)
}
CMsgGCCStrike15_v2_ServerNotificationForUserPenalty::CMsgGCCStrike15_v2_ServerNotificationForUserPenalty(const CMsgGCCStrike15_v2_ServerNotificationForUserPenalty& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgGCCStrike15_v2_ServerNotificationForUserPenalty* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.account_id_){}
    , decltype(_impl_.reason_){}
    , decltype(_impl_.seconds_){}
    , decltype(_impl_.communication_cooldown_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.account_id_, &from._impl_.account_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.communication_cooldown_) -
    reinterpret_cast<char*>(&_impl_.account_id_)) + sizeof(_impl_.communication_cooldown_));
  // @@protoc_insertion_point(copy_constructor:CMsgGCCStrike15_v2_ServerNotificationForUserPenalty)
}

inline void CMsgGCCStrike15_v2_ServerNotificationForUserPenalty::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.account_id_){0u}
    , decltype(_impl_.reason_){0u}
    , decltype(_impl_.seconds_){0u}
    , decltype(_impl_.communication_cooldown_){false}
  };
}

CMsgGCCStrike15_v2_ServerNotificationForUserPenalty::~CMsgGCCStrike15_v2_ServerNotificationForUserPenalty() {
  // @@protoc_insertion_point(destructor:CMsgGCCStrike15_v2_ServerNotificationForUserPenalty)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgGCCStrike15_v2_ServerNotificationForUserPenalty::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgGCCStrike15_v2_ServerNotificationForUserPenalty::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgGCCStrike15_v2_ServerNotificationForUserPenalty::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCCStrike15_v2_ServerNotificationForUserPenalty)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&_impl_.account_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.communication_cooldown_) -
        reinterpret_cast<char*>(&_impl_.account_id_)) + sizeof(_impl_.communication_cooldown_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCCStrike15_v2_ServerNotificationForUserPenalty::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 account_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_account_id(&has_bits);
          _impl_.account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 reason = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_reason(&has_bits);
          _impl_.reason_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 seconds = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_seconds(&has_bits);
          _impl_.seconds_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool communication_cooldown = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_communication_cooldown(&has_bits);
          _impl_.communication_cooldown_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgGCCStrike15_v2_ServerNotificationForUserPenalty::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCCStrike15_v2_ServerNotificationForUserPenalty)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_account_id(), target);
  }

  // optional uint32 reason = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_reason(), target);
  }

  // optional uint32 seconds = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_seconds(), target);
  }

  // optional bool communication_cooldown = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_communication_cooldown(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCCStrike15_v2_ServerNotificationForUserPenalty)
  return target;
}

size_t CMsgGCCStrike15_v2_ServerNotificationForUserPenalty::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCCStrike15_v2_ServerNotificationForUserPenalty)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional uint32 account_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_account_id());
    }

    // optional uint32 reason = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_reason());
    }

    // optional uint32 seconds = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_seconds());
    }

    // optional bool communication_cooldown = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgGCCStrike15_v2_ServerNotificationForUserPenalty::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgGCCStrike15_v2_ServerNotificationForUserPenalty::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgGCCStrike15_v2_ServerNotificationForUserPenalty::GetClassData() const { return &_class_data_; }


void CMsgGCCStrike15_v2_ServerNotificationForUserPenalty::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgGCCStrike15_v2_ServerNotificationForUserPenalty*>(&to_msg);
  auto& from = static_cast<const CMsgGCCStrike15_v2_ServerNotificationForUserPenalty&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCCStrike15_v2_ServerNotificationForUserPenalty)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.account_id_ = from._impl_.account_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.reason_ = from._impl_.reason_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.seconds_ = from._impl_.seconds_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.communication_cooldown_ = from._impl_.communication_cooldown_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgGCCStrike15_v2_ServerNotificationForUserPenalty::CopyFrom(const CMsgGCCStrike15_v2_ServerNotificationForUserPenalty& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCCStrike15_v2_ServerNotificationForUserPenalty)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCCStrike15_v2_ServerNotificationForUserPenalty::IsInitialized() const {
  return true;
}

void CMsgGCCStrike15_v2_ServerNotificationForUserPenalty::InternalSwap(CMsgGCCStrike15_v2_ServerNotificationForUserPenalty* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgGCCStrike15_v2_ServerNotificationForUserPenalty, _impl_.communication_cooldown_)
      + sizeof(CMsgGCCStrike15_v2_ServerNotificationForUserPenalty::_impl_.communication_cooldown_)
      - PROTOBUF_FIELD_OFFSET(CMsgGCCStrike15_v2_ServerNotificationForUserPenalty, _impl_.account_id_)>(
          reinterpret_cast<char*>(&_impl_.account_id_),
          reinterpret_cast<char*>(&other->_impl_.account_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCCStrike15_v2_ServerNotificationForUserPenalty::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cstrike15_5fgcmessages_2eproto_getter, &descriptor_table_cstrike15_5fgcmessages_2eproto_once,
      file_level_metadata_cstrike15_5fgcmessages_2eproto[53]);
}

// ===================================================================

class CMsgGCCStrike15_v2_ClientReportPlayer::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCCStrike15_v2_ClientReportPlayer>()._impl_._has_bits_);
  static void set_has_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_rpt_aimbot(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_rpt_wallhack(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_rpt_speedhack(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_rpt_teamharm(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_rpt_textabuse(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_rpt_voiceabuse(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_match_id(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_report_from_demo(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
};

CMsgGCCStrike15_v2_ClientReportPlayer::CMsgGCCStrike15_v2_ClientReportPlayer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgGCCStrike15_v2_ClientReportPlayer)
}
CMsgGCCStrike15_v2_ClientReportPlayer::CMsgGCCStrike15_v2_ClientReportPlayer(const CMsgGCCStrike15_v2_ClientReportPlayer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgGCCStrike15_v2_ClientReportPlayer* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.account_id_){}
    , decltype(_impl_.rpt_aimbot_){}
    , decltype(_impl_.rpt_wallhack_){}
    , decltype(_impl_.rpt_speedhack_){}
    , decltype(_impl_.rpt_teamharm_){}
    , decltype(_impl_.rpt_textabuse_){}
    , decltype(_impl_.match_id_){}
    , decltype(_impl_.rpt_voiceabuse_){}
    , decltype(_impl_.report_from_demo_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.account_id_, &from._impl_.account_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.report_from_demo_) -
    reinterpret_cast<char*>(&_impl_.account_id_)) + sizeof(_impl_.report_from_demo_));
  // @@protoc_insertion_point(copy_constructor:CMsgGCCStrike15_v2_ClientReportPlayer)
}

inline void CMsgGCCStrike15_v2_ClientReportPlayer::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.account_id_){0u}
    , decltype(_impl_.rpt_aimbot_){0u}
    , decltype(_impl_.rpt_wallhack_){0u}
    , decltype(_impl_.rpt_speedhack_){0u}
    , decltype(_impl_.rpt_teamharm_){0u}
    , decltype(_impl_.rpt_textabuse_){0u}
    , decltype(_impl_.match_id_){uint64_t{0u}}
    , decltype(_impl_.rpt_voiceabuse_){0u}
    , decltype(_impl_.report_from_demo_){false}
  };
}

CMsgGCCStrike15_v2_ClientReportPlayer::~CMsgGCCStrike15_v2_ClientReportPlayer() {
  // @@protoc_insertion_point(destructor:CMsgGCCStrike15_v2_ClientReportPlayer)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgGCCStrike15_v2_ClientReportPlayer::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgGCCStrike15_v2_ClientReportPlayer::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgGCCStrike15_v2_ClientReportPlayer::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCCStrike15_v2_ClientReportPlayer)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&_impl_.account_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.rpt_voiceabuse_) -
        reinterpret_cast<char*>(&_impl_.account_id_)) + sizeof(_impl_.rpt_voiceabuse_));
  }
  _impl_.report_from_demo_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCCStrike15_v2_ClientReportPlayer::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 account_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_account_id(&has_bits);
          _impl_.account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 rpt_aimbot = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_rpt_aimbot(&has_bits);
          _impl_.rpt_aimbot_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 rpt_wallhack = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_rpt_wallhack(&has_bits);
          _impl_.rpt_wallhack_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 rpt_speedhack = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_rpt_speedhack(&has_bits);
          _impl_.rpt_speedhack_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 rpt_teamharm = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_rpt_teamharm(&has_bits);
          _impl_.rpt_teamharm_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 rpt_textabuse = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_rpt_textabuse(&has_bits);
          _impl_.rpt_textabuse_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 rpt_voiceabuse = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_rpt_voiceabuse(&has_bits);
          _impl_.rpt_voiceabuse_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 match_id = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_match_id(&has_bits);
          _impl_.match_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool report_from_demo = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_report_from_demo(&has_bits);
          _impl_.report_from_demo_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgGCCStrike15_v2_ClientReportPlayer::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCCStrike15_v2_ClientReportPlayer)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_account_id(), target);
  }

  // optional uint32 rpt_aimbot = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_rpt_aimbot(), target);
  }

  // optional uint32 rpt_wallhack = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_rpt_wallhack(), target);
  }

  // optional uint32 rpt_speedhack = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_rpt_speedhack(), target);
  }

  // optional uint32 rpt_teamharm = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_rpt_teamharm(), target);
  }

  // optional uint32 rpt_textabuse = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_rpt_textabuse(), target);
  }

  // optional uint32 rpt_voiceabuse = 7;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(7, this->_internal_rpt_voiceabuse(), target);
  }

  // optional uint64 match_id = 8;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(8, this->_internal_match_id(), target);
  }

  // optional bool report_from_demo = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(9, this->_internal_report_from_demo(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCCStrike15_v2_ClientReportPlayer)
  return target;
}

size_t CMsgGCCStrike15_v2_ClientReportPlayer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCCStrike15_v2_ClientReportPlayer)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional uint32 account_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_account_id());
    }

    // optional uint32 rpt_aimbot = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_rpt_aimbot());
    }

    // optional uint32 rpt_wallhack = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_rpt_wallhack());
    }

    // optional uint32 rpt_speedhack = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_rpt_speedhack());
    }

    // optional uint32 rpt_teamharm = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_rpt_teamharm());
    }

    // optional uint32 rpt_textabuse = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_rpt_textabuse());
    }

    // optional uint64 match_id = 8;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_match_id());
    }

    // optional uint32 rpt_voiceabuse = 7;
    if (cached_has_bits & 0x00000080u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_rpt_voiceabuse());
    }

  }
  // optional bool report_from_demo = 9;
  if (cached_has_bits & 0x00000100u) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgGCCStrike15_v2_ClientReportPlayer::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgGCCStrike15_v2_ClientReportPlayer::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgGCCStrike15_v2_ClientReportPlayer::GetClassData() const { return &_class_data_; }


void CMsgGCCStrike15_v2_ClientReportPlayer::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgGCCStrike15_v2_ClientReportPlayer*>(&to_msg);
  auto& from = static_cast<const CMsgGCCStrike15_v2_ClientReportPlayer&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCCStrike15_v2_ClientReportPlayer)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.account_id_ = from._impl_.account_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.rpt_aimbot_ = from._impl_.rpt_aimbot_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.rpt_wallhack_ = from._impl_.rpt_wallhack_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.rpt_speedhack_ = from._impl_.rpt_speedhack_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.rpt_teamharm_ = from._impl_.rpt_teamharm_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.rpt_textabuse_ = from._impl_.rpt_textabuse_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.match_id_ = from._impl_.match_id_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.rpt_voiceabuse_ = from._impl_.rpt_voiceabuse_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    _this->_internal_set_report_from_demo(from._internal_report_from_demo());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgGCCStrike15_v2_ClientReportPlayer::CopyFrom(const CMsgGCCStrike15_v2_ClientReportPlayer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCCStrike15_v2_ClientReportPlayer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCCStrike15_v2_ClientReportPlayer::IsInitialized() const {
  return true;
}

void CMsgGCCStrike15_v2_ClientReportPlayer::InternalSwap(CMsgGCCStrike15_v2_ClientReportPlayer* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgGCCStrike15_v2_ClientReportPlayer, _impl_.report_from_demo_)
      + sizeof(CMsgGCCStrike15_v2_ClientReportPlayer::_impl_.report_from_demo_)
      - PROTOBUF_FIELD_OFFSET(CMsgGCCStrike15_v2_ClientReportPlayer, _impl_.account_id_)>(
          reinterpret_cast<char*>(&_impl_.account_id_),
          reinterpret_cast<char*>(&other->_impl_.account_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCCStrike15_v2_ClientReportPlayer::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cstrike15_5fgcmessages_2eproto_getter, &descriptor_table_cstrike15_5fgcmessages_2eproto_once,
      file_level_metadata_cstrike15_5fgcmessages_2eproto[54]);
}

// ===================================================================

class CMsgGCCStrike15_v2_ClientCommendPlayer::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCCStrike15_v2_ClientCommendPlayer>()._impl_._has_bits_);
  static void set_has_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_match_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::PlayerCommendationInfo& commendation(const CMsgGCCStrike15_v2_ClientCommendPlayer* msg);
  static void set_has_commendation(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_tokens(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::PlayerCommendationInfo&
CMsgGCCStrike15_v2_ClientCommendPlayer::_Internal::commendation(const CMsgGCCStrike15_v2_ClientCommendPlayer* msg) {
  return *msg->_impl_.commendation_;
}
CMsgGCCStrike15_v2_ClientCommendPlayer::CMsgGCCStrike15_v2_ClientCommendPlayer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgGCCStrike15_v2_ClientCommendPlayer)
}
CMsgGCCStrike15_v2_ClientCommendPlayer::CMsgGCCStrike15_v2_ClientCommendPlayer(const CMsgGCCStrike15_v2_ClientCommendPlayer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgGCCStrike15_v2_ClientCommendPlayer* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.commendation_){nullptr}
    , decltype(_impl_.account_id_){}
    , decltype(_impl_.tokens_){}
    , decltype(_impl_.match_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_commendation()) {
    _this->_impl_.commendation_ = new ::PlayerCommendationInfo(*from._impl_.commendation_);
  }
  ::memcpy(&_impl_.account_id_, &from._impl_.account_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.match_id_) -
    reinterpret_cast<char*>(&_impl_.account_id_)) + sizeof(_impl_.match_id_));
  // @@protoc_insertion_point(copy_constructor:CMsgGCCStrike15_v2_ClientCommendPlayer)
}

inline void CMsgGCCStrike15_v2_ClientCommendPlayer::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.commendation_){nullptr}
    , decltype(_impl_.account_id_){0u}
    , decltype(_impl_.tokens_){0u}
    , decltype(_impl_.match_id_){uint64_t{0u}}
  };
}

CMsgGCCStrike15_v2_ClientCommendPlayer::~CMsgGCCStrike15_v2_ClientCommendPlayer() {
  // @@protoc_insertion_point(destructor:CMsgGCCStrike15_v2_ClientCommendPlayer)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgGCCStrike15_v2_ClientCommendPlayer::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.commendation_;
}

void CMsgGCCStrike15_v2_ClientCommendPlayer::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgGCCStrike15_v2_ClientCommendPlayer::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCCStrike15_v2_ClientCommendPlayer)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.commendation_ != nullptr);
    _impl_.commendation_->Clear();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&_impl_.account_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.match_id_) -
        reinterpret_cast<char*>(&_impl_.account_id_)) + sizeof(_impl_.match_id_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCCStrike15_v2_ClientCommendPlayer::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 account_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_account_id(&has_bits);
          _impl_.account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 match_id = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_match_id(&has_bits);
          _impl_.match_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .PlayerCommendationInfo commendation = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_commendation(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 tokens = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_tokens(&has_bits);
          _impl_.tokens_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgGCCStrike15_v2_ClientCommendPlayer::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCCStrike15_v2_ClientCommendPlayer)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_account_id(), target);
  }

  // optional uint64 match_id = 8;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(8, this->_internal_match_id(), target);
  }

  // optional .PlayerCommendationInfo commendation = 9;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::commendation(this),
        _Internal::commendation(this).GetCachedSize(), target, stream);
  }

  // optional uint32 tokens = 10;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(10, this->_internal_tokens(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCCStrike15_v2_ClientCommendPlayer)
  return target;
}

size_t CMsgGCCStrike15_v2_ClientCommendPlayer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCCStrike15_v2_ClientCommendPlayer)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .PlayerCommendationInfo commendation = 9;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.commendation_);
    }

    // optional uint32 account_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_account_id());
    }

    // optional uint32 tokens = 10;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_tokens());
    }

    // optional uint64 match_id = 8;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_match_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgGCCStrike15_v2_ClientCommendPlayer::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgGCCStrike15_v2_ClientCommendPlayer::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgGCCStrike15_v2_ClientCommendPlayer::GetClassData() const { return &_class_data_; }


void CMsgGCCStrike15_v2_ClientCommendPlayer::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgGCCStrike15_v2_ClientCommendPlayer*>(&to_msg);
  auto& from = static_cast<const CMsgGCCStrike15_v2_ClientCommendPlayer&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCCStrike15_v2_ClientCommendPlayer)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_commendation()->::PlayerCommendationInfo::MergeFrom(
          from._internal_commendation());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.account_id_ = from._impl_.account_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.tokens_ = from._impl_.tokens_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.match_id_ = from._impl_.match_id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgGCCStrike15_v2_ClientCommendPlayer::CopyFrom(const CMsgGCCStrike15_v2_ClientCommendPlayer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCCStrike15_v2_ClientCommendPlayer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCCStrike15_v2_ClientCommendPlayer::IsInitialized() const {
  return true;
}

void CMsgGCCStrike15_v2_ClientCommendPlayer::InternalSwap(CMsgGCCStrike15_v2_ClientCommendPlayer* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgGCCStrike15_v2_ClientCommendPlayer, _impl_.match_id_)
      + sizeof(CMsgGCCStrike15_v2_ClientCommendPlayer::_impl_.match_id_)
      - PROTOBUF_FIELD_OFFSET(CMsgGCCStrike15_v2_ClientCommendPlayer, _impl_.commendation_)>(
          reinterpret_cast<char*>(&_impl_.commendation_),
          reinterpret_cast<char*>(&other->_impl_.commendation_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCCStrike15_v2_ClientCommendPlayer::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cstrike15_5fgcmessages_2eproto_getter, &descriptor_table_cstrike15_5fgcmessages_2eproto_once,
      file_level_metadata_cstrike15_5fgcmessages_2eproto[55]);
}

// ===================================================================

class CMsgGCCStrike15_v2_ClientReportServer::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCCStrike15_v2_ClientReportServer>()._impl_._has_bits_);
  static void set_has_rpt_poorperf(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_rpt_abusivemodels(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_rpt_badmotd(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_rpt_listingabuse(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_rpt_inventoryabuse(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_match_id(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

CMsgGCCStrike15_v2_ClientReportServer::CMsgGCCStrike15_v2_ClientReportServer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgGCCStrike15_v2_ClientReportServer)
}
CMsgGCCStrike15_v2_ClientReportServer::CMsgGCCStrike15_v2_ClientReportServer(const CMsgGCCStrike15_v2_ClientReportServer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgGCCStrike15_v2_ClientReportServer* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.rpt_poorperf_){}
    , decltype(_impl_.rpt_abusivemodels_){}
    , decltype(_impl_.rpt_badmotd_){}
    , decltype(_impl_.rpt_listingabuse_){}
    , decltype(_impl_.match_id_){}
    , decltype(_impl_.rpt_inventoryabuse_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.rpt_poorperf_, &from._impl_.rpt_poorperf_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.rpt_inventoryabuse_) -
    reinterpret_cast<char*>(&_impl_.rpt_poorperf_)) + sizeof(_impl_.rpt_inventoryabuse_));
  // @@protoc_insertion_point(copy_constructor:CMsgGCCStrike15_v2_ClientReportServer)
}

inline void CMsgGCCStrike15_v2_ClientReportServer::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.rpt_poorperf_){0u}
    , decltype(_impl_.rpt_abusivemodels_){0u}
    , decltype(_impl_.rpt_badmotd_){0u}
    , decltype(_impl_.rpt_listingabuse_){0u}
    , decltype(_impl_.match_id_){uint64_t{0u}}
    , decltype(_impl_.rpt_inventoryabuse_){0u}
  };
}

CMsgGCCStrike15_v2_ClientReportServer::~CMsgGCCStrike15_v2_ClientReportServer() {
  // @@protoc_insertion_point(destructor:CMsgGCCStrike15_v2_ClientReportServer)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgGCCStrike15_v2_ClientReportServer::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgGCCStrike15_v2_ClientReportServer::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgGCCStrike15_v2_ClientReportServer::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCCStrike15_v2_ClientReportServer)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    ::memset(&_impl_.rpt_poorperf_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.rpt_inventoryabuse_) -
        reinterpret_cast<char*>(&_impl_.rpt_poorperf_)) + sizeof(_impl_.rpt_inventoryabuse_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCCStrike15_v2_ClientReportServer::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 rpt_poorperf = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_rpt_poorperf(&has_bits);
          _impl_.rpt_poorperf_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 rpt_abusivemodels = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_rpt_abusivemodels(&has_bits);
          _impl_.rpt_abusivemodels_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 rpt_badmotd = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_rpt_badmotd(&has_bits);
          _impl_.rpt_badmotd_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 rpt_listingabuse = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_rpt_listingabuse(&has_bits);
          _impl_.rpt_listingabuse_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 rpt_inventoryabuse = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_rpt_inventoryabuse(&has_bits);
          _impl_.rpt_inventoryabuse_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 match_id = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_match_id(&has_bits);
          _impl_.match_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgGCCStrike15_v2_ClientReportServer::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCCStrike15_v2_ClientReportServer)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 rpt_poorperf = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_rpt_poorperf(), target);
  }

  // optional uint32 rpt_abusivemodels = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_rpt_abusivemodels(), target);
  }

  // optional uint32 rpt_badmotd = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_rpt_badmotd(), target);
  }

  // optional uint32 rpt_listingabuse = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_rpt_listingabuse(), target);
  }

  // optional uint32 rpt_inventoryabuse = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_rpt_inventoryabuse(), target);
  }

  // optional uint64 match_id = 8;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(8, this->_internal_match_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCCStrike15_v2_ClientReportServer)
  return target;
}

size_t CMsgGCCStrike15_v2_ClientReportServer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCCStrike15_v2_ClientReportServer)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional uint32 rpt_poorperf = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_rpt_poorperf());
    }

    // optional uint32 rpt_abusivemodels = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_rpt_abusivemodels());
    }

    // optional uint32 rpt_badmotd = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_rpt_badmotd());
    }

    // optional uint32 rpt_listingabuse = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_rpt_listingabuse());
    }

    // optional uint64 match_id = 8;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_match_id());
    }

    // optional uint32 rpt_inventoryabuse = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_rpt_inventoryabuse());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgGCCStrike15_v2_ClientReportServer::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgGCCStrike15_v2_ClientReportServer::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgGCCStrike15_v2_ClientReportServer::GetClassData() const { return &_class_data_; }


void CMsgGCCStrike15_v2_ClientReportServer::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgGCCStrike15_v2_ClientReportServer*>(&to_msg);
  auto& from = static_cast<const CMsgGCCStrike15_v2_ClientReportServer&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCCStrike15_v2_ClientReportServer)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.rpt_poorperf_ = from._impl_.rpt_poorperf_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.rpt_abusivemodels_ = from._impl_.rpt_abusivemodels_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.rpt_badmotd_ = from._impl_.rpt_badmotd_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.rpt_listingabuse_ = from._impl_.rpt_listingabuse_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.match_id_ = from._impl_.match_id_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.rpt_inventoryabuse_ = from._impl_.rpt_inventoryabuse_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgGCCStrike15_v2_ClientReportServer::CopyFrom(const CMsgGCCStrike15_v2_ClientReportServer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCCStrike15_v2_ClientReportServer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCCStrike15_v2_ClientReportServer::IsInitialized() const {
  return true;
}

void CMsgGCCStrike15_v2_ClientReportServer::InternalSwap(CMsgGCCStrike15_v2_ClientReportServer* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgGCCStrike15_v2_ClientReportServer, _impl_.rpt_inventoryabuse_)
      + sizeof(CMsgGCCStrike15_v2_ClientReportServer::_impl_.rpt_inventoryabuse_)
      - PROTOBUF_FIELD_OFFSET(CMsgGCCStrike15_v2_ClientReportServer, _impl_.rpt_poorperf_)>(
          reinterpret_cast<char*>(&_impl_.rpt_poorperf_),
          reinterpret_cast<char*>(&other->_impl_.rpt_poorperf_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCCStrike15_v2_ClientReportServer::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cstrike15_5fgcmessages_2eproto_getter, &descriptor_table_cstrike15_5fgcmessages_2eproto_once,
      file_level_metadata_cstrike15_5fgcmessages_2eproto[56]);
}

// ===================================================================

class CMsgGCCStrike15_v2_ClientReportResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCCStrike15_v2_ClientReportResponse>()._impl_._has_bits_);
  static void set_has_confirmation_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_server_ip(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_response_type(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_response_result(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_tokens(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

CMsgGCCStrike15_v2_ClientReportResponse::CMsgGCCStrike15_v2_ClientReportResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgGCCStrike15_v2_ClientReportResponse)
}
CMsgGCCStrike15_v2_ClientReportResponse::CMsgGCCStrike15_v2_ClientReportResponse(const CMsgGCCStrike15_v2_ClientReportResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgGCCStrike15_v2_ClientReportResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.confirmation_id_){}
    , decltype(_impl_.account_id_){}
    , decltype(_impl_.server_ip_){}
    , decltype(_impl_.response_type_){}
    , decltype(_impl_.response_result_){}
    , decltype(_impl_.tokens_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.confirmation_id_, &from._impl_.confirmation_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.tokens_) -
    reinterpret_cast<char*>(&_impl_.confirmation_id_)) + sizeof(_impl_.tokens_));
  // @@protoc_insertion_point(copy_constructor:CMsgGCCStrike15_v2_ClientReportResponse)
}

inline void CMsgGCCStrike15_v2_ClientReportResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.confirmation_id_){uint64_t{0u}}
    , decltype(_impl_.account_id_){0u}
    , decltype(_impl_.server_ip_){0u}
    , decltype(_impl_.response_type_){0u}
    , decltype(_impl_.response_result_){0u}
    , decltype(_impl_.tokens_){0u}
  };
}

CMsgGCCStrike15_v2_ClientReportResponse::~CMsgGCCStrike15_v2_ClientReportResponse() {
  // @@protoc_insertion_point(destructor:CMsgGCCStrike15_v2_ClientReportResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgGCCStrike15_v2_ClientReportResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgGCCStrike15_v2_ClientReportResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgGCCStrike15_v2_ClientReportResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCCStrike15_v2_ClientReportResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    ::memset(&_impl_.confirmation_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.tokens_) -
        reinterpret_cast<char*>(&_impl_.confirmation_id_)) + sizeof(_impl_.tokens_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCCStrike15_v2_ClientReportResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 confirmation_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_confirmation_id(&has_bits);
          _impl_.confirmation_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 account_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_account_id(&has_bits);
          _impl_.account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 server_ip = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_server_ip(&has_bits);
          _impl_.server_ip_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 response_type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_response_type(&has_bits);
          _impl_.response_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 response_result = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_response_result(&has_bits);
          _impl_.response_result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 tokens = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_tokens(&has_bits);
          _impl_.tokens_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgGCCStrike15_v2_ClientReportResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCCStrike15_v2_ClientReportResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint64 confirmation_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_confirmation_id(), target);
  }

  // optional uint32 account_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_account_id(), target);
  }

  // optional uint32 server_ip = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_server_ip(), target);
  }

  // optional uint32 response_type = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_response_type(), target);
  }

  // optional uint32 response_result = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_response_result(), target);
  }

  // optional uint32 tokens = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_tokens(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCCStrike15_v2_ClientReportResponse)
  return target;
}

size_t CMsgGCCStrike15_v2_ClientReportResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCCStrike15_v2_ClientReportResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional uint64 confirmation_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_confirmation_id());
    }

    // optional uint32 account_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_account_id());
    }

    // optional uint32 server_ip = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_server_ip());
    }

    // optional uint32 response_type = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_response_type());
    }

    // optional uint32 response_result = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_response_result());
    }

    // optional uint32 tokens = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_tokens());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgGCCStrike15_v2_ClientReportResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgGCCStrike15_v2_ClientReportResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgGCCStrike15_v2_ClientReportResponse::GetClassData() const { return &_class_data_; }


void CMsgGCCStrike15_v2_ClientReportResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgGCCStrike15_v2_ClientReportResponse*>(&to_msg);
  auto& from = static_cast<const CMsgGCCStrike15_v2_ClientReportResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCCStrike15_v2_ClientReportResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.confirmation_id_ = from._impl_.confirmation_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.account_id_ = from._impl_.account_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.server_ip_ = from._impl_.server_ip_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.response_type_ = from._impl_.response_type_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.response_result_ = from._impl_.response_result_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.tokens_ = from._impl_.tokens_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgGCCStrike15_v2_ClientReportResponse::CopyFrom(const CMsgGCCStrike15_v2_ClientReportResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCCStrike15_v2_ClientReportResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCCStrike15_v2_ClientReportResponse::IsInitialized() const {
  return true;
}

void CMsgGCCStrike15_v2_ClientReportResponse::InternalSwap(CMsgGCCStrike15_v2_ClientReportResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgGCCStrike15_v2_ClientReportResponse, _impl_.tokens_)
      + sizeof(CMsgGCCStrike15_v2_ClientReportResponse::_impl_.tokens_)
      - PROTOBUF_FIELD_OFFSET(CMsgGCCStrike15_v2_ClientReportResponse, _impl_.confirmation_id_)>(
          reinterpret_cast<char*>(&_impl_.confirmation_id_),
          reinterpret_cast<char*>(&other->_impl_.confirmation_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCCStrike15_v2_ClientReportResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cstrike15_5fgcmessages_2eproto_getter, &descriptor_table_cstrike15_5fgcmessages_2eproto_once,
      file_level_metadata_cstrike15_5fgcmessages_2eproto[57]);
}

// ===================================================================

class CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends>()._impl_._has_bits_);
  static void set_has_request_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_serverid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_matchid(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_client_launcher(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends::CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends)
}
CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends::CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends(const CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.account_ids_){from._impl_.account_ids_}
    , decltype(_impl_.data_center_pings_){from._impl_.data_center_pings_}
    , decltype(_impl_.serverid_){}
    , decltype(_impl_.request_id_){}
    , decltype(_impl_.client_launcher_){}
    , decltype(_impl_.matchid_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.serverid_, &from._impl_.serverid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.matchid_) -
    reinterpret_cast<char*>(&_impl_.serverid_)) + sizeof(_impl_.matchid_));
  // @@protoc_insertion_point(copy_constructor:CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends)
}

inline void CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.account_ids_){arena}
    , decltype(_impl_.data_center_pings_){arena}
    , decltype(_impl_.serverid_){uint64_t{0u}}
    , decltype(_impl_.request_id_){0u}
    , decltype(_impl_.client_launcher_){0u}
    , decltype(_impl_.matchid_){uint64_t{0u}}
  };
}

CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends::~CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends() {
  // @@protoc_insertion_point(destructor:CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.account_ids_.~RepeatedField();
  _impl_.data_center_pings_.~RepeatedPtrField();
}

void CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.account_ids_.Clear();
  _impl_.data_center_pings_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&_impl_.serverid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.matchid_) -
        reinterpret_cast<char*>(&_impl_.serverid_)) + sizeof(_impl_.matchid_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 request_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_request_id(&has_bits);
          _impl_.request_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 account_ids = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_account_ids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<16>(ptr));
        } else if (static_cast<uint8_t>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_account_ids(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 serverid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_serverid(&has_bits);
          _impl_.serverid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 matchid = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_matchid(&has_bits);
          _impl_.matchid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 client_launcher = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_client_launcher(&has_bits);
          _impl_.client_launcher_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .DataCenterPing data_center_pings = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_data_center_pings(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 request_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_request_id(), target);
  }

  // repeated uint32 account_ids = 2;
  for (int i = 0, n = this->_internal_account_ids_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_account_ids(i), target);
  }

  // optional uint64 serverid = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal_serverid(), target);
  }

  // optional uint64 matchid = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(4, this->_internal_matchid(), target);
  }

  // optional uint32 client_launcher = 5;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_client_launcher(), target);
  }

  // repeated .DataCenterPing data_center_pings = 6;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_data_center_pings_size()); i < n; i++) {
    const auto& repfield = this->_internal_data_center_pings(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(6, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends)
  return target;
}

size_t CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 account_ids = 2;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.account_ids_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_account_ids_size());
    total_size += data_size;
  }

  // repeated .DataCenterPing data_center_pings = 6;
  total_size += 1UL * this->_internal_data_center_pings_size();
  for (const auto& msg : this->_impl_.data_center_pings_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional uint64 serverid = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_serverid());
    }

    // optional uint32 request_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_request_id());
    }

    // optional uint32 client_launcher = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_client_launcher());
    }

    // optional uint64 matchid = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_matchid());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends::GetClassData() const { return &_class_data_; }


void CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends*>(&to_msg);
  auto& from = static_cast<const CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.account_ids_.MergeFrom(from._impl_.account_ids_);
  _this->_impl_.data_center_pings_.MergeFrom(from._impl_.data_center_pings_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.serverid_ = from._impl_.serverid_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.request_id_ = from._impl_.request_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.client_launcher_ = from._impl_.client_launcher_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.matchid_ = from._impl_.matchid_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends::CopyFrom(const CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends::IsInitialized() const {
  return true;
}

void CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends::InternalSwap(CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.account_ids_.InternalSwap(&other->_impl_.account_ids_);
  _impl_.data_center_pings_.InternalSwap(&other->_impl_.data_center_pings_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends, _impl_.matchid_)
      + sizeof(CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends::_impl_.matchid_)
      - PROTOBUF_FIELD_OFFSET(CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends, _impl_.serverid_)>(
          reinterpret_cast<char*>(&_impl_.serverid_),
          reinterpret_cast<char*>(&other->_impl_.serverid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cstrike15_5fgcmessages_2eproto_getter, &descriptor_table_cstrike15_5fgcmessages_2eproto_once,
      file_level_metadata_cstrike15_5fgcmessages_2eproto[58]);
}

// ===================================================================

class WatchableMatchInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<WatchableMatchInfo>()._impl_._has_bits_);
  static void set_has_server_ip(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_tv_port(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_tv_spectators(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_tv_time(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_tv_watch_password(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_cl_decryptdata_key(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_cl_decryptdata_key_pub(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_game_type(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_game_mapgroup(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_game_map(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_server_id(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_match_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_reservation_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
};

WatchableMatchInfo::WatchableMatchInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:WatchableMatchInfo)
}
WatchableMatchInfo::WatchableMatchInfo(const WatchableMatchInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  WatchableMatchInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.tv_watch_password_){}
    , decltype(_impl_.game_mapgroup_){}
    , decltype(_impl_.game_map_){}
    , decltype(_impl_.server_ip_){}
    , decltype(_impl_.tv_port_){}
    , decltype(_impl_.tv_spectators_){}
    , decltype(_impl_.tv_time_){}
    , decltype(_impl_.cl_decryptdata_key_){}
    , decltype(_impl_.cl_decryptdata_key_pub_){}
    , decltype(_impl_.server_id_){}
    , decltype(_impl_.match_id_){}
    , decltype(_impl_.reservation_id_){}
    , decltype(_impl_.game_type_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.tv_watch_password_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.tv_watch_password_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_tv_watch_password()) {
    _this->_impl_.tv_watch_password_.Set(from._internal_tv_watch_password(), 
      _this->GetArenaForAllocation());
  }
  _impl_.game_mapgroup_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.game_mapgroup_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_game_mapgroup()) {
    _this->_impl_.game_mapgroup_.Set(from._internal_game_mapgroup(), 
      _this->GetArenaForAllocation());
  }
  _impl_.game_map_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.game_map_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_game_map()) {
    _this->_impl_.game_map_.Set(from._internal_game_map(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.server_ip_, &from._impl_.server_ip_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.game_type_) -
    reinterpret_cast<char*>(&_impl_.server_ip_)) + sizeof(_impl_.game_type_));
  // @@protoc_insertion_point(copy_constructor:WatchableMatchInfo)
}

inline void WatchableMatchInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.tv_watch_password_){}
    , decltype(_impl_.game_mapgroup_){}
    , decltype(_impl_.game_map_){}
    , decltype(_impl_.server_ip_){0u}
    , decltype(_impl_.tv_port_){0u}
    , decltype(_impl_.tv_spectators_){0u}
    , decltype(_impl_.tv_time_){0u}
    , decltype(_impl_.cl_decryptdata_key_){uint64_t{0u}}
    , decltype(_impl_.cl_decryptdata_key_pub_){uint64_t{0u}}
    , decltype(_impl_.server_id_){uint64_t{0u}}
    , decltype(_impl_.match_id_){uint64_t{0u}}
    , decltype(_impl_.reservation_id_){uint64_t{0u}}
    , decltype(_impl_.game_type_){0u}
  };
  _impl_.tv_watch_password_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.tv_watch_password_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.game_mapgroup_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.game_mapgroup_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.game_map_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.game_map_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

WatchableMatchInfo::~WatchableMatchInfo() {
  // @@protoc_insertion_point(destructor:WatchableMatchInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void WatchableMatchInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.tv_watch_password_.Destroy();
  _impl_.game_mapgroup_.Destroy();
  _impl_.game_map_.Destroy();
}

void WatchableMatchInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void WatchableMatchInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:WatchableMatchInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.tv_watch_password_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.game_mapgroup_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.game_map_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x000000f8u) {
    ::memset(&_impl_.server_ip_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.cl_decryptdata_key_) -
        reinterpret_cast<char*>(&_impl_.server_ip_)) + sizeof(_impl_.cl_decryptdata_key_));
  }
  if (cached_has_bits & 0x00001f00u) {
    ::memset(&_impl_.cl_decryptdata_key_pub_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.game_type_) -
        reinterpret_cast<char*>(&_impl_.cl_decryptdata_key_pub_)) + sizeof(_impl_.game_type_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WatchableMatchInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 server_ip = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_server_ip(&has_bits);
          _impl_.server_ip_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 tv_port = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_tv_port(&has_bits);
          _impl_.tv_port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 tv_spectators = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_tv_spectators(&has_bits);
          _impl_.tv_spectators_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 tv_time = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_tv_time(&has_bits);
          _impl_.tv_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes tv_watch_password = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_tv_watch_password();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 cl_decryptdata_key = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_cl_decryptdata_key(&has_bits);
          _impl_.cl_decryptdata_key_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 cl_decryptdata_key_pub = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_cl_decryptdata_key_pub(&has_bits);
          _impl_.cl_decryptdata_key_pub_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 game_type = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_game_type(&has_bits);
          _impl_.game_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string game_mapgroup = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_game_mapgroup();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "WatchableMatchInfo.game_mapgroup");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string game_map = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          auto str = _internal_mutable_game_map();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "WatchableMatchInfo.game_map");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional uint64 server_id = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _Internal::set_has_server_id(&has_bits);
          _impl_.server_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 match_id = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _Internal::set_has_match_id(&has_bits);
          _impl_.match_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 reservation_id = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _Internal::set_has_reservation_id(&has_bits);
          _impl_.reservation_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* WatchableMatchInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:WatchableMatchInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 server_ip = 1;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_server_ip(), target);
  }

  // optional uint32 tv_port = 2;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_tv_port(), target);
  }

  // optional uint32 tv_spectators = 3;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_tv_spectators(), target);
  }

  // optional uint32 tv_time = 4;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_tv_time(), target);
  }

  // optional bytes tv_watch_password = 5;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_tv_watch_password(), target);
  }

  // optional uint64 cl_decryptdata_key = 6;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(6, this->_internal_cl_decryptdata_key(), target);
  }

  // optional uint64 cl_decryptdata_key_pub = 7;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(7, this->_internal_cl_decryptdata_key_pub(), target);
  }

  // optional uint32 game_type = 8;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(8, this->_internal_game_type(), target);
  }

  // optional string game_mapgroup = 9;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_game_mapgroup().data(), static_cast<int>(this->_internal_game_mapgroup().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "WatchableMatchInfo.game_mapgroup");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_game_mapgroup(), target);
  }

  // optional string game_map = 10;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_game_map().data(), static_cast<int>(this->_internal_game_map().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "WatchableMatchInfo.game_map");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_game_map(), target);
  }

  // optional uint64 server_id = 11;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(11, this->_internal_server_id(), target);
  }

  // optional uint64 match_id = 12;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(12, this->_internal_match_id(), target);
  }

  // optional uint64 reservation_id = 13;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(13, this->_internal_reservation_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:WatchableMatchInfo)
  return target;
}

size_t WatchableMatchInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:WatchableMatchInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional bytes tv_watch_password = 5;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_tv_watch_password());
    }

    // optional string game_mapgroup = 9;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_game_mapgroup());
    }

    // optional string game_map = 10;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_game_map());
    }

    // optional uint32 server_ip = 1;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_server_ip());
    }

    // optional uint32 tv_port = 2;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_tv_port());
    }

    // optional uint32 tv_spectators = 3;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_tv_spectators());
    }

    // optional uint32 tv_time = 4;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_tv_time());
    }

    // optional uint64 cl_decryptdata_key = 6;
    if (cached_has_bits & 0x00000080u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_cl_decryptdata_key());
    }

  }
  if (cached_has_bits & 0x00001f00u) {
    // optional uint64 cl_decryptdata_key_pub = 7;
    if (cached_has_bits & 0x00000100u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_cl_decryptdata_key_pub());
    }

    // optional uint64 server_id = 11;
    if (cached_has_bits & 0x00000200u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_server_id());
    }

    // optional uint64 match_id = 12;
    if (cached_has_bits & 0x00000400u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_match_id());
    }

    // optional uint64 reservation_id = 13;
    if (cached_has_bits & 0x00000800u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_reservation_id());
    }

    // optional uint32 game_type = 8;
    if (cached_has_bits & 0x00001000u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_game_type());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData WatchableMatchInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    WatchableMatchInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*WatchableMatchInfo::GetClassData() const { return &_class_data_; }


void WatchableMatchInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<WatchableMatchInfo*>(&to_msg);
  auto& from = static_cast<const WatchableMatchInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:WatchableMatchInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_tv_watch_password(from._internal_tv_watch_password());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_game_mapgroup(from._internal_game_mapgroup());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_game_map(from._internal_game_map());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.server_ip_ = from._impl_.server_ip_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.tv_port_ = from._impl_.tv_port_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.tv_spectators_ = from._impl_.tv_spectators_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.tv_time_ = from._impl_.tv_time_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.cl_decryptdata_key_ = from._impl_.cl_decryptdata_key_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00001f00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.cl_decryptdata_key_pub_ = from._impl_.cl_decryptdata_key_pub_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.server_id_ = from._impl_.server_id_;
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_impl_.match_id_ = from._impl_.match_id_;
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_impl_.reservation_id_ = from._impl_.reservation_id_;
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_impl_.game_type_ = from._impl_.game_type_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void WatchableMatchInfo::CopyFrom(const WatchableMatchInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:WatchableMatchInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WatchableMatchInfo::IsInitialized() const {
  return true;
}

void WatchableMatchInfo::InternalSwap(WatchableMatchInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.tv_watch_password_, lhs_arena,
      &other->_impl_.tv_watch_password_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.game_mapgroup_, lhs_arena,
      &other->_impl_.game_mapgroup_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.game_map_, lhs_arena,
      &other->_impl_.game_map_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(WatchableMatchInfo, _impl_.game_type_)
      + sizeof(WatchableMatchInfo::_impl_.game_type_)
      - PROTOBUF_FIELD_OFFSET(WatchableMatchInfo, _impl_.server_ip_)>(
          reinterpret_cast<char*>(&_impl_.server_ip_),
          reinterpret_cast<char*>(&other->_impl_.server_ip_));
}

::PROTOBUF_NAMESPACE_ID::Metadata WatchableMatchInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cstrike15_5fgcmessages_2eproto_getter, &descriptor_table_cstrike15_5fgcmessages_2eproto_once,
      file_level_metadata_cstrike15_5fgcmessages_2eproto[59]);
}

// ===================================================================

class CMsgGCCStrike15_v2_ClientRequestJoinFriendData::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCCStrike15_v2_ClientRequestJoinFriendData>()._impl_._has_bits_);
  static void set_has_version(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_join_token(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_join_ipp(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve& res(const CMsgGCCStrike15_v2_ClientRequestJoinFriendData* msg);
  static void set_has_res(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_errormsg(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve&
CMsgGCCStrike15_v2_ClientRequestJoinFriendData::_Internal::res(const CMsgGCCStrike15_v2_ClientRequestJoinFriendData* msg) {
  return *msg->_impl_.res_;
}
CMsgGCCStrike15_v2_ClientRequestJoinFriendData::CMsgGCCStrike15_v2_ClientRequestJoinFriendData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgGCCStrike15_v2_ClientRequestJoinFriendData)
}
CMsgGCCStrike15_v2_ClientRequestJoinFriendData::CMsgGCCStrike15_v2_ClientRequestJoinFriendData(const CMsgGCCStrike15_v2_ClientRequestJoinFriendData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgGCCStrike15_v2_ClientRequestJoinFriendData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.errormsg_){}
    , decltype(_impl_.res_){nullptr}
    , decltype(_impl_.version_){}
    , decltype(_impl_.account_id_){}
    , decltype(_impl_.join_token_){}
    , decltype(_impl_.join_ipp_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.errormsg_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.errormsg_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_errormsg()) {
    _this->_impl_.errormsg_.Set(from._internal_errormsg(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_res()) {
    _this->_impl_.res_ = new ::CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve(*from._impl_.res_);
  }
  ::memcpy(&_impl_.version_, &from._impl_.version_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.join_ipp_) -
    reinterpret_cast<char*>(&_impl_.version_)) + sizeof(_impl_.join_ipp_));
  // @@protoc_insertion_point(copy_constructor:CMsgGCCStrike15_v2_ClientRequestJoinFriendData)
}

inline void CMsgGCCStrike15_v2_ClientRequestJoinFriendData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.errormsg_){}
    , decltype(_impl_.res_){nullptr}
    , decltype(_impl_.version_){0u}
    , decltype(_impl_.account_id_){0u}
    , decltype(_impl_.join_token_){0u}
    , decltype(_impl_.join_ipp_){0u}
  };
  _impl_.errormsg_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.errormsg_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CMsgGCCStrike15_v2_ClientRequestJoinFriendData::~CMsgGCCStrike15_v2_ClientRequestJoinFriendData() {
  // @@protoc_insertion_point(destructor:CMsgGCCStrike15_v2_ClientRequestJoinFriendData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgGCCStrike15_v2_ClientRequestJoinFriendData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.errormsg_.Destroy();
  if (this != internal_default_instance()) delete _impl_.res_;
}

void CMsgGCCStrike15_v2_ClientRequestJoinFriendData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgGCCStrike15_v2_ClientRequestJoinFriendData::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCCStrike15_v2_ClientRequestJoinFriendData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.errormsg_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.res_ != nullptr);
      _impl_.res_->Clear();
    }
  }
  if (cached_has_bits & 0x0000003cu) {
    ::memset(&_impl_.version_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.join_ipp_) -
        reinterpret_cast<char*>(&_impl_.version_)) + sizeof(_impl_.join_ipp_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCCStrike15_v2_ClientRequestJoinFriendData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 version = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_version(&has_bits);
          _impl_.version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 account_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_account_id(&has_bits);
          _impl_.account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 join_token = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_join_token(&has_bits);
          _impl_.join_token_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 join_ipp = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_join_ipp(&has_bits);
          _impl_.join_ipp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve res = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_res(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string errormsg = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_errormsg();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CMsgGCCStrike15_v2_ClientRequestJoinFriendData.errormsg");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgGCCStrike15_v2_ClientRequestJoinFriendData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCCStrike15_v2_ClientRequestJoinFriendData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 version = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_version(), target);
  }

  // optional uint32 account_id = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_account_id(), target);
  }

  // optional uint32 join_token = 3;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_join_token(), target);
  }

  // optional uint32 join_ipp = 4;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_join_ipp(), target);
  }

  // optional .CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve res = 5;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::res(this),
        _Internal::res(this).GetCachedSize(), target, stream);
  }

  // optional string errormsg = 6;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_errormsg().data(), static_cast<int>(this->_internal_errormsg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgGCCStrike15_v2_ClientRequestJoinFriendData.errormsg");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_errormsg(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCCStrike15_v2_ClientRequestJoinFriendData)
  return target;
}

size_t CMsgGCCStrike15_v2_ClientRequestJoinFriendData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCCStrike15_v2_ClientRequestJoinFriendData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional string errormsg = 6;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_errormsg());
    }

    // optional .CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve res = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.res_);
    }

    // optional uint32 version = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_version());
    }

    // optional uint32 account_id = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_account_id());
    }

    // optional uint32 join_token = 3;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_join_token());
    }

    // optional uint32 join_ipp = 4;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_join_ipp());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgGCCStrike15_v2_ClientRequestJoinFriendData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgGCCStrike15_v2_ClientRequestJoinFriendData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgGCCStrike15_v2_ClientRequestJoinFriendData::GetClassData() const { return &_class_data_; }


void CMsgGCCStrike15_v2_ClientRequestJoinFriendData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgGCCStrike15_v2_ClientRequestJoinFriendData*>(&to_msg);
  auto& from = static_cast<const CMsgGCCStrike15_v2_ClientRequestJoinFriendData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCCStrike15_v2_ClientRequestJoinFriendData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_errormsg(from._internal_errormsg());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_res()->::CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve::MergeFrom(
          from._internal_res());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.version_ = from._impl_.version_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.account_id_ = from._impl_.account_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.join_token_ = from._impl_.join_token_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.join_ipp_ = from._impl_.join_ipp_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgGCCStrike15_v2_ClientRequestJoinFriendData::CopyFrom(const CMsgGCCStrike15_v2_ClientRequestJoinFriendData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCCStrike15_v2_ClientRequestJoinFriendData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCCStrike15_v2_ClientRequestJoinFriendData::IsInitialized() const {
  return true;
}

void CMsgGCCStrike15_v2_ClientRequestJoinFriendData::InternalSwap(CMsgGCCStrike15_v2_ClientRequestJoinFriendData* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.errormsg_, lhs_arena,
      &other->_impl_.errormsg_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgGCCStrike15_v2_ClientRequestJoinFriendData, _impl_.join_ipp_)
      + sizeof(CMsgGCCStrike15_v2_ClientRequestJoinFriendData::_impl_.join_ipp_)
      - PROTOBUF_FIELD_OFFSET(CMsgGCCStrike15_v2_ClientRequestJoinFriendData, _impl_.res_)>(
          reinterpret_cast<char*>(&_impl_.res_),
          reinterpret_cast<char*>(&other->_impl_.res_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCCStrike15_v2_ClientRequestJoinFriendData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cstrike15_5fgcmessages_2eproto_getter, &descriptor_table_cstrike15_5fgcmessages_2eproto_once,
      file_level_metadata_cstrike15_5fgcmessages_2eproto[60]);
}

// ===================================================================

class CMsgGCCStrike15_v2_ClientRequestJoinServerData::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCCStrike15_v2_ClientRequestJoinServerData>()._impl_._has_bits_);
  static void set_has_version(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_serverid(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_server_ip(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_server_port(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve& res(const CMsgGCCStrike15_v2_ClientRequestJoinServerData* msg);
  static void set_has_res(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_errormsg(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve&
CMsgGCCStrike15_v2_ClientRequestJoinServerData::_Internal::res(const CMsgGCCStrike15_v2_ClientRequestJoinServerData* msg) {
  return *msg->_impl_.res_;
}
CMsgGCCStrike15_v2_ClientRequestJoinServerData::CMsgGCCStrike15_v2_ClientRequestJoinServerData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgGCCStrike15_v2_ClientRequestJoinServerData)
}
CMsgGCCStrike15_v2_ClientRequestJoinServerData::CMsgGCCStrike15_v2_ClientRequestJoinServerData(const CMsgGCCStrike15_v2_ClientRequestJoinServerData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgGCCStrike15_v2_ClientRequestJoinServerData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.errormsg_){}
    , decltype(_impl_.res_){nullptr}
    , decltype(_impl_.version_){}
    , decltype(_impl_.account_id_){}
    , decltype(_impl_.serverid_){}
    , decltype(_impl_.server_ip_){}
    , decltype(_impl_.server_port_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.errormsg_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.errormsg_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_errormsg()) {
    _this->_impl_.errormsg_.Set(from._internal_errormsg(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_res()) {
    _this->_impl_.res_ = new ::CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve(*from._impl_.res_);
  }
  ::memcpy(&_impl_.version_, &from._impl_.version_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.server_port_) -
    reinterpret_cast<char*>(&_impl_.version_)) + sizeof(_impl_.server_port_));
  // @@protoc_insertion_point(copy_constructor:CMsgGCCStrike15_v2_ClientRequestJoinServerData)
}

inline void CMsgGCCStrike15_v2_ClientRequestJoinServerData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.errormsg_){}
    , decltype(_impl_.res_){nullptr}
    , decltype(_impl_.version_){0u}
    , decltype(_impl_.account_id_){0u}
    , decltype(_impl_.serverid_){uint64_t{0u}}
    , decltype(_impl_.server_ip_){0u}
    , decltype(_impl_.server_port_){0u}
  };
  _impl_.errormsg_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.errormsg_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CMsgGCCStrike15_v2_ClientRequestJoinServerData::~CMsgGCCStrike15_v2_ClientRequestJoinServerData() {
  // @@protoc_insertion_point(destructor:CMsgGCCStrike15_v2_ClientRequestJoinServerData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgGCCStrike15_v2_ClientRequestJoinServerData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.errormsg_.Destroy();
  if (this != internal_default_instance()) delete _impl_.res_;
}

void CMsgGCCStrike15_v2_ClientRequestJoinServerData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgGCCStrike15_v2_ClientRequestJoinServerData::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCCStrike15_v2_ClientRequestJoinServerData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.errormsg_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.res_ != nullptr);
      _impl_.res_->Clear();
    }
  }
  if (cached_has_bits & 0x0000007cu) {
    ::memset(&_impl_.version_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.server_port_) -
        reinterpret_cast<char*>(&_impl_.version_)) + sizeof(_impl_.server_port_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCCStrike15_v2_ClientRequestJoinServerData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 version = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_version(&has_bits);
          _impl_.version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 account_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_account_id(&has_bits);
          _impl_.account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 serverid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_serverid(&has_bits);
          _impl_.serverid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 server_ip = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_server_ip(&has_bits);
          _impl_.server_ip_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 server_port = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_server_port(&has_bits);
          _impl_.server_port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve res = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_res(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string errormsg = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_errormsg();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CMsgGCCStrike15_v2_ClientRequestJoinServerData.errormsg");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgGCCStrike15_v2_ClientRequestJoinServerData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCCStrike15_v2_ClientRequestJoinServerData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 version = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_version(), target);
  }

  // optional uint32 account_id = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_account_id(), target);
  }

  // optional uint64 serverid = 3;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal_serverid(), target);
  }

  // optional uint32 server_ip = 4;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_server_ip(), target);
  }

  // optional uint32 server_port = 5;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_server_port(), target);
  }

  // optional .CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve res = 6;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::res(this),
        _Internal::res(this).GetCachedSize(), target, stream);
  }

  // optional string errormsg = 7;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_errormsg().data(), static_cast<int>(this->_internal_errormsg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgGCCStrike15_v2_ClientRequestJoinServerData.errormsg");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_errormsg(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCCStrike15_v2_ClientRequestJoinServerData)
  return target;
}

size_t CMsgGCCStrike15_v2_ClientRequestJoinServerData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCCStrike15_v2_ClientRequestJoinServerData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional string errormsg = 7;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_errormsg());
    }

    // optional .CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve res = 6;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.res_);
    }

    // optional uint32 version = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_version());
    }

    // optional uint32 account_id = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_account_id());
    }

    // optional uint64 serverid = 3;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_serverid());
    }

    // optional uint32 server_ip = 4;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_server_ip());
    }

    // optional uint32 server_port = 5;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_server_port());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgGCCStrike15_v2_ClientRequestJoinServerData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgGCCStrike15_v2_ClientRequestJoinServerData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgGCCStrike15_v2_ClientRequestJoinServerData::GetClassData() const { return &_class_data_; }


void CMsgGCCStrike15_v2_ClientRequestJoinServerData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgGCCStrike15_v2_ClientRequestJoinServerData*>(&to_msg);
  auto& from = static_cast<const CMsgGCCStrike15_v2_ClientRequestJoinServerData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCCStrike15_v2_ClientRequestJoinServerData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_errormsg(from._internal_errormsg());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_res()->::CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve::MergeFrom(
          from._internal_res());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.version_ = from._impl_.version_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.account_id_ = from._impl_.account_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.serverid_ = from._impl_.serverid_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.server_ip_ = from._impl_.server_ip_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.server_port_ = from._impl_.server_port_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgGCCStrike15_v2_ClientRequestJoinServerData::CopyFrom(const CMsgGCCStrike15_v2_ClientRequestJoinServerData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCCStrike15_v2_ClientRequestJoinServerData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCCStrike15_v2_ClientRequestJoinServerData::IsInitialized() const {
  return true;
}

void CMsgGCCStrike15_v2_ClientRequestJoinServerData::InternalSwap(CMsgGCCStrike15_v2_ClientRequestJoinServerData* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.errormsg_, lhs_arena,
      &other->_impl_.errormsg_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgGCCStrike15_v2_ClientRequestJoinServerData, _impl_.server_port_)
      + sizeof(CMsgGCCStrike15_v2_ClientRequestJoinServerData::_impl_.server_port_)
      - PROTOBUF_FIELD_OFFSET(CMsgGCCStrike15_v2_ClientRequestJoinServerData, _impl_.res_)>(
          reinterpret_cast<char*>(&_impl_.res_),
          reinterpret_cast<char*>(&other->_impl_.res_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCCStrike15_v2_ClientRequestJoinServerData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cstrike15_5fgcmessages_2eproto_getter, &descriptor_table_cstrike15_5fgcmessages_2eproto_once,
      file_level_metadata_cstrike15_5fgcmessages_2eproto[61]);
}

// ===================================================================

class CMsgGCCstrike15_v2_ClientRequestNewMission::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCCstrike15_v2_ClientRequestNewMission>()._impl_._has_bits_);
  static void set_has_mission_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_campaign_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgGCCstrike15_v2_ClientRequestNewMission::CMsgGCCstrike15_v2_ClientRequestNewMission(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgGCCstrike15_v2_ClientRequestNewMission)
}
CMsgGCCstrike15_v2_ClientRequestNewMission::CMsgGCCstrike15_v2_ClientRequestNewMission(const CMsgGCCstrike15_v2_ClientRequestNewMission& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgGCCstrike15_v2_ClientRequestNewMission* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.mission_id_){}
    , decltype(_impl_.campaign_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.mission_id_, &from._impl_.mission_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.campaign_id_) -
    reinterpret_cast<char*>(&_impl_.mission_id_)) + sizeof(_impl_.campaign_id_));
  // @@protoc_insertion_point(copy_constructor:CMsgGCCstrike15_v2_ClientRequestNewMission)
}

inline void CMsgGCCstrike15_v2_ClientRequestNewMission::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.mission_id_){0u}
    , decltype(_impl_.campaign_id_){0u}
  };
}

CMsgGCCstrike15_v2_ClientRequestNewMission::~CMsgGCCstrike15_v2_ClientRequestNewMission() {
  // @@protoc_insertion_point(destructor:CMsgGCCstrike15_v2_ClientRequestNewMission)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgGCCstrike15_v2_ClientRequestNewMission::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgGCCstrike15_v2_ClientRequestNewMission::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgGCCstrike15_v2_ClientRequestNewMission::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCCstrike15_v2_ClientRequestNewMission)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.mission_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.campaign_id_) -
        reinterpret_cast<char*>(&_impl_.mission_id_)) + sizeof(_impl_.campaign_id_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCCstrike15_v2_ClientRequestNewMission::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 mission_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_mission_id(&has_bits);
          _impl_.mission_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 campaign_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_campaign_id(&has_bits);
          _impl_.campaign_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgGCCstrike15_v2_ClientRequestNewMission::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCCstrike15_v2_ClientRequestNewMission)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 mission_id = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_mission_id(), target);
  }

  // optional uint32 campaign_id = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_campaign_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCCstrike15_v2_ClientRequestNewMission)
  return target;
}

size_t CMsgGCCstrike15_v2_ClientRequestNewMission::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCCstrike15_v2_ClientRequestNewMission)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 mission_id = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_mission_id());
    }

    // optional uint32 campaign_id = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_campaign_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgGCCstrike15_v2_ClientRequestNewMission::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgGCCstrike15_v2_ClientRequestNewMission::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgGCCstrike15_v2_ClientRequestNewMission::GetClassData() const { return &_class_data_; }


void CMsgGCCstrike15_v2_ClientRequestNewMission::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgGCCstrike15_v2_ClientRequestNewMission*>(&to_msg);
  auto& from = static_cast<const CMsgGCCstrike15_v2_ClientRequestNewMission&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCCstrike15_v2_ClientRequestNewMission)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.mission_id_ = from._impl_.mission_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.campaign_id_ = from._impl_.campaign_id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgGCCstrike15_v2_ClientRequestNewMission::CopyFrom(const CMsgGCCstrike15_v2_ClientRequestNewMission& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCCstrike15_v2_ClientRequestNewMission)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCCstrike15_v2_ClientRequestNewMission::IsInitialized() const {
  return true;
}

void CMsgGCCstrike15_v2_ClientRequestNewMission::InternalSwap(CMsgGCCstrike15_v2_ClientRequestNewMission* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgGCCstrike15_v2_ClientRequestNewMission, _impl_.campaign_id_)
      + sizeof(CMsgGCCstrike15_v2_ClientRequestNewMission::_impl_.campaign_id_)
      - PROTOBUF_FIELD_OFFSET(CMsgGCCstrike15_v2_ClientRequestNewMission, _impl_.mission_id_)>(
          reinterpret_cast<char*>(&_impl_.mission_id_),
          reinterpret_cast<char*>(&other->_impl_.mission_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCCstrike15_v2_ClientRequestNewMission::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cstrike15_5fgcmessages_2eproto_getter, &descriptor_table_cstrike15_5fgcmessages_2eproto_once,
      file_level_metadata_cstrike15_5fgcmessages_2eproto[62]);
}

// ===================================================================

class CMsgGCCstrike15_v2_ClientRedeemMissionReward::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCCstrike15_v2_ClientRedeemMissionReward>()._impl_._has_bits_);
  static void set_has_campaign_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_redeem_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_redeemable_balance(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_expected_cost(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

CMsgGCCstrike15_v2_ClientRedeemMissionReward::CMsgGCCstrike15_v2_ClientRedeemMissionReward(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgGCCstrike15_v2_ClientRedeemMissionReward)
}
CMsgGCCstrike15_v2_ClientRedeemMissionReward::CMsgGCCstrike15_v2_ClientRedeemMissionReward(const CMsgGCCstrike15_v2_ClientRedeemMissionReward& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgGCCstrike15_v2_ClientRedeemMissionReward* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.campaign_id_){}
    , decltype(_impl_.redeem_id_){}
    , decltype(_impl_.redeemable_balance_){}
    , decltype(_impl_.expected_cost_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.campaign_id_, &from._impl_.campaign_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.expected_cost_) -
    reinterpret_cast<char*>(&_impl_.campaign_id_)) + sizeof(_impl_.expected_cost_));
  // @@protoc_insertion_point(copy_constructor:CMsgGCCstrike15_v2_ClientRedeemMissionReward)
}

inline void CMsgGCCstrike15_v2_ClientRedeemMissionReward::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.campaign_id_){0u}
    , decltype(_impl_.redeem_id_){0u}
    , decltype(_impl_.redeemable_balance_){0u}
    , decltype(_impl_.expected_cost_){0u}
  };
}

CMsgGCCstrike15_v2_ClientRedeemMissionReward::~CMsgGCCstrike15_v2_ClientRedeemMissionReward() {
  // @@protoc_insertion_point(destructor:CMsgGCCstrike15_v2_ClientRedeemMissionReward)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgGCCstrike15_v2_ClientRedeemMissionReward::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgGCCstrike15_v2_ClientRedeemMissionReward::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgGCCstrike15_v2_ClientRedeemMissionReward::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCCstrike15_v2_ClientRedeemMissionReward)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&_impl_.campaign_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.expected_cost_) -
        reinterpret_cast<char*>(&_impl_.campaign_id_)) + sizeof(_impl_.expected_cost_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCCstrike15_v2_ClientRedeemMissionReward::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 campaign_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_campaign_id(&has_bits);
          _impl_.campaign_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 redeem_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_redeem_id(&has_bits);
          _impl_.redeem_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 redeemable_balance = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_redeemable_balance(&has_bits);
          _impl_.redeemable_balance_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 expected_cost = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_expected_cost(&has_bits);
          _impl_.expected_cost_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgGCCstrike15_v2_ClientRedeemMissionReward::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCCstrike15_v2_ClientRedeemMissionReward)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 campaign_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_campaign_id(), target);
  }

  // optional uint32 redeem_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_redeem_id(), target);
  }

  // optional uint32 redeemable_balance = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_redeemable_balance(), target);
  }

  // optional uint32 expected_cost = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_expected_cost(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCCstrike15_v2_ClientRedeemMissionReward)
  return target;
}

size_t CMsgGCCstrike15_v2_ClientRedeemMissionReward::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCCstrike15_v2_ClientRedeemMissionReward)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional uint32 campaign_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_campaign_id());
    }

    // optional uint32 redeem_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_redeem_id());
    }

    // optional uint32 redeemable_balance = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_redeemable_balance());
    }

    // optional uint32 expected_cost = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_expected_cost());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgGCCstrike15_v2_ClientRedeemMissionReward::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgGCCstrike15_v2_ClientRedeemMissionReward::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgGCCstrike15_v2_ClientRedeemMissionReward::GetClassData() const { return &_class_data_; }


void CMsgGCCstrike15_v2_ClientRedeemMissionReward::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgGCCstrike15_v2_ClientRedeemMissionReward*>(&to_msg);
  auto& from = static_cast<const CMsgGCCstrike15_v2_ClientRedeemMissionReward&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCCstrike15_v2_ClientRedeemMissionReward)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.campaign_id_ = from._impl_.campaign_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.redeem_id_ = from._impl_.redeem_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.redeemable_balance_ = from._impl_.redeemable_balance_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.expected_cost_ = from._impl_.expected_cost_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgGCCstrike15_v2_ClientRedeemMissionReward::CopyFrom(const CMsgGCCstrike15_v2_ClientRedeemMissionReward& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCCstrike15_v2_ClientRedeemMissionReward)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCCstrike15_v2_ClientRedeemMissionReward::IsInitialized() const {
  return true;
}

void CMsgGCCstrike15_v2_ClientRedeemMissionReward::InternalSwap(CMsgGCCstrike15_v2_ClientRedeemMissionReward* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgGCCstrike15_v2_ClientRedeemMissionReward, _impl_.expected_cost_)
      + sizeof(CMsgGCCstrike15_v2_ClientRedeemMissionReward::_impl_.expected_cost_)
      - PROTOBUF_FIELD_OFFSET(CMsgGCCstrike15_v2_ClientRedeemMissionReward, _impl_.campaign_id_)>(
          reinterpret_cast<char*>(&_impl_.campaign_id_),
          reinterpret_cast<char*>(&other->_impl_.campaign_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCCstrike15_v2_ClientRedeemMissionReward::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cstrike15_5fgcmessages_2eproto_getter, &descriptor_table_cstrike15_5fgcmessages_2eproto_once,
      file_level_metadata_cstrike15_5fgcmessages_2eproto[63]);
}

// ===================================================================

class CMsgGCCstrike15_v2_ClientRedeemFreeReward::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCCstrike15_v2_ClientRedeemFreeReward>()._impl_._has_bits_);
  static void set_has_generation_time(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_redeemable_balance(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgGCCstrike15_v2_ClientRedeemFreeReward::CMsgGCCstrike15_v2_ClientRedeemFreeReward(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgGCCstrike15_v2_ClientRedeemFreeReward)
}
CMsgGCCstrike15_v2_ClientRedeemFreeReward::CMsgGCCstrike15_v2_ClientRedeemFreeReward(const CMsgGCCstrike15_v2_ClientRedeemFreeReward& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgGCCstrike15_v2_ClientRedeemFreeReward* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.items_){from._impl_.items_}
    , decltype(_impl_.generation_time_){}
    , decltype(_impl_.redeemable_balance_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.generation_time_, &from._impl_.generation_time_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.redeemable_balance_) -
    reinterpret_cast<char*>(&_impl_.generation_time_)) + sizeof(_impl_.redeemable_balance_));
  // @@protoc_insertion_point(copy_constructor:CMsgGCCstrike15_v2_ClientRedeemFreeReward)
}

inline void CMsgGCCstrike15_v2_ClientRedeemFreeReward::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.items_){arena}
    , decltype(_impl_.generation_time_){0u}
    , decltype(_impl_.redeemable_balance_){0u}
  };
}

CMsgGCCstrike15_v2_ClientRedeemFreeReward::~CMsgGCCstrike15_v2_ClientRedeemFreeReward() {
  // @@protoc_insertion_point(destructor:CMsgGCCstrike15_v2_ClientRedeemFreeReward)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgGCCstrike15_v2_ClientRedeemFreeReward::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.items_.~RepeatedField();
}

void CMsgGCCstrike15_v2_ClientRedeemFreeReward::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgGCCstrike15_v2_ClientRedeemFreeReward::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCCstrike15_v2_ClientRedeemFreeReward)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.items_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.generation_time_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.redeemable_balance_) -
        reinterpret_cast<char*>(&_impl_.generation_time_)) + sizeof(_impl_.redeemable_balance_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCCstrike15_v2_ClientRedeemFreeReward::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 generation_time = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_generation_time(&has_bits);
          _impl_.generation_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 redeemable_balance = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_redeemable_balance(&has_bits);
          _impl_.redeemable_balance_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint64 items = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_items(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<24>(ptr));
        } else if (static_cast<uint8_t>(tag) == 26) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_items(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgGCCstrike15_v2_ClientRedeemFreeReward::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCCstrike15_v2_ClientRedeemFreeReward)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 generation_time = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_generation_time(), target);
  }

  // optional uint32 redeemable_balance = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_redeemable_balance(), target);
  }

  // repeated uint64 items = 3;
  for (int i = 0, n = this->_internal_items_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal_items(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCCstrike15_v2_ClientRedeemFreeReward)
  return target;
}

size_t CMsgGCCstrike15_v2_ClientRedeemFreeReward::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCCstrike15_v2_ClientRedeemFreeReward)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint64 items = 3;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt64Size(this->_impl_.items_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_items_size());
    total_size += data_size;
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 generation_time = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_generation_time());
    }

    // optional uint32 redeemable_balance = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_redeemable_balance());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgGCCstrike15_v2_ClientRedeemFreeReward::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgGCCstrike15_v2_ClientRedeemFreeReward::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgGCCstrike15_v2_ClientRedeemFreeReward::GetClassData() const { return &_class_data_; }


void CMsgGCCstrike15_v2_ClientRedeemFreeReward::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgGCCstrike15_v2_ClientRedeemFreeReward*>(&to_msg);
  auto& from = static_cast<const CMsgGCCstrike15_v2_ClientRedeemFreeReward&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCCstrike15_v2_ClientRedeemFreeReward)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.items_.MergeFrom(from._impl_.items_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.generation_time_ = from._impl_.generation_time_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.redeemable_balance_ = from._impl_.redeemable_balance_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgGCCstrike15_v2_ClientRedeemFreeReward::CopyFrom(const CMsgGCCstrike15_v2_ClientRedeemFreeReward& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCCstrike15_v2_ClientRedeemFreeReward)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCCstrike15_v2_ClientRedeemFreeReward::IsInitialized() const {
  return true;
}

void CMsgGCCstrike15_v2_ClientRedeemFreeReward::InternalSwap(CMsgGCCstrike15_v2_ClientRedeemFreeReward* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.items_.InternalSwap(&other->_impl_.items_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgGCCstrike15_v2_ClientRedeemFreeReward, _impl_.redeemable_balance_)
      + sizeof(CMsgGCCstrike15_v2_ClientRedeemFreeReward::_impl_.redeemable_balance_)
      - PROTOBUF_FIELD_OFFSET(CMsgGCCstrike15_v2_ClientRedeemFreeReward, _impl_.generation_time_)>(
          reinterpret_cast<char*>(&_impl_.generation_time_),
          reinterpret_cast<char*>(&other->_impl_.generation_time_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCCstrike15_v2_ClientRedeemFreeReward::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cstrike15_5fgcmessages_2eproto_getter, &descriptor_table_cstrike15_5fgcmessages_2eproto_once,
      file_level_metadata_cstrike15_5fgcmessages_2eproto[64]);
}

// ===================================================================

class CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded>()._impl_._has_bits_);
  static void set_has_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_current_xp(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_current_level(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_upgraded_defidx(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_operation_points_awarded(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_free_rewards(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_xp_trail_remaining(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_xp_trail_xp_needed(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_xp_trail_level(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
};

CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded::CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded)
}
CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded::CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded(const CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.xp_progress_data_){from._impl_.xp_progress_data_}
    , decltype(_impl_.account_id_){}
    , decltype(_impl_.current_xp_){}
    , decltype(_impl_.current_level_){}
    , decltype(_impl_.upgraded_defidx_){}
    , decltype(_impl_.operation_points_awarded_){}
    , decltype(_impl_.free_rewards_){}
    , decltype(_impl_.xp_trail_remaining_){}
    , decltype(_impl_.xp_trail_xp_needed_){}
    , decltype(_impl_.xp_trail_level_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.account_id_, &from._impl_.account_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.xp_trail_level_) -
    reinterpret_cast<char*>(&_impl_.account_id_)) + sizeof(_impl_.xp_trail_level_));
  // @@protoc_insertion_point(copy_constructor:CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded)
}

inline void CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.xp_progress_data_){arena}
    , decltype(_impl_.account_id_){0u}
    , decltype(_impl_.current_xp_){0u}
    , decltype(_impl_.current_level_){0u}
    , decltype(_impl_.upgraded_defidx_){0u}
    , decltype(_impl_.operation_points_awarded_){0u}
    , decltype(_impl_.free_rewards_){0u}
    , decltype(_impl_.xp_trail_remaining_){0u}
    , decltype(_impl_.xp_trail_xp_needed_){0}
    , decltype(_impl_.xp_trail_level_){0u}
  };
}

CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded::~CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded() {
  // @@protoc_insertion_point(destructor:CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.xp_progress_data_.~RepeatedPtrField();
}

void CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.xp_progress_data_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&_impl_.account_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.xp_trail_xp_needed_) -
        reinterpret_cast<char*>(&_impl_.account_id_)) + sizeof(_impl_.xp_trail_xp_needed_));
  }
  _impl_.xp_trail_level_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .XpProgressData xp_progress_data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_xp_progress_data(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional uint32 account_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_account_id(&has_bits);
          _impl_.account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 current_xp = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_current_xp(&has_bits);
          _impl_.current_xp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 current_level = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_current_level(&has_bits);
          _impl_.current_level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 upgraded_defidx = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_upgraded_defidx(&has_bits);
          _impl_.upgraded_defidx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 operation_points_awarded = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_operation_points_awarded(&has_bits);
          _impl_.operation_points_awarded_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 free_rewards = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_free_rewards(&has_bits);
          _impl_.free_rewards_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 xp_trail_remaining = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_xp_trail_remaining(&has_bits);
          _impl_.xp_trail_remaining_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 xp_trail_xp_needed = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_xp_trail_xp_needed(&has_bits);
          _impl_.xp_trail_xp_needed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 xp_trail_level = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_xp_trail_level(&has_bits);
          _impl_.xp_trail_level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .XpProgressData xp_progress_data = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_xp_progress_data_size()); i < n; i++) {
    const auto& repfield = this->_internal_xp_progress_data(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 account_id = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_account_id(), target);
  }

  // optional uint32 current_xp = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_current_xp(), target);
  }

  // optional uint32 current_level = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_current_level(), target);
  }

  // optional uint32 upgraded_defidx = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_upgraded_defidx(), target);
  }

  // optional uint32 operation_points_awarded = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_operation_points_awarded(), target);
  }

  // optional uint32 free_rewards = 7;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(7, this->_internal_free_rewards(), target);
  }

  // optional uint32 xp_trail_remaining = 8;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(8, this->_internal_xp_trail_remaining(), target);
  }

  // optional int32 xp_trail_xp_needed = 9;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(9, this->_internal_xp_trail_xp_needed(), target);
  }

  // optional uint32 xp_trail_level = 10;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(10, this->_internal_xp_trail_level(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded)
  return target;
}

size_t CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .XpProgressData xp_progress_data = 1;
  total_size += 1UL * this->_internal_xp_progress_data_size();
  for (const auto& msg : this->_impl_.xp_progress_data_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional uint32 account_id = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_account_id());
    }

    // optional uint32 current_xp = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_current_xp());
    }

    // optional uint32 current_level = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_current_level());
    }

    // optional uint32 upgraded_defidx = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_upgraded_defidx());
    }

    // optional uint32 operation_points_awarded = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_operation_points_awarded());
    }

    // optional uint32 free_rewards = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_free_rewards());
    }

    // optional uint32 xp_trail_remaining = 8;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_xp_trail_remaining());
    }

    // optional int32 xp_trail_xp_needed = 9;
    if (cached_has_bits & 0x00000080u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_xp_trail_xp_needed());
    }

  }
  // optional uint32 xp_trail_level = 10;
  if (cached_has_bits & 0x00000100u) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_xp_trail_level());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded::GetClassData() const { return &_class_data_; }


void CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded*>(&to_msg);
  auto& from = static_cast<const CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.xp_progress_data_.MergeFrom(from._impl_.xp_progress_data_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.account_id_ = from._impl_.account_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.current_xp_ = from._impl_.current_xp_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.current_level_ = from._impl_.current_level_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.upgraded_defidx_ = from._impl_.upgraded_defidx_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.operation_points_awarded_ = from._impl_.operation_points_awarded_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.free_rewards_ = from._impl_.free_rewards_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.xp_trail_remaining_ = from._impl_.xp_trail_remaining_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.xp_trail_xp_needed_ = from._impl_.xp_trail_xp_needed_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    _this->_internal_set_xp_trail_level(from._internal_xp_trail_level());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded::CopyFrom(const CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded::IsInitialized() const {
  return true;
}

void CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded::InternalSwap(CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.xp_progress_data_.InternalSwap(&other->_impl_.xp_progress_data_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded, _impl_.xp_trail_level_)
      + sizeof(CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded::_impl_.xp_trail_level_)
      - PROTOBUF_FIELD_OFFSET(CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded, _impl_.account_id_)>(
          reinterpret_cast<char*>(&_impl_.account_id_),
          reinterpret_cast<char*>(&other->_impl_.account_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cstrike15_5fgcmessages_2eproto_getter, &descriptor_table_cstrike15_5fgcmessages_2eproto_once,
      file_level_metadata_cstrike15_5fgcmessages_2eproto[65]);
}

// ===================================================================

class CMsgGCCStrike15_v2_ClientNetworkConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCCStrike15_v2_ClientNetworkConfig>()._impl_._has_bits_);
  static void set_has_data(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgGCCStrike15_v2_ClientNetworkConfig::CMsgGCCStrike15_v2_ClientNetworkConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgGCCStrike15_v2_ClientNetworkConfig)
}
CMsgGCCStrike15_v2_ClientNetworkConfig::CMsgGCCStrike15_v2_ClientNetworkConfig(const CMsgGCCStrike15_v2_ClientNetworkConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgGCCStrike15_v2_ClientNetworkConfig* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.data_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_data()) {
    _this->_impl_.data_.Set(from._internal_data(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:CMsgGCCStrike15_v2_ClientNetworkConfig)
}

inline void CMsgGCCStrike15_v2_ClientNetworkConfig::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.data_){}
  };
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CMsgGCCStrike15_v2_ClientNetworkConfig::~CMsgGCCStrike15_v2_ClientNetworkConfig() {
  // @@protoc_insertion_point(destructor:CMsgGCCStrike15_v2_ClientNetworkConfig)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgGCCStrike15_v2_ClientNetworkConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.data_.Destroy();
}

void CMsgGCCStrike15_v2_ClientNetworkConfig::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgGCCStrike15_v2_ClientNetworkConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCCStrike15_v2_ClientNetworkConfig)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.data_.ClearNonDefaultToEmpty();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCCStrike15_v2_ClientNetworkConfig::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bytes data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_data();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgGCCStrike15_v2_ClientNetworkConfig::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCCStrike15_v2_ClientNetworkConfig)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bytes data = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCCStrike15_v2_ClientNetworkConfig)
  return target;
}

size_t CMsgGCCStrike15_v2_ClientNetworkConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCCStrike15_v2_ClientNetworkConfig)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bytes data = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_data());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgGCCStrike15_v2_ClientNetworkConfig::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgGCCStrike15_v2_ClientNetworkConfig::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgGCCStrike15_v2_ClientNetworkConfig::GetClassData() const { return &_class_data_; }


void CMsgGCCStrike15_v2_ClientNetworkConfig::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgGCCStrike15_v2_ClientNetworkConfig*>(&to_msg);
  auto& from = static_cast<const CMsgGCCStrike15_v2_ClientNetworkConfig&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCCStrike15_v2_ClientNetworkConfig)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_data()) {
    _this->_internal_set_data(from._internal_data());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgGCCStrike15_v2_ClientNetworkConfig::CopyFrom(const CMsgGCCStrike15_v2_ClientNetworkConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCCStrike15_v2_ClientNetworkConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCCStrike15_v2_ClientNetworkConfig::IsInitialized() const {
  return true;
}

void CMsgGCCStrike15_v2_ClientNetworkConfig::InternalSwap(CMsgGCCStrike15_v2_ClientNetworkConfig* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.data_, lhs_arena,
      &other->_impl_.data_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCCStrike15_v2_ClientNetworkConfig::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cstrike15_5fgcmessages_2eproto_getter, &descriptor_table_cstrike15_5fgcmessages_2eproto_once,
      file_level_metadata_cstrike15_5fgcmessages_2eproto[66]);
}

// ===================================================================

class CMsgGCCStrike15_ClientDeepStats_DeepStatsRange::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCCStrike15_ClientDeepStats_DeepStatsRange>()._impl_._has_bits_);
  static void set_has_begin(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_end(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_frozen(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CMsgGCCStrike15_ClientDeepStats_DeepStatsRange::CMsgGCCStrike15_ClientDeepStats_DeepStatsRange(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgGCCStrike15_ClientDeepStats.DeepStatsRange)
}
CMsgGCCStrike15_ClientDeepStats_DeepStatsRange::CMsgGCCStrike15_ClientDeepStats_DeepStatsRange(const CMsgGCCStrike15_ClientDeepStats_DeepStatsRange& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgGCCStrike15_ClientDeepStats_DeepStatsRange* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.begin_){}
    , decltype(_impl_.end_){}
    , decltype(_impl_.frozen_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.begin_, &from._impl_.begin_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.frozen_) -
    reinterpret_cast<char*>(&_impl_.begin_)) + sizeof(_impl_.frozen_));
  // @@protoc_insertion_point(copy_constructor:CMsgGCCStrike15_ClientDeepStats.DeepStatsRange)
}

inline void CMsgGCCStrike15_ClientDeepStats_DeepStatsRange::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.begin_){0u}
    , decltype(_impl_.end_){0u}
    , decltype(_impl_.frozen_){false}
  };
}

CMsgGCCStrike15_ClientDeepStats_DeepStatsRange::~CMsgGCCStrike15_ClientDeepStats_DeepStatsRange() {
  // @@protoc_insertion_point(destructor:CMsgGCCStrike15_ClientDeepStats.DeepStatsRange)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgGCCStrike15_ClientDeepStats_DeepStatsRange::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgGCCStrike15_ClientDeepStats_DeepStatsRange::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgGCCStrike15_ClientDeepStats_DeepStatsRange::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCCStrike15_ClientDeepStats.DeepStatsRange)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.begin_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.frozen_) -
        reinterpret_cast<char*>(&_impl_.begin_)) + sizeof(_impl_.frozen_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCCStrike15_ClientDeepStats_DeepStatsRange::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 begin = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_begin(&has_bits);
          _impl_.begin_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 end = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_end(&has_bits);
          _impl_.end_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool frozen = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_frozen(&has_bits);
          _impl_.frozen_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgGCCStrike15_ClientDeepStats_DeepStatsRange::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCCStrike15_ClientDeepStats.DeepStatsRange)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 begin = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_begin(), target);
  }

  // optional uint32 end = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_end(), target);
  }

  // optional bool frozen = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_frozen(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCCStrike15_ClientDeepStats.DeepStatsRange)
  return target;
}

size_t CMsgGCCStrike15_ClientDeepStats_DeepStatsRange::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCCStrike15_ClientDeepStats.DeepStatsRange)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint32 begin = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_begin());
    }

    // optional uint32 end = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_end());
    }

    // optional bool frozen = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgGCCStrike15_ClientDeepStats_DeepStatsRange::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgGCCStrike15_ClientDeepStats_DeepStatsRange::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgGCCStrike15_ClientDeepStats_DeepStatsRange::GetClassData() const { return &_class_data_; }


void CMsgGCCStrike15_ClientDeepStats_DeepStatsRange::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgGCCStrike15_ClientDeepStats_DeepStatsRange*>(&to_msg);
  auto& from = static_cast<const CMsgGCCStrike15_ClientDeepStats_DeepStatsRange&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCCStrike15_ClientDeepStats.DeepStatsRange)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.begin_ = from._impl_.begin_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.end_ = from._impl_.end_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.frozen_ = from._impl_.frozen_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgGCCStrike15_ClientDeepStats_DeepStatsRange::CopyFrom(const CMsgGCCStrike15_ClientDeepStats_DeepStatsRange& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCCStrike15_ClientDeepStats.DeepStatsRange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCCStrike15_ClientDeepStats_DeepStatsRange::IsInitialized() const {
  return true;
}

void CMsgGCCStrike15_ClientDeepStats_DeepStatsRange::InternalSwap(CMsgGCCStrike15_ClientDeepStats_DeepStatsRange* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgGCCStrike15_ClientDeepStats_DeepStatsRange, _impl_.frozen_)
      + sizeof(CMsgGCCStrike15_ClientDeepStats_DeepStatsRange::_impl_.frozen_)
      - PROTOBUF_FIELD_OFFSET(CMsgGCCStrike15_ClientDeepStats_DeepStatsRange, _impl_.begin_)>(
          reinterpret_cast<char*>(&_impl_.begin_),
          reinterpret_cast<char*>(&other->_impl_.begin_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCCStrike15_ClientDeepStats_DeepStatsRange::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cstrike15_5fgcmessages_2eproto_getter, &descriptor_table_cstrike15_5fgcmessages_2eproto_once,
      file_level_metadata_cstrike15_5fgcmessages_2eproto[67]);
}

// ===================================================================

class CMsgGCCStrike15_ClientDeepStats_DeepStatsMatch::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCCStrike15_ClientDeepStats_DeepStatsMatch>()._impl_._has_bits_);
  static const ::DeepPlayerStatsEntry& player(const CMsgGCCStrike15_ClientDeepStats_DeepStatsMatch* msg);
  static void set_has_player(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::DeepPlayerStatsEntry&
CMsgGCCStrike15_ClientDeepStats_DeepStatsMatch::_Internal::player(const CMsgGCCStrike15_ClientDeepStats_DeepStatsMatch* msg) {
  return *msg->_impl_.player_;
}
CMsgGCCStrike15_ClientDeepStats_DeepStatsMatch::CMsgGCCStrike15_ClientDeepStats_DeepStatsMatch(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgGCCStrike15_ClientDeepStats.DeepStatsMatch)
}
CMsgGCCStrike15_ClientDeepStats_DeepStatsMatch::CMsgGCCStrike15_ClientDeepStats_DeepStatsMatch(const CMsgGCCStrike15_ClientDeepStats_DeepStatsMatch& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgGCCStrike15_ClientDeepStats_DeepStatsMatch* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.events_){from._impl_.events_}
    , decltype(_impl_.player_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_player()) {
    _this->_impl_.player_ = new ::DeepPlayerStatsEntry(*from._impl_.player_);
  }
  // @@protoc_insertion_point(copy_constructor:CMsgGCCStrike15_ClientDeepStats.DeepStatsMatch)
}

inline void CMsgGCCStrike15_ClientDeepStats_DeepStatsMatch::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.events_){arena}
    , decltype(_impl_.player_){nullptr}
  };
}

CMsgGCCStrike15_ClientDeepStats_DeepStatsMatch::~CMsgGCCStrike15_ClientDeepStats_DeepStatsMatch() {
  // @@protoc_insertion_point(destructor:CMsgGCCStrike15_ClientDeepStats.DeepStatsMatch)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgGCCStrike15_ClientDeepStats_DeepStatsMatch::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.events_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.player_;
}

void CMsgGCCStrike15_ClientDeepStats_DeepStatsMatch::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgGCCStrike15_ClientDeepStats_DeepStatsMatch::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCCStrike15_ClientDeepStats.DeepStatsMatch)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.events_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.player_ != nullptr);
    _impl_.player_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCCStrike15_ClientDeepStats_DeepStatsMatch::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .DeepPlayerStatsEntry player = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_player(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .DeepPlayerMatchEvent events = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_events(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgGCCStrike15_ClientDeepStats_DeepStatsMatch::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCCStrike15_ClientDeepStats.DeepStatsMatch)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .DeepPlayerStatsEntry player = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::player(this),
        _Internal::player(this).GetCachedSize(), target, stream);
  }

  // repeated .DeepPlayerMatchEvent events = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_events_size()); i < n; i++) {
    const auto& repfield = this->_internal_events(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCCStrike15_ClientDeepStats.DeepStatsMatch)
  return target;
}

size_t CMsgGCCStrike15_ClientDeepStats_DeepStatsMatch::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCCStrike15_ClientDeepStats.DeepStatsMatch)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .DeepPlayerMatchEvent events = 2;
  total_size += 1UL * this->_internal_events_size();
  for (const auto& msg : this->_impl_.events_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional .DeepPlayerStatsEntry player = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.player_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgGCCStrike15_ClientDeepStats_DeepStatsMatch::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgGCCStrike15_ClientDeepStats_DeepStatsMatch::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgGCCStrike15_ClientDeepStats_DeepStatsMatch::GetClassData() const { return &_class_data_; }


void CMsgGCCStrike15_ClientDeepStats_DeepStatsMatch::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgGCCStrike15_ClientDeepStats_DeepStatsMatch*>(&to_msg);
  auto& from = static_cast<const CMsgGCCStrike15_ClientDeepStats_DeepStatsMatch&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCCStrike15_ClientDeepStats.DeepStatsMatch)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.events_.MergeFrom(from._impl_.events_);
  if (from._internal_has_player()) {
    _this->_internal_mutable_player()->::DeepPlayerStatsEntry::MergeFrom(
        from._internal_player());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgGCCStrike15_ClientDeepStats_DeepStatsMatch::CopyFrom(const CMsgGCCStrike15_ClientDeepStats_DeepStatsMatch& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCCStrike15_ClientDeepStats.DeepStatsMatch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCCStrike15_ClientDeepStats_DeepStatsMatch::IsInitialized() const {
  return true;
}

void CMsgGCCStrike15_ClientDeepStats_DeepStatsMatch::InternalSwap(CMsgGCCStrike15_ClientDeepStats_DeepStatsMatch* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.events_.InternalSwap(&other->_impl_.events_);
  swap(_impl_.player_, other->_impl_.player_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCCStrike15_ClientDeepStats_DeepStatsMatch::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cstrike15_5fgcmessages_2eproto_getter, &descriptor_table_cstrike15_5fgcmessages_2eproto_once,
      file_level_metadata_cstrike15_5fgcmessages_2eproto[68]);
}

// ===================================================================

class CMsgGCCStrike15_ClientDeepStats::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCCStrike15_ClientDeepStats>()._impl_._has_bits_);
  static void set_has_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::CMsgGCCStrike15_ClientDeepStats_DeepStatsRange& range(const CMsgGCCStrike15_ClientDeepStats* msg);
  static void set_has_range(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::CMsgGCCStrike15_ClientDeepStats_DeepStatsRange&
CMsgGCCStrike15_ClientDeepStats::_Internal::range(const CMsgGCCStrike15_ClientDeepStats* msg) {
  return *msg->_impl_.range_;
}
CMsgGCCStrike15_ClientDeepStats::CMsgGCCStrike15_ClientDeepStats(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgGCCStrike15_ClientDeepStats)
}
CMsgGCCStrike15_ClientDeepStats::CMsgGCCStrike15_ClientDeepStats(const CMsgGCCStrike15_ClientDeepStats& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgGCCStrike15_ClientDeepStats* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.matches_){from._impl_.matches_}
    , decltype(_impl_.range_){nullptr}
    , decltype(_impl_.account_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_range()) {
    _this->_impl_.range_ = new ::CMsgGCCStrike15_ClientDeepStats_DeepStatsRange(*from._impl_.range_);
  }
  _this->_impl_.account_id_ = from._impl_.account_id_;
  // @@protoc_insertion_point(copy_constructor:CMsgGCCStrike15_ClientDeepStats)
}

inline void CMsgGCCStrike15_ClientDeepStats::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.matches_){arena}
    , decltype(_impl_.range_){nullptr}
    , decltype(_impl_.account_id_){0u}
  };
}

CMsgGCCStrike15_ClientDeepStats::~CMsgGCCStrike15_ClientDeepStats() {
  // @@protoc_insertion_point(destructor:CMsgGCCStrike15_ClientDeepStats)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgGCCStrike15_ClientDeepStats::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.matches_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.range_;
}

void CMsgGCCStrike15_ClientDeepStats::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgGCCStrike15_ClientDeepStats::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCCStrike15_ClientDeepStats)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.matches_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.range_ != nullptr);
    _impl_.range_->Clear();
  }
  _impl_.account_id_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCCStrike15_ClientDeepStats::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 account_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_account_id(&has_bits);
          _impl_.account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .CMsgGCCStrike15_ClientDeepStats.DeepStatsRange range = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_range(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .CMsgGCCStrike15_ClientDeepStats.DeepStatsMatch matches = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_matches(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgGCCStrike15_ClientDeepStats::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCCStrike15_ClientDeepStats)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_account_id(), target);
  }

  // optional .CMsgGCCStrike15_ClientDeepStats.DeepStatsRange range = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::range(this),
        _Internal::range(this).GetCachedSize(), target, stream);
  }

  // repeated .CMsgGCCStrike15_ClientDeepStats.DeepStatsMatch matches = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_matches_size()); i < n; i++) {
    const auto& repfield = this->_internal_matches(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCCStrike15_ClientDeepStats)
  return target;
}

size_t CMsgGCCStrike15_ClientDeepStats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCCStrike15_ClientDeepStats)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgGCCStrike15_ClientDeepStats.DeepStatsMatch matches = 3;
  total_size += 1UL * this->_internal_matches_size();
  for (const auto& msg : this->_impl_.matches_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .CMsgGCCStrike15_ClientDeepStats.DeepStatsRange range = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.range_);
    }

    // optional uint32 account_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_account_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgGCCStrike15_ClientDeepStats::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgGCCStrike15_ClientDeepStats::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgGCCStrike15_ClientDeepStats::GetClassData() const { return &_class_data_; }


void CMsgGCCStrike15_ClientDeepStats::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgGCCStrike15_ClientDeepStats*>(&to_msg);
  auto& from = static_cast<const CMsgGCCStrike15_ClientDeepStats&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCCStrike15_ClientDeepStats)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.matches_.MergeFrom(from._impl_.matches_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_range()->::CMsgGCCStrike15_ClientDeepStats_DeepStatsRange::MergeFrom(
          from._internal_range());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.account_id_ = from._impl_.account_id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgGCCStrike15_ClientDeepStats::CopyFrom(const CMsgGCCStrike15_ClientDeepStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCCStrike15_ClientDeepStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCCStrike15_ClientDeepStats::IsInitialized() const {
  return true;
}

void CMsgGCCStrike15_ClientDeepStats::InternalSwap(CMsgGCCStrike15_ClientDeepStats* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.matches_.InternalSwap(&other->_impl_.matches_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgGCCStrike15_ClientDeepStats, _impl_.account_id_)
      + sizeof(CMsgGCCStrike15_ClientDeepStats::_impl_.account_id_)
      - PROTOBUF_FIELD_OFFSET(CMsgGCCStrike15_ClientDeepStats, _impl_.range_)>(
          reinterpret_cast<char*>(&_impl_.range_),
          reinterpret_cast<char*>(&other->_impl_.range_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCCStrike15_ClientDeepStats::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cstrike15_5fgcmessages_2eproto_getter, &descriptor_table_cstrike15_5fgcmessages_2eproto_once,
      file_level_metadata_cstrike15_5fgcmessages_2eproto[69]);
}

// ===================================================================

class CMsgGCCStrike15_v2_WatchInfoUsers::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCCStrike15_v2_WatchInfoUsers>()._impl_._has_bits_);
  static void set_has_request_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_extended_timeout(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgGCCStrike15_v2_WatchInfoUsers::CMsgGCCStrike15_v2_WatchInfoUsers(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgGCCStrike15_v2_WatchInfoUsers)
}
CMsgGCCStrike15_v2_WatchInfoUsers::CMsgGCCStrike15_v2_WatchInfoUsers(const CMsgGCCStrike15_v2_WatchInfoUsers& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgGCCStrike15_v2_WatchInfoUsers* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.account_ids_){from._impl_.account_ids_}
    , decltype(_impl_.watchable_match_infos_){from._impl_.watchable_match_infos_}
    , decltype(_impl_.request_id_){}
    , decltype(_impl_.extended_timeout_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.request_id_, &from._impl_.request_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.extended_timeout_) -
    reinterpret_cast<char*>(&_impl_.request_id_)) + sizeof(_impl_.extended_timeout_));
  // @@protoc_insertion_point(copy_constructor:CMsgGCCStrike15_v2_WatchInfoUsers)
}

inline void CMsgGCCStrike15_v2_WatchInfoUsers::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.account_ids_){arena}
    , decltype(_impl_.watchable_match_infos_){arena}
    , decltype(_impl_.request_id_){0u}
    , decltype(_impl_.extended_timeout_){0u}
  };
}

CMsgGCCStrike15_v2_WatchInfoUsers::~CMsgGCCStrike15_v2_WatchInfoUsers() {
  // @@protoc_insertion_point(destructor:CMsgGCCStrike15_v2_WatchInfoUsers)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgGCCStrike15_v2_WatchInfoUsers::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.account_ids_.~RepeatedField();
  _impl_.watchable_match_infos_.~RepeatedPtrField();
}

void CMsgGCCStrike15_v2_WatchInfoUsers::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgGCCStrike15_v2_WatchInfoUsers::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCCStrike15_v2_WatchInfoUsers)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.account_ids_.Clear();
  _impl_.watchable_match_infos_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.request_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.extended_timeout_) -
        reinterpret_cast<char*>(&_impl_.request_id_)) + sizeof(_impl_.extended_timeout_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCCStrike15_v2_WatchInfoUsers::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 request_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_request_id(&has_bits);
          _impl_.request_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 account_ids = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_account_ids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<16>(ptr));
        } else if (static_cast<uint8_t>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_account_ids(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .WatchableMatchInfo watchable_match_infos = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_watchable_match_infos(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional uint32 extended_timeout = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_extended_timeout(&has_bits);
          _impl_.extended_timeout_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgGCCStrike15_v2_WatchInfoUsers::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCCStrike15_v2_WatchInfoUsers)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 request_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_request_id(), target);
  }

  // repeated uint32 account_ids = 2;
  for (int i = 0, n = this->_internal_account_ids_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_account_ids(i), target);
  }

  // repeated .WatchableMatchInfo watchable_match_infos = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_watchable_match_infos_size()); i < n; i++) {
    const auto& repfield = this->_internal_watchable_match_infos(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional uint32 extended_timeout = 5;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_extended_timeout(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCCStrike15_v2_WatchInfoUsers)
  return target;
}

size_t CMsgGCCStrike15_v2_WatchInfoUsers::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCCStrike15_v2_WatchInfoUsers)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 account_ids = 2;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.account_ids_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_account_ids_size());
    total_size += data_size;
  }

  // repeated .WatchableMatchInfo watchable_match_infos = 3;
  total_size += 1UL * this->_internal_watchable_match_infos_size();
  for (const auto& msg : this->_impl_.watchable_match_infos_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 request_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_request_id());
    }

    // optional uint32 extended_timeout = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_extended_timeout());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgGCCStrike15_v2_WatchInfoUsers::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgGCCStrike15_v2_WatchInfoUsers::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgGCCStrike15_v2_WatchInfoUsers::GetClassData() const { return &_class_data_; }


void CMsgGCCStrike15_v2_WatchInfoUsers::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgGCCStrike15_v2_WatchInfoUsers*>(&to_msg);
  auto& from = static_cast<const CMsgGCCStrike15_v2_WatchInfoUsers&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCCStrike15_v2_WatchInfoUsers)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.account_ids_.MergeFrom(from._impl_.account_ids_);
  _this->_impl_.watchable_match_infos_.MergeFrom(from._impl_.watchable_match_infos_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.request_id_ = from._impl_.request_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.extended_timeout_ = from._impl_.extended_timeout_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgGCCStrike15_v2_WatchInfoUsers::CopyFrom(const CMsgGCCStrike15_v2_WatchInfoUsers& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCCStrike15_v2_WatchInfoUsers)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCCStrike15_v2_WatchInfoUsers::IsInitialized() const {
  return true;
}

void CMsgGCCStrike15_v2_WatchInfoUsers::InternalSwap(CMsgGCCStrike15_v2_WatchInfoUsers* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.account_ids_.InternalSwap(&other->_impl_.account_ids_);
  _impl_.watchable_match_infos_.InternalSwap(&other->_impl_.watchable_match_infos_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgGCCStrike15_v2_WatchInfoUsers, _impl_.extended_timeout_)
      + sizeof(CMsgGCCStrike15_v2_WatchInfoUsers::_impl_.extended_timeout_)
      - PROTOBUF_FIELD_OFFSET(CMsgGCCStrike15_v2_WatchInfoUsers, _impl_.request_id_)>(
          reinterpret_cast<char*>(&_impl_.request_id_),
          reinterpret_cast<char*>(&other->_impl_.request_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCCStrike15_v2_WatchInfoUsers::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cstrike15_5fgcmessages_2eproto_getter, &descriptor_table_cstrike15_5fgcmessages_2eproto_once,
      file_level_metadata_cstrike15_5fgcmessages_2eproto[70]);
}

// ===================================================================

class CMsgGCCStrike15_v2_ClientRequestPlayersProfile::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCCStrike15_v2_ClientRequestPlayersProfile>()._impl_._has_bits_);
  static void set_has_request_id__deprecated(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_request_level(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CMsgGCCStrike15_v2_ClientRequestPlayersProfile::CMsgGCCStrike15_v2_ClientRequestPlayersProfile(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgGCCStrike15_v2_ClientRequestPlayersProfile)
}
CMsgGCCStrike15_v2_ClientRequestPlayersProfile::CMsgGCCStrike15_v2_ClientRequestPlayersProfile(const CMsgGCCStrike15_v2_ClientRequestPlayersProfile& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgGCCStrike15_v2_ClientRequestPlayersProfile* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.account_ids__deprecated_){from._impl_.account_ids__deprecated_}
    , decltype(_impl_.request_id__deprecated_){}
    , decltype(_impl_.account_id_){}
    , decltype(_impl_.request_level_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.request_id__deprecated_, &from._impl_.request_id__deprecated_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.request_level_) -
    reinterpret_cast<char*>(&_impl_.request_id__deprecated_)) + sizeof(_impl_.request_level_));
  // @@protoc_insertion_point(copy_constructor:CMsgGCCStrike15_v2_ClientRequestPlayersProfile)
}

inline void CMsgGCCStrike15_v2_ClientRequestPlayersProfile::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.account_ids__deprecated_){arena}
    , decltype(_impl_.request_id__deprecated_){0u}
    , decltype(_impl_.account_id_){0u}
    , decltype(_impl_.request_level_){0u}
  };
}

CMsgGCCStrike15_v2_ClientRequestPlayersProfile::~CMsgGCCStrike15_v2_ClientRequestPlayersProfile() {
  // @@protoc_insertion_point(destructor:CMsgGCCStrike15_v2_ClientRequestPlayersProfile)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgGCCStrike15_v2_ClientRequestPlayersProfile::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.account_ids__deprecated_.~RepeatedField();
}

void CMsgGCCStrike15_v2_ClientRequestPlayersProfile::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgGCCStrike15_v2_ClientRequestPlayersProfile::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCCStrike15_v2_ClientRequestPlayersProfile)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.account_ids__deprecated_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.request_id__deprecated_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.request_level_) -
        reinterpret_cast<char*>(&_impl_.request_id__deprecated_)) + sizeof(_impl_.request_level_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCCStrike15_v2_ClientRequestPlayersProfile::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 request_id__deprecated = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_request_id__deprecated(&has_bits);
          _impl_.request_id__deprecated_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 account_ids__deprecated = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_account_ids__deprecated(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<16>(ptr));
        } else if (static_cast<uint8_t>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_account_ids__deprecated(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 account_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_account_id(&has_bits);
          _impl_.account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 request_level = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_request_level(&has_bits);
          _impl_.request_level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgGCCStrike15_v2_ClientRequestPlayersProfile::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCCStrike15_v2_ClientRequestPlayersProfile)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 request_id__deprecated = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_request_id__deprecated(), target);
  }

  // repeated uint32 account_ids__deprecated = 2;
  for (int i = 0, n = this->_internal_account_ids__deprecated_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_account_ids__deprecated(i), target);
  }

  // optional uint32 account_id = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_account_id(), target);
  }

  // optional uint32 request_level = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_request_level(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCCStrike15_v2_ClientRequestPlayersProfile)
  return target;
}

size_t CMsgGCCStrike15_v2_ClientRequestPlayersProfile::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCCStrike15_v2_ClientRequestPlayersProfile)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 account_ids__deprecated = 2;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.account_ids__deprecated_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_account_ids__deprecated_size());
    total_size += data_size;
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint32 request_id__deprecated = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_request_id__deprecated());
    }

    // optional uint32 account_id = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_account_id());
    }

    // optional uint32 request_level = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_request_level());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgGCCStrike15_v2_ClientRequestPlayersProfile::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgGCCStrike15_v2_ClientRequestPlayersProfile::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgGCCStrike15_v2_ClientRequestPlayersProfile::GetClassData() const { return &_class_data_; }


void CMsgGCCStrike15_v2_ClientRequestPlayersProfile::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgGCCStrike15_v2_ClientRequestPlayersProfile*>(&to_msg);
  auto& from = static_cast<const CMsgGCCStrike15_v2_ClientRequestPlayersProfile&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCCStrike15_v2_ClientRequestPlayersProfile)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.account_ids__deprecated_.MergeFrom(from._impl_.account_ids__deprecated_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.request_id__deprecated_ = from._impl_.request_id__deprecated_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.account_id_ = from._impl_.account_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.request_level_ = from._impl_.request_level_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgGCCStrike15_v2_ClientRequestPlayersProfile::CopyFrom(const CMsgGCCStrike15_v2_ClientRequestPlayersProfile& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCCStrike15_v2_ClientRequestPlayersProfile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCCStrike15_v2_ClientRequestPlayersProfile::IsInitialized() const {
  return true;
}

void CMsgGCCStrike15_v2_ClientRequestPlayersProfile::InternalSwap(CMsgGCCStrike15_v2_ClientRequestPlayersProfile* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.account_ids__deprecated_.InternalSwap(&other->_impl_.account_ids__deprecated_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgGCCStrike15_v2_ClientRequestPlayersProfile, _impl_.request_level_)
      + sizeof(CMsgGCCStrike15_v2_ClientRequestPlayersProfile::_impl_.request_level_)
      - PROTOBUF_FIELD_OFFSET(CMsgGCCStrike15_v2_ClientRequestPlayersProfile, _impl_.request_id__deprecated_)>(
          reinterpret_cast<char*>(&_impl_.request_id__deprecated_),
          reinterpret_cast<char*>(&other->_impl_.request_id__deprecated_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCCStrike15_v2_ClientRequestPlayersProfile::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cstrike15_5fgcmessages_2eproto_getter, &descriptor_table_cstrike15_5fgcmessages_2eproto_once,
      file_level_metadata_cstrike15_5fgcmessages_2eproto[71]);
}

// ===================================================================

class CMsgGCCStrike15_v2_PlayersProfile::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCCStrike15_v2_PlayersProfile>()._impl_._has_bits_);
  static void set_has_request_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgGCCStrike15_v2_PlayersProfile::CMsgGCCStrike15_v2_PlayersProfile(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgGCCStrike15_v2_PlayersProfile)
}
CMsgGCCStrike15_v2_PlayersProfile::CMsgGCCStrike15_v2_PlayersProfile(const CMsgGCCStrike15_v2_PlayersProfile& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgGCCStrike15_v2_PlayersProfile* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.account_profiles_){from._impl_.account_profiles_}
    , decltype(_impl_.request_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.request_id_ = from._impl_.request_id_;
  // @@protoc_insertion_point(copy_constructor:CMsgGCCStrike15_v2_PlayersProfile)
}

inline void CMsgGCCStrike15_v2_PlayersProfile::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.account_profiles_){arena}
    , decltype(_impl_.request_id_){0u}
  };
}

CMsgGCCStrike15_v2_PlayersProfile::~CMsgGCCStrike15_v2_PlayersProfile() {
  // @@protoc_insertion_point(destructor:CMsgGCCStrike15_v2_PlayersProfile)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgGCCStrike15_v2_PlayersProfile::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.account_profiles_.~RepeatedPtrField();
}

void CMsgGCCStrike15_v2_PlayersProfile::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgGCCStrike15_v2_PlayersProfile::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCCStrike15_v2_PlayersProfile)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.account_profiles_.Clear();
  _impl_.request_id_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCCStrike15_v2_PlayersProfile::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 request_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_request_id(&has_bits);
          _impl_.request_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .CMsgGCCStrike15_v2_MatchmakingGC2ClientHello account_profiles = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_account_profiles(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgGCCStrike15_v2_PlayersProfile::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCCStrike15_v2_PlayersProfile)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 request_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_request_id(), target);
  }

  // repeated .CMsgGCCStrike15_v2_MatchmakingGC2ClientHello account_profiles = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_account_profiles_size()); i < n; i++) {
    const auto& repfield = this->_internal_account_profiles(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCCStrike15_v2_PlayersProfile)
  return target;
}

size_t CMsgGCCStrike15_v2_PlayersProfile::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCCStrike15_v2_PlayersProfile)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgGCCStrike15_v2_MatchmakingGC2ClientHello account_profiles = 2;
  total_size += 1UL * this->_internal_account_profiles_size();
  for (const auto& msg : this->_impl_.account_profiles_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional uint32 request_id = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_request_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgGCCStrike15_v2_PlayersProfile::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgGCCStrike15_v2_PlayersProfile::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgGCCStrike15_v2_PlayersProfile::GetClassData() const { return &_class_data_; }


void CMsgGCCStrike15_v2_PlayersProfile::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgGCCStrike15_v2_PlayersProfile*>(&to_msg);
  auto& from = static_cast<const CMsgGCCStrike15_v2_PlayersProfile&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCCStrike15_v2_PlayersProfile)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.account_profiles_.MergeFrom(from._impl_.account_profiles_);
  if (from._internal_has_request_id()) {
    _this->_internal_set_request_id(from._internal_request_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgGCCStrike15_v2_PlayersProfile::CopyFrom(const CMsgGCCStrike15_v2_PlayersProfile& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCCStrike15_v2_PlayersProfile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCCStrike15_v2_PlayersProfile::IsInitialized() const {
  return true;
}

void CMsgGCCStrike15_v2_PlayersProfile::InternalSwap(CMsgGCCStrike15_v2_PlayersProfile* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.account_profiles_.InternalSwap(&other->_impl_.account_profiles_);
  swap(_impl_.request_id_, other->_impl_.request_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCCStrike15_v2_PlayersProfile::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cstrike15_5fgcmessages_2eproto_getter, &descriptor_table_cstrike15_5fgcmessages_2eproto_once,
      file_level_metadata_cstrike15_5fgcmessages_2eproto[72]);
}

// ===================================================================

class CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate>()._impl_._has_bits_);
  static void set_has_caseid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_suspectid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_fractionid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_rpt_aimbot(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_rpt_wallhack(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_rpt_speedhack(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_rpt_teamharm(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_reason(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
};

CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate::CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate)
}
CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate::CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate(const CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.caseid_){}
    , decltype(_impl_.suspectid_){}
    , decltype(_impl_.fractionid_){}
    , decltype(_impl_.rpt_aimbot_){}
    , decltype(_impl_.rpt_wallhack_){}
    , decltype(_impl_.rpt_speedhack_){}
    , decltype(_impl_.rpt_teamharm_){}
    , decltype(_impl_.reason_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.caseid_, &from._impl_.caseid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.reason_) -
    reinterpret_cast<char*>(&_impl_.caseid_)) + sizeof(_impl_.reason_));
  // @@protoc_insertion_point(copy_constructor:CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate)
}

inline void CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.caseid_){uint64_t{0u}}
    , decltype(_impl_.suspectid_){0u}
    , decltype(_impl_.fractionid_){0u}
    , decltype(_impl_.rpt_aimbot_){0u}
    , decltype(_impl_.rpt_wallhack_){0u}
    , decltype(_impl_.rpt_speedhack_){0u}
    , decltype(_impl_.rpt_teamharm_){0u}
    , decltype(_impl_.reason_){0u}
  };
}

CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate::~CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate() {
  // @@protoc_insertion_point(destructor:CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&_impl_.caseid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.reason_) -
        reinterpret_cast<char*>(&_impl_.caseid_)) + sizeof(_impl_.reason_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 caseid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_caseid(&has_bits);
          _impl_.caseid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 suspectid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_suspectid(&has_bits);
          _impl_.suspectid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 fractionid = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_fractionid(&has_bits);
          _impl_.fractionid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 rpt_aimbot = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_rpt_aimbot(&has_bits);
          _impl_.rpt_aimbot_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 rpt_wallhack = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_rpt_wallhack(&has_bits);
          _impl_.rpt_wallhack_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 rpt_speedhack = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_rpt_speedhack(&has_bits);
          _impl_.rpt_speedhack_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 rpt_teamharm = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_rpt_teamharm(&has_bits);
          _impl_.rpt_teamharm_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 reason = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_reason(&has_bits);
          _impl_.reason_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint64 caseid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_caseid(), target);
  }

  // optional uint32 suspectid = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_suspectid(), target);
  }

  // optional uint32 fractionid = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_fractionid(), target);
  }

  // optional uint32 rpt_aimbot = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_rpt_aimbot(), target);
  }

  // optional uint32 rpt_wallhack = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_rpt_wallhack(), target);
  }

  // optional uint32 rpt_speedhack = 7;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(7, this->_internal_rpt_speedhack(), target);
  }

  // optional uint32 rpt_teamharm = 8;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(8, this->_internal_rpt_teamharm(), target);
  }

  // optional uint32 reason = 9;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(9, this->_internal_reason(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate)
  return target;
}

size_t CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional uint64 caseid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_caseid());
    }

    // optional uint32 suspectid = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_suspectid());
    }

    // optional uint32 fractionid = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_fractionid());
    }

    // optional uint32 rpt_aimbot = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_rpt_aimbot());
    }

    // optional uint32 rpt_wallhack = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_rpt_wallhack());
    }

    // optional uint32 rpt_speedhack = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_rpt_speedhack());
    }

    // optional uint32 rpt_teamharm = 8;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_rpt_teamharm());
    }

    // optional uint32 reason = 9;
    if (cached_has_bits & 0x00000080u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_reason());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate::GetClassData() const { return &_class_data_; }


void CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate*>(&to_msg);
  auto& from = static_cast<const CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.caseid_ = from._impl_.caseid_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.suspectid_ = from._impl_.suspectid_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.fractionid_ = from._impl_.fractionid_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.rpt_aimbot_ = from._impl_.rpt_aimbot_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.rpt_wallhack_ = from._impl_.rpt_wallhack_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.rpt_speedhack_ = from._impl_.rpt_speedhack_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.rpt_teamharm_ = from._impl_.rpt_teamharm_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.reason_ = from._impl_.reason_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate::CopyFrom(const CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate::IsInitialized() const {
  return true;
}

void CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate::InternalSwap(CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate, _impl_.reason_)
      + sizeof(CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate::_impl_.reason_)
      - PROTOBUF_FIELD_OFFSET(CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate, _impl_.caseid_)>(
          reinterpret_cast<char*>(&_impl_.caseid_),
          reinterpret_cast<char*>(&other->_impl_.caseid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cstrike15_5fgcmessages_2eproto_getter, &descriptor_table_cstrike15_5fgcmessages_2eproto_once,
      file_level_metadata_cstrike15_5fgcmessages_2eproto[73]);
}

// ===================================================================

class CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment>()._impl_._has_bits_);
  static void set_has_caseid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_caseurl(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_verdict(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_throttleseconds(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_suspectid(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_fractionid(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_numrounds(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_fractionrounds(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_streakconvictions(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_reason(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
};

CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment::CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment)
}
CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment::CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment(const CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.caseurl_){}
    , decltype(_impl_.caseid_){}
    , decltype(_impl_.verdict_){}
    , decltype(_impl_.timestamp_){}
    , decltype(_impl_.throttleseconds_){}
    , decltype(_impl_.suspectid_){}
    , decltype(_impl_.fractionid_){}
    , decltype(_impl_.numrounds_){}
    , decltype(_impl_.fractionrounds_){}
    , decltype(_impl_.streakconvictions_){}
    , decltype(_impl_.reason_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.caseurl_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.caseurl_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_caseurl()) {
    _this->_impl_.caseurl_.Set(from._internal_caseurl(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.caseid_, &from._impl_.caseid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.reason_) -
    reinterpret_cast<char*>(&_impl_.caseid_)) + sizeof(_impl_.reason_));
  // @@protoc_insertion_point(copy_constructor:CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment)
}

inline void CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.caseurl_){}
    , decltype(_impl_.caseid_){uint64_t{0u}}
    , decltype(_impl_.verdict_){0u}
    , decltype(_impl_.timestamp_){0u}
    , decltype(_impl_.throttleseconds_){0u}
    , decltype(_impl_.suspectid_){0u}
    , decltype(_impl_.fractionid_){0u}
    , decltype(_impl_.numrounds_){0u}
    , decltype(_impl_.fractionrounds_){0u}
    , decltype(_impl_.streakconvictions_){0}
    , decltype(_impl_.reason_){0u}
  };
  _impl_.caseurl_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.caseurl_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment::~CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment() {
  // @@protoc_insertion_point(destructor:CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.caseurl_.Destroy();
}

void CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.caseurl_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&_impl_.caseid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.numrounds_) -
        reinterpret_cast<char*>(&_impl_.caseid_)) + sizeof(_impl_.numrounds_));
  }
  if (cached_has_bits & 0x00000700u) {
    ::memset(&_impl_.fractionrounds_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.reason_) -
        reinterpret_cast<char*>(&_impl_.fractionrounds_)) + sizeof(_impl_.reason_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 caseid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_caseid(&has_bits);
          _impl_.caseid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string caseurl = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_caseurl();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment.caseurl");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional uint32 verdict = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_verdict(&has_bits);
          _impl_.verdict_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 timestamp = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_timestamp(&has_bits);
          _impl_.timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 throttleseconds = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_throttleseconds(&has_bits);
          _impl_.throttleseconds_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 suspectid = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_suspectid(&has_bits);
          _impl_.suspectid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 fractionid = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_fractionid(&has_bits);
          _impl_.fractionid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 numrounds = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_numrounds(&has_bits);
          _impl_.numrounds_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 fractionrounds = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_fractionrounds(&has_bits);
          _impl_.fractionrounds_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 streakconvictions = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_streakconvictions(&has_bits);
          _impl_.streakconvictions_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 reason = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _Internal::set_has_reason(&has_bits);
          _impl_.reason_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint64 caseid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_caseid(), target);
  }

  // optional string caseurl = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_caseurl().data(), static_cast<int>(this->_internal_caseurl().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment.caseurl");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_caseurl(), target);
  }

  // optional uint32 verdict = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_verdict(), target);
  }

  // optional uint32 timestamp = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_timestamp(), target);
  }

  // optional uint32 throttleseconds = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_throttleseconds(), target);
  }

  // optional uint32 suspectid = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_suspectid(), target);
  }

  // optional uint32 fractionid = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(7, this->_internal_fractionid(), target);
  }

  // optional uint32 numrounds = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(8, this->_internal_numrounds(), target);
  }

  // optional uint32 fractionrounds = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(9, this->_internal_fractionrounds(), target);
  }

  // optional int32 streakconvictions = 10;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(10, this->_internal_streakconvictions(), target);
  }

  // optional uint32 reason = 11;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(11, this->_internal_reason(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment)
  return target;
}

size_t CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string caseurl = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_caseurl());
    }

    // optional uint64 caseid = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_caseid());
    }

    // optional uint32 verdict = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_verdict());
    }

    // optional uint32 timestamp = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_timestamp());
    }

    // optional uint32 throttleseconds = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_throttleseconds());
    }

    // optional uint32 suspectid = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_suspectid());
    }

    // optional uint32 fractionid = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_fractionid());
    }

    // optional uint32 numrounds = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_numrounds());
    }

  }
  if (cached_has_bits & 0x00000700u) {
    // optional uint32 fractionrounds = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_fractionrounds());
    }

    // optional int32 streakconvictions = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_streakconvictions());
    }

    // optional uint32 reason = 11;
    if (cached_has_bits & 0x00000400u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_reason());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment::GetClassData() const { return &_class_data_; }


void CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment*>(&to_msg);
  auto& from = static_cast<const CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_caseurl(from._internal_caseurl());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.caseid_ = from._impl_.caseid_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.verdict_ = from._impl_.verdict_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.timestamp_ = from._impl_.timestamp_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.throttleseconds_ = from._impl_.throttleseconds_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.suspectid_ = from._impl_.suspectid_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.fractionid_ = from._impl_.fractionid_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.numrounds_ = from._impl_.numrounds_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000700u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.fractionrounds_ = from._impl_.fractionrounds_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.streakconvictions_ = from._impl_.streakconvictions_;
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_impl_.reason_ = from._impl_.reason_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment::CopyFrom(const CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment::IsInitialized() const {
  return true;
}

void CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment::InternalSwap(CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.caseurl_, lhs_arena,
      &other->_impl_.caseurl_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment, _impl_.reason_)
      + sizeof(CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment::_impl_.reason_)
      - PROTOBUF_FIELD_OFFSET(CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment, _impl_.caseid_)>(
          reinterpret_cast<char*>(&_impl_.caseid_),
          reinterpret_cast<char*>(&other->_impl_.caseid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cstrike15_5fgcmessages_2eproto_getter, &descriptor_table_cstrike15_5fgcmessages_2eproto_once,
      file_level_metadata_cstrike15_5fgcmessages_2eproto[74]);
}

// ===================================================================

class CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus>()._impl_._has_bits_);
  static void set_has_caseid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_statusid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus::CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus)
}
CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus::CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus(const CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.caseid_){}
    , decltype(_impl_.statusid_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.caseid_, &from._impl_.caseid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.statusid_) -
    reinterpret_cast<char*>(&_impl_.caseid_)) + sizeof(_impl_.statusid_));
  // @@protoc_insertion_point(copy_constructor:CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus)
}

inline void CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.caseid_){uint64_t{0u}}
    , decltype(_impl_.statusid_){0u}
  };
}

CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus::~CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus() {
  // @@protoc_insertion_point(destructor:CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.caseid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.statusid_) -
        reinterpret_cast<char*>(&_impl_.caseid_)) + sizeof(_impl_.statusid_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 caseid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_caseid(&has_bits);
          _impl_.caseid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 statusid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_statusid(&has_bits);
          _impl_.statusid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint64 caseid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_caseid(), target);
  }

  // optional uint32 statusid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_statusid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus)
  return target;
}

size_t CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint64 caseid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_caseid());
    }

    // optional uint32 statusid = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_statusid());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus::GetClassData() const { return &_class_data_; }


void CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus*>(&to_msg);
  auto& from = static_cast<const CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.caseid_ = from._impl_.caseid_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.statusid_ = from._impl_.statusid_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus::CopyFrom(const CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus::IsInitialized() const {
  return true;
}

void CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus::InternalSwap(CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus, _impl_.statusid_)
      + sizeof(CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus::_impl_.statusid_)
      - PROTOBUF_FIELD_OFFSET(CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus, _impl_.caseid_)>(
          reinterpret_cast<char*>(&_impl_.caseid_),
          reinterpret_cast<char*>(&other->_impl_.caseid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cstrike15_5fgcmessages_2eproto_getter, &descriptor_table_cstrike15_5fgcmessages_2eproto_once,
      file_level_metadata_cstrike15_5fgcmessages_2eproto[75]);
}

// ===================================================================

class CClientHeaderOverwatchEvidence::_Internal {
 public:
  using HasBits = decltype(std::declval<CClientHeaderOverwatchEvidence>()._impl_._has_bits_);
  static void set_has_accountid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_caseid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CClientHeaderOverwatchEvidence::CClientHeaderOverwatchEvidence(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CClientHeaderOverwatchEvidence)
}
CClientHeaderOverwatchEvidence::CClientHeaderOverwatchEvidence(const CClientHeaderOverwatchEvidence& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CClientHeaderOverwatchEvidence* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.caseid_){}
    , decltype(_impl_.accountid_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.caseid_, &from._impl_.caseid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.accountid_) -
    reinterpret_cast<char*>(&_impl_.caseid_)) + sizeof(_impl_.accountid_));
  // @@protoc_insertion_point(copy_constructor:CClientHeaderOverwatchEvidence)
}

inline void CClientHeaderOverwatchEvidence::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.caseid_){uint64_t{0u}}
    , decltype(_impl_.accountid_){0u}
  };
}

CClientHeaderOverwatchEvidence::~CClientHeaderOverwatchEvidence() {
  // @@protoc_insertion_point(destructor:CClientHeaderOverwatchEvidence)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CClientHeaderOverwatchEvidence::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CClientHeaderOverwatchEvidence::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CClientHeaderOverwatchEvidence::Clear() {
// @@protoc_insertion_point(message_clear_start:CClientHeaderOverwatchEvidence)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.caseid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.accountid_) -
        reinterpret_cast<char*>(&_impl_.caseid_)) + sizeof(_impl_.accountid_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CClientHeaderOverwatchEvidence::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 accountid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_accountid(&has_bits);
          _impl_.accountid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 caseid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_caseid(&has_bits);
          _impl_.caseid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CClientHeaderOverwatchEvidence::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CClientHeaderOverwatchEvidence)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 accountid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_accountid(), target);
  }

  // optional uint64 caseid = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_caseid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CClientHeaderOverwatchEvidence)
  return target;
}

size_t CClientHeaderOverwatchEvidence::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CClientHeaderOverwatchEvidence)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint64 caseid = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_caseid());
    }

    // optional uint32 accountid = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_accountid());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CClientHeaderOverwatchEvidence::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CClientHeaderOverwatchEvidence::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CClientHeaderOverwatchEvidence::GetClassData() const { return &_class_data_; }


void CClientHeaderOverwatchEvidence::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CClientHeaderOverwatchEvidence*>(&to_msg);
  auto& from = static_cast<const CClientHeaderOverwatchEvidence&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CClientHeaderOverwatchEvidence)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.caseid_ = from._impl_.caseid_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.accountid_ = from._impl_.accountid_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CClientHeaderOverwatchEvidence::CopyFrom(const CClientHeaderOverwatchEvidence& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CClientHeaderOverwatchEvidence)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CClientHeaderOverwatchEvidence::IsInitialized() const {
  return true;
}

void CClientHeaderOverwatchEvidence::InternalSwap(CClientHeaderOverwatchEvidence* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CClientHeaderOverwatchEvidence, _impl_.accountid_)
      + sizeof(CClientHeaderOverwatchEvidence::_impl_.accountid_)
      - PROTOBUF_FIELD_OFFSET(CClientHeaderOverwatchEvidence, _impl_.caseid_)>(
          reinterpret_cast<char*>(&_impl_.caseid_),
          reinterpret_cast<char*>(&other->_impl_.caseid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CClientHeaderOverwatchEvidence::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cstrike15_5fgcmessages_2eproto_getter, &descriptor_table_cstrike15_5fgcmessages_2eproto_once,
      file_level_metadata_cstrike15_5fgcmessages_2eproto[76]);
}

// ===================================================================

class CMsgGCCStrike15_v2_GC2ClientTextMsg::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCCStrike15_v2_GC2ClientTextMsg>()._impl_._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_payload(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgGCCStrike15_v2_GC2ClientTextMsg::CMsgGCCStrike15_v2_GC2ClientTextMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgGCCStrike15_v2_GC2ClientTextMsg)
}
CMsgGCCStrike15_v2_GC2ClientTextMsg::CMsgGCCStrike15_v2_GC2ClientTextMsg(const CMsgGCCStrike15_v2_GC2ClientTextMsg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgGCCStrike15_v2_GC2ClientTextMsg* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.payload_){}
    , decltype(_impl_.id_){}
    , decltype(_impl_.type_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.payload_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.payload_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_payload()) {
    _this->_impl_.payload_.Set(from._internal_payload(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.id_, &from._impl_.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.type_) -
    reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.type_));
  // @@protoc_insertion_point(copy_constructor:CMsgGCCStrike15_v2_GC2ClientTextMsg)
}

inline void CMsgGCCStrike15_v2_GC2ClientTextMsg::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.payload_){}
    , decltype(_impl_.id_){0u}
    , decltype(_impl_.type_){0u}
  };
  _impl_.payload_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.payload_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CMsgGCCStrike15_v2_GC2ClientTextMsg::~CMsgGCCStrike15_v2_GC2ClientTextMsg() {
  // @@protoc_insertion_point(destructor:CMsgGCCStrike15_v2_GC2ClientTextMsg)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgGCCStrike15_v2_GC2ClientTextMsg::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.payload_.Destroy();
}

void CMsgGCCStrike15_v2_GC2ClientTextMsg::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgGCCStrike15_v2_GC2ClientTextMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCCStrike15_v2_GC2ClientTextMsg)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.payload_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&_impl_.id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.type_) -
        reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.type_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCCStrike15_v2_GC2ClientTextMsg::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_id(&has_bits);
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_type(&has_bits);
          _impl_.type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes payload = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_payload();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgGCCStrike15_v2_GC2ClientTextMsg::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCCStrike15_v2_GC2ClientTextMsg)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  // optional uint32 type = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_type(), target);
  }

  // optional bytes payload = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_payload(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCCStrike15_v2_GC2ClientTextMsg)
  return target;
}

size_t CMsgGCCStrike15_v2_GC2ClientTextMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCCStrike15_v2_GC2ClientTextMsg)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional bytes payload = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_payload());
    }

    // optional uint32 id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_id());
    }

    // optional uint32 type = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_type());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgGCCStrike15_v2_GC2ClientTextMsg::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgGCCStrike15_v2_GC2ClientTextMsg::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgGCCStrike15_v2_GC2ClientTextMsg::GetClassData() const { return &_class_data_; }


void CMsgGCCStrike15_v2_GC2ClientTextMsg::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgGCCStrike15_v2_GC2ClientTextMsg*>(&to_msg);
  auto& from = static_cast<const CMsgGCCStrike15_v2_GC2ClientTextMsg&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCCStrike15_v2_GC2ClientTextMsg)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_payload(from._internal_payload());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.id_ = from._impl_.id_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.type_ = from._impl_.type_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgGCCStrike15_v2_GC2ClientTextMsg::CopyFrom(const CMsgGCCStrike15_v2_GC2ClientTextMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCCStrike15_v2_GC2ClientTextMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCCStrike15_v2_GC2ClientTextMsg::IsInitialized() const {
  return true;
}

void CMsgGCCStrike15_v2_GC2ClientTextMsg::InternalSwap(CMsgGCCStrike15_v2_GC2ClientTextMsg* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.payload_, lhs_arena,
      &other->_impl_.payload_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgGCCStrike15_v2_GC2ClientTextMsg, _impl_.type_)
      + sizeof(CMsgGCCStrike15_v2_GC2ClientTextMsg::_impl_.type_)
      - PROTOBUF_FIELD_OFFSET(CMsgGCCStrike15_v2_GC2ClientTextMsg, _impl_.id_)>(
          reinterpret_cast<char*>(&_impl_.id_),
          reinterpret_cast<char*>(&other->_impl_.id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCCStrike15_v2_GC2ClientTextMsg::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cstrike15_5fgcmessages_2eproto_getter, &descriptor_table_cstrike15_5fgcmessages_2eproto_once,
      file_level_metadata_cstrike15_5fgcmessages_2eproto[77]);
}

// ===================================================================

class CMsgGCCStrike15_v2_Client2GCTextMsg::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCCStrike15_v2_Client2GCTextMsg>()._impl_._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgGCCStrike15_v2_Client2GCTextMsg::CMsgGCCStrike15_v2_Client2GCTextMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgGCCStrike15_v2_Client2GCTextMsg)
}
CMsgGCCStrike15_v2_Client2GCTextMsg::CMsgGCCStrike15_v2_Client2GCTextMsg(const CMsgGCCStrike15_v2_Client2GCTextMsg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgGCCStrike15_v2_Client2GCTextMsg* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.args_){from._impl_.args_}
    , decltype(_impl_.id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.id_ = from._impl_.id_;
  // @@protoc_insertion_point(copy_constructor:CMsgGCCStrike15_v2_Client2GCTextMsg)
}

inline void CMsgGCCStrike15_v2_Client2GCTextMsg::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.args_){arena}
    , decltype(_impl_.id_){0u}
  };
}

CMsgGCCStrike15_v2_Client2GCTextMsg::~CMsgGCCStrike15_v2_Client2GCTextMsg() {
  // @@protoc_insertion_point(destructor:CMsgGCCStrike15_v2_Client2GCTextMsg)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgGCCStrike15_v2_Client2GCTextMsg::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.args_.~RepeatedPtrField();
}

void CMsgGCCStrike15_v2_Client2GCTextMsg::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgGCCStrike15_v2_Client2GCTextMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCCStrike15_v2_Client2GCTextMsg)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.args_.Clear();
  _impl_.id_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCCStrike15_v2_Client2GCTextMsg::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_id(&has_bits);
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated bytes args = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_args();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgGCCStrike15_v2_Client2GCTextMsg::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCCStrike15_v2_Client2GCTextMsg)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  // repeated bytes args = 2;
  for (int i = 0, n = this->_internal_args_size(); i < n; i++) {
    const auto& s = this->_internal_args(i);
    target = stream->WriteBytes(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCCStrike15_v2_Client2GCTextMsg)
  return target;
}

size_t CMsgGCCStrike15_v2_Client2GCTextMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCCStrike15_v2_Client2GCTextMsg)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bytes args = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.args_.size());
  for (int i = 0, n = _impl_.args_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      _impl_.args_.Get(i));
  }

  // optional uint32 id = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgGCCStrike15_v2_Client2GCTextMsg::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgGCCStrike15_v2_Client2GCTextMsg::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgGCCStrike15_v2_Client2GCTextMsg::GetClassData() const { return &_class_data_; }


void CMsgGCCStrike15_v2_Client2GCTextMsg::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgGCCStrike15_v2_Client2GCTextMsg*>(&to_msg);
  auto& from = static_cast<const CMsgGCCStrike15_v2_Client2GCTextMsg&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCCStrike15_v2_Client2GCTextMsg)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.args_.MergeFrom(from._impl_.args_);
  if (from._internal_has_id()) {
    _this->_internal_set_id(from._internal_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgGCCStrike15_v2_Client2GCTextMsg::CopyFrom(const CMsgGCCStrike15_v2_Client2GCTextMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCCStrike15_v2_Client2GCTextMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCCStrike15_v2_Client2GCTextMsg::IsInitialized() const {
  return true;
}

void CMsgGCCStrike15_v2_Client2GCTextMsg::InternalSwap(CMsgGCCStrike15_v2_Client2GCTextMsg* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.args_.InternalSwap(&other->_impl_.args_);
  swap(_impl_.id_, other->_impl_.id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCCStrike15_v2_Client2GCTextMsg::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cstrike15_5fgcmessages_2eproto_getter, &descriptor_table_cstrike15_5fgcmessages_2eproto_once,
      file_level_metadata_cstrike15_5fgcmessages_2eproto[78]);
}

// ===================================================================

class CMsgGCCStrike15_v2_MatchEndRunRewardDrops::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCCStrike15_v2_MatchEndRunRewardDrops>()._impl_._has_bits_);
  static const ::CMsgGCCStrike15_v2_MatchmakingServerReservationResponse& serverinfo(const CMsgGCCStrike15_v2_MatchEndRunRewardDrops* msg);
  static void set_has_serverinfo(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::CMsgGC_ServerQuestUpdateData& match_end_quest_data(const CMsgGCCStrike15_v2_MatchEndRunRewardDrops* msg);
  static void set_has_match_end_quest_data(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::CMsgGCCStrike15_v2_MatchmakingServerReservationResponse&
CMsgGCCStrike15_v2_MatchEndRunRewardDrops::_Internal::serverinfo(const CMsgGCCStrike15_v2_MatchEndRunRewardDrops* msg) {
  return *msg->_impl_.serverinfo_;
}
const ::CMsgGC_ServerQuestUpdateData&
CMsgGCCStrike15_v2_MatchEndRunRewardDrops::_Internal::match_end_quest_data(const CMsgGCCStrike15_v2_MatchEndRunRewardDrops* msg) {
  return *msg->_impl_.match_end_quest_data_;
}
CMsgGCCStrike15_v2_MatchEndRunRewardDrops::CMsgGCCStrike15_v2_MatchEndRunRewardDrops(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgGCCStrike15_v2_MatchEndRunRewardDrops)
}
CMsgGCCStrike15_v2_MatchEndRunRewardDrops::CMsgGCCStrike15_v2_MatchEndRunRewardDrops(const CMsgGCCStrike15_v2_MatchEndRunRewardDrops& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgGCCStrike15_v2_MatchEndRunRewardDrops* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.serverinfo_){nullptr}
    , decltype(_impl_.match_end_quest_data_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_serverinfo()) {
    _this->_impl_.serverinfo_ = new ::CMsgGCCStrike15_v2_MatchmakingServerReservationResponse(*from._impl_.serverinfo_);
  }
  if (from._internal_has_match_end_quest_data()) {
    _this->_impl_.match_end_quest_data_ = new ::CMsgGC_ServerQuestUpdateData(*from._impl_.match_end_quest_data_);
  }
  // @@protoc_insertion_point(copy_constructor:CMsgGCCStrike15_v2_MatchEndRunRewardDrops)
}

inline void CMsgGCCStrike15_v2_MatchEndRunRewardDrops::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.serverinfo_){nullptr}
    , decltype(_impl_.match_end_quest_data_){nullptr}
  };
}

CMsgGCCStrike15_v2_MatchEndRunRewardDrops::~CMsgGCCStrike15_v2_MatchEndRunRewardDrops() {
  // @@protoc_insertion_point(destructor:CMsgGCCStrike15_v2_MatchEndRunRewardDrops)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgGCCStrike15_v2_MatchEndRunRewardDrops::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.serverinfo_;
  if (this != internal_default_instance()) delete _impl_.match_end_quest_data_;
}

void CMsgGCCStrike15_v2_MatchEndRunRewardDrops::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgGCCStrike15_v2_MatchEndRunRewardDrops::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCCStrike15_v2_MatchEndRunRewardDrops)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.serverinfo_ != nullptr);
      _impl_.serverinfo_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.match_end_quest_data_ != nullptr);
      _impl_.match_end_quest_data_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCCStrike15_v2_MatchEndRunRewardDrops::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .CMsgGCCStrike15_v2_MatchmakingServerReservationResponse serverinfo = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_serverinfo(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .CMsgGC_ServerQuestUpdateData match_end_quest_data = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_match_end_quest_data(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgGCCStrike15_v2_MatchEndRunRewardDrops::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCCStrike15_v2_MatchEndRunRewardDrops)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .CMsgGCCStrike15_v2_MatchmakingServerReservationResponse serverinfo = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::serverinfo(this),
        _Internal::serverinfo(this).GetCachedSize(), target, stream);
  }

  // optional .CMsgGC_ServerQuestUpdateData match_end_quest_data = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::match_end_quest_data(this),
        _Internal::match_end_quest_data(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCCStrike15_v2_MatchEndRunRewardDrops)
  return target;
}

size_t CMsgGCCStrike15_v2_MatchEndRunRewardDrops::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCCStrike15_v2_MatchEndRunRewardDrops)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .CMsgGCCStrike15_v2_MatchmakingServerReservationResponse serverinfo = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.serverinfo_);
    }

    // optional .CMsgGC_ServerQuestUpdateData match_end_quest_data = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.match_end_quest_data_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgGCCStrike15_v2_MatchEndRunRewardDrops::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgGCCStrike15_v2_MatchEndRunRewardDrops::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgGCCStrike15_v2_MatchEndRunRewardDrops::GetClassData() const { return &_class_data_; }


void CMsgGCCStrike15_v2_MatchEndRunRewardDrops::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgGCCStrike15_v2_MatchEndRunRewardDrops*>(&to_msg);
  auto& from = static_cast<const CMsgGCCStrike15_v2_MatchEndRunRewardDrops&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCCStrike15_v2_MatchEndRunRewardDrops)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_serverinfo()->::CMsgGCCStrike15_v2_MatchmakingServerReservationResponse::MergeFrom(
          from._internal_serverinfo());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_match_end_quest_data()->::CMsgGC_ServerQuestUpdateData::MergeFrom(
          from._internal_match_end_quest_data());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgGCCStrike15_v2_MatchEndRunRewardDrops::CopyFrom(const CMsgGCCStrike15_v2_MatchEndRunRewardDrops& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCCStrike15_v2_MatchEndRunRewardDrops)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCCStrike15_v2_MatchEndRunRewardDrops::IsInitialized() const {
  return true;
}

void CMsgGCCStrike15_v2_MatchEndRunRewardDrops::InternalSwap(CMsgGCCStrike15_v2_MatchEndRunRewardDrops* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgGCCStrike15_v2_MatchEndRunRewardDrops, _impl_.match_end_quest_data_)
      + sizeof(CMsgGCCStrike15_v2_MatchEndRunRewardDrops::_impl_.match_end_quest_data_)
      - PROTOBUF_FIELD_OFFSET(CMsgGCCStrike15_v2_MatchEndRunRewardDrops, _impl_.serverinfo_)>(
          reinterpret_cast<char*>(&_impl_.serverinfo_),
          reinterpret_cast<char*>(&other->_impl_.serverinfo_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCCStrike15_v2_MatchEndRunRewardDrops::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cstrike15_5fgcmessages_2eproto_getter, &descriptor_table_cstrike15_5fgcmessages_2eproto_once,
      file_level_metadata_cstrike15_5fgcmessages_2eproto[79]);
}

// ===================================================================

class CEconItemPreviewDataBlock_Sticker::_Internal {
 public:
  using HasBits = decltype(std::declval<CEconItemPreviewDataBlock_Sticker>()._impl_._has_bits_);
  static void set_has_slot(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_sticker_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_wear(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_scale(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_rotation(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_tint_id(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_offset_x(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_offset_y(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_offset_z(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_pattern(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
};

CEconItemPreviewDataBlock_Sticker::CEconItemPreviewDataBlock_Sticker(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CEconItemPreviewDataBlock.Sticker)
}
CEconItemPreviewDataBlock_Sticker::CEconItemPreviewDataBlock_Sticker(const CEconItemPreviewDataBlock_Sticker& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CEconItemPreviewDataBlock_Sticker* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.slot_){}
    , decltype(_impl_.sticker_id_){}
    , decltype(_impl_.wear_){}
    , decltype(_impl_.scale_){}
    , decltype(_impl_.rotation_){}
    , decltype(_impl_.tint_id_){}
    , decltype(_impl_.offset_x_){}
    , decltype(_impl_.offset_y_){}
    , decltype(_impl_.offset_z_){}
    , decltype(_impl_.pattern_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.slot_, &from._impl_.slot_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.pattern_) -
    reinterpret_cast<char*>(&_impl_.slot_)) + sizeof(_impl_.pattern_));
  // @@protoc_insertion_point(copy_constructor:CEconItemPreviewDataBlock.Sticker)
}

inline void CEconItemPreviewDataBlock_Sticker::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.slot_){0u}
    , decltype(_impl_.sticker_id_){0u}
    , decltype(_impl_.wear_){0}
    , decltype(_impl_.scale_){0}
    , decltype(_impl_.rotation_){0}
    , decltype(_impl_.tint_id_){0u}
    , decltype(_impl_.offset_x_){0}
    , decltype(_impl_.offset_y_){0}
    , decltype(_impl_.offset_z_){0}
    , decltype(_impl_.pattern_){0u}
  };
}

CEconItemPreviewDataBlock_Sticker::~CEconItemPreviewDataBlock_Sticker() {
  // @@protoc_insertion_point(destructor:CEconItemPreviewDataBlock.Sticker)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CEconItemPreviewDataBlock_Sticker::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CEconItemPreviewDataBlock_Sticker::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CEconItemPreviewDataBlock_Sticker::Clear() {
// @@protoc_insertion_point(message_clear_start:CEconItemPreviewDataBlock.Sticker)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&_impl_.slot_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.offset_y_) -
        reinterpret_cast<char*>(&_impl_.slot_)) + sizeof(_impl_.offset_y_));
  }
  if (cached_has_bits & 0x00000300u) {
    ::memset(&_impl_.offset_z_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.pattern_) -
        reinterpret_cast<char*>(&_impl_.offset_z_)) + sizeof(_impl_.pattern_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CEconItemPreviewDataBlock_Sticker::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 slot = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_slot(&has_bits);
          _impl_.slot_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 sticker_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_sticker_id(&has_bits);
          _impl_.sticker_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float wear = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _Internal::set_has_wear(&has_bits);
          _impl_.wear_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float scale = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          _Internal::set_has_scale(&has_bits);
          _impl_.scale_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float rotation = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 45)) {
          _Internal::set_has_rotation(&has_bits);
          _impl_.rotation_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 tint_id = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_tint_id(&has_bits);
          _impl_.tint_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float offset_x = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 61)) {
          _Internal::set_has_offset_x(&has_bits);
          _impl_.offset_x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float offset_y = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 69)) {
          _Internal::set_has_offset_y(&has_bits);
          _impl_.offset_y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float offset_z = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 77)) {
          _Internal::set_has_offset_z(&has_bits);
          _impl_.offset_z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 pattern = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_pattern(&has_bits);
          _impl_.pattern_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CEconItemPreviewDataBlock_Sticker::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CEconItemPreviewDataBlock.Sticker)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 slot = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_slot(), target);
  }

  // optional uint32 sticker_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_sticker_id(), target);
  }

  // optional float wear = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_wear(), target);
  }

  // optional float scale = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(4, this->_internal_scale(), target);
  }

  // optional float rotation = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(5, this->_internal_rotation(), target);
  }

  // optional uint32 tint_id = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_tint_id(), target);
  }

  // optional float offset_x = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(7, this->_internal_offset_x(), target);
  }

  // optional float offset_y = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(8, this->_internal_offset_y(), target);
  }

  // optional float offset_z = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(9, this->_internal_offset_z(), target);
  }

  // optional uint32 pattern = 10;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(10, this->_internal_pattern(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CEconItemPreviewDataBlock.Sticker)
  return target;
}

size_t CEconItemPreviewDataBlock_Sticker::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CEconItemPreviewDataBlock.Sticker)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional uint32 slot = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_slot());
    }

    // optional uint32 sticker_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_sticker_id());
    }

    // optional float wear = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

    // optional float scale = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

    // optional float rotation = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 4;
    }

    // optional uint32 tint_id = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_tint_id());
    }

    // optional float offset_x = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 4;
    }

    // optional float offset_y = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 4;
    }

  }
  if (cached_has_bits & 0x00000300u) {
    // optional float offset_z = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 4;
    }

    // optional uint32 pattern = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_pattern());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CEconItemPreviewDataBlock_Sticker::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CEconItemPreviewDataBlock_Sticker::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CEconItemPreviewDataBlock_Sticker::GetClassData() const { return &_class_data_; }


void CEconItemPreviewDataBlock_Sticker::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CEconItemPreviewDataBlock_Sticker*>(&to_msg);
  auto& from = static_cast<const CEconItemPreviewDataBlock_Sticker&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CEconItemPreviewDataBlock.Sticker)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.slot_ = from._impl_.slot_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.sticker_id_ = from._impl_.sticker_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.wear_ = from._impl_.wear_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.scale_ = from._impl_.scale_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.rotation_ = from._impl_.rotation_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.tint_id_ = from._impl_.tint_id_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.offset_x_ = from._impl_.offset_x_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.offset_y_ = from._impl_.offset_y_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.offset_z_ = from._impl_.offset_z_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.pattern_ = from._impl_.pattern_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CEconItemPreviewDataBlock_Sticker::CopyFrom(const CEconItemPreviewDataBlock_Sticker& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CEconItemPreviewDataBlock.Sticker)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CEconItemPreviewDataBlock_Sticker::IsInitialized() const {
  return true;
}

void CEconItemPreviewDataBlock_Sticker::InternalSwap(CEconItemPreviewDataBlock_Sticker* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CEconItemPreviewDataBlock_Sticker, _impl_.pattern_)
      + sizeof(CEconItemPreviewDataBlock_Sticker::_impl_.pattern_)
      - PROTOBUF_FIELD_OFFSET(CEconItemPreviewDataBlock_Sticker, _impl_.slot_)>(
          reinterpret_cast<char*>(&_impl_.slot_),
          reinterpret_cast<char*>(&other->_impl_.slot_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CEconItemPreviewDataBlock_Sticker::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cstrike15_5fgcmessages_2eproto_getter, &descriptor_table_cstrike15_5fgcmessages_2eproto_once,
      file_level_metadata_cstrike15_5fgcmessages_2eproto[80]);
}

// ===================================================================

class CEconItemPreviewDataBlock::_Internal {
 public:
  using HasBits = decltype(std::declval<CEconItemPreviewDataBlock>()._impl_._has_bits_);
  static void set_has_accountid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_itemid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_defindex(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_paintindex(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_rarity(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_quality(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_paintwear(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_paintseed(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_killeaterscoretype(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_killeatervalue(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_customname(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_inventory(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_origin(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_questid(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_dropreason(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_musicindex(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_entindex(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_petindex(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
};

CEconItemPreviewDataBlock::CEconItemPreviewDataBlock(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CEconItemPreviewDataBlock)
}
CEconItemPreviewDataBlock::CEconItemPreviewDataBlock(const CEconItemPreviewDataBlock& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CEconItemPreviewDataBlock* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.stickers_){from._impl_.stickers_}
    , decltype(_impl_.keychains_){from._impl_.keychains_}
    , decltype(_impl_.customname_){}
    , decltype(_impl_.itemid_){}
    , decltype(_impl_.accountid_){}
    , decltype(_impl_.defindex_){}
    , decltype(_impl_.paintindex_){}
    , decltype(_impl_.rarity_){}
    , decltype(_impl_.quality_){}
    , decltype(_impl_.paintwear_){}
    , decltype(_impl_.paintseed_){}
    , decltype(_impl_.killeaterscoretype_){}
    , decltype(_impl_.killeatervalue_){}
    , decltype(_impl_.inventory_){}
    , decltype(_impl_.origin_){}
    , decltype(_impl_.questid_){}
    , decltype(_impl_.dropreason_){}
    , decltype(_impl_.musicindex_){}
    , decltype(_impl_.entindex_){}
    , decltype(_impl_.petindex_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.customname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.customname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_customname()) {
    _this->_impl_.customname_.Set(from._internal_customname(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.itemid_, &from._impl_.itemid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.petindex_) -
    reinterpret_cast<char*>(&_impl_.itemid_)) + sizeof(_impl_.petindex_));
  // @@protoc_insertion_point(copy_constructor:CEconItemPreviewDataBlock)
}

inline void CEconItemPreviewDataBlock::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.stickers_){arena}
    , decltype(_impl_.keychains_){arena}
    , decltype(_impl_.customname_){}
    , decltype(_impl_.itemid_){uint64_t{0u}}
    , decltype(_impl_.accountid_){0u}
    , decltype(_impl_.defindex_){0u}
    , decltype(_impl_.paintindex_){0u}
    , decltype(_impl_.rarity_){0u}
    , decltype(_impl_.quality_){0u}
    , decltype(_impl_.paintwear_){0u}
    , decltype(_impl_.paintseed_){0u}
    , decltype(_impl_.killeaterscoretype_){0u}
    , decltype(_impl_.killeatervalue_){0u}
    , decltype(_impl_.inventory_){0u}
    , decltype(_impl_.origin_){0u}
    , decltype(_impl_.questid_){0u}
    , decltype(_impl_.dropreason_){0u}
    , decltype(_impl_.musicindex_){0u}
    , decltype(_impl_.entindex_){0}
    , decltype(_impl_.petindex_){0u}
  };
  _impl_.customname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.customname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CEconItemPreviewDataBlock::~CEconItemPreviewDataBlock() {
  // @@protoc_insertion_point(destructor:CEconItemPreviewDataBlock)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CEconItemPreviewDataBlock::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.stickers_.~RepeatedPtrField();
  _impl_.keychains_.~RepeatedPtrField();
  _impl_.customname_.Destroy();
}

void CEconItemPreviewDataBlock::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CEconItemPreviewDataBlock::Clear() {
// @@protoc_insertion_point(message_clear_start:CEconItemPreviewDataBlock)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.stickers_.Clear();
  _impl_.keychains_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.customname_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&_impl_.itemid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.paintwear_) -
        reinterpret_cast<char*>(&_impl_.itemid_)) + sizeof(_impl_.paintwear_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&_impl_.paintseed_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.musicindex_) -
        reinterpret_cast<char*>(&_impl_.paintseed_)) + sizeof(_impl_.musicindex_));
  }
  if (cached_has_bits & 0x00030000u) {
    ::memset(&_impl_.entindex_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.petindex_) -
        reinterpret_cast<char*>(&_impl_.entindex_)) + sizeof(_impl_.petindex_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CEconItemPreviewDataBlock::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 accountid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_accountid(&has_bits);
          _impl_.accountid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 itemid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_itemid(&has_bits);
          _impl_.itemid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 defindex = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_defindex(&has_bits);
          _impl_.defindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 paintindex = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_paintindex(&has_bits);
          _impl_.paintindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 rarity = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_rarity(&has_bits);
          _impl_.rarity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 quality = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_quality(&has_bits);
          _impl_.quality_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 paintwear = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_paintwear(&has_bits);
          _impl_.paintwear_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 paintseed = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_paintseed(&has_bits);
          _impl_.paintseed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 killeaterscoretype = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_killeaterscoretype(&has_bits);
          _impl_.killeaterscoretype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 killeatervalue = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_killeatervalue(&has_bits);
          _impl_.killeatervalue_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string customname = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          auto str = _internal_mutable_customname();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CEconItemPreviewDataBlock.customname");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // repeated .CEconItemPreviewDataBlock.Sticker stickers = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_stickers(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<98>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional uint32 inventory = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _Internal::set_has_inventory(&has_bits);
          _impl_.inventory_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 origin = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          _Internal::set_has_origin(&has_bits);
          _impl_.origin_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 questid = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          _Internal::set_has_questid(&has_bits);
          _impl_.questid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 dropreason = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          _Internal::set_has_dropreason(&has_bits);
          _impl_.dropreason_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 musicindex = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          _Internal::set_has_musicindex(&has_bits);
          _impl_.musicindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 entindex = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 144)) {
          _Internal::set_has_entindex(&has_bits);
          _impl_.entindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 petindex = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 152)) {
          _Internal::set_has_petindex(&has_bits);
          _impl_.petindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .CEconItemPreviewDataBlock.Sticker keychains = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_keychains(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<162>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CEconItemPreviewDataBlock::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CEconItemPreviewDataBlock)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 accountid = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_accountid(), target);
  }

  // optional uint64 itemid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_itemid(), target);
  }

  // optional uint32 defindex = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_defindex(), target);
  }

  // optional uint32 paintindex = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_paintindex(), target);
  }

  // optional uint32 rarity = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_rarity(), target);
  }

  // optional uint32 quality = 6;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_quality(), target);
  }

  // optional uint32 paintwear = 7;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(7, this->_internal_paintwear(), target);
  }

  // optional uint32 paintseed = 8;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(8, this->_internal_paintseed(), target);
  }

  // optional uint32 killeaterscoretype = 9;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(9, this->_internal_killeaterscoretype(), target);
  }

  // optional uint32 killeatervalue = 10;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(10, this->_internal_killeatervalue(), target);
  }

  // optional string customname = 11;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_customname().data(), static_cast<int>(this->_internal_customname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CEconItemPreviewDataBlock.customname");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_customname(), target);
  }

  // repeated .CEconItemPreviewDataBlock.Sticker stickers = 12;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_stickers_size()); i < n; i++) {
    const auto& repfield = this->_internal_stickers(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(12, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional uint32 inventory = 13;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(13, this->_internal_inventory(), target);
  }

  // optional uint32 origin = 14;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(14, this->_internal_origin(), target);
  }

  // optional uint32 questid = 15;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(15, this->_internal_questid(), target);
  }

  // optional uint32 dropreason = 16;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(16, this->_internal_dropreason(), target);
  }

  // optional uint32 musicindex = 17;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(17, this->_internal_musicindex(), target);
  }

  // optional int32 entindex = 18;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(18, this->_internal_entindex(), target);
  }

  // optional uint32 petindex = 19;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(19, this->_internal_petindex(), target);
  }

  // repeated .CEconItemPreviewDataBlock.Sticker keychains = 20;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_keychains_size()); i < n; i++) {
    const auto& repfield = this->_internal_keychains(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(20, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CEconItemPreviewDataBlock)
  return target;
}

size_t CEconItemPreviewDataBlock::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CEconItemPreviewDataBlock)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CEconItemPreviewDataBlock.Sticker stickers = 12;
  total_size += 1UL * this->_internal_stickers_size();
  for (const auto& msg : this->_impl_.stickers_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .CEconItemPreviewDataBlock.Sticker keychains = 20;
  total_size += 2UL * this->_internal_keychains_size();
  for (const auto& msg : this->_impl_.keychains_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string customname = 11;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_customname());
    }

    // optional uint64 itemid = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_itemid());
    }

    // optional uint32 accountid = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_accountid());
    }

    // optional uint32 defindex = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_defindex());
    }

    // optional uint32 paintindex = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_paintindex());
    }

    // optional uint32 rarity = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_rarity());
    }

    // optional uint32 quality = 6;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_quality());
    }

    // optional uint32 paintwear = 7;
    if (cached_has_bits & 0x00000080u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_paintwear());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional uint32 paintseed = 8;
    if (cached_has_bits & 0x00000100u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_paintseed());
    }

    // optional uint32 killeaterscoretype = 9;
    if (cached_has_bits & 0x00000200u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_killeaterscoretype());
    }

    // optional uint32 killeatervalue = 10;
    if (cached_has_bits & 0x00000400u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_killeatervalue());
    }

    // optional uint32 inventory = 13;
    if (cached_has_bits & 0x00000800u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_inventory());
    }

    // optional uint32 origin = 14;
    if (cached_has_bits & 0x00001000u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_origin());
    }

    // optional uint32 questid = 15;
    if (cached_has_bits & 0x00002000u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_questid());
    }

    // optional uint32 dropreason = 16;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_dropreason());
    }

    // optional uint32 musicindex = 17;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_musicindex());
    }

  }
  if (cached_has_bits & 0x00030000u) {
    // optional int32 entindex = 18;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_entindex());
    }

    // optional uint32 petindex = 19;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_petindex());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CEconItemPreviewDataBlock::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CEconItemPreviewDataBlock::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CEconItemPreviewDataBlock::GetClassData() const { return &_class_data_; }


void CEconItemPreviewDataBlock::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CEconItemPreviewDataBlock*>(&to_msg);
  auto& from = static_cast<const CEconItemPreviewDataBlock&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CEconItemPreviewDataBlock)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.stickers_.MergeFrom(from._impl_.stickers_);
  _this->_impl_.keychains_.MergeFrom(from._impl_.keychains_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_customname(from._internal_customname());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.itemid_ = from._impl_.itemid_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.accountid_ = from._impl_.accountid_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.defindex_ = from._impl_.defindex_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.paintindex_ = from._impl_.paintindex_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.rarity_ = from._impl_.rarity_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.quality_ = from._impl_.quality_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.paintwear_ = from._impl_.paintwear_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.paintseed_ = from._impl_.paintseed_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.killeaterscoretype_ = from._impl_.killeaterscoretype_;
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_impl_.killeatervalue_ = from._impl_.killeatervalue_;
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_impl_.inventory_ = from._impl_.inventory_;
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_impl_.origin_ = from._impl_.origin_;
    }
    if (cached_has_bits & 0x00002000u) {
      _this->_impl_.questid_ = from._impl_.questid_;
    }
    if (cached_has_bits & 0x00004000u) {
      _this->_impl_.dropreason_ = from._impl_.dropreason_;
    }
    if (cached_has_bits & 0x00008000u) {
      _this->_impl_.musicindex_ = from._impl_.musicindex_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00030000u) {
    if (cached_has_bits & 0x00010000u) {
      _this->_impl_.entindex_ = from._impl_.entindex_;
    }
    if (cached_has_bits & 0x00020000u) {
      _this->_impl_.petindex_ = from._impl_.petindex_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CEconItemPreviewDataBlock::CopyFrom(const CEconItemPreviewDataBlock& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CEconItemPreviewDataBlock)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CEconItemPreviewDataBlock::IsInitialized() const {
  return true;
}

void CEconItemPreviewDataBlock::InternalSwap(CEconItemPreviewDataBlock* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.stickers_.InternalSwap(&other->_impl_.stickers_);
  _impl_.keychains_.InternalSwap(&other->_impl_.keychains_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.customname_, lhs_arena,
      &other->_impl_.customname_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CEconItemPreviewDataBlock, _impl_.petindex_)
      + sizeof(CEconItemPreviewDataBlock::_impl_.petindex_)
      - PROTOBUF_FIELD_OFFSET(CEconItemPreviewDataBlock, _impl_.itemid_)>(
          reinterpret_cast<char*>(&_impl_.itemid_),
          reinterpret_cast<char*>(&other->_impl_.itemid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CEconItemPreviewDataBlock::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cstrike15_5fgcmessages_2eproto_getter, &descriptor_table_cstrike15_5fgcmessages_2eproto_once,
      file_level_metadata_cstrike15_5fgcmessages_2eproto[81]);
}

// ===================================================================

class CMsgGCCStrike15_v2_MatchEndRewardDropsNotification::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCCStrike15_v2_MatchEndRewardDropsNotification>()._impl_._has_bits_);
  static const ::CEconItemPreviewDataBlock& iteminfo(const CMsgGCCStrike15_v2_MatchEndRewardDropsNotification* msg);
  static void set_has_iteminfo(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::CEconItemPreviewDataBlock&
CMsgGCCStrike15_v2_MatchEndRewardDropsNotification::_Internal::iteminfo(const CMsgGCCStrike15_v2_MatchEndRewardDropsNotification* msg) {
  return *msg->_impl_.iteminfo_;
}
CMsgGCCStrike15_v2_MatchEndRewardDropsNotification::CMsgGCCStrike15_v2_MatchEndRewardDropsNotification(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgGCCStrike15_v2_MatchEndRewardDropsNotification)
}
CMsgGCCStrike15_v2_MatchEndRewardDropsNotification::CMsgGCCStrike15_v2_MatchEndRewardDropsNotification(const CMsgGCCStrike15_v2_MatchEndRewardDropsNotification& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgGCCStrike15_v2_MatchEndRewardDropsNotification* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.iteminfo_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_iteminfo()) {
    _this->_impl_.iteminfo_ = new ::CEconItemPreviewDataBlock(*from._impl_.iteminfo_);
  }
  // @@protoc_insertion_point(copy_constructor:CMsgGCCStrike15_v2_MatchEndRewardDropsNotification)
}

inline void CMsgGCCStrike15_v2_MatchEndRewardDropsNotification::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.iteminfo_){nullptr}
  };
}

CMsgGCCStrike15_v2_MatchEndRewardDropsNotification::~CMsgGCCStrike15_v2_MatchEndRewardDropsNotification() {
  // @@protoc_insertion_point(destructor:CMsgGCCStrike15_v2_MatchEndRewardDropsNotification)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgGCCStrike15_v2_MatchEndRewardDropsNotification::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.iteminfo_;
}

void CMsgGCCStrike15_v2_MatchEndRewardDropsNotification::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgGCCStrike15_v2_MatchEndRewardDropsNotification::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCCStrike15_v2_MatchEndRewardDropsNotification)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.iteminfo_ != nullptr);
    _impl_.iteminfo_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCCStrike15_v2_MatchEndRewardDropsNotification::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .CEconItemPreviewDataBlock iteminfo = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_iteminfo(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgGCCStrike15_v2_MatchEndRewardDropsNotification::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCCStrike15_v2_MatchEndRewardDropsNotification)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .CEconItemPreviewDataBlock iteminfo = 6;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::iteminfo(this),
        _Internal::iteminfo(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCCStrike15_v2_MatchEndRewardDropsNotification)
  return target;
}

size_t CMsgGCCStrike15_v2_MatchEndRewardDropsNotification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCCStrike15_v2_MatchEndRewardDropsNotification)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .CEconItemPreviewDataBlock iteminfo = 6;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.iteminfo_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgGCCStrike15_v2_MatchEndRewardDropsNotification::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgGCCStrike15_v2_MatchEndRewardDropsNotification::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgGCCStrike15_v2_MatchEndRewardDropsNotification::GetClassData() const { return &_class_data_; }


void CMsgGCCStrike15_v2_MatchEndRewardDropsNotification::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgGCCStrike15_v2_MatchEndRewardDropsNotification*>(&to_msg);
  auto& from = static_cast<const CMsgGCCStrike15_v2_MatchEndRewardDropsNotification&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCCStrike15_v2_MatchEndRewardDropsNotification)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_iteminfo()) {
    _this->_internal_mutable_iteminfo()->::CEconItemPreviewDataBlock::MergeFrom(
        from._internal_iteminfo());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgGCCStrike15_v2_MatchEndRewardDropsNotification::CopyFrom(const CMsgGCCStrike15_v2_MatchEndRewardDropsNotification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCCStrike15_v2_MatchEndRewardDropsNotification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCCStrike15_v2_MatchEndRewardDropsNotification::IsInitialized() const {
  return true;
}

void CMsgGCCStrike15_v2_MatchEndRewardDropsNotification::InternalSwap(CMsgGCCStrike15_v2_MatchEndRewardDropsNotification* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.iteminfo_, other->_impl_.iteminfo_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCCStrike15_v2_MatchEndRewardDropsNotification::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cstrike15_5fgcmessages_2eproto_getter, &descriptor_table_cstrike15_5fgcmessages_2eproto_once,
      file_level_metadata_cstrike15_5fgcmessages_2eproto[82]);
}

// ===================================================================

class CMsgItemAcknowledged::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgItemAcknowledged>()._impl_._has_bits_);
  static const ::CEconItemPreviewDataBlock& iteminfo(const CMsgItemAcknowledged* msg);
  static void set_has_iteminfo(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::CEconItemPreviewDataBlock&
CMsgItemAcknowledged::_Internal::iteminfo(const CMsgItemAcknowledged* msg) {
  return *msg->_impl_.iteminfo_;
}
CMsgItemAcknowledged::CMsgItemAcknowledged(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgItemAcknowledged)
}
CMsgItemAcknowledged::CMsgItemAcknowledged(const CMsgItemAcknowledged& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgItemAcknowledged* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.iteminfo_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_iteminfo()) {
    _this->_impl_.iteminfo_ = new ::CEconItemPreviewDataBlock(*from._impl_.iteminfo_);
  }
  // @@protoc_insertion_point(copy_constructor:CMsgItemAcknowledged)
}

inline void CMsgItemAcknowledged::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.iteminfo_){nullptr}
  };
}

CMsgItemAcknowledged::~CMsgItemAcknowledged() {
  // @@protoc_insertion_point(destructor:CMsgItemAcknowledged)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgItemAcknowledged::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.iteminfo_;
}

void CMsgItemAcknowledged::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgItemAcknowledged::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgItemAcknowledged)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.iteminfo_ != nullptr);
    _impl_.iteminfo_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgItemAcknowledged::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .CEconItemPreviewDataBlock iteminfo = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_iteminfo(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgItemAcknowledged::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgItemAcknowledged)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .CEconItemPreviewDataBlock iteminfo = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::iteminfo(this),
        _Internal::iteminfo(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgItemAcknowledged)
  return target;
}

size_t CMsgItemAcknowledged::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgItemAcknowledged)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .CEconItemPreviewDataBlock iteminfo = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.iteminfo_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgItemAcknowledged::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgItemAcknowledged::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgItemAcknowledged::GetClassData() const { return &_class_data_; }


void CMsgItemAcknowledged::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgItemAcknowledged*>(&to_msg);
  auto& from = static_cast<const CMsgItemAcknowledged&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgItemAcknowledged)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_iteminfo()) {
    _this->_internal_mutable_iteminfo()->::CEconItemPreviewDataBlock::MergeFrom(
        from._internal_iteminfo());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgItemAcknowledged::CopyFrom(const CMsgItemAcknowledged& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgItemAcknowledged)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgItemAcknowledged::IsInitialized() const {
  return true;
}

void CMsgItemAcknowledged::InternalSwap(CMsgItemAcknowledged* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.iteminfo_, other->_impl_.iteminfo_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgItemAcknowledged::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cstrike15_5fgcmessages_2eproto_getter, &descriptor_table_cstrike15_5fgcmessages_2eproto_once,
      file_level_metadata_cstrike15_5fgcmessages_2eproto[83]);
}

// ===================================================================

class CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest>()._impl_._has_bits_);
  static void set_has_param_s(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_param_a(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_param_d(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_param_m(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest::CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest)
}
CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest::CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest(const CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.param_s_){}
    , decltype(_impl_.param_a_){}
    , decltype(_impl_.param_d_){}
    , decltype(_impl_.param_m_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.param_s_, &from._impl_.param_s_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.param_m_) -
    reinterpret_cast<char*>(&_impl_.param_s_)) + sizeof(_impl_.param_m_));
  // @@protoc_insertion_point(copy_constructor:CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest)
}

inline void CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.param_s_){uint64_t{0u}}
    , decltype(_impl_.param_a_){uint64_t{0u}}
    , decltype(_impl_.param_d_){uint64_t{0u}}
    , decltype(_impl_.param_m_){uint64_t{0u}}
  };
}

CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest::~CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest() {
  // @@protoc_insertion_point(destructor:CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&_impl_.param_s_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.param_m_) -
        reinterpret_cast<char*>(&_impl_.param_s_)) + sizeof(_impl_.param_m_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 param_s = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_param_s(&has_bits);
          _impl_.param_s_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 param_a = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_param_a(&has_bits);
          _impl_.param_a_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 param_d = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_param_d(&has_bits);
          _impl_.param_d_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 param_m = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_param_m(&has_bits);
          _impl_.param_m_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint64 param_s = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_param_s(), target);
  }

  // optional uint64 param_a = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_param_a(), target);
  }

  // optional uint64 param_d = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal_param_d(), target);
  }

  // optional uint64 param_m = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(4, this->_internal_param_m(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest)
  return target;
}

size_t CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional uint64 param_s = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_param_s());
    }

    // optional uint64 param_a = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_param_a());
    }

    // optional uint64 param_d = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_param_d());
    }

    // optional uint64 param_m = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_param_m());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest::GetClassData() const { return &_class_data_; }


void CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest*>(&to_msg);
  auto& from = static_cast<const CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.param_s_ = from._impl_.param_s_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.param_a_ = from._impl_.param_a_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.param_d_ = from._impl_.param_d_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.param_m_ = from._impl_.param_m_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest::CopyFrom(const CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest::IsInitialized() const {
  return true;
}

void CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest::InternalSwap(CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest, _impl_.param_m_)
      + sizeof(CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest::_impl_.param_m_)
      - PROTOBUF_FIELD_OFFSET(CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest, _impl_.param_s_)>(
          reinterpret_cast<char*>(&_impl_.param_s_),
          reinterpret_cast<char*>(&other->_impl_.param_s_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cstrike15_5fgcmessages_2eproto_getter, &descriptor_table_cstrike15_5fgcmessages_2eproto_once,
      file_level_metadata_cstrike15_5fgcmessages_2eproto[84]);
}

// ===================================================================

class CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse>()._impl_._has_bits_);
  static const ::CEconItemPreviewDataBlock& iteminfo(const CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse* msg);
  static void set_has_iteminfo(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::CEconItemPreviewDataBlock&
CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse::_Internal::iteminfo(const CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse* msg) {
  return *msg->_impl_.iteminfo_;
}
CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse::CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse)
}
CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse::CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse(const CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.iteminfo_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_iteminfo()) {
    _this->_impl_.iteminfo_ = new ::CEconItemPreviewDataBlock(*from._impl_.iteminfo_);
  }
  // @@protoc_insertion_point(copy_constructor:CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse)
}

inline void CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.iteminfo_){nullptr}
  };
}

CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse::~CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse() {
  // @@protoc_insertion_point(destructor:CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.iteminfo_;
}

void CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.iteminfo_ != nullptr);
    _impl_.iteminfo_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .CEconItemPreviewDataBlock iteminfo = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_iteminfo(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .CEconItemPreviewDataBlock iteminfo = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::iteminfo(this),
        _Internal::iteminfo(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse)
  return target;
}

size_t CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .CEconItemPreviewDataBlock iteminfo = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.iteminfo_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse::GetClassData() const { return &_class_data_; }


void CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse*>(&to_msg);
  auto& from = static_cast<const CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_iteminfo()) {
    _this->_internal_mutable_iteminfo()->::CEconItemPreviewDataBlock::MergeFrom(
        from._internal_iteminfo());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse::CopyFrom(const CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse::IsInitialized() const {
  return true;
}

void CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse::InternalSwap(CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.iteminfo_, other->_impl_.iteminfo_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cstrike15_5fgcmessages_2eproto_getter, &descriptor_table_cstrike15_5fgcmessages_2eproto_once,
      file_level_metadata_cstrike15_5fgcmessages_2eproto[85]);
}

// ===================================================================

class CMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames::_Internal {
 public:
};

CMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames::CMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:CMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames)
}
CMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames::CMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames(const CMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  CMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cstrike15_5fgcmessages_2eproto_getter, &descriptor_table_cstrike15_5fgcmessages_2eproto_once,
      file_level_metadata_cstrike15_5fgcmessages_2eproto[86]);
}

// ===================================================================

class CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser>()._impl_._has_bits_);
  static void set_has_accountid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser::CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser)
}
CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser::CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser(const CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.accountid_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.accountid_ = from._impl_.accountid_;
  // @@protoc_insertion_point(copy_constructor:CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser)
}

inline void CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.accountid_){0u}
  };
}

CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser::~CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser() {
  // @@protoc_insertion_point(destructor:CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.accountid_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 accountid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_accountid(&has_bits);
          _impl_.accountid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 accountid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_accountid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser)
  return target;
}

size_t CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 accountid = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_accountid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser::GetClassData() const { return &_class_data_; }


void CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser*>(&to_msg);
  auto& from = static_cast<const CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_accountid()) {
    _this->_internal_set_accountid(from._internal_accountid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser::CopyFrom(const CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser::IsInitialized() const {
  return true;
}

void CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser::InternalSwap(CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.accountid_, other->_impl_.accountid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cstrike15_5fgcmessages_2eproto_getter, &descriptor_table_cstrike15_5fgcmessages_2eproto_once,
      file_level_metadata_cstrike15_5fgcmessages_2eproto[87]);
}

// ===================================================================

class CMsgGCCStrike15_v2_MatchListRequestRecentUserGames::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCCStrike15_v2_MatchListRequestRecentUserGames>()._impl_._has_bits_);
  static void set_has_accountid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgGCCStrike15_v2_MatchListRequestRecentUserGames::CMsgGCCStrike15_v2_MatchListRequestRecentUserGames(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgGCCStrike15_v2_MatchListRequestRecentUserGames)
}
CMsgGCCStrike15_v2_MatchListRequestRecentUserGames::CMsgGCCStrike15_v2_MatchListRequestRecentUserGames(const CMsgGCCStrike15_v2_MatchListRequestRecentUserGames& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgGCCStrike15_v2_MatchListRequestRecentUserGames* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.accountid_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.accountid_ = from._impl_.accountid_;
  // @@protoc_insertion_point(copy_constructor:CMsgGCCStrike15_v2_MatchListRequestRecentUserGames)
}

inline void CMsgGCCStrike15_v2_MatchListRequestRecentUserGames::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.accountid_){0u}
  };
}

CMsgGCCStrike15_v2_MatchListRequestRecentUserGames::~CMsgGCCStrike15_v2_MatchListRequestRecentUserGames() {
  // @@protoc_insertion_point(destructor:CMsgGCCStrike15_v2_MatchListRequestRecentUserGames)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgGCCStrike15_v2_MatchListRequestRecentUserGames::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgGCCStrike15_v2_MatchListRequestRecentUserGames::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgGCCStrike15_v2_MatchListRequestRecentUserGames::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCCStrike15_v2_MatchListRequestRecentUserGames)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.accountid_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCCStrike15_v2_MatchListRequestRecentUserGames::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 accountid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_accountid(&has_bits);
          _impl_.accountid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgGCCStrike15_v2_MatchListRequestRecentUserGames::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCCStrike15_v2_MatchListRequestRecentUserGames)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 accountid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_accountid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCCStrike15_v2_MatchListRequestRecentUserGames)
  return target;
}

size_t CMsgGCCStrike15_v2_MatchListRequestRecentUserGames::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCCStrike15_v2_MatchListRequestRecentUserGames)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 accountid = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_accountid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgGCCStrike15_v2_MatchListRequestRecentUserGames::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgGCCStrike15_v2_MatchListRequestRecentUserGames::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgGCCStrike15_v2_MatchListRequestRecentUserGames::GetClassData() const { return &_class_data_; }


void CMsgGCCStrike15_v2_MatchListRequestRecentUserGames::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgGCCStrike15_v2_MatchListRequestRecentUserGames*>(&to_msg);
  auto& from = static_cast<const CMsgGCCStrike15_v2_MatchListRequestRecentUserGames&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCCStrike15_v2_MatchListRequestRecentUserGames)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_accountid()) {
    _this->_internal_set_accountid(from._internal_accountid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgGCCStrike15_v2_MatchListRequestRecentUserGames::CopyFrom(const CMsgGCCStrike15_v2_MatchListRequestRecentUserGames& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCCStrike15_v2_MatchListRequestRecentUserGames)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCCStrike15_v2_MatchListRequestRecentUserGames::IsInitialized() const {
  return true;
}

void CMsgGCCStrike15_v2_MatchListRequestRecentUserGames::InternalSwap(CMsgGCCStrike15_v2_MatchListRequestRecentUserGames* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.accountid_, other->_impl_.accountid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCCStrike15_v2_MatchListRequestRecentUserGames::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cstrike15_5fgcmessages_2eproto_getter, &descriptor_table_cstrike15_5fgcmessages_2eproto_once,
      file_level_metadata_cstrike15_5fgcmessages_2eproto[88]);
}

// ===================================================================

class CMsgGCCStrike15_v2_MatchListRequestTournamentGames::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCCStrike15_v2_MatchListRequestTournamentGames>()._impl_._has_bits_);
  static void set_has_eventid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgGCCStrike15_v2_MatchListRequestTournamentGames::CMsgGCCStrike15_v2_MatchListRequestTournamentGames(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgGCCStrike15_v2_MatchListRequestTournamentGames)
}
CMsgGCCStrike15_v2_MatchListRequestTournamentGames::CMsgGCCStrike15_v2_MatchListRequestTournamentGames(const CMsgGCCStrike15_v2_MatchListRequestTournamentGames& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgGCCStrike15_v2_MatchListRequestTournamentGames* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.eventid_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.eventid_ = from._impl_.eventid_;
  // @@protoc_insertion_point(copy_constructor:CMsgGCCStrike15_v2_MatchListRequestTournamentGames)
}

inline void CMsgGCCStrike15_v2_MatchListRequestTournamentGames::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.eventid_){0}
  };
}

CMsgGCCStrike15_v2_MatchListRequestTournamentGames::~CMsgGCCStrike15_v2_MatchListRequestTournamentGames() {
  // @@protoc_insertion_point(destructor:CMsgGCCStrike15_v2_MatchListRequestTournamentGames)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgGCCStrike15_v2_MatchListRequestTournamentGames::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgGCCStrike15_v2_MatchListRequestTournamentGames::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgGCCStrike15_v2_MatchListRequestTournamentGames::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCCStrike15_v2_MatchListRequestTournamentGames)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.eventid_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCCStrike15_v2_MatchListRequestTournamentGames::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 eventid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_eventid(&has_bits);
          _impl_.eventid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgGCCStrike15_v2_MatchListRequestTournamentGames::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCCStrike15_v2_MatchListRequestTournamentGames)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 eventid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_eventid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCCStrike15_v2_MatchListRequestTournamentGames)
  return target;
}

size_t CMsgGCCStrike15_v2_MatchListRequestTournamentGames::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCCStrike15_v2_MatchListRequestTournamentGames)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int32 eventid = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_eventid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgGCCStrike15_v2_MatchListRequestTournamentGames::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgGCCStrike15_v2_MatchListRequestTournamentGames::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgGCCStrike15_v2_MatchListRequestTournamentGames::GetClassData() const { return &_class_data_; }


void CMsgGCCStrike15_v2_MatchListRequestTournamentGames::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgGCCStrike15_v2_MatchListRequestTournamentGames*>(&to_msg);
  auto& from = static_cast<const CMsgGCCStrike15_v2_MatchListRequestTournamentGames&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCCStrike15_v2_MatchListRequestTournamentGames)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_eventid()) {
    _this->_internal_set_eventid(from._internal_eventid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgGCCStrike15_v2_MatchListRequestTournamentGames::CopyFrom(const CMsgGCCStrike15_v2_MatchListRequestTournamentGames& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCCStrike15_v2_MatchListRequestTournamentGames)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCCStrike15_v2_MatchListRequestTournamentGames::IsInitialized() const {
  return true;
}

void CMsgGCCStrike15_v2_MatchListRequestTournamentGames::InternalSwap(CMsgGCCStrike15_v2_MatchListRequestTournamentGames* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.eventid_, other->_impl_.eventid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCCStrike15_v2_MatchListRequestTournamentGames::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cstrike15_5fgcmessages_2eproto_getter, &descriptor_table_cstrike15_5fgcmessages_2eproto_once,
      file_level_metadata_cstrike15_5fgcmessages_2eproto[89]);
}

// ===================================================================

class CMsgGCCStrike15_v2_MatchListRequestFullGameInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCCStrike15_v2_MatchListRequestFullGameInfo>()._impl_._has_bits_);
  static void set_has_matchid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_outcomeid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_token(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CMsgGCCStrike15_v2_MatchListRequestFullGameInfo::CMsgGCCStrike15_v2_MatchListRequestFullGameInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgGCCStrike15_v2_MatchListRequestFullGameInfo)
}
CMsgGCCStrike15_v2_MatchListRequestFullGameInfo::CMsgGCCStrike15_v2_MatchListRequestFullGameInfo(const CMsgGCCStrike15_v2_MatchListRequestFullGameInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgGCCStrike15_v2_MatchListRequestFullGameInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.matchid_){}
    , decltype(_impl_.outcomeid_){}
    , decltype(_impl_.token_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.matchid_, &from._impl_.matchid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.token_) -
    reinterpret_cast<char*>(&_impl_.matchid_)) + sizeof(_impl_.token_));
  // @@protoc_insertion_point(copy_constructor:CMsgGCCStrike15_v2_MatchListRequestFullGameInfo)
}

inline void CMsgGCCStrike15_v2_MatchListRequestFullGameInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.matchid_){uint64_t{0u}}
    , decltype(_impl_.outcomeid_){uint64_t{0u}}
    , decltype(_impl_.token_){0u}
  };
}

CMsgGCCStrike15_v2_MatchListRequestFullGameInfo::~CMsgGCCStrike15_v2_MatchListRequestFullGameInfo() {
  // @@protoc_insertion_point(destructor:CMsgGCCStrike15_v2_MatchListRequestFullGameInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgGCCStrike15_v2_MatchListRequestFullGameInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgGCCStrike15_v2_MatchListRequestFullGameInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgGCCStrike15_v2_MatchListRequestFullGameInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCCStrike15_v2_MatchListRequestFullGameInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.matchid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.token_) -
        reinterpret_cast<char*>(&_impl_.matchid_)) + sizeof(_impl_.token_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCCStrike15_v2_MatchListRequestFullGameInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 matchid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_matchid(&has_bits);
          _impl_.matchid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 outcomeid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_outcomeid(&has_bits);
          _impl_.outcomeid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 token = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_token(&has_bits);
          _impl_.token_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgGCCStrike15_v2_MatchListRequestFullGameInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCCStrike15_v2_MatchListRequestFullGameInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint64 matchid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_matchid(), target);
  }

  // optional uint64 outcomeid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_outcomeid(), target);
  }

  // optional uint32 token = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_token(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCCStrike15_v2_MatchListRequestFullGameInfo)
  return target;
}

size_t CMsgGCCStrike15_v2_MatchListRequestFullGameInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCCStrike15_v2_MatchListRequestFullGameInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint64 matchid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_matchid());
    }

    // optional uint64 outcomeid = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_outcomeid());
    }

    // optional uint32 token = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_token());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgGCCStrike15_v2_MatchListRequestFullGameInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgGCCStrike15_v2_MatchListRequestFullGameInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgGCCStrike15_v2_MatchListRequestFullGameInfo::GetClassData() const { return &_class_data_; }


void CMsgGCCStrike15_v2_MatchListRequestFullGameInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgGCCStrike15_v2_MatchListRequestFullGameInfo*>(&to_msg);
  auto& from = static_cast<const CMsgGCCStrike15_v2_MatchListRequestFullGameInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCCStrike15_v2_MatchListRequestFullGameInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.matchid_ = from._impl_.matchid_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.outcomeid_ = from._impl_.outcomeid_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.token_ = from._impl_.token_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgGCCStrike15_v2_MatchListRequestFullGameInfo::CopyFrom(const CMsgGCCStrike15_v2_MatchListRequestFullGameInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCCStrike15_v2_MatchListRequestFullGameInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCCStrike15_v2_MatchListRequestFullGameInfo::IsInitialized() const {
  return true;
}

void CMsgGCCStrike15_v2_MatchListRequestFullGameInfo::InternalSwap(CMsgGCCStrike15_v2_MatchListRequestFullGameInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgGCCStrike15_v2_MatchListRequestFullGameInfo, _impl_.token_)
      + sizeof(CMsgGCCStrike15_v2_MatchListRequestFullGameInfo::_impl_.token_)
      - PROTOBUF_FIELD_OFFSET(CMsgGCCStrike15_v2_MatchListRequestFullGameInfo, _impl_.matchid_)>(
          reinterpret_cast<char*>(&_impl_.matchid_),
          reinterpret_cast<char*>(&other->_impl_.matchid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCCStrike15_v2_MatchListRequestFullGameInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cstrike15_5fgcmessages_2eproto_getter, &descriptor_table_cstrike15_5fgcmessages_2eproto_once,
      file_level_metadata_cstrike15_5fgcmessages_2eproto[90]);
}

// ===================================================================

class CDataGCCStrike15_v2_MatchInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<CDataGCCStrike15_v2_MatchInfo>()._impl_._has_bits_);
  static void set_has_matchid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_matchtime(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::WatchableMatchInfo& watchablematchinfo(const CDataGCCStrike15_v2_MatchInfo* msg);
  static void set_has_watchablematchinfo(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::CMsgGCCStrike15_v2_MatchmakingServerRoundStats& roundstats_legacy(const CDataGCCStrike15_v2_MatchInfo* msg);
  static void set_has_roundstats_legacy(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::WatchableMatchInfo&
CDataGCCStrike15_v2_MatchInfo::_Internal::watchablematchinfo(const CDataGCCStrike15_v2_MatchInfo* msg) {
  return *msg->_impl_.watchablematchinfo_;
}
const ::CMsgGCCStrike15_v2_MatchmakingServerRoundStats&
CDataGCCStrike15_v2_MatchInfo::_Internal::roundstats_legacy(const CDataGCCStrike15_v2_MatchInfo* msg) {
  return *msg->_impl_.roundstats_legacy_;
}
CDataGCCStrike15_v2_MatchInfo::CDataGCCStrike15_v2_MatchInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CDataGCCStrike15_v2_MatchInfo)
}
CDataGCCStrike15_v2_MatchInfo::CDataGCCStrike15_v2_MatchInfo(const CDataGCCStrike15_v2_MatchInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CDataGCCStrike15_v2_MatchInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.roundstatsall_){from._impl_.roundstatsall_}
    , decltype(_impl_.watchablematchinfo_){nullptr}
    , decltype(_impl_.roundstats_legacy_){nullptr}
    , decltype(_impl_.matchid_){}
    , decltype(_impl_.matchtime_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_watchablematchinfo()) {
    _this->_impl_.watchablematchinfo_ = new ::WatchableMatchInfo(*from._impl_.watchablematchinfo_);
  }
  if (from._internal_has_roundstats_legacy()) {
    _this->_impl_.roundstats_legacy_ = new ::CMsgGCCStrike15_v2_MatchmakingServerRoundStats(*from._impl_.roundstats_legacy_);
  }
  ::memcpy(&_impl_.matchid_, &from._impl_.matchid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.matchtime_) -
    reinterpret_cast<char*>(&_impl_.matchid_)) + sizeof(_impl_.matchtime_));
  // @@protoc_insertion_point(copy_constructor:CDataGCCStrike15_v2_MatchInfo)
}

inline void CDataGCCStrike15_v2_MatchInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.roundstatsall_){arena}
    , decltype(_impl_.watchablematchinfo_){nullptr}
    , decltype(_impl_.roundstats_legacy_){nullptr}
    , decltype(_impl_.matchid_){uint64_t{0u}}
    , decltype(_impl_.matchtime_){0u}
  };
}

CDataGCCStrike15_v2_MatchInfo::~CDataGCCStrike15_v2_MatchInfo() {
  // @@protoc_insertion_point(destructor:CDataGCCStrike15_v2_MatchInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CDataGCCStrike15_v2_MatchInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.roundstatsall_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.watchablematchinfo_;
  if (this != internal_default_instance()) delete _impl_.roundstats_legacy_;
}

void CDataGCCStrike15_v2_MatchInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CDataGCCStrike15_v2_MatchInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:CDataGCCStrike15_v2_MatchInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.roundstatsall_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.watchablematchinfo_ != nullptr);
      _impl_.watchablematchinfo_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.roundstats_legacy_ != nullptr);
      _impl_.roundstats_legacy_->Clear();
    }
  }
  if (cached_has_bits & 0x0000000cu) {
    ::memset(&_impl_.matchid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.matchtime_) -
        reinterpret_cast<char*>(&_impl_.matchid_)) + sizeof(_impl_.matchtime_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDataGCCStrike15_v2_MatchInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 matchid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_matchid(&has_bits);
          _impl_.matchid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 matchtime = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_matchtime(&has_bits);
          _impl_.matchtime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .WatchableMatchInfo watchablematchinfo = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_watchablematchinfo(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .CMsgGCCStrike15_v2_MatchmakingServerRoundStats roundstats_legacy = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_roundstats_legacy(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .CMsgGCCStrike15_v2_MatchmakingServerRoundStats roundstatsall = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_roundstatsall(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CDataGCCStrike15_v2_MatchInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDataGCCStrike15_v2_MatchInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint64 matchid = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_matchid(), target);
  }

  // optional uint32 matchtime = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_matchtime(), target);
  }

  // optional .WatchableMatchInfo watchablematchinfo = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::watchablematchinfo(this),
        _Internal::watchablematchinfo(this).GetCachedSize(), target, stream);
  }

  // optional .CMsgGCCStrike15_v2_MatchmakingServerRoundStats roundstats_legacy = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::roundstats_legacy(this),
        _Internal::roundstats_legacy(this).GetCachedSize(), target, stream);
  }

  // repeated .CMsgGCCStrike15_v2_MatchmakingServerRoundStats roundstatsall = 5;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_roundstatsall_size()); i < n; i++) {
    const auto& repfield = this->_internal_roundstatsall(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDataGCCStrike15_v2_MatchInfo)
  return target;
}

size_t CDataGCCStrike15_v2_MatchInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDataGCCStrike15_v2_MatchInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgGCCStrike15_v2_MatchmakingServerRoundStats roundstatsall = 5;
  total_size += 1UL * this->_internal_roundstatsall_size();
  for (const auto& msg : this->_impl_.roundstatsall_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .WatchableMatchInfo watchablematchinfo = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.watchablematchinfo_);
    }

    // optional .CMsgGCCStrike15_v2_MatchmakingServerRoundStats roundstats_legacy = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.roundstats_legacy_);
    }

    // optional uint64 matchid = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_matchid());
    }

    // optional uint32 matchtime = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_matchtime());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CDataGCCStrike15_v2_MatchInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CDataGCCStrike15_v2_MatchInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CDataGCCStrike15_v2_MatchInfo::GetClassData() const { return &_class_data_; }


void CDataGCCStrike15_v2_MatchInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CDataGCCStrike15_v2_MatchInfo*>(&to_msg);
  auto& from = static_cast<const CDataGCCStrike15_v2_MatchInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CDataGCCStrike15_v2_MatchInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.roundstatsall_.MergeFrom(from._impl_.roundstatsall_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_watchablematchinfo()->::WatchableMatchInfo::MergeFrom(
          from._internal_watchablematchinfo());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_roundstats_legacy()->::CMsgGCCStrike15_v2_MatchmakingServerRoundStats::MergeFrom(
          from._internal_roundstats_legacy());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.matchid_ = from._impl_.matchid_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.matchtime_ = from._impl_.matchtime_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CDataGCCStrike15_v2_MatchInfo::CopyFrom(const CDataGCCStrike15_v2_MatchInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDataGCCStrike15_v2_MatchInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDataGCCStrike15_v2_MatchInfo::IsInitialized() const {
  return true;
}

void CDataGCCStrike15_v2_MatchInfo::InternalSwap(CDataGCCStrike15_v2_MatchInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.roundstatsall_.InternalSwap(&other->_impl_.roundstatsall_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CDataGCCStrike15_v2_MatchInfo, _impl_.matchtime_)
      + sizeof(CDataGCCStrike15_v2_MatchInfo::_impl_.matchtime_)
      - PROTOBUF_FIELD_OFFSET(CDataGCCStrike15_v2_MatchInfo, _impl_.watchablematchinfo_)>(
          reinterpret_cast<char*>(&_impl_.watchablematchinfo_),
          reinterpret_cast<char*>(&other->_impl_.watchablematchinfo_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CDataGCCStrike15_v2_MatchInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cstrike15_5fgcmessages_2eproto_getter, &descriptor_table_cstrike15_5fgcmessages_2eproto_once,
      file_level_metadata_cstrike15_5fgcmessages_2eproto[91]);
}

// ===================================================================

class CDataGCCStrike15_v2_TournamentGroupTeam::_Internal {
 public:
  using HasBits = decltype(std::declval<CDataGCCStrike15_v2_TournamentGroupTeam>()._impl_._has_bits_);
  static void set_has_team_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_score(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_correctpick(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CDataGCCStrike15_v2_TournamentGroupTeam::CDataGCCStrike15_v2_TournamentGroupTeam(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CDataGCCStrike15_v2_TournamentGroupTeam)
}
CDataGCCStrike15_v2_TournamentGroupTeam::CDataGCCStrike15_v2_TournamentGroupTeam(const CDataGCCStrike15_v2_TournamentGroupTeam& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CDataGCCStrike15_v2_TournamentGroupTeam* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.team_id_){}
    , decltype(_impl_.score_){}
    , decltype(_impl_.correctpick_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.team_id_, &from._impl_.team_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.correctpick_) -
    reinterpret_cast<char*>(&_impl_.team_id_)) + sizeof(_impl_.correctpick_));
  // @@protoc_insertion_point(copy_constructor:CDataGCCStrike15_v2_TournamentGroupTeam)
}

inline void CDataGCCStrike15_v2_TournamentGroupTeam::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.team_id_){0}
    , decltype(_impl_.score_){0}
    , decltype(_impl_.correctpick_){false}
  };
}

CDataGCCStrike15_v2_TournamentGroupTeam::~CDataGCCStrike15_v2_TournamentGroupTeam() {
  // @@protoc_insertion_point(destructor:CDataGCCStrike15_v2_TournamentGroupTeam)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CDataGCCStrike15_v2_TournamentGroupTeam::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CDataGCCStrike15_v2_TournamentGroupTeam::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CDataGCCStrike15_v2_TournamentGroupTeam::Clear() {
// @@protoc_insertion_point(message_clear_start:CDataGCCStrike15_v2_TournamentGroupTeam)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.team_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.correctpick_) -
        reinterpret_cast<char*>(&_impl_.team_id_)) + sizeof(_impl_.correctpick_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDataGCCStrike15_v2_TournamentGroupTeam::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 team_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_team_id(&has_bits);
          _impl_.team_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 score = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_score(&has_bits);
          _impl_.score_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool correctpick = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_correctpick(&has_bits);
          _impl_.correctpick_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CDataGCCStrike15_v2_TournamentGroupTeam::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDataGCCStrike15_v2_TournamentGroupTeam)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 team_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_team_id(), target);
  }

  // optional int32 score = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_score(), target);
  }

  // optional bool correctpick = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_correctpick(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDataGCCStrike15_v2_TournamentGroupTeam)
  return target;
}

size_t CDataGCCStrike15_v2_TournamentGroupTeam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDataGCCStrike15_v2_TournamentGroupTeam)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional int32 team_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_team_id());
    }

    // optional int32 score = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_score());
    }

    // optional bool correctpick = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CDataGCCStrike15_v2_TournamentGroupTeam::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CDataGCCStrike15_v2_TournamentGroupTeam::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CDataGCCStrike15_v2_TournamentGroupTeam::GetClassData() const { return &_class_data_; }


void CDataGCCStrike15_v2_TournamentGroupTeam::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CDataGCCStrike15_v2_TournamentGroupTeam*>(&to_msg);
  auto& from = static_cast<const CDataGCCStrike15_v2_TournamentGroupTeam&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CDataGCCStrike15_v2_TournamentGroupTeam)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.team_id_ = from._impl_.team_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.score_ = from._impl_.score_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.correctpick_ = from._impl_.correctpick_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CDataGCCStrike15_v2_TournamentGroupTeam::CopyFrom(const CDataGCCStrike15_v2_TournamentGroupTeam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDataGCCStrike15_v2_TournamentGroupTeam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDataGCCStrike15_v2_TournamentGroupTeam::IsInitialized() const {
  return true;
}

void CDataGCCStrike15_v2_TournamentGroupTeam::InternalSwap(CDataGCCStrike15_v2_TournamentGroupTeam* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CDataGCCStrike15_v2_TournamentGroupTeam, _impl_.correctpick_)
      + sizeof(CDataGCCStrike15_v2_TournamentGroupTeam::_impl_.correctpick_)
      - PROTOBUF_FIELD_OFFSET(CDataGCCStrike15_v2_TournamentGroupTeam, _impl_.team_id_)>(
          reinterpret_cast<char*>(&_impl_.team_id_),
          reinterpret_cast<char*>(&other->_impl_.team_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CDataGCCStrike15_v2_TournamentGroupTeam::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cstrike15_5fgcmessages_2eproto_getter, &descriptor_table_cstrike15_5fgcmessages_2eproto_once,
      file_level_metadata_cstrike15_5fgcmessages_2eproto[92]);
}

// ===================================================================

class CDataGCCStrike15_v2_TournamentGroup_Picks::_Internal {
 public:
};

CDataGCCStrike15_v2_TournamentGroup_Picks::CDataGCCStrike15_v2_TournamentGroup_Picks(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CDataGCCStrike15_v2_TournamentGroup.Picks)
}
CDataGCCStrike15_v2_TournamentGroup_Picks::CDataGCCStrike15_v2_TournamentGroup_Picks(const CDataGCCStrike15_v2_TournamentGroup_Picks& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CDataGCCStrike15_v2_TournamentGroup_Picks* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.pickids_){from._impl_.pickids_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CDataGCCStrike15_v2_TournamentGroup.Picks)
}

inline void CDataGCCStrike15_v2_TournamentGroup_Picks::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.pickids_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CDataGCCStrike15_v2_TournamentGroup_Picks::~CDataGCCStrike15_v2_TournamentGroup_Picks() {
  // @@protoc_insertion_point(destructor:CDataGCCStrike15_v2_TournamentGroup.Picks)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CDataGCCStrike15_v2_TournamentGroup_Picks::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.pickids_.~RepeatedField();
}

void CDataGCCStrike15_v2_TournamentGroup_Picks::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CDataGCCStrike15_v2_TournamentGroup_Picks::Clear() {
// @@protoc_insertion_point(message_clear_start:CDataGCCStrike15_v2_TournamentGroup.Picks)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.pickids_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDataGCCStrike15_v2_TournamentGroup_Picks::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated int32 pickids = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_pickids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<8>(ptr));
        } else if (static_cast<uint8_t>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_pickids(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CDataGCCStrike15_v2_TournamentGroup_Picks::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDataGCCStrike15_v2_TournamentGroup.Picks)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 pickids = 1;
  for (int i = 0, n = this->_internal_pickids_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_pickids(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDataGCCStrike15_v2_TournamentGroup.Picks)
  return target;
}

size_t CDataGCCStrike15_v2_TournamentGroup_Picks::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDataGCCStrike15_v2_TournamentGroup.Picks)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 pickids = 1;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.pickids_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_pickids_size());
    total_size += data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CDataGCCStrike15_v2_TournamentGroup_Picks::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CDataGCCStrike15_v2_TournamentGroup_Picks::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CDataGCCStrike15_v2_TournamentGroup_Picks::GetClassData() const { return &_class_data_; }


void CDataGCCStrike15_v2_TournamentGroup_Picks::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CDataGCCStrike15_v2_TournamentGroup_Picks*>(&to_msg);
  auto& from = static_cast<const CDataGCCStrike15_v2_TournamentGroup_Picks&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CDataGCCStrike15_v2_TournamentGroup.Picks)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.pickids_.MergeFrom(from._impl_.pickids_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CDataGCCStrike15_v2_TournamentGroup_Picks::CopyFrom(const CDataGCCStrike15_v2_TournamentGroup_Picks& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDataGCCStrike15_v2_TournamentGroup.Picks)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDataGCCStrike15_v2_TournamentGroup_Picks::IsInitialized() const {
  return true;
}

void CDataGCCStrike15_v2_TournamentGroup_Picks::InternalSwap(CDataGCCStrike15_v2_TournamentGroup_Picks* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.pickids_.InternalSwap(&other->_impl_.pickids_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CDataGCCStrike15_v2_TournamentGroup_Picks::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cstrike15_5fgcmessages_2eproto_getter, &descriptor_table_cstrike15_5fgcmessages_2eproto_once,
      file_level_metadata_cstrike15_5fgcmessages_2eproto[93]);
}

// ===================================================================

class CDataGCCStrike15_v2_TournamentGroup::_Internal {
 public:
  using HasBits = decltype(std::declval<CDataGCCStrike15_v2_TournamentGroup>()._impl_._has_bits_);
  static void set_has_groupid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_desc(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_picks__deprecated(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_picklockuntiltime(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_pickableteams(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_points_per_pick(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

CDataGCCStrike15_v2_TournamentGroup::CDataGCCStrike15_v2_TournamentGroup(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CDataGCCStrike15_v2_TournamentGroup)
}
CDataGCCStrike15_v2_TournamentGroup::CDataGCCStrike15_v2_TournamentGroup(const CDataGCCStrike15_v2_TournamentGroup& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CDataGCCStrike15_v2_TournamentGroup* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.teams_){from._impl_.teams_}
    , decltype(_impl_.stage_ids_){from._impl_.stage_ids_}
    , decltype(_impl_.picks_){from._impl_.picks_}
    , decltype(_impl_.name_){}
    , decltype(_impl_.desc_){}
    , decltype(_impl_.groupid_){}
    , decltype(_impl_.picks__deprecated_){}
    , decltype(_impl_.picklockuntiltime_){}
    , decltype(_impl_.pickableteams_){}
    , decltype(_impl_.points_per_pick_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.desc_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.desc_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_desc()) {
    _this->_impl_.desc_.Set(from._internal_desc(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.groupid_, &from._impl_.groupid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.points_per_pick_) -
    reinterpret_cast<char*>(&_impl_.groupid_)) + sizeof(_impl_.points_per_pick_));
  // @@protoc_insertion_point(copy_constructor:CDataGCCStrike15_v2_TournamentGroup)
}

inline void CDataGCCStrike15_v2_TournamentGroup::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.teams_){arena}
    , decltype(_impl_.stage_ids_){arena}
    , decltype(_impl_.picks_){arena}
    , decltype(_impl_.name_){}
    , decltype(_impl_.desc_){}
    , decltype(_impl_.groupid_){0u}
    , decltype(_impl_.picks__deprecated_){0u}
    , decltype(_impl_.picklockuntiltime_){0u}
    , decltype(_impl_.pickableteams_){0u}
    , decltype(_impl_.points_per_pick_){0u}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.desc_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.desc_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CDataGCCStrike15_v2_TournamentGroup::~CDataGCCStrike15_v2_TournamentGroup() {
  // @@protoc_insertion_point(destructor:CDataGCCStrike15_v2_TournamentGroup)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CDataGCCStrike15_v2_TournamentGroup::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.teams_.~RepeatedPtrField();
  _impl_.stage_ids_.~RepeatedField();
  _impl_.picks_.~RepeatedPtrField();
  _impl_.name_.Destroy();
  _impl_.desc_.Destroy();
}

void CDataGCCStrike15_v2_TournamentGroup::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CDataGCCStrike15_v2_TournamentGroup::Clear() {
// @@protoc_insertion_point(message_clear_start:CDataGCCStrike15_v2_TournamentGroup)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.teams_.Clear();
  _impl_.stage_ids_.Clear();
  _impl_.picks_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.desc_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000007cu) {
    ::memset(&_impl_.groupid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.points_per_pick_) -
        reinterpret_cast<char*>(&_impl_.groupid_)) + sizeof(_impl_.points_per_pick_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDataGCCStrike15_v2_TournamentGroup::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 groupid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_groupid(&has_bits);
          _impl_.groupid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CDataGCCStrike15_v2_TournamentGroup.name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string desc = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_desc();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CDataGCCStrike15_v2_TournamentGroup.desc");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional uint32 picks__deprecated = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_picks__deprecated(&has_bits);
          _impl_.picks__deprecated_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .CDataGCCStrike15_v2_TournamentGroupTeam teams = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_teams(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated int32 stage_ids = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_stage_ids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<48>(ptr));
        } else if (static_cast<uint8_t>(tag) == 50) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_stage_ids(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 picklockuntiltime = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_picklockuntiltime(&has_bits);
          _impl_.picklockuntiltime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 pickableteams = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_pickableteams(&has_bits);
          _impl_.pickableteams_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 points_per_pick = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_points_per_pick(&has_bits);
          _impl_.points_per_pick_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .CDataGCCStrike15_v2_TournamentGroup.Picks picks = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_picks(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CDataGCCStrike15_v2_TournamentGroup::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDataGCCStrike15_v2_TournamentGroup)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 groupid = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_groupid(), target);
  }

  // optional string name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CDataGCCStrike15_v2_TournamentGroup.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // optional string desc = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_desc().data(), static_cast<int>(this->_internal_desc().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CDataGCCStrike15_v2_TournamentGroup.desc");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_desc(), target);
  }

  // optional uint32 picks__deprecated = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_picks__deprecated(), target);
  }

  // repeated .CDataGCCStrike15_v2_TournamentGroupTeam teams = 5;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_teams_size()); i < n; i++) {
    const auto& repfield = this->_internal_teams(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated int32 stage_ids = 6;
  for (int i = 0, n = this->_internal_stage_ids_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(6, this->_internal_stage_ids(i), target);
  }

  // optional uint32 picklockuntiltime = 7;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(7, this->_internal_picklockuntiltime(), target);
  }

  // optional uint32 pickableteams = 8;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(8, this->_internal_pickableteams(), target);
  }

  // optional uint32 points_per_pick = 9;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(9, this->_internal_points_per_pick(), target);
  }

  // repeated .CDataGCCStrike15_v2_TournamentGroup.Picks picks = 10;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_picks_size()); i < n; i++) {
    const auto& repfield = this->_internal_picks(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(10, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDataGCCStrike15_v2_TournamentGroup)
  return target;
}

size_t CDataGCCStrike15_v2_TournamentGroup::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDataGCCStrike15_v2_TournamentGroup)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CDataGCCStrike15_v2_TournamentGroupTeam teams = 5;
  total_size += 1UL * this->_internal_teams_size();
  for (const auto& msg : this->_impl_.teams_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated int32 stage_ids = 6;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.stage_ids_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_stage_ids_size());
    total_size += data_size;
  }

  // repeated .CDataGCCStrike15_v2_TournamentGroup.Picks picks = 10;
  total_size += 1UL * this->_internal_picks_size();
  for (const auto& msg : this->_impl_.picks_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional string name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional string desc = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_desc());
    }

    // optional uint32 groupid = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_groupid());
    }

    // optional uint32 picks__deprecated = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_picks__deprecated());
    }

    // optional uint32 picklockuntiltime = 7;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_picklockuntiltime());
    }

    // optional uint32 pickableteams = 8;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_pickableteams());
    }

    // optional uint32 points_per_pick = 9;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_points_per_pick());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CDataGCCStrike15_v2_TournamentGroup::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CDataGCCStrike15_v2_TournamentGroup::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CDataGCCStrike15_v2_TournamentGroup::GetClassData() const { return &_class_data_; }


void CDataGCCStrike15_v2_TournamentGroup::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CDataGCCStrike15_v2_TournamentGroup*>(&to_msg);
  auto& from = static_cast<const CDataGCCStrike15_v2_TournamentGroup&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CDataGCCStrike15_v2_TournamentGroup)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.teams_.MergeFrom(from._impl_.teams_);
  _this->_impl_.stage_ids_.MergeFrom(from._impl_.stage_ids_);
  _this->_impl_.picks_.MergeFrom(from._impl_.picks_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_desc(from._internal_desc());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.groupid_ = from._impl_.groupid_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.picks__deprecated_ = from._impl_.picks__deprecated_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.picklockuntiltime_ = from._impl_.picklockuntiltime_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.pickableteams_ = from._impl_.pickableteams_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.points_per_pick_ = from._impl_.points_per_pick_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CDataGCCStrike15_v2_TournamentGroup::CopyFrom(const CDataGCCStrike15_v2_TournamentGroup& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDataGCCStrike15_v2_TournamentGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDataGCCStrike15_v2_TournamentGroup::IsInitialized() const {
  return true;
}

void CDataGCCStrike15_v2_TournamentGroup::InternalSwap(CDataGCCStrike15_v2_TournamentGroup* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.teams_.InternalSwap(&other->_impl_.teams_);
  _impl_.stage_ids_.InternalSwap(&other->_impl_.stage_ids_);
  _impl_.picks_.InternalSwap(&other->_impl_.picks_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.desc_, lhs_arena,
      &other->_impl_.desc_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CDataGCCStrike15_v2_TournamentGroup, _impl_.points_per_pick_)
      + sizeof(CDataGCCStrike15_v2_TournamentGroup::_impl_.points_per_pick_)
      - PROTOBUF_FIELD_OFFSET(CDataGCCStrike15_v2_TournamentGroup, _impl_.groupid_)>(
          reinterpret_cast<char*>(&_impl_.groupid_),
          reinterpret_cast<char*>(&other->_impl_.groupid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CDataGCCStrike15_v2_TournamentGroup::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cstrike15_5fgcmessages_2eproto_getter, &descriptor_table_cstrike15_5fgcmessages_2eproto_once,
      file_level_metadata_cstrike15_5fgcmessages_2eproto[94]);
}

// ===================================================================

class CDataGCCStrike15_v2_TournamentSection::_Internal {
 public:
  using HasBits = decltype(std::declval<CDataGCCStrike15_v2_TournamentSection>()._impl_._has_bits_);
  static void set_has_sectionid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_desc(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CDataGCCStrike15_v2_TournamentSection::CDataGCCStrike15_v2_TournamentSection(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CDataGCCStrike15_v2_TournamentSection)
}
CDataGCCStrike15_v2_TournamentSection::CDataGCCStrike15_v2_TournamentSection(const CDataGCCStrike15_v2_TournamentSection& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CDataGCCStrike15_v2_TournamentSection* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.groups_){from._impl_.groups_}
    , decltype(_impl_.name_){}
    , decltype(_impl_.desc_){}
    , decltype(_impl_.sectionid_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.desc_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.desc_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_desc()) {
    _this->_impl_.desc_.Set(from._internal_desc(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.sectionid_ = from._impl_.sectionid_;
  // @@protoc_insertion_point(copy_constructor:CDataGCCStrike15_v2_TournamentSection)
}

inline void CDataGCCStrike15_v2_TournamentSection::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.groups_){arena}
    , decltype(_impl_.name_){}
    , decltype(_impl_.desc_){}
    , decltype(_impl_.sectionid_){0u}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.desc_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.desc_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CDataGCCStrike15_v2_TournamentSection::~CDataGCCStrike15_v2_TournamentSection() {
  // @@protoc_insertion_point(destructor:CDataGCCStrike15_v2_TournamentSection)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CDataGCCStrike15_v2_TournamentSection::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.groups_.~RepeatedPtrField();
  _impl_.name_.Destroy();
  _impl_.desc_.Destroy();
}

void CDataGCCStrike15_v2_TournamentSection::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CDataGCCStrike15_v2_TournamentSection::Clear() {
// @@protoc_insertion_point(message_clear_start:CDataGCCStrike15_v2_TournamentSection)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.groups_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.desc_.ClearNonDefaultToEmpty();
    }
  }
  _impl_.sectionid_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDataGCCStrike15_v2_TournamentSection::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 sectionid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_sectionid(&has_bits);
          _impl_.sectionid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CDataGCCStrike15_v2_TournamentSection.name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string desc = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_desc();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CDataGCCStrike15_v2_TournamentSection.desc");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // repeated .CDataGCCStrike15_v2_TournamentGroup groups = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_groups(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CDataGCCStrike15_v2_TournamentSection::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDataGCCStrike15_v2_TournamentSection)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 sectionid = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_sectionid(), target);
  }

  // optional string name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CDataGCCStrike15_v2_TournamentSection.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // optional string desc = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_desc().data(), static_cast<int>(this->_internal_desc().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CDataGCCStrike15_v2_TournamentSection.desc");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_desc(), target);
  }

  // repeated .CDataGCCStrike15_v2_TournamentGroup groups = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_groups_size()); i < n; i++) {
    const auto& repfield = this->_internal_groups(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDataGCCStrike15_v2_TournamentSection)
  return target;
}

size_t CDataGCCStrike15_v2_TournamentSection::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDataGCCStrike15_v2_TournamentSection)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CDataGCCStrike15_v2_TournamentGroup groups = 4;
  total_size += 1UL * this->_internal_groups_size();
  for (const auto& msg : this->_impl_.groups_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional string desc = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_desc());
    }

    // optional uint32 sectionid = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_sectionid());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CDataGCCStrike15_v2_TournamentSection::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CDataGCCStrike15_v2_TournamentSection::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CDataGCCStrike15_v2_TournamentSection::GetClassData() const { return &_class_data_; }


void CDataGCCStrike15_v2_TournamentSection::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CDataGCCStrike15_v2_TournamentSection*>(&to_msg);
  auto& from = static_cast<const CDataGCCStrike15_v2_TournamentSection&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CDataGCCStrike15_v2_TournamentSection)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.groups_.MergeFrom(from._impl_.groups_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_desc(from._internal_desc());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.sectionid_ = from._impl_.sectionid_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CDataGCCStrike15_v2_TournamentSection::CopyFrom(const CDataGCCStrike15_v2_TournamentSection& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDataGCCStrike15_v2_TournamentSection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDataGCCStrike15_v2_TournamentSection::IsInitialized() const {
  return true;
}

void CDataGCCStrike15_v2_TournamentSection::InternalSwap(CDataGCCStrike15_v2_TournamentSection* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.groups_.InternalSwap(&other->_impl_.groups_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.desc_, lhs_arena,
      &other->_impl_.desc_, rhs_arena
  );
  swap(_impl_.sectionid_, other->_impl_.sectionid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CDataGCCStrike15_v2_TournamentSection::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cstrike15_5fgcmessages_2eproto_getter, &descriptor_table_cstrike15_5fgcmessages_2eproto_once,
      file_level_metadata_cstrike15_5fgcmessages_2eproto[95]);
}

// ===================================================================

class CDataGCCStrike15_v2_TournamentInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<CDataGCCStrike15_v2_TournamentInfo>()._impl_._has_bits_);
  static const ::TournamentEvent& tournament_event(const CDataGCCStrike15_v2_TournamentInfo* msg);
  static void set_has_tournament_event(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::TournamentEvent&
CDataGCCStrike15_v2_TournamentInfo::_Internal::tournament_event(const CDataGCCStrike15_v2_TournamentInfo* msg) {
  return *msg->_impl_.tournament_event_;
}
CDataGCCStrike15_v2_TournamentInfo::CDataGCCStrike15_v2_TournamentInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CDataGCCStrike15_v2_TournamentInfo)
}
CDataGCCStrike15_v2_TournamentInfo::CDataGCCStrike15_v2_TournamentInfo(const CDataGCCStrike15_v2_TournamentInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CDataGCCStrike15_v2_TournamentInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.sections_){from._impl_.sections_}
    , decltype(_impl_.tournament_teams_){from._impl_.tournament_teams_}
    , decltype(_impl_.tournament_event_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_tournament_event()) {
    _this->_impl_.tournament_event_ = new ::TournamentEvent(*from._impl_.tournament_event_);
  }
  // @@protoc_insertion_point(copy_constructor:CDataGCCStrike15_v2_TournamentInfo)
}

inline void CDataGCCStrike15_v2_TournamentInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.sections_){arena}
    , decltype(_impl_.tournament_teams_){arena}
    , decltype(_impl_.tournament_event_){nullptr}
  };
}

CDataGCCStrike15_v2_TournamentInfo::~CDataGCCStrike15_v2_TournamentInfo() {
  // @@protoc_insertion_point(destructor:CDataGCCStrike15_v2_TournamentInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CDataGCCStrike15_v2_TournamentInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.sections_.~RepeatedPtrField();
  _impl_.tournament_teams_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.tournament_event_;
}

void CDataGCCStrike15_v2_TournamentInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CDataGCCStrike15_v2_TournamentInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:CDataGCCStrike15_v2_TournamentInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.sections_.Clear();
  _impl_.tournament_teams_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.tournament_event_ != nullptr);
    _impl_.tournament_event_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDataGCCStrike15_v2_TournamentInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .CDataGCCStrike15_v2_TournamentSection sections = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_sections(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .TournamentEvent tournament_event = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_tournament_event(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .TournamentTeam tournament_teams = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_tournament_teams(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CDataGCCStrike15_v2_TournamentInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDataGCCStrike15_v2_TournamentInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CDataGCCStrike15_v2_TournamentSection sections = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_sections_size()); i < n; i++) {
    const auto& repfield = this->_internal_sections(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional .TournamentEvent tournament_event = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::tournament_event(this),
        _Internal::tournament_event(this).GetCachedSize(), target, stream);
  }

  // repeated .TournamentTeam tournament_teams = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_tournament_teams_size()); i < n; i++) {
    const auto& repfield = this->_internal_tournament_teams(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDataGCCStrike15_v2_TournamentInfo)
  return target;
}

size_t CDataGCCStrike15_v2_TournamentInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDataGCCStrike15_v2_TournamentInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CDataGCCStrike15_v2_TournamentSection sections = 1;
  total_size += 1UL * this->_internal_sections_size();
  for (const auto& msg : this->_impl_.sections_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TournamentTeam tournament_teams = 3;
  total_size += 1UL * this->_internal_tournament_teams_size();
  for (const auto& msg : this->_impl_.tournament_teams_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional .TournamentEvent tournament_event = 2;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.tournament_event_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CDataGCCStrike15_v2_TournamentInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CDataGCCStrike15_v2_TournamentInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CDataGCCStrike15_v2_TournamentInfo::GetClassData() const { return &_class_data_; }


void CDataGCCStrike15_v2_TournamentInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CDataGCCStrike15_v2_TournamentInfo*>(&to_msg);
  auto& from = static_cast<const CDataGCCStrike15_v2_TournamentInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CDataGCCStrike15_v2_TournamentInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.sections_.MergeFrom(from._impl_.sections_);
  _this->_impl_.tournament_teams_.MergeFrom(from._impl_.tournament_teams_);
  if (from._internal_has_tournament_event()) {
    _this->_internal_mutable_tournament_event()->::TournamentEvent::MergeFrom(
        from._internal_tournament_event());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CDataGCCStrike15_v2_TournamentInfo::CopyFrom(const CDataGCCStrike15_v2_TournamentInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDataGCCStrike15_v2_TournamentInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDataGCCStrike15_v2_TournamentInfo::IsInitialized() const {
  return true;
}

void CDataGCCStrike15_v2_TournamentInfo::InternalSwap(CDataGCCStrike15_v2_TournamentInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.sections_.InternalSwap(&other->_impl_.sections_);
  _impl_.tournament_teams_.InternalSwap(&other->_impl_.tournament_teams_);
  swap(_impl_.tournament_event_, other->_impl_.tournament_event_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CDataGCCStrike15_v2_TournamentInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cstrike15_5fgcmessages_2eproto_getter, &descriptor_table_cstrike15_5fgcmessages_2eproto_once,
      file_level_metadata_cstrike15_5fgcmessages_2eproto[96]);
}

// ===================================================================

class CMsgGCCStrike15_v2_MatchList::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCCStrike15_v2_MatchList>()._impl_._has_bits_);
  static void set_has_msgrequestid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_accountid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_servertime(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::CDataGCCStrike15_v2_TournamentInfo& tournamentinfo(const CMsgGCCStrike15_v2_MatchList* msg);
  static void set_has_tournamentinfo(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::CDataGCCStrike15_v2_TournamentInfo&
CMsgGCCStrike15_v2_MatchList::_Internal::tournamentinfo(const CMsgGCCStrike15_v2_MatchList* msg) {
  return *msg->_impl_.tournamentinfo_;
}
CMsgGCCStrike15_v2_MatchList::CMsgGCCStrike15_v2_MatchList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgGCCStrike15_v2_MatchList)
}
CMsgGCCStrike15_v2_MatchList::CMsgGCCStrike15_v2_MatchList(const CMsgGCCStrike15_v2_MatchList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgGCCStrike15_v2_MatchList* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.matches_){from._impl_.matches_}
    , decltype(_impl_.streams_){from._impl_.streams_}
    , decltype(_impl_.tournamentinfo_){nullptr}
    , decltype(_impl_.msgrequestid_){}
    , decltype(_impl_.accountid_){}
    , decltype(_impl_.servertime_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_tournamentinfo()) {
    _this->_impl_.tournamentinfo_ = new ::CDataGCCStrike15_v2_TournamentInfo(*from._impl_.tournamentinfo_);
  }
  ::memcpy(&_impl_.msgrequestid_, &from._impl_.msgrequestid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.servertime_) -
    reinterpret_cast<char*>(&_impl_.msgrequestid_)) + sizeof(_impl_.servertime_));
  // @@protoc_insertion_point(copy_constructor:CMsgGCCStrike15_v2_MatchList)
}

inline void CMsgGCCStrike15_v2_MatchList::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.matches_){arena}
    , decltype(_impl_.streams_){arena}
    , decltype(_impl_.tournamentinfo_){nullptr}
    , decltype(_impl_.msgrequestid_){0u}
    , decltype(_impl_.accountid_){0u}
    , decltype(_impl_.servertime_){0u}
  };
}

CMsgGCCStrike15_v2_MatchList::~CMsgGCCStrike15_v2_MatchList() {
  // @@protoc_insertion_point(destructor:CMsgGCCStrike15_v2_MatchList)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgGCCStrike15_v2_MatchList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.matches_.~RepeatedPtrField();
  _impl_.streams_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.tournamentinfo_;
}

void CMsgGCCStrike15_v2_MatchList::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgGCCStrike15_v2_MatchList::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCCStrike15_v2_MatchList)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.matches_.Clear();
  _impl_.streams_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.tournamentinfo_ != nullptr);
    _impl_.tournamentinfo_->Clear();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&_impl_.msgrequestid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.servertime_) -
        reinterpret_cast<char*>(&_impl_.msgrequestid_)) + sizeof(_impl_.servertime_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCCStrike15_v2_MatchList::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 msgrequestid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_msgrequestid(&has_bits);
          _impl_.msgrequestid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 accountid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_accountid(&has_bits);
          _impl_.accountid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 servertime = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_servertime(&has_bits);
          _impl_.servertime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .CDataGCCStrike15_v2_MatchInfo matches = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_matches(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .TournamentTeam streams = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_streams(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .CDataGCCStrike15_v2_TournamentInfo tournamentinfo = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_tournamentinfo(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgGCCStrike15_v2_MatchList::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCCStrike15_v2_MatchList)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 msgrequestid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_msgrequestid(), target);
  }

  // optional uint32 accountid = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_accountid(), target);
  }

  // optional uint32 servertime = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_servertime(), target);
  }

  // repeated .CDataGCCStrike15_v2_MatchInfo matches = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_matches_size()); i < n; i++) {
    const auto& repfield = this->_internal_matches(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .TournamentTeam streams = 5;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_streams_size()); i < n; i++) {
    const auto& repfield = this->_internal_streams(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional .CDataGCCStrike15_v2_TournamentInfo tournamentinfo = 6;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::tournamentinfo(this),
        _Internal::tournamentinfo(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCCStrike15_v2_MatchList)
  return target;
}

size_t CMsgGCCStrike15_v2_MatchList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCCStrike15_v2_MatchList)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CDataGCCStrike15_v2_MatchInfo matches = 4;
  total_size += 1UL * this->_internal_matches_size();
  for (const auto& msg : this->_impl_.matches_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TournamentTeam streams = 5;
  total_size += 1UL * this->_internal_streams_size();
  for (const auto& msg : this->_impl_.streams_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .CDataGCCStrike15_v2_TournamentInfo tournamentinfo = 6;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tournamentinfo_);
    }

    // optional uint32 msgrequestid = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_msgrequestid());
    }

    // optional uint32 accountid = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_accountid());
    }

    // optional uint32 servertime = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_servertime());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgGCCStrike15_v2_MatchList::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgGCCStrike15_v2_MatchList::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgGCCStrike15_v2_MatchList::GetClassData() const { return &_class_data_; }


void CMsgGCCStrike15_v2_MatchList::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgGCCStrike15_v2_MatchList*>(&to_msg);
  auto& from = static_cast<const CMsgGCCStrike15_v2_MatchList&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCCStrike15_v2_MatchList)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.matches_.MergeFrom(from._impl_.matches_);
  _this->_impl_.streams_.MergeFrom(from._impl_.streams_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_tournamentinfo()->::CDataGCCStrike15_v2_TournamentInfo::MergeFrom(
          from._internal_tournamentinfo());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.msgrequestid_ = from._impl_.msgrequestid_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.accountid_ = from._impl_.accountid_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.servertime_ = from._impl_.servertime_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgGCCStrike15_v2_MatchList::CopyFrom(const CMsgGCCStrike15_v2_MatchList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCCStrike15_v2_MatchList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCCStrike15_v2_MatchList::IsInitialized() const {
  return true;
}

void CMsgGCCStrike15_v2_MatchList::InternalSwap(CMsgGCCStrike15_v2_MatchList* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.matches_.InternalSwap(&other->_impl_.matches_);
  _impl_.streams_.InternalSwap(&other->_impl_.streams_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgGCCStrike15_v2_MatchList, _impl_.servertime_)
      + sizeof(CMsgGCCStrike15_v2_MatchList::_impl_.servertime_)
      - PROTOBUF_FIELD_OFFSET(CMsgGCCStrike15_v2_MatchList, _impl_.tournamentinfo_)>(
          reinterpret_cast<char*>(&_impl_.tournamentinfo_),
          reinterpret_cast<char*>(&other->_impl_.tournamentinfo_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCCStrike15_v2_MatchList::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cstrike15_5fgcmessages_2eproto_getter, &descriptor_table_cstrike15_5fgcmessages_2eproto_once,
      file_level_metadata_cstrike15_5fgcmessages_2eproto[97]);
}

// ===================================================================

class CMsgGCCStrike15_v2_MatchListTournamentOperatorMgmt::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCCStrike15_v2_MatchListTournamentOperatorMgmt>()._impl_._has_bits_);
  static void set_has_eventid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_accountid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgGCCStrike15_v2_MatchListTournamentOperatorMgmt::CMsgGCCStrike15_v2_MatchListTournamentOperatorMgmt(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgGCCStrike15_v2_MatchListTournamentOperatorMgmt)
}
CMsgGCCStrike15_v2_MatchListTournamentOperatorMgmt::CMsgGCCStrike15_v2_MatchListTournamentOperatorMgmt(const CMsgGCCStrike15_v2_MatchListTournamentOperatorMgmt& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgGCCStrike15_v2_MatchListTournamentOperatorMgmt* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.matches_){from._impl_.matches_}
    , decltype(_impl_.eventid_){}
    , decltype(_impl_.accountid_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.eventid_, &from._impl_.eventid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.accountid_) -
    reinterpret_cast<char*>(&_impl_.eventid_)) + sizeof(_impl_.accountid_));
  // @@protoc_insertion_point(copy_constructor:CMsgGCCStrike15_v2_MatchListTournamentOperatorMgmt)
}

inline void CMsgGCCStrike15_v2_MatchListTournamentOperatorMgmt::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.matches_){arena}
    , decltype(_impl_.eventid_){0}
    , decltype(_impl_.accountid_){0u}
  };
}

CMsgGCCStrike15_v2_MatchListTournamentOperatorMgmt::~CMsgGCCStrike15_v2_MatchListTournamentOperatorMgmt() {
  // @@protoc_insertion_point(destructor:CMsgGCCStrike15_v2_MatchListTournamentOperatorMgmt)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgGCCStrike15_v2_MatchListTournamentOperatorMgmt::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.matches_.~RepeatedPtrField();
}

void CMsgGCCStrike15_v2_MatchListTournamentOperatorMgmt::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgGCCStrike15_v2_MatchListTournamentOperatorMgmt::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCCStrike15_v2_MatchListTournamentOperatorMgmt)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.matches_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.eventid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.accountid_) -
        reinterpret_cast<char*>(&_impl_.eventid_)) + sizeof(_impl_.accountid_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCCStrike15_v2_MatchListTournamentOperatorMgmt::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 eventid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_eventid(&has_bits);
          _impl_.eventid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .CDataGCCStrike15_v2_MatchInfo matches = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_matches(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional uint32 accountid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_accountid(&has_bits);
          _impl_.accountid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgGCCStrike15_v2_MatchListTournamentOperatorMgmt::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCCStrike15_v2_MatchListTournamentOperatorMgmt)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 eventid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_eventid(), target);
  }

  // repeated .CDataGCCStrike15_v2_MatchInfo matches = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_matches_size()); i < n; i++) {
    const auto& repfield = this->_internal_matches(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional uint32 accountid = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_accountid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCCStrike15_v2_MatchListTournamentOperatorMgmt)
  return target;
}

size_t CMsgGCCStrike15_v2_MatchListTournamentOperatorMgmt::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCCStrike15_v2_MatchListTournamentOperatorMgmt)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CDataGCCStrike15_v2_MatchInfo matches = 2;
  total_size += 1UL * this->_internal_matches_size();
  for (const auto& msg : this->_impl_.matches_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int32 eventid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_eventid());
    }

    // optional uint32 accountid = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_accountid());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgGCCStrike15_v2_MatchListTournamentOperatorMgmt::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgGCCStrike15_v2_MatchListTournamentOperatorMgmt::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgGCCStrike15_v2_MatchListTournamentOperatorMgmt::GetClassData() const { return &_class_data_; }


void CMsgGCCStrike15_v2_MatchListTournamentOperatorMgmt::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgGCCStrike15_v2_MatchListTournamentOperatorMgmt*>(&to_msg);
  auto& from = static_cast<const CMsgGCCStrike15_v2_MatchListTournamentOperatorMgmt&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCCStrike15_v2_MatchListTournamentOperatorMgmt)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.matches_.MergeFrom(from._impl_.matches_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.eventid_ = from._impl_.eventid_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.accountid_ = from._impl_.accountid_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgGCCStrike15_v2_MatchListTournamentOperatorMgmt::CopyFrom(const CMsgGCCStrike15_v2_MatchListTournamentOperatorMgmt& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCCStrike15_v2_MatchListTournamentOperatorMgmt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCCStrike15_v2_MatchListTournamentOperatorMgmt::IsInitialized() const {
  return true;
}

void CMsgGCCStrike15_v2_MatchListTournamentOperatorMgmt::InternalSwap(CMsgGCCStrike15_v2_MatchListTournamentOperatorMgmt* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.matches_.InternalSwap(&other->_impl_.matches_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgGCCStrike15_v2_MatchListTournamentOperatorMgmt, _impl_.accountid_)
      + sizeof(CMsgGCCStrike15_v2_MatchListTournamentOperatorMgmt::_impl_.accountid_)
      - PROTOBUF_FIELD_OFFSET(CMsgGCCStrike15_v2_MatchListTournamentOperatorMgmt, _impl_.eventid_)>(
          reinterpret_cast<char*>(&_impl_.eventid_),
          reinterpret_cast<char*>(&other->_impl_.eventid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCCStrike15_v2_MatchListTournamentOperatorMgmt::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cstrike15_5fgcmessages_2eproto_getter, &descriptor_table_cstrike15_5fgcmessages_2eproto_once,
      file_level_metadata_cstrike15_5fgcmessages_2eproto[98]);
}

// ===================================================================

class CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick>()._impl_._has_bits_);
  static void set_has_sectionid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_groupid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_index(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_teamid(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_itemid(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick::CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgGCCStrike15_v2_Predictions.GroupMatchTeamPick)
}
CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick::CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick(const CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.sectionid_){}
    , decltype(_impl_.groupid_){}
    , decltype(_impl_.index_){}
    , decltype(_impl_.teamid_){}
    , decltype(_impl_.itemid_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.sectionid_, &from._impl_.sectionid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.itemid_) -
    reinterpret_cast<char*>(&_impl_.sectionid_)) + sizeof(_impl_.itemid_));
  // @@protoc_insertion_point(copy_constructor:CMsgGCCStrike15_v2_Predictions.GroupMatchTeamPick)
}

inline void CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.sectionid_){0}
    , decltype(_impl_.groupid_){0}
    , decltype(_impl_.index_){0}
    , decltype(_impl_.teamid_){0}
    , decltype(_impl_.itemid_){uint64_t{0u}}
  };
}

CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick::~CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick() {
  // @@protoc_insertion_point(destructor:CMsgGCCStrike15_v2_Predictions.GroupMatchTeamPick)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCCStrike15_v2_Predictions.GroupMatchTeamPick)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&_impl_.sectionid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.itemid_) -
        reinterpret_cast<char*>(&_impl_.sectionid_)) + sizeof(_impl_.itemid_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 sectionid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_sectionid(&has_bits);
          _impl_.sectionid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 groupid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_groupid(&has_bits);
          _impl_.groupid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 index = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_index(&has_bits);
          _impl_.index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 teamid = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_teamid(&has_bits);
          _impl_.teamid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 itemid = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_itemid(&has_bits);
          _impl_.itemid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCCStrike15_v2_Predictions.GroupMatchTeamPick)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 sectionid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_sectionid(), target);
  }

  // optional int32 groupid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_groupid(), target);
  }

  // optional int32 index = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_index(), target);
  }

  // optional int32 teamid = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_teamid(), target);
  }

  // optional uint64 itemid = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(5, this->_internal_itemid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCCStrike15_v2_Predictions.GroupMatchTeamPick)
  return target;
}

size_t CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCCStrike15_v2_Predictions.GroupMatchTeamPick)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional int32 sectionid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_sectionid());
    }

    // optional int32 groupid = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_groupid());
    }

    // optional int32 index = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_index());
    }

    // optional int32 teamid = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_teamid());
    }

    // optional uint64 itemid = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_itemid());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick::GetClassData() const { return &_class_data_; }


void CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick*>(&to_msg);
  auto& from = static_cast<const CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCCStrike15_v2_Predictions.GroupMatchTeamPick)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.sectionid_ = from._impl_.sectionid_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.groupid_ = from._impl_.groupid_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.index_ = from._impl_.index_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.teamid_ = from._impl_.teamid_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.itemid_ = from._impl_.itemid_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick::CopyFrom(const CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCCStrike15_v2_Predictions.GroupMatchTeamPick)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick::IsInitialized() const {
  return true;
}

void CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick::InternalSwap(CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick, _impl_.itemid_)
      + sizeof(CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick::_impl_.itemid_)
      - PROTOBUF_FIELD_OFFSET(CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick, _impl_.sectionid_)>(
          reinterpret_cast<char*>(&_impl_.sectionid_),
          reinterpret_cast<char*>(&other->_impl_.sectionid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cstrike15_5fgcmessages_2eproto_getter, &descriptor_table_cstrike15_5fgcmessages_2eproto_once,
      file_level_metadata_cstrike15_5fgcmessages_2eproto[99]);
}

// ===================================================================

class CMsgGCCStrike15_v2_Predictions::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCCStrike15_v2_Predictions>()._impl_._has_bits_);
  static void set_has_event_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgGCCStrike15_v2_Predictions::CMsgGCCStrike15_v2_Predictions(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgGCCStrike15_v2_Predictions)
}
CMsgGCCStrike15_v2_Predictions::CMsgGCCStrike15_v2_Predictions(const CMsgGCCStrike15_v2_Predictions& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgGCCStrike15_v2_Predictions* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.group_match_team_picks_){from._impl_.group_match_team_picks_}
    , decltype(_impl_.event_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.event_id_ = from._impl_.event_id_;
  // @@protoc_insertion_point(copy_constructor:CMsgGCCStrike15_v2_Predictions)
}

inline void CMsgGCCStrike15_v2_Predictions::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.group_match_team_picks_){arena}
    , decltype(_impl_.event_id_){0u}
  };
}

CMsgGCCStrike15_v2_Predictions::~CMsgGCCStrike15_v2_Predictions() {
  // @@protoc_insertion_point(destructor:CMsgGCCStrike15_v2_Predictions)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgGCCStrike15_v2_Predictions::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.group_match_team_picks_.~RepeatedPtrField();
}

void CMsgGCCStrike15_v2_Predictions::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgGCCStrike15_v2_Predictions::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCCStrike15_v2_Predictions)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.group_match_team_picks_.Clear();
  _impl_.event_id_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCCStrike15_v2_Predictions::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 event_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_event_id(&has_bits);
          _impl_.event_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .CMsgGCCStrike15_v2_Predictions.GroupMatchTeamPick group_match_team_picks = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_group_match_team_picks(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgGCCStrike15_v2_Predictions::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCCStrike15_v2_Predictions)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 event_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_event_id(), target);
  }

  // repeated .CMsgGCCStrike15_v2_Predictions.GroupMatchTeamPick group_match_team_picks = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_group_match_team_picks_size()); i < n; i++) {
    const auto& repfield = this->_internal_group_match_team_picks(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCCStrike15_v2_Predictions)
  return target;
}

size_t CMsgGCCStrike15_v2_Predictions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCCStrike15_v2_Predictions)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgGCCStrike15_v2_Predictions.GroupMatchTeamPick group_match_team_picks = 2;
  total_size += 1UL * this->_internal_group_match_team_picks_size();
  for (const auto& msg : this->_impl_.group_match_team_picks_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional uint32 event_id = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_event_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgGCCStrike15_v2_Predictions::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgGCCStrike15_v2_Predictions::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgGCCStrike15_v2_Predictions::GetClassData() const { return &_class_data_; }


void CMsgGCCStrike15_v2_Predictions::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgGCCStrike15_v2_Predictions*>(&to_msg);
  auto& from = static_cast<const CMsgGCCStrike15_v2_Predictions&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCCStrike15_v2_Predictions)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.group_match_team_picks_.MergeFrom(from._impl_.group_match_team_picks_);
  if (from._internal_has_event_id()) {
    _this->_internal_set_event_id(from._internal_event_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgGCCStrike15_v2_Predictions::CopyFrom(const CMsgGCCStrike15_v2_Predictions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCCStrike15_v2_Predictions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCCStrike15_v2_Predictions::IsInitialized() const {
  return true;
}

void CMsgGCCStrike15_v2_Predictions::InternalSwap(CMsgGCCStrike15_v2_Predictions* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.group_match_team_picks_.InternalSwap(&other->_impl_.group_match_team_picks_);
  swap(_impl_.event_id_, other->_impl_.event_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCCStrike15_v2_Predictions::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cstrike15_5fgcmessages_2eproto_getter, &descriptor_table_cstrike15_5fgcmessages_2eproto_once,
      file_level_metadata_cstrike15_5fgcmessages_2eproto[100]);
}

// ===================================================================

class CMsgGCCStrike15_v2_Fantasy_FantasySlot::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCCStrike15_v2_Fantasy_FantasySlot>()._impl_._has_bits_);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_pick(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_itemid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CMsgGCCStrike15_v2_Fantasy_FantasySlot::CMsgGCCStrike15_v2_Fantasy_FantasySlot(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgGCCStrike15_v2_Fantasy.FantasySlot)
}
CMsgGCCStrike15_v2_Fantasy_FantasySlot::CMsgGCCStrike15_v2_Fantasy_FantasySlot(const CMsgGCCStrike15_v2_Fantasy_FantasySlot& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgGCCStrike15_v2_Fantasy_FantasySlot* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.type_){}
    , decltype(_impl_.pick_){}
    , decltype(_impl_.itemid_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.type_, &from._impl_.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.itemid_) -
    reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.itemid_));
  // @@protoc_insertion_point(copy_constructor:CMsgGCCStrike15_v2_Fantasy.FantasySlot)
}

inline void CMsgGCCStrike15_v2_Fantasy_FantasySlot::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.type_){0}
    , decltype(_impl_.pick_){0}
    , decltype(_impl_.itemid_){uint64_t{0u}}
  };
}

CMsgGCCStrike15_v2_Fantasy_FantasySlot::~CMsgGCCStrike15_v2_Fantasy_FantasySlot() {
  // @@protoc_insertion_point(destructor:CMsgGCCStrike15_v2_Fantasy.FantasySlot)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgGCCStrike15_v2_Fantasy_FantasySlot::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgGCCStrike15_v2_Fantasy_FantasySlot::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgGCCStrike15_v2_Fantasy_FantasySlot::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCCStrike15_v2_Fantasy.FantasySlot)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.itemid_) -
        reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.itemid_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCCStrike15_v2_Fantasy_FantasySlot::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_type(&has_bits);
          _impl_.type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 pick = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_pick(&has_bits);
          _impl_.pick_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 itemid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_itemid(&has_bits);
          _impl_.itemid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgGCCStrike15_v2_Fantasy_FantasySlot::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCCStrike15_v2_Fantasy.FantasySlot)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 type = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_type(), target);
  }

  // optional int32 pick = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_pick(), target);
  }

  // optional uint64 itemid = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal_itemid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCCStrike15_v2_Fantasy.FantasySlot)
  return target;
}

size_t CMsgGCCStrike15_v2_Fantasy_FantasySlot::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCCStrike15_v2_Fantasy.FantasySlot)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional int32 type = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_type());
    }

    // optional int32 pick = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_pick());
    }

    // optional uint64 itemid = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_itemid());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgGCCStrike15_v2_Fantasy_FantasySlot::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgGCCStrike15_v2_Fantasy_FantasySlot::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgGCCStrike15_v2_Fantasy_FantasySlot::GetClassData() const { return &_class_data_; }


void CMsgGCCStrike15_v2_Fantasy_FantasySlot::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgGCCStrike15_v2_Fantasy_FantasySlot*>(&to_msg);
  auto& from = static_cast<const CMsgGCCStrike15_v2_Fantasy_FantasySlot&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCCStrike15_v2_Fantasy.FantasySlot)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.type_ = from._impl_.type_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.pick_ = from._impl_.pick_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.itemid_ = from._impl_.itemid_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgGCCStrike15_v2_Fantasy_FantasySlot::CopyFrom(const CMsgGCCStrike15_v2_Fantasy_FantasySlot& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCCStrike15_v2_Fantasy.FantasySlot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCCStrike15_v2_Fantasy_FantasySlot::IsInitialized() const {
  return true;
}

void CMsgGCCStrike15_v2_Fantasy_FantasySlot::InternalSwap(CMsgGCCStrike15_v2_Fantasy_FantasySlot* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgGCCStrike15_v2_Fantasy_FantasySlot, _impl_.itemid_)
      + sizeof(CMsgGCCStrike15_v2_Fantasy_FantasySlot::_impl_.itemid_)
      - PROTOBUF_FIELD_OFFSET(CMsgGCCStrike15_v2_Fantasy_FantasySlot, _impl_.type_)>(
          reinterpret_cast<char*>(&_impl_.type_),
          reinterpret_cast<char*>(&other->_impl_.type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCCStrike15_v2_Fantasy_FantasySlot::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cstrike15_5fgcmessages_2eproto_getter, &descriptor_table_cstrike15_5fgcmessages_2eproto_once,
      file_level_metadata_cstrike15_5fgcmessages_2eproto[101]);
}

// ===================================================================

class CMsgGCCStrike15_v2_Fantasy_FantasyTeam::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCCStrike15_v2_Fantasy_FantasyTeam>()._impl_._has_bits_);
  static void set_has_sectionid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgGCCStrike15_v2_Fantasy_FantasyTeam::CMsgGCCStrike15_v2_Fantasy_FantasyTeam(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgGCCStrike15_v2_Fantasy.FantasyTeam)
}
CMsgGCCStrike15_v2_Fantasy_FantasyTeam::CMsgGCCStrike15_v2_Fantasy_FantasyTeam(const CMsgGCCStrike15_v2_Fantasy_FantasyTeam& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgGCCStrike15_v2_Fantasy_FantasyTeam* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.slots_){from._impl_.slots_}
    , decltype(_impl_.sectionid_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.sectionid_ = from._impl_.sectionid_;
  // @@protoc_insertion_point(copy_constructor:CMsgGCCStrike15_v2_Fantasy.FantasyTeam)
}

inline void CMsgGCCStrike15_v2_Fantasy_FantasyTeam::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.slots_){arena}
    , decltype(_impl_.sectionid_){0}
  };
}

CMsgGCCStrike15_v2_Fantasy_FantasyTeam::~CMsgGCCStrike15_v2_Fantasy_FantasyTeam() {
  // @@protoc_insertion_point(destructor:CMsgGCCStrike15_v2_Fantasy.FantasyTeam)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgGCCStrike15_v2_Fantasy_FantasyTeam::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.slots_.~RepeatedPtrField();
}

void CMsgGCCStrike15_v2_Fantasy_FantasyTeam::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgGCCStrike15_v2_Fantasy_FantasyTeam::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCCStrike15_v2_Fantasy.FantasyTeam)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.slots_.Clear();
  _impl_.sectionid_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCCStrike15_v2_Fantasy_FantasyTeam::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 sectionid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_sectionid(&has_bits);
          _impl_.sectionid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .CMsgGCCStrike15_v2_Fantasy.FantasySlot slots = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_slots(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgGCCStrike15_v2_Fantasy_FantasyTeam::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCCStrike15_v2_Fantasy.FantasyTeam)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 sectionid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_sectionid(), target);
  }

  // repeated .CMsgGCCStrike15_v2_Fantasy.FantasySlot slots = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_slots_size()); i < n; i++) {
    const auto& repfield = this->_internal_slots(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCCStrike15_v2_Fantasy.FantasyTeam)
  return target;
}

size_t CMsgGCCStrike15_v2_Fantasy_FantasyTeam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCCStrike15_v2_Fantasy.FantasyTeam)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgGCCStrike15_v2_Fantasy.FantasySlot slots = 2;
  total_size += 1UL * this->_internal_slots_size();
  for (const auto& msg : this->_impl_.slots_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional int32 sectionid = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_sectionid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgGCCStrike15_v2_Fantasy_FantasyTeam::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgGCCStrike15_v2_Fantasy_FantasyTeam::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgGCCStrike15_v2_Fantasy_FantasyTeam::GetClassData() const { return &_class_data_; }


void CMsgGCCStrike15_v2_Fantasy_FantasyTeam::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgGCCStrike15_v2_Fantasy_FantasyTeam*>(&to_msg);
  auto& from = static_cast<const CMsgGCCStrike15_v2_Fantasy_FantasyTeam&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCCStrike15_v2_Fantasy.FantasyTeam)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.slots_.MergeFrom(from._impl_.slots_);
  if (from._internal_has_sectionid()) {
    _this->_internal_set_sectionid(from._internal_sectionid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgGCCStrike15_v2_Fantasy_FantasyTeam::CopyFrom(const CMsgGCCStrike15_v2_Fantasy_FantasyTeam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCCStrike15_v2_Fantasy.FantasyTeam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCCStrike15_v2_Fantasy_FantasyTeam::IsInitialized() const {
  return true;
}

void CMsgGCCStrike15_v2_Fantasy_FantasyTeam::InternalSwap(CMsgGCCStrike15_v2_Fantasy_FantasyTeam* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.slots_.InternalSwap(&other->_impl_.slots_);
  swap(_impl_.sectionid_, other->_impl_.sectionid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCCStrike15_v2_Fantasy_FantasyTeam::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cstrike15_5fgcmessages_2eproto_getter, &descriptor_table_cstrike15_5fgcmessages_2eproto_once,
      file_level_metadata_cstrike15_5fgcmessages_2eproto[102]);
}

// ===================================================================

class CMsgGCCStrike15_v2_Fantasy::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCCStrike15_v2_Fantasy>()._impl_._has_bits_);
  static void set_has_event_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgGCCStrike15_v2_Fantasy::CMsgGCCStrike15_v2_Fantasy(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgGCCStrike15_v2_Fantasy)
}
CMsgGCCStrike15_v2_Fantasy::CMsgGCCStrike15_v2_Fantasy(const CMsgGCCStrike15_v2_Fantasy& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgGCCStrike15_v2_Fantasy* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.teams_){from._impl_.teams_}
    , decltype(_impl_.event_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.event_id_ = from._impl_.event_id_;
  // @@protoc_insertion_point(copy_constructor:CMsgGCCStrike15_v2_Fantasy)
}

inline void CMsgGCCStrike15_v2_Fantasy::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.teams_){arena}
    , decltype(_impl_.event_id_){0u}
  };
}

CMsgGCCStrike15_v2_Fantasy::~CMsgGCCStrike15_v2_Fantasy() {
  // @@protoc_insertion_point(destructor:CMsgGCCStrike15_v2_Fantasy)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgGCCStrike15_v2_Fantasy::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.teams_.~RepeatedPtrField();
}

void CMsgGCCStrike15_v2_Fantasy::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgGCCStrike15_v2_Fantasy::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCCStrike15_v2_Fantasy)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.teams_.Clear();
  _impl_.event_id_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCCStrike15_v2_Fantasy::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 event_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_event_id(&has_bits);
          _impl_.event_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .CMsgGCCStrike15_v2_Fantasy.FantasyTeam teams = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_teams(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgGCCStrike15_v2_Fantasy::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCCStrike15_v2_Fantasy)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 event_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_event_id(), target);
  }

  // repeated .CMsgGCCStrike15_v2_Fantasy.FantasyTeam teams = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_teams_size()); i < n; i++) {
    const auto& repfield = this->_internal_teams(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCCStrike15_v2_Fantasy)
  return target;
}

size_t CMsgGCCStrike15_v2_Fantasy::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCCStrike15_v2_Fantasy)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgGCCStrike15_v2_Fantasy.FantasyTeam teams = 2;
  total_size += 1UL * this->_internal_teams_size();
  for (const auto& msg : this->_impl_.teams_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional uint32 event_id = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_event_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgGCCStrike15_v2_Fantasy::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgGCCStrike15_v2_Fantasy::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgGCCStrike15_v2_Fantasy::GetClassData() const { return &_class_data_; }


void CMsgGCCStrike15_v2_Fantasy::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgGCCStrike15_v2_Fantasy*>(&to_msg);
  auto& from = static_cast<const CMsgGCCStrike15_v2_Fantasy&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCCStrike15_v2_Fantasy)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.teams_.MergeFrom(from._impl_.teams_);
  if (from._internal_has_event_id()) {
    _this->_internal_set_event_id(from._internal_event_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgGCCStrike15_v2_Fantasy::CopyFrom(const CMsgGCCStrike15_v2_Fantasy& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCCStrike15_v2_Fantasy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCCStrike15_v2_Fantasy::IsInitialized() const {
  return true;
}

void CMsgGCCStrike15_v2_Fantasy::InternalSwap(CMsgGCCStrike15_v2_Fantasy* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.teams_.InternalSwap(&other->_impl_.teams_);
  swap(_impl_.event_id_, other->_impl_.event_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCCStrike15_v2_Fantasy::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cstrike15_5fgcmessages_2eproto_getter, &descriptor_table_cstrike15_5fgcmessages_2eproto_once,
      file_level_metadata_cstrike15_5fgcmessages_2eproto[103]);
}

// ===================================================================

class CAttribute_String::_Internal {
 public:
  using HasBits = decltype(std::declval<CAttribute_String>()._impl_._has_bits_);
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CAttribute_String::CAttribute_String(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CAttribute_String)
}
CAttribute_String::CAttribute_String(const CAttribute_String& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CAttribute_String* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.value_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.value_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.value_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_value()) {
    _this->_impl_.value_.Set(from._internal_value(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:CAttribute_String)
}

inline void CAttribute_String::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.value_){}
  };
  _impl_.value_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.value_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CAttribute_String::~CAttribute_String() {
  // @@protoc_insertion_point(destructor:CAttribute_String)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CAttribute_String::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.value_.Destroy();
}

void CAttribute_String::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CAttribute_String::Clear() {
// @@protoc_insertion_point(message_clear_start:CAttribute_String)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.value_.ClearNonDefaultToEmpty();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CAttribute_String::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_value();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CAttribute_String.value");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CAttribute_String::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CAttribute_String)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string value = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_value().data(), static_cast<int>(this->_internal_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CAttribute_String.value");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CAttribute_String)
  return target;
}

size_t CAttribute_String::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CAttribute_String)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string value = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_value());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CAttribute_String::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CAttribute_String::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CAttribute_String::GetClassData() const { return &_class_data_; }


void CAttribute_String::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CAttribute_String*>(&to_msg);
  auto& from = static_cast<const CAttribute_String&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CAttribute_String)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_value()) {
    _this->_internal_set_value(from._internal_value());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CAttribute_String::CopyFrom(const CAttribute_String& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CAttribute_String)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CAttribute_String::IsInitialized() const {
  return true;
}

void CAttribute_String::InternalSwap(CAttribute_String* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.value_, lhs_arena,
      &other->_impl_.value_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata CAttribute_String::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cstrike15_5fgcmessages_2eproto_getter, &descriptor_table_cstrike15_5fgcmessages_2eproto_once,
      file_level_metadata_cstrike15_5fgcmessages_2eproto[104]);
}

// ===================================================================

class CMsgLegacySource1ClientWelcome_Location::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgLegacySource1ClientWelcome_Location>()._impl_._has_bits_);
  static void set_has_latitude(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_longitude(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_country(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgLegacySource1ClientWelcome_Location::CMsgLegacySource1ClientWelcome_Location(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgLegacySource1ClientWelcome.Location)
}
CMsgLegacySource1ClientWelcome_Location::CMsgLegacySource1ClientWelcome_Location(const CMsgLegacySource1ClientWelcome_Location& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgLegacySource1ClientWelcome_Location* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.country_){}
    , decltype(_impl_.latitude_){}
    , decltype(_impl_.longitude_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.country_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.country_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_country()) {
    _this->_impl_.country_.Set(from._internal_country(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.latitude_, &from._impl_.latitude_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.longitude_) -
    reinterpret_cast<char*>(&_impl_.latitude_)) + sizeof(_impl_.longitude_));
  // @@protoc_insertion_point(copy_constructor:CMsgLegacySource1ClientWelcome.Location)
}

inline void CMsgLegacySource1ClientWelcome_Location::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.country_){}
    , decltype(_impl_.latitude_){0}
    , decltype(_impl_.longitude_){0}
  };
  _impl_.country_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.country_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CMsgLegacySource1ClientWelcome_Location::~CMsgLegacySource1ClientWelcome_Location() {
  // @@protoc_insertion_point(destructor:CMsgLegacySource1ClientWelcome.Location)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgLegacySource1ClientWelcome_Location::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.country_.Destroy();
}

void CMsgLegacySource1ClientWelcome_Location::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgLegacySource1ClientWelcome_Location::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgLegacySource1ClientWelcome.Location)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.country_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&_impl_.latitude_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.longitude_) -
        reinterpret_cast<char*>(&_impl_.latitude_)) + sizeof(_impl_.longitude_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgLegacySource1ClientWelcome_Location::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional float latitude = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          _Internal::set_has_latitude(&has_bits);
          _impl_.latitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float longitude = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _Internal::set_has_longitude(&has_bits);
          _impl_.longitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional string country = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_country();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CMsgLegacySource1ClientWelcome.Location.country");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgLegacySource1ClientWelcome_Location::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgLegacySource1ClientWelcome.Location)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional float latitude = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(1, this->_internal_latitude(), target);
  }

  // optional float longitude = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_longitude(), target);
  }

  // optional string country = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_country().data(), static_cast<int>(this->_internal_country().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgLegacySource1ClientWelcome.Location.country");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_country(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgLegacySource1ClientWelcome.Location)
  return target;
}

size_t CMsgLegacySource1ClientWelcome_Location::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgLegacySource1ClientWelcome.Location)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string country = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_country());
    }

    // optional float latitude = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional float longitude = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgLegacySource1ClientWelcome_Location::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgLegacySource1ClientWelcome_Location::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgLegacySource1ClientWelcome_Location::GetClassData() const { return &_class_data_; }


void CMsgLegacySource1ClientWelcome_Location::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgLegacySource1ClientWelcome_Location*>(&to_msg);
  auto& from = static_cast<const CMsgLegacySource1ClientWelcome_Location&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgLegacySource1ClientWelcome.Location)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_country(from._internal_country());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.latitude_ = from._impl_.latitude_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.longitude_ = from._impl_.longitude_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgLegacySource1ClientWelcome_Location::CopyFrom(const CMsgLegacySource1ClientWelcome_Location& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgLegacySource1ClientWelcome.Location)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgLegacySource1ClientWelcome_Location::IsInitialized() const {
  return true;
}

void CMsgLegacySource1ClientWelcome_Location::InternalSwap(CMsgLegacySource1ClientWelcome_Location* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.country_, lhs_arena,
      &other->_impl_.country_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgLegacySource1ClientWelcome_Location, _impl_.longitude_)
      + sizeof(CMsgLegacySource1ClientWelcome_Location::_impl_.longitude_)
      - PROTOBUF_FIELD_OFFSET(CMsgLegacySource1ClientWelcome_Location, _impl_.latitude_)>(
          reinterpret_cast<char*>(&_impl_.latitude_),
          reinterpret_cast<char*>(&other->_impl_.latitude_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgLegacySource1ClientWelcome_Location::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cstrike15_5fgcmessages_2eproto_getter, &descriptor_table_cstrike15_5fgcmessages_2eproto_once,
      file_level_metadata_cstrike15_5fgcmessages_2eproto[105]);
}

// ===================================================================

class CMsgLegacySource1ClientWelcome::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgLegacySource1ClientWelcome>()._impl_._has_bits_);
  static void set_has_version(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_game_data(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::CMsgLegacySource1ClientWelcome_Location& location(const CMsgLegacySource1ClientWelcome* msg);
  static void set_has_location(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_game_data2(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_rtime32_gc_welcome_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_currency(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_balance(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_balance_url(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_txn_country_code(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::CMsgLegacySource1ClientWelcome_Location&
CMsgLegacySource1ClientWelcome::_Internal::location(const CMsgLegacySource1ClientWelcome* msg) {
  return *msg->_impl_.location_;
}
void CMsgLegacySource1ClientWelcome::clear_outofdate_subscribed_caches() {
  _impl_.outofdate_subscribed_caches_.Clear();
}
void CMsgLegacySource1ClientWelcome::clear_uptodate_subscribed_caches() {
  _impl_.uptodate_subscribed_caches_.Clear();
}
CMsgLegacySource1ClientWelcome::CMsgLegacySource1ClientWelcome(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgLegacySource1ClientWelcome)
}
CMsgLegacySource1ClientWelcome::CMsgLegacySource1ClientWelcome(const CMsgLegacySource1ClientWelcome& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgLegacySource1ClientWelcome* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.outofdate_subscribed_caches_){from._impl_.outofdate_subscribed_caches_}
    , decltype(_impl_.uptodate_subscribed_caches_){from._impl_.uptodate_subscribed_caches_}
    , decltype(_impl_.game_data_){}
    , decltype(_impl_.game_data2_){}
    , decltype(_impl_.balance_url_){}
    , decltype(_impl_.txn_country_code_){}
    , decltype(_impl_.location_){nullptr}
    , decltype(_impl_.version_){}
    , decltype(_impl_.rtime32_gc_welcome_timestamp_){}
    , decltype(_impl_.currency_){}
    , decltype(_impl_.balance_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.game_data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.game_data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_game_data()) {
    _this->_impl_.game_data_.Set(from._internal_game_data(), 
      _this->GetArenaForAllocation());
  }
  _impl_.game_data2_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.game_data2_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_game_data2()) {
    _this->_impl_.game_data2_.Set(from._internal_game_data2(), 
      _this->GetArenaForAllocation());
  }
  _impl_.balance_url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.balance_url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_balance_url()) {
    _this->_impl_.balance_url_.Set(from._internal_balance_url(), 
      _this->GetArenaForAllocation());
  }
  _impl_.txn_country_code_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.txn_country_code_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_txn_country_code()) {
    _this->_impl_.txn_country_code_.Set(from._internal_txn_country_code(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_location()) {
    _this->_impl_.location_ = new ::CMsgLegacySource1ClientWelcome_Location(*from._impl_.location_);
  }
  ::memcpy(&_impl_.version_, &from._impl_.version_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.balance_) -
    reinterpret_cast<char*>(&_impl_.version_)) + sizeof(_impl_.balance_));
  // @@protoc_insertion_point(copy_constructor:CMsgLegacySource1ClientWelcome)
}

inline void CMsgLegacySource1ClientWelcome::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.outofdate_subscribed_caches_){arena}
    , decltype(_impl_.uptodate_subscribed_caches_){arena}
    , decltype(_impl_.game_data_){}
    , decltype(_impl_.game_data2_){}
    , decltype(_impl_.balance_url_){}
    , decltype(_impl_.txn_country_code_){}
    , decltype(_impl_.location_){nullptr}
    , decltype(_impl_.version_){0u}
    , decltype(_impl_.rtime32_gc_welcome_timestamp_){0u}
    , decltype(_impl_.currency_){0u}
    , decltype(_impl_.balance_){0u}
  };
  _impl_.game_data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.game_data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.game_data2_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.game_data2_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.balance_url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.balance_url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.txn_country_code_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.txn_country_code_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CMsgLegacySource1ClientWelcome::~CMsgLegacySource1ClientWelcome() {
  // @@protoc_insertion_point(destructor:CMsgLegacySource1ClientWelcome)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgLegacySource1ClientWelcome::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.outofdate_subscribed_caches_.~RepeatedPtrField();
  _impl_.uptodate_subscribed_caches_.~RepeatedPtrField();
  _impl_.game_data_.Destroy();
  _impl_.game_data2_.Destroy();
  _impl_.balance_url_.Destroy();
  _impl_.txn_country_code_.Destroy();
  if (this != internal_default_instance()) delete _impl_.location_;
}

void CMsgLegacySource1ClientWelcome::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgLegacySource1ClientWelcome::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgLegacySource1ClientWelcome)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.outofdate_subscribed_caches_.Clear();
  _impl_.uptodate_subscribed_caches_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.game_data_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.game_data2_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.balance_url_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.txn_country_code_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(_impl_.location_ != nullptr);
      _impl_.location_->Clear();
    }
  }
  if (cached_has_bits & 0x000000e0u) {
    ::memset(&_impl_.version_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.currency_) -
        reinterpret_cast<char*>(&_impl_.version_)) + sizeof(_impl_.currency_));
  }
  _impl_.balance_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgLegacySource1ClientWelcome::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 version = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_version(&has_bits);
          _impl_.version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes game_data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_game_data();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .CMsgSOCacheSubscribed outofdate_subscribed_caches = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_outofdate_subscribed_caches(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .CMsgSOCacheSubscriptionCheck uptodate_subscribed_caches = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_uptodate_subscribed_caches(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .CMsgLegacySource1ClientWelcome.Location location = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_location(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes game_data2 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_game_data2();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 rtime32_gc_welcome_timestamp = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_rtime32_gc_welcome_timestamp(&has_bits);
          _impl_.rtime32_gc_welcome_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 currency = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_currency(&has_bits);
          _impl_.currency_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 balance = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_balance(&has_bits);
          _impl_.balance_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string balance_url = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          auto str = _internal_mutable_balance_url();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CMsgLegacySource1ClientWelcome.balance_url");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string txn_country_code = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          auto str = _internal_mutable_txn_country_code();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CMsgLegacySource1ClientWelcome.txn_country_code");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgLegacySource1ClientWelcome::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgLegacySource1ClientWelcome)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 version = 1;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_version(), target);
  }

  // optional bytes game_data = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_game_data(), target);
  }

  // repeated .CMsgSOCacheSubscribed outofdate_subscribed_caches = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_outofdate_subscribed_caches_size()); i < n; i++) {
    const auto& repfield = this->_internal_outofdate_subscribed_caches(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .CMsgSOCacheSubscriptionCheck uptodate_subscribed_caches = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_uptodate_subscribed_caches_size()); i < n; i++) {
    const auto& repfield = this->_internal_uptodate_subscribed_caches(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional .CMsgLegacySource1ClientWelcome.Location location = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::location(this),
        _Internal::location(this).GetCachedSize(), target, stream);
  }

  // optional bytes game_data2 = 6;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        6, this->_internal_game_data2(), target);
  }

  // optional uint32 rtime32_gc_welcome_timestamp = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(7, this->_internal_rtime32_gc_welcome_timestamp(), target);
  }

  // optional uint32 currency = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(8, this->_internal_currency(), target);
  }

  // optional uint32 balance = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(9, this->_internal_balance(), target);
  }

  // optional string balance_url = 10;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_balance_url().data(), static_cast<int>(this->_internal_balance_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgLegacySource1ClientWelcome.balance_url");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_balance_url(), target);
  }

  // optional string txn_country_code = 11;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_txn_country_code().data(), static_cast<int>(this->_internal_txn_country_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgLegacySource1ClientWelcome.txn_country_code");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_txn_country_code(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgLegacySource1ClientWelcome)
  return target;
}

size_t CMsgLegacySource1ClientWelcome::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgLegacySource1ClientWelcome)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgSOCacheSubscribed outofdate_subscribed_caches = 3;
  total_size += 1UL * this->_internal_outofdate_subscribed_caches_size();
  for (const auto& msg : this->_impl_.outofdate_subscribed_caches_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .CMsgSOCacheSubscriptionCheck uptodate_subscribed_caches = 4;
  total_size += 1UL * this->_internal_uptodate_subscribed_caches_size();
  for (const auto& msg : this->_impl_.uptodate_subscribed_caches_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional bytes game_data = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_game_data());
    }

    // optional bytes game_data2 = 6;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_game_data2());
    }

    // optional string balance_url = 10;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_balance_url());
    }

    // optional string txn_country_code = 11;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_txn_country_code());
    }

    // optional .CMsgLegacySource1ClientWelcome.Location location = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.location_);
    }

    // optional uint32 version = 1;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_version());
    }

    // optional uint32 rtime32_gc_welcome_timestamp = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_rtime32_gc_welcome_timestamp());
    }

    // optional uint32 currency = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_currency());
    }

  }
  // optional uint32 balance = 9;
  if (cached_has_bits & 0x00000100u) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_balance());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgLegacySource1ClientWelcome::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgLegacySource1ClientWelcome::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgLegacySource1ClientWelcome::GetClassData() const { return &_class_data_; }


void CMsgLegacySource1ClientWelcome::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgLegacySource1ClientWelcome*>(&to_msg);
  auto& from = static_cast<const CMsgLegacySource1ClientWelcome&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgLegacySource1ClientWelcome)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.outofdate_subscribed_caches_.MergeFrom(from._impl_.outofdate_subscribed_caches_);
  _this->_impl_.uptodate_subscribed_caches_.MergeFrom(from._impl_.uptodate_subscribed_caches_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_game_data(from._internal_game_data());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_game_data2(from._internal_game_data2());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_balance_url(from._internal_balance_url());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_set_txn_country_code(from._internal_txn_country_code());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_mutable_location()->::CMsgLegacySource1ClientWelcome_Location::MergeFrom(
          from._internal_location());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.version_ = from._impl_.version_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.rtime32_gc_welcome_timestamp_ = from._impl_.rtime32_gc_welcome_timestamp_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.currency_ = from._impl_.currency_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    _this->_internal_set_balance(from._internal_balance());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgLegacySource1ClientWelcome::CopyFrom(const CMsgLegacySource1ClientWelcome& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgLegacySource1ClientWelcome)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgLegacySource1ClientWelcome::IsInitialized() const {
  return true;
}

void CMsgLegacySource1ClientWelcome::InternalSwap(CMsgLegacySource1ClientWelcome* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.outofdate_subscribed_caches_.InternalSwap(&other->_impl_.outofdate_subscribed_caches_);
  _impl_.uptodate_subscribed_caches_.InternalSwap(&other->_impl_.uptodate_subscribed_caches_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.game_data_, lhs_arena,
      &other->_impl_.game_data_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.game_data2_, lhs_arena,
      &other->_impl_.game_data2_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.balance_url_, lhs_arena,
      &other->_impl_.balance_url_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.txn_country_code_, lhs_arena,
      &other->_impl_.txn_country_code_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgLegacySource1ClientWelcome, _impl_.balance_)
      + sizeof(CMsgLegacySource1ClientWelcome::_impl_.balance_)
      - PROTOBUF_FIELD_OFFSET(CMsgLegacySource1ClientWelcome, _impl_.location_)>(
          reinterpret_cast<char*>(&_impl_.location_),
          reinterpret_cast<char*>(&other->_impl_.location_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgLegacySource1ClientWelcome::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cstrike15_5fgcmessages_2eproto_getter, &descriptor_table_cstrike15_5fgcmessages_2eproto_once,
      file_level_metadata_cstrike15_5fgcmessages_2eproto[106]);
}

// ===================================================================

class CMsgCStrike15Welcome::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgCStrike15Welcome>()._impl_._has_bits_);
  static void set_has_store_item_hash(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_timeplayedconsecutively(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_time_first_played(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_last_time_played(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_last_ip_address(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_gscookieid(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_uniqueid(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

CMsgCStrike15Welcome::CMsgCStrike15Welcome(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgCStrike15Welcome)
}
CMsgCStrike15Welcome::CMsgCStrike15Welcome(const CMsgCStrike15Welcome& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgCStrike15Welcome* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.store_item_hash_){}
    , decltype(_impl_.timeplayedconsecutively_){}
    , decltype(_impl_.time_first_played_){}
    , decltype(_impl_.last_time_played_){}
    , decltype(_impl_.gscookieid_){}
    , decltype(_impl_.uniqueid_){}
    , decltype(_impl_.last_ip_address_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.store_item_hash_, &from._impl_.store_item_hash_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.last_ip_address_) -
    reinterpret_cast<char*>(&_impl_.store_item_hash_)) + sizeof(_impl_.last_ip_address_));
  // @@protoc_insertion_point(copy_constructor:CMsgCStrike15Welcome)
}

inline void CMsgCStrike15Welcome::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.store_item_hash_){0u}
    , decltype(_impl_.timeplayedconsecutively_){0u}
    , decltype(_impl_.time_first_played_){0u}
    , decltype(_impl_.last_time_played_){0u}
    , decltype(_impl_.gscookieid_){uint64_t{0u}}
    , decltype(_impl_.uniqueid_){uint64_t{0u}}
    , decltype(_impl_.last_ip_address_){0u}
  };
}

CMsgCStrike15Welcome::~CMsgCStrike15Welcome() {
  // @@protoc_insertion_point(destructor:CMsgCStrike15Welcome)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgCStrike15Welcome::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgCStrike15Welcome::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgCStrike15Welcome::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgCStrike15Welcome)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    ::memset(&_impl_.store_item_hash_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.last_ip_address_) -
        reinterpret_cast<char*>(&_impl_.store_item_hash_)) + sizeof(_impl_.last_ip_address_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgCStrike15Welcome::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 store_item_hash = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_store_item_hash(&has_bits);
          _impl_.store_item_hash_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 timeplayedconsecutively = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_timeplayedconsecutively(&has_bits);
          _impl_.timeplayedconsecutively_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 time_first_played = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_time_first_played(&has_bits);
          _impl_.time_first_played_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 last_time_played = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _Internal::set_has_last_time_played(&has_bits);
          _impl_.last_time_played_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 last_ip_address = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _Internal::set_has_last_ip_address(&has_bits);
          _impl_.last_ip_address_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 gscookieid = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 144)) {
          _Internal::set_has_gscookieid(&has_bits);
          _impl_.gscookieid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 uniqueid = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 152)) {
          _Internal::set_has_uniqueid(&has_bits);
          _impl_.uniqueid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgCStrike15Welcome::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgCStrike15Welcome)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 store_item_hash = 5;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_store_item_hash(), target);
  }

  // optional uint32 timeplayedconsecutively = 6;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_timeplayedconsecutively(), target);
  }

  // optional uint32 time_first_played = 10;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(10, this->_internal_time_first_played(), target);
  }

  // optional uint32 last_time_played = 12;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(12, this->_internal_last_time_played(), target);
  }

  // optional uint32 last_ip_address = 13;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(13, this->_internal_last_ip_address(), target);
  }

  // optional uint64 gscookieid = 18;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(18, this->_internal_gscookieid(), target);
  }

  // optional uint64 uniqueid = 19;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(19, this->_internal_uniqueid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgCStrike15Welcome)
  return target;
}

size_t CMsgCStrike15Welcome::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgCStrike15Welcome)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional uint32 store_item_hash = 5;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_store_item_hash());
    }

    // optional uint32 timeplayedconsecutively = 6;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_timeplayedconsecutively());
    }

    // optional uint32 time_first_played = 10;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_time_first_played());
    }

    // optional uint32 last_time_played = 12;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_last_time_played());
    }

    // optional uint64 gscookieid = 18;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt64Size(
          this->_internal_gscookieid());
    }

    // optional uint64 uniqueid = 19;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt64Size(
          this->_internal_uniqueid());
    }

    // optional uint32 last_ip_address = 13;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_last_ip_address());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgCStrike15Welcome::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgCStrike15Welcome::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgCStrike15Welcome::GetClassData() const { return &_class_data_; }


void CMsgCStrike15Welcome::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgCStrike15Welcome*>(&to_msg);
  auto& from = static_cast<const CMsgCStrike15Welcome&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgCStrike15Welcome)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.store_item_hash_ = from._impl_.store_item_hash_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.timeplayedconsecutively_ = from._impl_.timeplayedconsecutively_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.time_first_played_ = from._impl_.time_first_played_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.last_time_played_ = from._impl_.last_time_played_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.gscookieid_ = from._impl_.gscookieid_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.uniqueid_ = from._impl_.uniqueid_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.last_ip_address_ = from._impl_.last_ip_address_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgCStrike15Welcome::CopyFrom(const CMsgCStrike15Welcome& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgCStrike15Welcome)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgCStrike15Welcome::IsInitialized() const {
  return true;
}

void CMsgCStrike15Welcome::InternalSwap(CMsgCStrike15Welcome* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgCStrike15Welcome, _impl_.last_ip_address_)
      + sizeof(CMsgCStrike15Welcome::_impl_.last_ip_address_)
      - PROTOBUF_FIELD_OFFSET(CMsgCStrike15Welcome, _impl_.store_item_hash_)>(
          reinterpret_cast<char*>(&_impl_.store_item_hash_),
          reinterpret_cast<char*>(&other->_impl_.store_item_hash_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgCStrike15Welcome::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cstrike15_5fgcmessages_2eproto_getter, &descriptor_table_cstrike15_5fgcmessages_2eproto_once,
      file_level_metadata_cstrike15_5fgcmessages_2eproto[107]);
}

// ===================================================================

class CMsgGCCStrike15_v2_ClientVarValueNotificationInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCCStrike15_v2_ClientVarValueNotificationInfo>()._impl_._has_bits_);
  static void set_has_value_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_value_int(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_server_addr(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_server_port(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

CMsgGCCStrike15_v2_ClientVarValueNotificationInfo::CMsgGCCStrike15_v2_ClientVarValueNotificationInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgGCCStrike15_v2_ClientVarValueNotificationInfo)
}
CMsgGCCStrike15_v2_ClientVarValueNotificationInfo::CMsgGCCStrike15_v2_ClientVarValueNotificationInfo(const CMsgGCCStrike15_v2_ClientVarValueNotificationInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgGCCStrike15_v2_ClientVarValueNotificationInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.choked_blocks_){from._impl_.choked_blocks_}
    , decltype(_impl_.value_name_){}
    , decltype(_impl_.value_int_){}
    , decltype(_impl_.server_addr_){}
    , decltype(_impl_.server_port_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.value_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.value_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_value_name()) {
    _this->_impl_.value_name_.Set(from._internal_value_name(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.value_int_, &from._impl_.value_int_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.server_port_) -
    reinterpret_cast<char*>(&_impl_.value_int_)) + sizeof(_impl_.server_port_));
  // @@protoc_insertion_point(copy_constructor:CMsgGCCStrike15_v2_ClientVarValueNotificationInfo)
}

inline void CMsgGCCStrike15_v2_ClientVarValueNotificationInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.choked_blocks_){arena}
    , decltype(_impl_.value_name_){}
    , decltype(_impl_.value_int_){0}
    , decltype(_impl_.server_addr_){0u}
    , decltype(_impl_.server_port_){0u}
  };
  _impl_.value_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.value_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CMsgGCCStrike15_v2_ClientVarValueNotificationInfo::~CMsgGCCStrike15_v2_ClientVarValueNotificationInfo() {
  // @@protoc_insertion_point(destructor:CMsgGCCStrike15_v2_ClientVarValueNotificationInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgGCCStrike15_v2_ClientVarValueNotificationInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.choked_blocks_.~RepeatedPtrField();
  _impl_.value_name_.Destroy();
}

void CMsgGCCStrike15_v2_ClientVarValueNotificationInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgGCCStrike15_v2_ClientVarValueNotificationInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCCStrike15_v2_ClientVarValueNotificationInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.choked_blocks_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.value_name_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&_impl_.value_int_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.server_port_) -
        reinterpret_cast<char*>(&_impl_.value_int_)) + sizeof(_impl_.server_port_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCCStrike15_v2_ClientVarValueNotificationInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string value_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_value_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CMsgGCCStrike15_v2_ClientVarValueNotificationInfo.value_name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional int32 value_int = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_value_int(&has_bits);
          _impl_.value_int_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 server_addr = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_server_addr(&has_bits);
          _impl_.server_addr_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 server_port = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_server_port(&has_bits);
          _impl_.server_port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string choked_blocks = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_choked_blocks();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            #ifndef NDEBUG
            ::_pbi::VerifyUTF8(str, "CMsgGCCStrike15_v2_ClientVarValueNotificationInfo.choked_blocks");
            #endif  // !NDEBUG
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgGCCStrike15_v2_ClientVarValueNotificationInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCCStrike15_v2_ClientVarValueNotificationInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string value_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_value_name().data(), static_cast<int>(this->_internal_value_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgGCCStrike15_v2_ClientVarValueNotificationInfo.value_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_value_name(), target);
  }

  // optional int32 value_int = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_value_int(), target);
  }

  // optional uint32 server_addr = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_server_addr(), target);
  }

  // optional uint32 server_port = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_server_port(), target);
  }

  // repeated string choked_blocks = 5;
  for (int i = 0, n = this->_internal_choked_blocks_size(); i < n; i++) {
    const auto& s = this->_internal_choked_blocks(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgGCCStrike15_v2_ClientVarValueNotificationInfo.choked_blocks");
    target = stream->WriteString(5, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCCStrike15_v2_ClientVarValueNotificationInfo)
  return target;
}

size_t CMsgGCCStrike15_v2_ClientVarValueNotificationInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCCStrike15_v2_ClientVarValueNotificationInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string choked_blocks = 5;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.choked_blocks_.size());
  for (int i = 0, n = _impl_.choked_blocks_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.choked_blocks_.Get(i));
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string value_name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_value_name());
    }

    // optional int32 value_int = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_value_int());
    }

    // optional uint32 server_addr = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_server_addr());
    }

    // optional uint32 server_port = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_server_port());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgGCCStrike15_v2_ClientVarValueNotificationInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgGCCStrike15_v2_ClientVarValueNotificationInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgGCCStrike15_v2_ClientVarValueNotificationInfo::GetClassData() const { return &_class_data_; }


void CMsgGCCStrike15_v2_ClientVarValueNotificationInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgGCCStrike15_v2_ClientVarValueNotificationInfo*>(&to_msg);
  auto& from = static_cast<const CMsgGCCStrike15_v2_ClientVarValueNotificationInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCCStrike15_v2_ClientVarValueNotificationInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.choked_blocks_.MergeFrom(from._impl_.choked_blocks_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_value_name(from._internal_value_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.value_int_ = from._impl_.value_int_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.server_addr_ = from._impl_.server_addr_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.server_port_ = from._impl_.server_port_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgGCCStrike15_v2_ClientVarValueNotificationInfo::CopyFrom(const CMsgGCCStrike15_v2_ClientVarValueNotificationInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCCStrike15_v2_ClientVarValueNotificationInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCCStrike15_v2_ClientVarValueNotificationInfo::IsInitialized() const {
  return true;
}

void CMsgGCCStrike15_v2_ClientVarValueNotificationInfo::InternalSwap(CMsgGCCStrike15_v2_ClientVarValueNotificationInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.choked_blocks_.InternalSwap(&other->_impl_.choked_blocks_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.value_name_, lhs_arena,
      &other->_impl_.value_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgGCCStrike15_v2_ClientVarValueNotificationInfo, _impl_.server_port_)
      + sizeof(CMsgGCCStrike15_v2_ClientVarValueNotificationInfo::_impl_.server_port_)
      - PROTOBUF_FIELD_OFFSET(CMsgGCCStrike15_v2_ClientVarValueNotificationInfo, _impl_.value_int_)>(
          reinterpret_cast<char*>(&_impl_.value_int_),
          reinterpret_cast<char*>(&other->_impl_.value_int_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCCStrike15_v2_ClientVarValueNotificationInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cstrike15_5fgcmessages_2eproto_getter, &descriptor_table_cstrike15_5fgcmessages_2eproto_once,
      file_level_metadata_cstrike15_5fgcmessages_2eproto[108]);
}

// ===================================================================

class CMsgGCCStrike15_v2_ServerVarValueNotificationInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCCStrike15_v2_ServerVarValueNotificationInfo>()._impl_._has_bits_);
  static void set_has_accountid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgGCCStrike15_v2_ServerVarValueNotificationInfo::CMsgGCCStrike15_v2_ServerVarValueNotificationInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgGCCStrike15_v2_ServerVarValueNotificationInfo)
}
CMsgGCCStrike15_v2_ServerVarValueNotificationInfo::CMsgGCCStrike15_v2_ServerVarValueNotificationInfo(const CMsgGCCStrike15_v2_ServerVarValueNotificationInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgGCCStrike15_v2_ServerVarValueNotificationInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.viewangles_){from._impl_.viewangles_}
    , decltype(_impl_.userdata_){from._impl_.userdata_}
    , decltype(_impl_.accountid_){}
    , decltype(_impl_.type_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.accountid_, &from._impl_.accountid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.type_) -
    reinterpret_cast<char*>(&_impl_.accountid_)) + sizeof(_impl_.type_));
  // @@protoc_insertion_point(copy_constructor:CMsgGCCStrike15_v2_ServerVarValueNotificationInfo)
}

inline void CMsgGCCStrike15_v2_ServerVarValueNotificationInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.viewangles_){arena}
    , decltype(_impl_.userdata_){arena}
    , decltype(_impl_.accountid_){0u}
    , decltype(_impl_.type_){0u}
  };
}

CMsgGCCStrike15_v2_ServerVarValueNotificationInfo::~CMsgGCCStrike15_v2_ServerVarValueNotificationInfo() {
  // @@protoc_insertion_point(destructor:CMsgGCCStrike15_v2_ServerVarValueNotificationInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgGCCStrike15_v2_ServerVarValueNotificationInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.viewangles_.~RepeatedField();
  _impl_.userdata_.~RepeatedField();
}

void CMsgGCCStrike15_v2_ServerVarValueNotificationInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgGCCStrike15_v2_ServerVarValueNotificationInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCCStrike15_v2_ServerVarValueNotificationInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.viewangles_.Clear();
  _impl_.userdata_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.accountid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.type_) -
        reinterpret_cast<char*>(&_impl_.accountid_)) + sizeof(_impl_.type_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCCStrike15_v2_ServerVarValueNotificationInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 accountid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_accountid(&has_bits);
          _impl_.accountid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 viewangles = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_viewangles(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<16>(ptr));
        } else if (static_cast<uint8_t>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_viewangles(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_type(&has_bits);
          _impl_.type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 userdata = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_userdata(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<32>(ptr));
        } else if (static_cast<uint8_t>(tag) == 34) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_userdata(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgGCCStrike15_v2_ServerVarValueNotificationInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCCStrike15_v2_ServerVarValueNotificationInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 accountid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_accountid(), target);
  }

  // repeated uint32 viewangles = 2;
  for (int i = 0, n = this->_internal_viewangles_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_viewangles(i), target);
  }

  // optional uint32 type = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_type(), target);
  }

  // repeated uint32 userdata = 4;
  for (int i = 0, n = this->_internal_userdata_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_userdata(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCCStrike15_v2_ServerVarValueNotificationInfo)
  return target;
}

size_t CMsgGCCStrike15_v2_ServerVarValueNotificationInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCCStrike15_v2_ServerVarValueNotificationInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 viewangles = 2;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.viewangles_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_viewangles_size());
    total_size += data_size;
  }

  // repeated uint32 userdata = 4;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.userdata_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_userdata_size());
    total_size += data_size;
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 accountid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_accountid());
    }

    // optional uint32 type = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_type());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgGCCStrike15_v2_ServerVarValueNotificationInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgGCCStrike15_v2_ServerVarValueNotificationInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgGCCStrike15_v2_ServerVarValueNotificationInfo::GetClassData() const { return &_class_data_; }


void CMsgGCCStrike15_v2_ServerVarValueNotificationInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgGCCStrike15_v2_ServerVarValueNotificationInfo*>(&to_msg);
  auto& from = static_cast<const CMsgGCCStrike15_v2_ServerVarValueNotificationInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCCStrike15_v2_ServerVarValueNotificationInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.viewangles_.MergeFrom(from._impl_.viewangles_);
  _this->_impl_.userdata_.MergeFrom(from._impl_.userdata_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.accountid_ = from._impl_.accountid_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.type_ = from._impl_.type_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgGCCStrike15_v2_ServerVarValueNotificationInfo::CopyFrom(const CMsgGCCStrike15_v2_ServerVarValueNotificationInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCCStrike15_v2_ServerVarValueNotificationInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCCStrike15_v2_ServerVarValueNotificationInfo::IsInitialized() const {
  return true;
}

void CMsgGCCStrike15_v2_ServerVarValueNotificationInfo::InternalSwap(CMsgGCCStrike15_v2_ServerVarValueNotificationInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.viewangles_.InternalSwap(&other->_impl_.viewangles_);
  _impl_.userdata_.InternalSwap(&other->_impl_.userdata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgGCCStrike15_v2_ServerVarValueNotificationInfo, _impl_.type_)
      + sizeof(CMsgGCCStrike15_v2_ServerVarValueNotificationInfo::_impl_.type_)
      - PROTOBUF_FIELD_OFFSET(CMsgGCCStrike15_v2_ServerVarValueNotificationInfo, _impl_.accountid_)>(
          reinterpret_cast<char*>(&_impl_.accountid_),
          reinterpret_cast<char*>(&other->_impl_.accountid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCCStrike15_v2_ServerVarValueNotificationInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cstrike15_5fgcmessages_2eproto_getter, &descriptor_table_cstrike15_5fgcmessages_2eproto_once,
      file_level_metadata_cstrike15_5fgcmessages_2eproto[109]);
}

// ===================================================================

class CMsgGCCStrike15_v2_GiftsLeaderboardRequest::_Internal {
 public:
};

CMsgGCCStrike15_v2_GiftsLeaderboardRequest::CMsgGCCStrike15_v2_GiftsLeaderboardRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:CMsgGCCStrike15_v2_GiftsLeaderboardRequest)
}
CMsgGCCStrike15_v2_GiftsLeaderboardRequest::CMsgGCCStrike15_v2_GiftsLeaderboardRequest(const CMsgGCCStrike15_v2_GiftsLeaderboardRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  CMsgGCCStrike15_v2_GiftsLeaderboardRequest* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgGCCStrike15_v2_GiftsLeaderboardRequest)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgGCCStrike15_v2_GiftsLeaderboardRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgGCCStrike15_v2_GiftsLeaderboardRequest::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCCStrike15_v2_GiftsLeaderboardRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cstrike15_5fgcmessages_2eproto_getter, &descriptor_table_cstrike15_5fgcmessages_2eproto_once,
      file_level_metadata_cstrike15_5fgcmessages_2eproto[110]);
}

// ===================================================================

class CMsgGCCStrike15_v2_GiftsLeaderboardResponse_GiftLeaderboardEntry::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCCStrike15_v2_GiftsLeaderboardResponse_GiftLeaderboardEntry>()._impl_._has_bits_);
  static void set_has_accountid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_gifts(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgGCCStrike15_v2_GiftsLeaderboardResponse_GiftLeaderboardEntry::CMsgGCCStrike15_v2_GiftsLeaderboardResponse_GiftLeaderboardEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgGCCStrike15_v2_GiftsLeaderboardResponse.GiftLeaderboardEntry)
}
CMsgGCCStrike15_v2_GiftsLeaderboardResponse_GiftLeaderboardEntry::CMsgGCCStrike15_v2_GiftsLeaderboardResponse_GiftLeaderboardEntry(const CMsgGCCStrike15_v2_GiftsLeaderboardResponse_GiftLeaderboardEntry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgGCCStrike15_v2_GiftsLeaderboardResponse_GiftLeaderboardEntry* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.accountid_){}
    , decltype(_impl_.gifts_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.accountid_, &from._impl_.accountid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.gifts_) -
    reinterpret_cast<char*>(&_impl_.accountid_)) + sizeof(_impl_.gifts_));
  // @@protoc_insertion_point(copy_constructor:CMsgGCCStrike15_v2_GiftsLeaderboardResponse.GiftLeaderboardEntry)
}

inline void CMsgGCCStrike15_v2_GiftsLeaderboardResponse_GiftLeaderboardEntry::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.accountid_){0u}
    , decltype(_impl_.gifts_){0u}
  };
}

CMsgGCCStrike15_v2_GiftsLeaderboardResponse_GiftLeaderboardEntry::~CMsgGCCStrike15_v2_GiftsLeaderboardResponse_GiftLeaderboardEntry() {
  // @@protoc_insertion_point(destructor:CMsgGCCStrike15_v2_GiftsLeaderboardResponse.GiftLeaderboardEntry)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgGCCStrike15_v2_GiftsLeaderboardResponse_GiftLeaderboardEntry::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgGCCStrike15_v2_GiftsLeaderboardResponse_GiftLeaderboardEntry::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgGCCStrike15_v2_GiftsLeaderboardResponse_GiftLeaderboardEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCCStrike15_v2_GiftsLeaderboardResponse.GiftLeaderboardEntry)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.accountid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.gifts_) -
        reinterpret_cast<char*>(&_impl_.accountid_)) + sizeof(_impl_.gifts_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCCStrike15_v2_GiftsLeaderboardResponse_GiftLeaderboardEntry::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 accountid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_accountid(&has_bits);
          _impl_.accountid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 gifts = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_gifts(&has_bits);
          _impl_.gifts_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgGCCStrike15_v2_GiftsLeaderboardResponse_GiftLeaderboardEntry::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCCStrike15_v2_GiftsLeaderboardResponse.GiftLeaderboardEntry)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 accountid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_accountid(), target);
  }

  // optional uint32 gifts = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_gifts(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCCStrike15_v2_GiftsLeaderboardResponse.GiftLeaderboardEntry)
  return target;
}

size_t CMsgGCCStrike15_v2_GiftsLeaderboardResponse_GiftLeaderboardEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCCStrike15_v2_GiftsLeaderboardResponse.GiftLeaderboardEntry)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 accountid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_accountid());
    }

    // optional uint32 gifts = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_gifts());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgGCCStrike15_v2_GiftsLeaderboardResponse_GiftLeaderboardEntry::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgGCCStrike15_v2_GiftsLeaderboardResponse_GiftLeaderboardEntry::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgGCCStrike15_v2_GiftsLeaderboardResponse_GiftLeaderboardEntry::GetClassData() const { return &_class_data_; }


void CMsgGCCStrike15_v2_GiftsLeaderboardResponse_GiftLeaderboardEntry::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgGCCStrike15_v2_GiftsLeaderboardResponse_GiftLeaderboardEntry*>(&to_msg);
  auto& from = static_cast<const CMsgGCCStrike15_v2_GiftsLeaderboardResponse_GiftLeaderboardEntry&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCCStrike15_v2_GiftsLeaderboardResponse.GiftLeaderboardEntry)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.accountid_ = from._impl_.accountid_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.gifts_ = from._impl_.gifts_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgGCCStrike15_v2_GiftsLeaderboardResponse_GiftLeaderboardEntry::CopyFrom(const CMsgGCCStrike15_v2_GiftsLeaderboardResponse_GiftLeaderboardEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCCStrike15_v2_GiftsLeaderboardResponse.GiftLeaderboardEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCCStrike15_v2_GiftsLeaderboardResponse_GiftLeaderboardEntry::IsInitialized() const {
  return true;
}

void CMsgGCCStrike15_v2_GiftsLeaderboardResponse_GiftLeaderboardEntry::InternalSwap(CMsgGCCStrike15_v2_GiftsLeaderboardResponse_GiftLeaderboardEntry* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgGCCStrike15_v2_GiftsLeaderboardResponse_GiftLeaderboardEntry, _impl_.gifts_)
      + sizeof(CMsgGCCStrike15_v2_GiftsLeaderboardResponse_GiftLeaderboardEntry::_impl_.gifts_)
      - PROTOBUF_FIELD_OFFSET(CMsgGCCStrike15_v2_GiftsLeaderboardResponse_GiftLeaderboardEntry, _impl_.accountid_)>(
          reinterpret_cast<char*>(&_impl_.accountid_),
          reinterpret_cast<char*>(&other->_impl_.accountid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCCStrike15_v2_GiftsLeaderboardResponse_GiftLeaderboardEntry::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cstrike15_5fgcmessages_2eproto_getter, &descriptor_table_cstrike15_5fgcmessages_2eproto_once,
      file_level_metadata_cstrike15_5fgcmessages_2eproto[111]);
}

// ===================================================================

class CMsgGCCStrike15_v2_GiftsLeaderboardResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCCStrike15_v2_GiftsLeaderboardResponse>()._impl_._has_bits_);
  static void set_has_servertime(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_time_period_seconds(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_total_gifts_given(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_total_givers(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

CMsgGCCStrike15_v2_GiftsLeaderboardResponse::CMsgGCCStrike15_v2_GiftsLeaderboardResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgGCCStrike15_v2_GiftsLeaderboardResponse)
}
CMsgGCCStrike15_v2_GiftsLeaderboardResponse::CMsgGCCStrike15_v2_GiftsLeaderboardResponse(const CMsgGCCStrike15_v2_GiftsLeaderboardResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgGCCStrike15_v2_GiftsLeaderboardResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.entries_){from._impl_.entries_}
    , decltype(_impl_.servertime_){}
    , decltype(_impl_.time_period_seconds_){}
    , decltype(_impl_.total_gifts_given_){}
    , decltype(_impl_.total_givers_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.servertime_, &from._impl_.servertime_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.total_givers_) -
    reinterpret_cast<char*>(&_impl_.servertime_)) + sizeof(_impl_.total_givers_));
  // @@protoc_insertion_point(copy_constructor:CMsgGCCStrike15_v2_GiftsLeaderboardResponse)
}

inline void CMsgGCCStrike15_v2_GiftsLeaderboardResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.entries_){arena}
    , decltype(_impl_.servertime_){0u}
    , decltype(_impl_.time_period_seconds_){0u}
    , decltype(_impl_.total_gifts_given_){0u}
    , decltype(_impl_.total_givers_){0u}
  };
}

CMsgGCCStrike15_v2_GiftsLeaderboardResponse::~CMsgGCCStrike15_v2_GiftsLeaderboardResponse() {
  // @@protoc_insertion_point(destructor:CMsgGCCStrike15_v2_GiftsLeaderboardResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgGCCStrike15_v2_GiftsLeaderboardResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.entries_.~RepeatedPtrField();
}

void CMsgGCCStrike15_v2_GiftsLeaderboardResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgGCCStrike15_v2_GiftsLeaderboardResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCCStrike15_v2_GiftsLeaderboardResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.entries_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&_impl_.servertime_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.total_givers_) -
        reinterpret_cast<char*>(&_impl_.servertime_)) + sizeof(_impl_.total_givers_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCCStrike15_v2_GiftsLeaderboardResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 servertime = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_servertime(&has_bits);
          _impl_.servertime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 time_period_seconds = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_time_period_seconds(&has_bits);
          _impl_.time_period_seconds_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 total_gifts_given = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_total_gifts_given(&has_bits);
          _impl_.total_gifts_given_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 total_givers = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_total_givers(&has_bits);
          _impl_.total_givers_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .CMsgGCCStrike15_v2_GiftsLeaderboardResponse.GiftLeaderboardEntry entries = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_entries(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgGCCStrike15_v2_GiftsLeaderboardResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCCStrike15_v2_GiftsLeaderboardResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 servertime = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_servertime(), target);
  }

  // optional uint32 time_period_seconds = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_time_period_seconds(), target);
  }

  // optional uint32 total_gifts_given = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_total_gifts_given(), target);
  }

  // optional uint32 total_givers = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_total_givers(), target);
  }

  // repeated .CMsgGCCStrike15_v2_GiftsLeaderboardResponse.GiftLeaderboardEntry entries = 5;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_entries_size()); i < n; i++) {
    const auto& repfield = this->_internal_entries(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCCStrike15_v2_GiftsLeaderboardResponse)
  return target;
}

size_t CMsgGCCStrike15_v2_GiftsLeaderboardResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCCStrike15_v2_GiftsLeaderboardResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgGCCStrike15_v2_GiftsLeaderboardResponse.GiftLeaderboardEntry entries = 5;
  total_size += 1UL * this->_internal_entries_size();
  for (const auto& msg : this->_impl_.entries_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional uint32 servertime = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_servertime());
    }

    // optional uint32 time_period_seconds = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_time_period_seconds());
    }

    // optional uint32 total_gifts_given = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_total_gifts_given());
    }

    // optional uint32 total_givers = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_total_givers());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgGCCStrike15_v2_GiftsLeaderboardResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgGCCStrike15_v2_GiftsLeaderboardResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgGCCStrike15_v2_GiftsLeaderboardResponse::GetClassData() const { return &_class_data_; }


void CMsgGCCStrike15_v2_GiftsLeaderboardResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgGCCStrike15_v2_GiftsLeaderboardResponse*>(&to_msg);
  auto& from = static_cast<const CMsgGCCStrike15_v2_GiftsLeaderboardResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCCStrike15_v2_GiftsLeaderboardResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.entries_.MergeFrom(from._impl_.entries_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.servertime_ = from._impl_.servertime_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.time_period_seconds_ = from._impl_.time_period_seconds_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.total_gifts_given_ = from._impl_.total_gifts_given_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.total_givers_ = from._impl_.total_givers_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgGCCStrike15_v2_GiftsLeaderboardResponse::CopyFrom(const CMsgGCCStrike15_v2_GiftsLeaderboardResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCCStrike15_v2_GiftsLeaderboardResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCCStrike15_v2_GiftsLeaderboardResponse::IsInitialized() const {
  return true;
}

void CMsgGCCStrike15_v2_GiftsLeaderboardResponse::InternalSwap(CMsgGCCStrike15_v2_GiftsLeaderboardResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.entries_.InternalSwap(&other->_impl_.entries_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgGCCStrike15_v2_GiftsLeaderboardResponse, _impl_.total_givers_)
      + sizeof(CMsgGCCStrike15_v2_GiftsLeaderboardResponse::_impl_.total_givers_)
      - PROTOBUF_FIELD_OFFSET(CMsgGCCStrike15_v2_GiftsLeaderboardResponse, _impl_.servertime_)>(
          reinterpret_cast<char*>(&_impl_.servertime_),
          reinterpret_cast<char*>(&other->_impl_.servertime_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCCStrike15_v2_GiftsLeaderboardResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cstrike15_5fgcmessages_2eproto_getter, &descriptor_table_cstrike15_5fgcmessages_2eproto_once,
      file_level_metadata_cstrike15_5fgcmessages_2eproto[112]);
}

// ===================================================================

class CMsgGCCStrike15_v2_ClientSubmitSurveyVote::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCCStrike15_v2_ClientSubmitSurveyVote>()._impl_._has_bits_);
  static void set_has_survey_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_vote(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgGCCStrike15_v2_ClientSubmitSurveyVote::CMsgGCCStrike15_v2_ClientSubmitSurveyVote(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgGCCStrike15_v2_ClientSubmitSurveyVote)
}
CMsgGCCStrike15_v2_ClientSubmitSurveyVote::CMsgGCCStrike15_v2_ClientSubmitSurveyVote(const CMsgGCCStrike15_v2_ClientSubmitSurveyVote& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgGCCStrike15_v2_ClientSubmitSurveyVote* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.survey_id_){}
    , decltype(_impl_.vote_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.survey_id_, &from._impl_.survey_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.vote_) -
    reinterpret_cast<char*>(&_impl_.survey_id_)) + sizeof(_impl_.vote_));
  // @@protoc_insertion_point(copy_constructor:CMsgGCCStrike15_v2_ClientSubmitSurveyVote)
}

inline void CMsgGCCStrike15_v2_ClientSubmitSurveyVote::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.survey_id_){0u}
    , decltype(_impl_.vote_){0u}
  };
}

CMsgGCCStrike15_v2_ClientSubmitSurveyVote::~CMsgGCCStrike15_v2_ClientSubmitSurveyVote() {
  // @@protoc_insertion_point(destructor:CMsgGCCStrike15_v2_ClientSubmitSurveyVote)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgGCCStrike15_v2_ClientSubmitSurveyVote::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgGCCStrike15_v2_ClientSubmitSurveyVote::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgGCCStrike15_v2_ClientSubmitSurveyVote::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCCStrike15_v2_ClientSubmitSurveyVote)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.survey_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.vote_) -
        reinterpret_cast<char*>(&_impl_.survey_id_)) + sizeof(_impl_.vote_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCCStrike15_v2_ClientSubmitSurveyVote::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 survey_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_survey_id(&has_bits);
          _impl_.survey_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 vote = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_vote(&has_bits);
          _impl_.vote_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgGCCStrike15_v2_ClientSubmitSurveyVote::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCCStrike15_v2_ClientSubmitSurveyVote)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 survey_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_survey_id(), target);
  }

  // optional uint32 vote = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_vote(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCCStrike15_v2_ClientSubmitSurveyVote)
  return target;
}

size_t CMsgGCCStrike15_v2_ClientSubmitSurveyVote::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCCStrike15_v2_ClientSubmitSurveyVote)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 survey_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_survey_id());
    }

    // optional uint32 vote = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_vote());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgGCCStrike15_v2_ClientSubmitSurveyVote::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgGCCStrike15_v2_ClientSubmitSurveyVote::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgGCCStrike15_v2_ClientSubmitSurveyVote::GetClassData() const { return &_class_data_; }


void CMsgGCCStrike15_v2_ClientSubmitSurveyVote::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgGCCStrike15_v2_ClientSubmitSurveyVote*>(&to_msg);
  auto& from = static_cast<const CMsgGCCStrike15_v2_ClientSubmitSurveyVote&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCCStrike15_v2_ClientSubmitSurveyVote)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.survey_id_ = from._impl_.survey_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.vote_ = from._impl_.vote_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgGCCStrike15_v2_ClientSubmitSurveyVote::CopyFrom(const CMsgGCCStrike15_v2_ClientSubmitSurveyVote& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCCStrike15_v2_ClientSubmitSurveyVote)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCCStrike15_v2_ClientSubmitSurveyVote::IsInitialized() const {
  return true;
}

void CMsgGCCStrike15_v2_ClientSubmitSurveyVote::InternalSwap(CMsgGCCStrike15_v2_ClientSubmitSurveyVote* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgGCCStrike15_v2_ClientSubmitSurveyVote, _impl_.vote_)
      + sizeof(CMsgGCCStrike15_v2_ClientSubmitSurveyVote::_impl_.vote_)
      - PROTOBUF_FIELD_OFFSET(CMsgGCCStrike15_v2_ClientSubmitSurveyVote, _impl_.survey_id_)>(
          reinterpret_cast<char*>(&_impl_.survey_id_),
          reinterpret_cast<char*>(&other->_impl_.survey_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCCStrike15_v2_ClientSubmitSurveyVote::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cstrike15_5fgcmessages_2eproto_getter, &descriptor_table_cstrike15_5fgcmessages_2eproto_once,
      file_level_metadata_cstrike15_5fgcmessages_2eproto[113]);
}

// ===================================================================

class CMsgGCCStrike15_v2_Server2GCClientValidate::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCCStrike15_v2_Server2GCClientValidate>()._impl_._has_bits_);
  static void set_has_accountid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgGCCStrike15_v2_Server2GCClientValidate::CMsgGCCStrike15_v2_Server2GCClientValidate(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgGCCStrike15_v2_Server2GCClientValidate)
}
CMsgGCCStrike15_v2_Server2GCClientValidate::CMsgGCCStrike15_v2_Server2GCClientValidate(const CMsgGCCStrike15_v2_Server2GCClientValidate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgGCCStrike15_v2_Server2GCClientValidate* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.accountid_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.accountid_ = from._impl_.accountid_;
  // @@protoc_insertion_point(copy_constructor:CMsgGCCStrike15_v2_Server2GCClientValidate)
}

inline void CMsgGCCStrike15_v2_Server2GCClientValidate::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.accountid_){0u}
  };
}

CMsgGCCStrike15_v2_Server2GCClientValidate::~CMsgGCCStrike15_v2_Server2GCClientValidate() {
  // @@protoc_insertion_point(destructor:CMsgGCCStrike15_v2_Server2GCClientValidate)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgGCCStrike15_v2_Server2GCClientValidate::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgGCCStrike15_v2_Server2GCClientValidate::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgGCCStrike15_v2_Server2GCClientValidate::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCCStrike15_v2_Server2GCClientValidate)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.accountid_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCCStrike15_v2_Server2GCClientValidate::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 accountid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_accountid(&has_bits);
          _impl_.accountid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgGCCStrike15_v2_Server2GCClientValidate::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCCStrike15_v2_Server2GCClientValidate)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 accountid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_accountid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCCStrike15_v2_Server2GCClientValidate)
  return target;
}

size_t CMsgGCCStrike15_v2_Server2GCClientValidate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCCStrike15_v2_Server2GCClientValidate)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 accountid = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_accountid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgGCCStrike15_v2_Server2GCClientValidate::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgGCCStrike15_v2_Server2GCClientValidate::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgGCCStrike15_v2_Server2GCClientValidate::GetClassData() const { return &_class_data_; }


void CMsgGCCStrike15_v2_Server2GCClientValidate::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgGCCStrike15_v2_Server2GCClientValidate*>(&to_msg);
  auto& from = static_cast<const CMsgGCCStrike15_v2_Server2GCClientValidate&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCCStrike15_v2_Server2GCClientValidate)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_accountid()) {
    _this->_internal_set_accountid(from._internal_accountid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgGCCStrike15_v2_Server2GCClientValidate::CopyFrom(const CMsgGCCStrike15_v2_Server2GCClientValidate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCCStrike15_v2_Server2GCClientValidate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCCStrike15_v2_Server2GCClientValidate::IsInitialized() const {
  return true;
}

void CMsgGCCStrike15_v2_Server2GCClientValidate::InternalSwap(CMsgGCCStrike15_v2_Server2GCClientValidate* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.accountid_, other->_impl_.accountid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCCStrike15_v2_Server2GCClientValidate::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cstrike15_5fgcmessages_2eproto_getter, &descriptor_table_cstrike15_5fgcmessages_2eproto_once,
      file_level_metadata_cstrike15_5fgcmessages_2eproto[114]);
}

// ===================================================================

class CMsgGCCStrike15_v2_GC2ClientTournamentInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCCStrike15_v2_GC2ClientTournamentInfo>()._impl_._has_bits_);
  static void set_has_eventid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_stageid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_game_type(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CMsgGCCStrike15_v2_GC2ClientTournamentInfo::CMsgGCCStrike15_v2_GC2ClientTournamentInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgGCCStrike15_v2_GC2ClientTournamentInfo)
}
CMsgGCCStrike15_v2_GC2ClientTournamentInfo::CMsgGCCStrike15_v2_GC2ClientTournamentInfo(const CMsgGCCStrike15_v2_GC2ClientTournamentInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgGCCStrike15_v2_GC2ClientTournamentInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.teamids_){from._impl_.teamids_}
    , decltype(_impl_.eventid_){}
    , decltype(_impl_.stageid_){}
    , decltype(_impl_.game_type_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.eventid_, &from._impl_.eventid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.game_type_) -
    reinterpret_cast<char*>(&_impl_.eventid_)) + sizeof(_impl_.game_type_));
  // @@protoc_insertion_point(copy_constructor:CMsgGCCStrike15_v2_GC2ClientTournamentInfo)
}

inline void CMsgGCCStrike15_v2_GC2ClientTournamentInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.teamids_){arena}
    , decltype(_impl_.eventid_){0u}
    , decltype(_impl_.stageid_){0u}
    , decltype(_impl_.game_type_){0u}
  };
}

CMsgGCCStrike15_v2_GC2ClientTournamentInfo::~CMsgGCCStrike15_v2_GC2ClientTournamentInfo() {
  // @@protoc_insertion_point(destructor:CMsgGCCStrike15_v2_GC2ClientTournamentInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgGCCStrike15_v2_GC2ClientTournamentInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.teamids_.~RepeatedField();
}

void CMsgGCCStrike15_v2_GC2ClientTournamentInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgGCCStrike15_v2_GC2ClientTournamentInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCCStrike15_v2_GC2ClientTournamentInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.teamids_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.eventid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.game_type_) -
        reinterpret_cast<char*>(&_impl_.eventid_)) + sizeof(_impl_.game_type_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCCStrike15_v2_GC2ClientTournamentInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 eventid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_eventid(&has_bits);
          _impl_.eventid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 stageid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_stageid(&has_bits);
          _impl_.stageid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 game_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_game_type(&has_bits);
          _impl_.game_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 teamids = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_teamids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<32>(ptr));
        } else if (static_cast<uint8_t>(tag) == 34) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_teamids(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgGCCStrike15_v2_GC2ClientTournamentInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCCStrike15_v2_GC2ClientTournamentInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 eventid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_eventid(), target);
  }

  // optional uint32 stageid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_stageid(), target);
  }

  // optional uint32 game_type = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_game_type(), target);
  }

  // repeated uint32 teamids = 4;
  for (int i = 0, n = this->_internal_teamids_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_teamids(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCCStrike15_v2_GC2ClientTournamentInfo)
  return target;
}

size_t CMsgGCCStrike15_v2_GC2ClientTournamentInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCCStrike15_v2_GC2ClientTournamentInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 teamids = 4;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.teamids_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_teamids_size());
    total_size += data_size;
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint32 eventid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_eventid());
    }

    // optional uint32 stageid = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_stageid());
    }

    // optional uint32 game_type = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_game_type());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgGCCStrike15_v2_GC2ClientTournamentInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgGCCStrike15_v2_GC2ClientTournamentInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgGCCStrike15_v2_GC2ClientTournamentInfo::GetClassData() const { return &_class_data_; }


void CMsgGCCStrike15_v2_GC2ClientTournamentInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgGCCStrike15_v2_GC2ClientTournamentInfo*>(&to_msg);
  auto& from = static_cast<const CMsgGCCStrike15_v2_GC2ClientTournamentInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCCStrike15_v2_GC2ClientTournamentInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.teamids_.MergeFrom(from._impl_.teamids_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.eventid_ = from._impl_.eventid_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.stageid_ = from._impl_.stageid_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.game_type_ = from._impl_.game_type_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgGCCStrike15_v2_GC2ClientTournamentInfo::CopyFrom(const CMsgGCCStrike15_v2_GC2ClientTournamentInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCCStrike15_v2_GC2ClientTournamentInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCCStrike15_v2_GC2ClientTournamentInfo::IsInitialized() const {
  return true;
}

void CMsgGCCStrike15_v2_GC2ClientTournamentInfo::InternalSwap(CMsgGCCStrike15_v2_GC2ClientTournamentInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.teamids_.InternalSwap(&other->_impl_.teamids_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgGCCStrike15_v2_GC2ClientTournamentInfo, _impl_.game_type_)
      + sizeof(CMsgGCCStrike15_v2_GC2ClientTournamentInfo::_impl_.game_type_)
      - PROTOBUF_FIELD_OFFSET(CMsgGCCStrike15_v2_GC2ClientTournamentInfo, _impl_.eventid_)>(
          reinterpret_cast<char*>(&_impl_.eventid_),
          reinterpret_cast<char*>(&other->_impl_.eventid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCCStrike15_v2_GC2ClientTournamentInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cstrike15_5fgcmessages_2eproto_getter, &descriptor_table_cstrike15_5fgcmessages_2eproto_once,
      file_level_metadata_cstrike15_5fgcmessages_2eproto[115]);
}

// ===================================================================

class CSOEconCoupon::_Internal {
 public:
  using HasBits = decltype(std::declval<CSOEconCoupon>()._impl_._has_bits_);
  static void set_has_entryid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_defidx(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_expiration_date(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CSOEconCoupon::CSOEconCoupon(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CSOEconCoupon)
}
CSOEconCoupon::CSOEconCoupon(const CSOEconCoupon& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CSOEconCoupon* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.entryid_){}
    , decltype(_impl_.defidx_){}
    , decltype(_impl_.expiration_date_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.entryid_, &from._impl_.entryid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.expiration_date_) -
    reinterpret_cast<char*>(&_impl_.entryid_)) + sizeof(_impl_.expiration_date_));
  // @@protoc_insertion_point(copy_constructor:CSOEconCoupon)
}

inline void CSOEconCoupon::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.entryid_){0u}
    , decltype(_impl_.defidx_){0u}
    , decltype(_impl_.expiration_date_){0u}
  };
}

CSOEconCoupon::~CSOEconCoupon() {
  // @@protoc_insertion_point(destructor:CSOEconCoupon)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CSOEconCoupon::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CSOEconCoupon::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CSOEconCoupon::Clear() {
// @@protoc_insertion_point(message_clear_start:CSOEconCoupon)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.entryid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.expiration_date_) -
        reinterpret_cast<char*>(&_impl_.entryid_)) + sizeof(_impl_.expiration_date_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSOEconCoupon::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 entryid = 1 [(.key_field) = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_entryid(&has_bits);
          _impl_.entryid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 defidx = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_defidx(&has_bits);
          _impl_.defidx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional fixed32 expiration_date = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _Internal::set_has_expiration_date(&has_bits);
          _impl_.expiration_date_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint32_t>(ptr);
          ptr += sizeof(uint32_t);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CSOEconCoupon::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSOEconCoupon)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 entryid = 1 [(.key_field) = true];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_entryid(), target);
  }

  // optional uint32 defidx = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_defidx(), target);
  }

  // optional fixed32 expiration_date = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed32ToArray(3, this->_internal_expiration_date(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSOEconCoupon)
  return target;
}

size_t CSOEconCoupon::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSOEconCoupon)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint32 entryid = 1 [(.key_field) = true];
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_entryid());
    }

    // optional uint32 defidx = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_defidx());
    }

    // optional fixed32 expiration_date = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CSOEconCoupon::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CSOEconCoupon::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CSOEconCoupon::GetClassData() const { return &_class_data_; }


void CSOEconCoupon::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CSOEconCoupon*>(&to_msg);
  auto& from = static_cast<const CSOEconCoupon&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CSOEconCoupon)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.entryid_ = from._impl_.entryid_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.defidx_ = from._impl_.defidx_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.expiration_date_ = from._impl_.expiration_date_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CSOEconCoupon::CopyFrom(const CSOEconCoupon& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSOEconCoupon)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSOEconCoupon::IsInitialized() const {
  return true;
}

void CSOEconCoupon::InternalSwap(CSOEconCoupon* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CSOEconCoupon, _impl_.expiration_date_)
      + sizeof(CSOEconCoupon::_impl_.expiration_date_)
      - PROTOBUF_FIELD_OFFSET(CSOEconCoupon, _impl_.entryid_)>(
          reinterpret_cast<char*>(&_impl_.entryid_),
          reinterpret_cast<char*>(&other->_impl_.entryid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CSOEconCoupon::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cstrike15_5fgcmessages_2eproto_getter, &descriptor_table_cstrike15_5fgcmessages_2eproto_once,
      file_level_metadata_cstrike15_5fgcmessages_2eproto[116]);
}

// ===================================================================

class CSOAccountItemPersonalStore::_Internal {
 public:
  using HasBits = decltype(std::declval<CSOAccountItemPersonalStore>()._impl_._has_bits_);
  static void set_has_generation_time(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_redeemable_balance(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CSOAccountItemPersonalStore::CSOAccountItemPersonalStore(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CSOAccountItemPersonalStore)
}
CSOAccountItemPersonalStore::CSOAccountItemPersonalStore(const CSOAccountItemPersonalStore& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CSOAccountItemPersonalStore* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.items_){from._impl_.items_}
    , decltype(_impl_.generation_time_){}
    , decltype(_impl_.redeemable_balance_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.generation_time_, &from._impl_.generation_time_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.redeemable_balance_) -
    reinterpret_cast<char*>(&_impl_.generation_time_)) + sizeof(_impl_.redeemable_balance_));
  // @@protoc_insertion_point(copy_constructor:CSOAccountItemPersonalStore)
}

inline void CSOAccountItemPersonalStore::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.items_){arena}
    , decltype(_impl_.generation_time_){0u}
    , decltype(_impl_.redeemable_balance_){0u}
  };
}

CSOAccountItemPersonalStore::~CSOAccountItemPersonalStore() {
  // @@protoc_insertion_point(destructor:CSOAccountItemPersonalStore)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CSOAccountItemPersonalStore::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.items_.~RepeatedField();
}

void CSOAccountItemPersonalStore::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CSOAccountItemPersonalStore::Clear() {
// @@protoc_insertion_point(message_clear_start:CSOAccountItemPersonalStore)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.items_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.generation_time_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.redeemable_balance_) -
        reinterpret_cast<char*>(&_impl_.generation_time_)) + sizeof(_impl_.redeemable_balance_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSOAccountItemPersonalStore::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 generation_time = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_generation_time(&has_bits);
          _impl_.generation_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 redeemable_balance = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_redeemable_balance(&has_bits);
          _impl_.redeemable_balance_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint64 items = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_items(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<24>(ptr));
        } else if (static_cast<uint8_t>(tag) == 26) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_items(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CSOAccountItemPersonalStore::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSOAccountItemPersonalStore)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 generation_time = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_generation_time(), target);
  }

  // optional uint32 redeemable_balance = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_redeemable_balance(), target);
  }

  // repeated uint64 items = 3;
  for (int i = 0, n = this->_internal_items_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal_items(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSOAccountItemPersonalStore)
  return target;
}

size_t CSOAccountItemPersonalStore::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSOAccountItemPersonalStore)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint64 items = 3;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt64Size(this->_impl_.items_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_items_size());
    total_size += data_size;
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 generation_time = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_generation_time());
    }

    // optional uint32 redeemable_balance = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_redeemable_balance());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CSOAccountItemPersonalStore::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CSOAccountItemPersonalStore::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CSOAccountItemPersonalStore::GetClassData() const { return &_class_data_; }


void CSOAccountItemPersonalStore::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CSOAccountItemPersonalStore*>(&to_msg);
  auto& from = static_cast<const CSOAccountItemPersonalStore&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CSOAccountItemPersonalStore)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.items_.MergeFrom(from._impl_.items_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.generation_time_ = from._impl_.generation_time_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.redeemable_balance_ = from._impl_.redeemable_balance_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CSOAccountItemPersonalStore::CopyFrom(const CSOAccountItemPersonalStore& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSOAccountItemPersonalStore)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSOAccountItemPersonalStore::IsInitialized() const {
  return true;
}

void CSOAccountItemPersonalStore::InternalSwap(CSOAccountItemPersonalStore* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.items_.InternalSwap(&other->_impl_.items_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CSOAccountItemPersonalStore, _impl_.redeemable_balance_)
      + sizeof(CSOAccountItemPersonalStore::_impl_.redeemable_balance_)
      - PROTOBUF_FIELD_OFFSET(CSOAccountItemPersonalStore, _impl_.generation_time_)>(
          reinterpret_cast<char*>(&_impl_.generation_time_),
          reinterpret_cast<char*>(&other->_impl_.generation_time_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CSOAccountItemPersonalStore::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cstrike15_5fgcmessages_2eproto_getter, &descriptor_table_cstrike15_5fgcmessages_2eproto_once,
      file_level_metadata_cstrike15_5fgcmessages_2eproto[117]);
}

// ===================================================================

class CSOAccountXpShop::_Internal {
 public:
  using HasBits = decltype(std::declval<CSOAccountXpShop>()._impl_._has_bits_);
  static void set_has_generation_time(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_redeemable_balance(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CSOAccountXpShop::CSOAccountXpShop(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CSOAccountXpShop)
}
CSOAccountXpShop::CSOAccountXpShop(const CSOAccountXpShop& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CSOAccountXpShop* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.xp_tracks_){from._impl_.xp_tracks_}
    , decltype(_impl_.generation_time_){}
    , decltype(_impl_.redeemable_balance_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.generation_time_, &from._impl_.generation_time_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.redeemable_balance_) -
    reinterpret_cast<char*>(&_impl_.generation_time_)) + sizeof(_impl_.redeemable_balance_));
  // @@protoc_insertion_point(copy_constructor:CSOAccountXpShop)
}

inline void CSOAccountXpShop::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.xp_tracks_){arena}
    , decltype(_impl_.generation_time_){0u}
    , decltype(_impl_.redeemable_balance_){0u}
  };
}

CSOAccountXpShop::~CSOAccountXpShop() {
  // @@protoc_insertion_point(destructor:CSOAccountXpShop)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CSOAccountXpShop::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.xp_tracks_.~RepeatedField();
}

void CSOAccountXpShop::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CSOAccountXpShop::Clear() {
// @@protoc_insertion_point(message_clear_start:CSOAccountXpShop)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.xp_tracks_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.generation_time_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.redeemable_balance_) -
        reinterpret_cast<char*>(&_impl_.generation_time_)) + sizeof(_impl_.redeemable_balance_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSOAccountXpShop::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 generation_time = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_generation_time(&has_bits);
          _impl_.generation_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 redeemable_balance = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_redeemable_balance(&has_bits);
          _impl_.redeemable_balance_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 xp_tracks = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_xp_tracks(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<24>(ptr));
        } else if (static_cast<uint8_t>(tag) == 26) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_xp_tracks(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CSOAccountXpShop::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSOAccountXpShop)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 generation_time = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_generation_time(), target);
  }

  // optional uint32 redeemable_balance = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_redeemable_balance(), target);
  }

  // repeated uint32 xp_tracks = 3;
  for (int i = 0, n = this->_internal_xp_tracks_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_xp_tracks(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSOAccountXpShop)
  return target;
}

size_t CSOAccountXpShop::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSOAccountXpShop)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 xp_tracks = 3;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.xp_tracks_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_xp_tracks_size());
    total_size += data_size;
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 generation_time = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_generation_time());
    }

    // optional uint32 redeemable_balance = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_redeemable_balance());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CSOAccountXpShop::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CSOAccountXpShop::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CSOAccountXpShop::GetClassData() const { return &_class_data_; }


void CSOAccountXpShop::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CSOAccountXpShop*>(&to_msg);
  auto& from = static_cast<const CSOAccountXpShop&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CSOAccountXpShop)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.xp_tracks_.MergeFrom(from._impl_.xp_tracks_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.generation_time_ = from._impl_.generation_time_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.redeemable_balance_ = from._impl_.redeemable_balance_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CSOAccountXpShop::CopyFrom(const CSOAccountXpShop& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSOAccountXpShop)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSOAccountXpShop::IsInitialized() const {
  return true;
}

void CSOAccountXpShop::InternalSwap(CSOAccountXpShop* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.xp_tracks_.InternalSwap(&other->_impl_.xp_tracks_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CSOAccountXpShop, _impl_.redeemable_balance_)
      + sizeof(CSOAccountXpShop::_impl_.redeemable_balance_)
      - PROTOBUF_FIELD_OFFSET(CSOAccountXpShop, _impl_.generation_time_)>(
          reinterpret_cast<char*>(&_impl_.generation_time_),
          reinterpret_cast<char*>(&other->_impl_.generation_time_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CSOAccountXpShop::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cstrike15_5fgcmessages_2eproto_getter, &descriptor_table_cstrike15_5fgcmessages_2eproto_once,
      file_level_metadata_cstrike15_5fgcmessages_2eproto[118]);
}

// ===================================================================

class CSOAccountKeychainRemoveToolCharges::_Internal {
 public:
  using HasBits = decltype(std::declval<CSOAccountKeychainRemoveToolCharges>()._impl_._has_bits_);
  static void set_has_charges(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CSOAccountKeychainRemoveToolCharges::CSOAccountKeychainRemoveToolCharges(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CSOAccountKeychainRemoveToolCharges)
}
CSOAccountKeychainRemoveToolCharges::CSOAccountKeychainRemoveToolCharges(const CSOAccountKeychainRemoveToolCharges& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CSOAccountKeychainRemoveToolCharges* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.charges_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.charges_ = from._impl_.charges_;
  // @@protoc_insertion_point(copy_constructor:CSOAccountKeychainRemoveToolCharges)
}

inline void CSOAccountKeychainRemoveToolCharges::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.charges_){0u}
  };
}

CSOAccountKeychainRemoveToolCharges::~CSOAccountKeychainRemoveToolCharges() {
  // @@protoc_insertion_point(destructor:CSOAccountKeychainRemoveToolCharges)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CSOAccountKeychainRemoveToolCharges::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CSOAccountKeychainRemoveToolCharges::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CSOAccountKeychainRemoveToolCharges::Clear() {
// @@protoc_insertion_point(message_clear_start:CSOAccountKeychainRemoveToolCharges)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.charges_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSOAccountKeychainRemoveToolCharges::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 charges = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_charges(&has_bits);
          _impl_.charges_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CSOAccountKeychainRemoveToolCharges::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSOAccountKeychainRemoveToolCharges)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 charges = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_charges(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSOAccountKeychainRemoveToolCharges)
  return target;
}

size_t CSOAccountKeychainRemoveToolCharges::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSOAccountKeychainRemoveToolCharges)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 charges = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_charges());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CSOAccountKeychainRemoveToolCharges::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CSOAccountKeychainRemoveToolCharges::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CSOAccountKeychainRemoveToolCharges::GetClassData() const { return &_class_data_; }


void CSOAccountKeychainRemoveToolCharges::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CSOAccountKeychainRemoveToolCharges*>(&to_msg);
  auto& from = static_cast<const CSOAccountKeychainRemoveToolCharges&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CSOAccountKeychainRemoveToolCharges)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_charges()) {
    _this->_internal_set_charges(from._internal_charges());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CSOAccountKeychainRemoveToolCharges::CopyFrom(const CSOAccountKeychainRemoveToolCharges& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSOAccountKeychainRemoveToolCharges)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSOAccountKeychainRemoveToolCharges::IsInitialized() const {
  return true;
}

void CSOAccountKeychainRemoveToolCharges::InternalSwap(CSOAccountKeychainRemoveToolCharges* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.charges_, other->_impl_.charges_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSOAccountKeychainRemoveToolCharges::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cstrike15_5fgcmessages_2eproto_getter, &descriptor_table_cstrike15_5fgcmessages_2eproto_once,
      file_level_metadata_cstrike15_5fgcmessages_2eproto[119]);
}

// ===================================================================

class CSOQuestProgress::_Internal {
 public:
  using HasBits = decltype(std::declval<CSOQuestProgress>()._impl_._has_bits_);
  static void set_has_questid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_points_remaining(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_bonus_points(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CSOQuestProgress::CSOQuestProgress(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CSOQuestProgress)
}
CSOQuestProgress::CSOQuestProgress(const CSOQuestProgress& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CSOQuestProgress* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.questid_){}
    , decltype(_impl_.points_remaining_){}
    , decltype(_impl_.bonus_points_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.questid_, &from._impl_.questid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.bonus_points_) -
    reinterpret_cast<char*>(&_impl_.questid_)) + sizeof(_impl_.bonus_points_));
  // @@protoc_insertion_point(copy_constructor:CSOQuestProgress)
}

inline void CSOQuestProgress::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.questid_){0u}
    , decltype(_impl_.points_remaining_){0u}
    , decltype(_impl_.bonus_points_){0u}
  };
}

CSOQuestProgress::~CSOQuestProgress() {
  // @@protoc_insertion_point(destructor:CSOQuestProgress)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CSOQuestProgress::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CSOQuestProgress::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CSOQuestProgress::Clear() {
// @@protoc_insertion_point(message_clear_start:CSOQuestProgress)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.questid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.bonus_points_) -
        reinterpret_cast<char*>(&_impl_.questid_)) + sizeof(_impl_.bonus_points_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSOQuestProgress::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 questid = 1 [(.key_field) = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_questid(&has_bits);
          _impl_.questid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 points_remaining = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_points_remaining(&has_bits);
          _impl_.points_remaining_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 bonus_points = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_bonus_points(&has_bits);
          _impl_.bonus_points_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CSOQuestProgress::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSOQuestProgress)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 questid = 1 [(.key_field) = true];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_questid(), target);
  }

  // optional uint32 points_remaining = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_points_remaining(), target);
  }

  // optional uint32 bonus_points = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_bonus_points(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSOQuestProgress)
  return target;
}

size_t CSOQuestProgress::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSOQuestProgress)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint32 questid = 1 [(.key_field) = true];
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_questid());
    }

    // optional uint32 points_remaining = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_points_remaining());
    }

    // optional uint32 bonus_points = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_bonus_points());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CSOQuestProgress::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CSOQuestProgress::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CSOQuestProgress::GetClassData() const { return &_class_data_; }


void CSOQuestProgress::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CSOQuestProgress*>(&to_msg);
  auto& from = static_cast<const CSOQuestProgress&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CSOQuestProgress)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.questid_ = from._impl_.questid_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.points_remaining_ = from._impl_.points_remaining_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.bonus_points_ = from._impl_.bonus_points_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CSOQuestProgress::CopyFrom(const CSOQuestProgress& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSOQuestProgress)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSOQuestProgress::IsInitialized() const {
  return true;
}

void CSOQuestProgress::InternalSwap(CSOQuestProgress* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CSOQuestProgress, _impl_.bonus_points_)
      + sizeof(CSOQuestProgress::_impl_.bonus_points_)
      - PROTOBUF_FIELD_OFFSET(CSOQuestProgress, _impl_.questid_)>(
          reinterpret_cast<char*>(&_impl_.questid_),
          reinterpret_cast<char*>(&other->_impl_.questid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CSOQuestProgress::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cstrike15_5fgcmessages_2eproto_getter, &descriptor_table_cstrike15_5fgcmessages_2eproto_once,
      file_level_metadata_cstrike15_5fgcmessages_2eproto[120]);
}

// ===================================================================

class CSOAccountSeasonalOperation::_Internal {
 public:
  using HasBits = decltype(std::declval<CSOAccountSeasonalOperation>()._impl_._has_bits_);
  static void set_has_season_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_tier_unlocked(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_premium_tiers(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_mission_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_missions_completed(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_redeemable_balance(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_season_pass_time(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

CSOAccountSeasonalOperation::CSOAccountSeasonalOperation(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CSOAccountSeasonalOperation)
}
CSOAccountSeasonalOperation::CSOAccountSeasonalOperation(const CSOAccountSeasonalOperation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CSOAccountSeasonalOperation* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.season_value_){}
    , decltype(_impl_.tier_unlocked_){}
    , decltype(_impl_.premium_tiers_){}
    , decltype(_impl_.mission_id_){}
    , decltype(_impl_.missions_completed_){}
    , decltype(_impl_.redeemable_balance_){}
    , decltype(_impl_.season_pass_time_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.season_value_, &from._impl_.season_value_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.season_pass_time_) -
    reinterpret_cast<char*>(&_impl_.season_value_)) + sizeof(_impl_.season_pass_time_));
  // @@protoc_insertion_point(copy_constructor:CSOAccountSeasonalOperation)
}

inline void CSOAccountSeasonalOperation::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.season_value_){0u}
    , decltype(_impl_.tier_unlocked_){0u}
    , decltype(_impl_.premium_tiers_){0u}
    , decltype(_impl_.mission_id_){0u}
    , decltype(_impl_.missions_completed_){0u}
    , decltype(_impl_.redeemable_balance_){0u}
    , decltype(_impl_.season_pass_time_){0u}
  };
}

CSOAccountSeasonalOperation::~CSOAccountSeasonalOperation() {
  // @@protoc_insertion_point(destructor:CSOAccountSeasonalOperation)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CSOAccountSeasonalOperation::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CSOAccountSeasonalOperation::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CSOAccountSeasonalOperation::Clear() {
// @@protoc_insertion_point(message_clear_start:CSOAccountSeasonalOperation)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    ::memset(&_impl_.season_value_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.season_pass_time_) -
        reinterpret_cast<char*>(&_impl_.season_value_)) + sizeof(_impl_.season_pass_time_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSOAccountSeasonalOperation::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 season_value = 1 [(.key_field) = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_season_value(&has_bits);
          _impl_.season_value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 tier_unlocked = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_tier_unlocked(&has_bits);
          _impl_.tier_unlocked_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 premium_tiers = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_premium_tiers(&has_bits);
          _impl_.premium_tiers_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 mission_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_mission_id(&has_bits);
          _impl_.mission_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 missions_completed = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_missions_completed(&has_bits);
          _impl_.missions_completed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 redeemable_balance = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_redeemable_balance(&has_bits);
          _impl_.redeemable_balance_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 season_pass_time = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_season_pass_time(&has_bits);
          _impl_.season_pass_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CSOAccountSeasonalOperation::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSOAccountSeasonalOperation)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 season_value = 1 [(.key_field) = true];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_season_value(), target);
  }

  // optional uint32 tier_unlocked = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_tier_unlocked(), target);
  }

  // optional uint32 premium_tiers = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_premium_tiers(), target);
  }

  // optional uint32 mission_id = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_mission_id(), target);
  }

  // optional uint32 missions_completed = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_missions_completed(), target);
  }

  // optional uint32 redeemable_balance = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_redeemable_balance(), target);
  }

  // optional uint32 season_pass_time = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(7, this->_internal_season_pass_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSOAccountSeasonalOperation)
  return target;
}

size_t CSOAccountSeasonalOperation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSOAccountSeasonalOperation)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional uint32 season_value = 1 [(.key_field) = true];
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_season_value());
    }

    // optional uint32 tier_unlocked = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_tier_unlocked());
    }

    // optional uint32 premium_tiers = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_premium_tiers());
    }

    // optional uint32 mission_id = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_mission_id());
    }

    // optional uint32 missions_completed = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_missions_completed());
    }

    // optional uint32 redeemable_balance = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_redeemable_balance());
    }

    // optional uint32 season_pass_time = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_season_pass_time());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CSOAccountSeasonalOperation::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CSOAccountSeasonalOperation::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CSOAccountSeasonalOperation::GetClassData() const { return &_class_data_; }


void CSOAccountSeasonalOperation::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CSOAccountSeasonalOperation*>(&to_msg);
  auto& from = static_cast<const CSOAccountSeasonalOperation&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CSOAccountSeasonalOperation)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.season_value_ = from._impl_.season_value_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.tier_unlocked_ = from._impl_.tier_unlocked_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.premium_tiers_ = from._impl_.premium_tiers_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.mission_id_ = from._impl_.mission_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.missions_completed_ = from._impl_.missions_completed_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.redeemable_balance_ = from._impl_.redeemable_balance_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.season_pass_time_ = from._impl_.season_pass_time_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CSOAccountSeasonalOperation::CopyFrom(const CSOAccountSeasonalOperation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSOAccountSeasonalOperation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSOAccountSeasonalOperation::IsInitialized() const {
  return true;
}

void CSOAccountSeasonalOperation::InternalSwap(CSOAccountSeasonalOperation* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CSOAccountSeasonalOperation, _impl_.season_pass_time_)
      + sizeof(CSOAccountSeasonalOperation::_impl_.season_pass_time_)
      - PROTOBUF_FIELD_OFFSET(CSOAccountSeasonalOperation, _impl_.season_value_)>(
          reinterpret_cast<char*>(&_impl_.season_value_),
          reinterpret_cast<char*>(&other->_impl_.season_value_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CSOAccountSeasonalOperation::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cstrike15_5fgcmessages_2eproto_getter, &descriptor_table_cstrike15_5fgcmessages_2eproto_once,
      file_level_metadata_cstrike15_5fgcmessages_2eproto[121]);
}

// ===================================================================

class CSOAccountRecurringSubscription::_Internal {
 public:
  using HasBits = decltype(std::declval<CSOAccountRecurringSubscription>()._impl_._has_bits_);
  static void set_has_time_next_cycle(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_time_initiated(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CSOAccountRecurringSubscription::CSOAccountRecurringSubscription(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CSOAccountRecurringSubscription)
}
CSOAccountRecurringSubscription::CSOAccountRecurringSubscription(const CSOAccountRecurringSubscription& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CSOAccountRecurringSubscription* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.time_next_cycle_){}
    , decltype(_impl_.time_initiated_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.time_next_cycle_, &from._impl_.time_next_cycle_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.time_initiated_) -
    reinterpret_cast<char*>(&_impl_.time_next_cycle_)) + sizeof(_impl_.time_initiated_));
  // @@protoc_insertion_point(copy_constructor:CSOAccountRecurringSubscription)
}

inline void CSOAccountRecurringSubscription::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.time_next_cycle_){0u}
    , decltype(_impl_.time_initiated_){0u}
  };
}

CSOAccountRecurringSubscription::~CSOAccountRecurringSubscription() {
  // @@protoc_insertion_point(destructor:CSOAccountRecurringSubscription)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CSOAccountRecurringSubscription::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CSOAccountRecurringSubscription::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CSOAccountRecurringSubscription::Clear() {
// @@protoc_insertion_point(message_clear_start:CSOAccountRecurringSubscription)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.time_next_cycle_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.time_initiated_) -
        reinterpret_cast<char*>(&_impl_.time_next_cycle_)) + sizeof(_impl_.time_initiated_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSOAccountRecurringSubscription::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 time_next_cycle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_time_next_cycle(&has_bits);
          _impl_.time_next_cycle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 time_initiated = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_time_initiated(&has_bits);
          _impl_.time_initiated_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CSOAccountRecurringSubscription::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSOAccountRecurringSubscription)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 time_next_cycle = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_time_next_cycle(), target);
  }

  // optional uint32 time_initiated = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_time_initiated(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSOAccountRecurringSubscription)
  return target;
}

size_t CSOAccountRecurringSubscription::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSOAccountRecurringSubscription)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 time_next_cycle = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_time_next_cycle());
    }

    // optional uint32 time_initiated = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_time_initiated());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CSOAccountRecurringSubscription::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CSOAccountRecurringSubscription::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CSOAccountRecurringSubscription::GetClassData() const { return &_class_data_; }


void CSOAccountRecurringSubscription::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CSOAccountRecurringSubscription*>(&to_msg);
  auto& from = static_cast<const CSOAccountRecurringSubscription&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CSOAccountRecurringSubscription)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.time_next_cycle_ = from._impl_.time_next_cycle_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.time_initiated_ = from._impl_.time_initiated_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CSOAccountRecurringSubscription::CopyFrom(const CSOAccountRecurringSubscription& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSOAccountRecurringSubscription)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSOAccountRecurringSubscription::IsInitialized() const {
  return true;
}

void CSOAccountRecurringSubscription::InternalSwap(CSOAccountRecurringSubscription* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CSOAccountRecurringSubscription, _impl_.time_initiated_)
      + sizeof(CSOAccountRecurringSubscription::_impl_.time_initiated_)
      - PROTOBUF_FIELD_OFFSET(CSOAccountRecurringSubscription, _impl_.time_next_cycle_)>(
          reinterpret_cast<char*>(&_impl_.time_next_cycle_),
          reinterpret_cast<char*>(&other->_impl_.time_next_cycle_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CSOAccountRecurringSubscription::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cstrike15_5fgcmessages_2eproto_getter, &descriptor_table_cstrike15_5fgcmessages_2eproto_once,
      file_level_metadata_cstrike15_5fgcmessages_2eproto[122]);
}

// ===================================================================

class CSOPersonaDataPublic::_Internal {
 public:
  using HasBits = decltype(std::declval<CSOPersonaDataPublic>()._impl_._has_bits_);
  static void set_has_player_level(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::PlayerCommendationInfo& commendation(const CSOPersonaDataPublic* msg);
  static void set_has_commendation(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_elevated_state(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_xp_trail_timestamp_refresh(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_xp_trail_level(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

const ::PlayerCommendationInfo&
CSOPersonaDataPublic::_Internal::commendation(const CSOPersonaDataPublic* msg) {
  return *msg->_impl_.commendation_;
}
CSOPersonaDataPublic::CSOPersonaDataPublic(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CSOPersonaDataPublic)
}
CSOPersonaDataPublic::CSOPersonaDataPublic(const CSOPersonaDataPublic& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CSOPersonaDataPublic* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.commendation_){nullptr}
    , decltype(_impl_.player_level_){}
    , decltype(_impl_.elevated_state_){}
    , decltype(_impl_.xp_trail_timestamp_refresh_){}
    , decltype(_impl_.xp_trail_level_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_commendation()) {
    _this->_impl_.commendation_ = new ::PlayerCommendationInfo(*from._impl_.commendation_);
  }
  ::memcpy(&_impl_.player_level_, &from._impl_.player_level_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.xp_trail_level_) -
    reinterpret_cast<char*>(&_impl_.player_level_)) + sizeof(_impl_.xp_trail_level_));
  // @@protoc_insertion_point(copy_constructor:CSOPersonaDataPublic)
}

inline void CSOPersonaDataPublic::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.commendation_){nullptr}
    , decltype(_impl_.player_level_){0}
    , decltype(_impl_.elevated_state_){false}
    , decltype(_impl_.xp_trail_timestamp_refresh_){0u}
    , decltype(_impl_.xp_trail_level_){0u}
  };
}

CSOPersonaDataPublic::~CSOPersonaDataPublic() {
  // @@protoc_insertion_point(destructor:CSOPersonaDataPublic)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CSOPersonaDataPublic::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.commendation_;
}

void CSOPersonaDataPublic::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CSOPersonaDataPublic::Clear() {
// @@protoc_insertion_point(message_clear_start:CSOPersonaDataPublic)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.commendation_ != nullptr);
    _impl_.commendation_->Clear();
  }
  if (cached_has_bits & 0x0000001eu) {
    ::memset(&_impl_.player_level_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.xp_trail_level_) -
        reinterpret_cast<char*>(&_impl_.player_level_)) + sizeof(_impl_.xp_trail_level_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSOPersonaDataPublic::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 player_level = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_player_level(&has_bits);
          _impl_.player_level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .PlayerCommendationInfo commendation = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_commendation(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool elevated_state = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_elevated_state(&has_bits);
          _impl_.elevated_state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 xp_trail_timestamp_refresh = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_xp_trail_timestamp_refresh(&has_bits);
          _impl_.xp_trail_timestamp_refresh_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 xp_trail_level = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_xp_trail_level(&has_bits);
          _impl_.xp_trail_level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CSOPersonaDataPublic::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSOPersonaDataPublic)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 player_level = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_player_level(), target);
  }

  // optional .PlayerCommendationInfo commendation = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::commendation(this),
        _Internal::commendation(this).GetCachedSize(), target, stream);
  }

  // optional bool elevated_state = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_elevated_state(), target);
  }

  // optional uint32 xp_trail_timestamp_refresh = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_xp_trail_timestamp_refresh(), target);
  }

  // optional uint32 xp_trail_level = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_xp_trail_level(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSOPersonaDataPublic)
  return target;
}

size_t CSOPersonaDataPublic::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSOPersonaDataPublic)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional .PlayerCommendationInfo commendation = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.commendation_);
    }

    // optional int32 player_level = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_player_level());
    }

    // optional bool elevated_state = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional uint32 xp_trail_timestamp_refresh = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_xp_trail_timestamp_refresh());
    }

    // optional uint32 xp_trail_level = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_xp_trail_level());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CSOPersonaDataPublic::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CSOPersonaDataPublic::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CSOPersonaDataPublic::GetClassData() const { return &_class_data_; }


void CSOPersonaDataPublic::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CSOPersonaDataPublic*>(&to_msg);
  auto& from = static_cast<const CSOPersonaDataPublic&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CSOPersonaDataPublic)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_commendation()->::PlayerCommendationInfo::MergeFrom(
          from._internal_commendation());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.player_level_ = from._impl_.player_level_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.elevated_state_ = from._impl_.elevated_state_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.xp_trail_timestamp_refresh_ = from._impl_.xp_trail_timestamp_refresh_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.xp_trail_level_ = from._impl_.xp_trail_level_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CSOPersonaDataPublic::CopyFrom(const CSOPersonaDataPublic& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSOPersonaDataPublic)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSOPersonaDataPublic::IsInitialized() const {
  return true;
}

void CSOPersonaDataPublic::InternalSwap(CSOPersonaDataPublic* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CSOPersonaDataPublic, _impl_.xp_trail_level_)
      + sizeof(CSOPersonaDataPublic::_impl_.xp_trail_level_)
      - PROTOBUF_FIELD_OFFSET(CSOPersonaDataPublic, _impl_.commendation_)>(
          reinterpret_cast<char*>(&_impl_.commendation_),
          reinterpret_cast<char*>(&other->_impl_.commendation_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CSOPersonaDataPublic::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cstrike15_5fgcmessages_2eproto_getter, &descriptor_table_cstrike15_5fgcmessages_2eproto_once,
      file_level_metadata_cstrike15_5fgcmessages_2eproto[123]);
}

// ===================================================================

class CMsgGCCStrike15_v2_GC2ClientNotifyXPShop::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCCStrike15_v2_GC2ClientNotifyXPShop>()._impl_._has_bits_);
  static const ::CSOAccountXpShop& prematch(const CMsgGCCStrike15_v2_GC2ClientNotifyXPShop* msg);
  static void set_has_prematch(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::CSOAccountXpShop& postmatch(const CMsgGCCStrike15_v2_GC2ClientNotifyXPShop* msg);
  static void set_has_postmatch(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_current_xp(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_current_level(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::CSOAccountXpShop&
CMsgGCCStrike15_v2_GC2ClientNotifyXPShop::_Internal::prematch(const CMsgGCCStrike15_v2_GC2ClientNotifyXPShop* msg) {
  return *msg->_impl_.prematch_;
}
const ::CSOAccountXpShop&
CMsgGCCStrike15_v2_GC2ClientNotifyXPShop::_Internal::postmatch(const CMsgGCCStrike15_v2_GC2ClientNotifyXPShop* msg) {
  return *msg->_impl_.postmatch_;
}
CMsgGCCStrike15_v2_GC2ClientNotifyXPShop::CMsgGCCStrike15_v2_GC2ClientNotifyXPShop(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgGCCStrike15_v2_GC2ClientNotifyXPShop)
}
CMsgGCCStrike15_v2_GC2ClientNotifyXPShop::CMsgGCCStrike15_v2_GC2ClientNotifyXPShop(const CMsgGCCStrike15_v2_GC2ClientNotifyXPShop& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgGCCStrike15_v2_GC2ClientNotifyXPShop* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.prematch_){nullptr}
    , decltype(_impl_.postmatch_){nullptr}
    , decltype(_impl_.current_xp_){}
    , decltype(_impl_.current_level_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_prematch()) {
    _this->_impl_.prematch_ = new ::CSOAccountXpShop(*from._impl_.prematch_);
  }
  if (from._internal_has_postmatch()) {
    _this->_impl_.postmatch_ = new ::CSOAccountXpShop(*from._impl_.postmatch_);
  }
  ::memcpy(&_impl_.current_xp_, &from._impl_.current_xp_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.current_level_) -
    reinterpret_cast<char*>(&_impl_.current_xp_)) + sizeof(_impl_.current_level_));
  // @@protoc_insertion_point(copy_constructor:CMsgGCCStrike15_v2_GC2ClientNotifyXPShop)
}

inline void CMsgGCCStrike15_v2_GC2ClientNotifyXPShop::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.prematch_){nullptr}
    , decltype(_impl_.postmatch_){nullptr}
    , decltype(_impl_.current_xp_){0u}
    , decltype(_impl_.current_level_){0u}
  };
}

CMsgGCCStrike15_v2_GC2ClientNotifyXPShop::~CMsgGCCStrike15_v2_GC2ClientNotifyXPShop() {
  // @@protoc_insertion_point(destructor:CMsgGCCStrike15_v2_GC2ClientNotifyXPShop)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgGCCStrike15_v2_GC2ClientNotifyXPShop::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.prematch_;
  if (this != internal_default_instance()) delete _impl_.postmatch_;
}

void CMsgGCCStrike15_v2_GC2ClientNotifyXPShop::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgGCCStrike15_v2_GC2ClientNotifyXPShop::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCCStrike15_v2_GC2ClientNotifyXPShop)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.prematch_ != nullptr);
      _impl_.prematch_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.postmatch_ != nullptr);
      _impl_.postmatch_->Clear();
    }
  }
  if (cached_has_bits & 0x0000000cu) {
    ::memset(&_impl_.current_xp_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.current_level_) -
        reinterpret_cast<char*>(&_impl_.current_xp_)) + sizeof(_impl_.current_level_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCCStrike15_v2_GC2ClientNotifyXPShop::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .CSOAccountXpShop prematch = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_prematch(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .CSOAccountXpShop postmatch = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_postmatch(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 current_xp = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_current_xp(&has_bits);
          _impl_.current_xp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 current_level = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_current_level(&has_bits);
          _impl_.current_level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgGCCStrike15_v2_GC2ClientNotifyXPShop::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCCStrike15_v2_GC2ClientNotifyXPShop)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .CSOAccountXpShop prematch = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::prematch(this),
        _Internal::prematch(this).GetCachedSize(), target, stream);
  }

  // optional .CSOAccountXpShop postmatch = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::postmatch(this),
        _Internal::postmatch(this).GetCachedSize(), target, stream);
  }

  // optional uint32 current_xp = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_current_xp(), target);
  }

  // optional uint32 current_level = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_current_level(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCCStrike15_v2_GC2ClientNotifyXPShop)
  return target;
}

size_t CMsgGCCStrike15_v2_GC2ClientNotifyXPShop::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCCStrike15_v2_GC2ClientNotifyXPShop)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .CSOAccountXpShop prematch = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.prematch_);
    }

    // optional .CSOAccountXpShop postmatch = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.postmatch_);
    }

    // optional uint32 current_xp = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_current_xp());
    }

    // optional uint32 current_level = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_current_level());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgGCCStrike15_v2_GC2ClientNotifyXPShop::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgGCCStrike15_v2_GC2ClientNotifyXPShop::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgGCCStrike15_v2_GC2ClientNotifyXPShop::GetClassData() const { return &_class_data_; }


void CMsgGCCStrike15_v2_GC2ClientNotifyXPShop::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgGCCStrike15_v2_GC2ClientNotifyXPShop*>(&to_msg);
  auto& from = static_cast<const CMsgGCCStrike15_v2_GC2ClientNotifyXPShop&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCCStrike15_v2_GC2ClientNotifyXPShop)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_prematch()->::CSOAccountXpShop::MergeFrom(
          from._internal_prematch());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_postmatch()->::CSOAccountXpShop::MergeFrom(
          from._internal_postmatch());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.current_xp_ = from._impl_.current_xp_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.current_level_ = from._impl_.current_level_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgGCCStrike15_v2_GC2ClientNotifyXPShop::CopyFrom(const CMsgGCCStrike15_v2_GC2ClientNotifyXPShop& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCCStrike15_v2_GC2ClientNotifyXPShop)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCCStrike15_v2_GC2ClientNotifyXPShop::IsInitialized() const {
  return true;
}

void CMsgGCCStrike15_v2_GC2ClientNotifyXPShop::InternalSwap(CMsgGCCStrike15_v2_GC2ClientNotifyXPShop* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgGCCStrike15_v2_GC2ClientNotifyXPShop, _impl_.current_level_)
      + sizeof(CMsgGCCStrike15_v2_GC2ClientNotifyXPShop::_impl_.current_level_)
      - PROTOBUF_FIELD_OFFSET(CMsgGCCStrike15_v2_GC2ClientNotifyXPShop, _impl_.prematch_)>(
          reinterpret_cast<char*>(&_impl_.prematch_),
          reinterpret_cast<char*>(&other->_impl_.prematch_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCCStrike15_v2_GC2ClientNotifyXPShop::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cstrike15_5fgcmessages_2eproto_getter, &descriptor_table_cstrike15_5fgcmessages_2eproto_once,
      file_level_metadata_cstrike15_5fgcmessages_2eproto[124]);
}

// ===================================================================

class CMsgGCCStrike15_v2_Client2GcAckXPShopTracks::_Internal {
 public:
};

CMsgGCCStrike15_v2_Client2GcAckXPShopTracks::CMsgGCCStrike15_v2_Client2GcAckXPShopTracks(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:CMsgGCCStrike15_v2_Client2GcAckXPShopTracks)
}
CMsgGCCStrike15_v2_Client2GcAckXPShopTracks::CMsgGCCStrike15_v2_Client2GcAckXPShopTracks(const CMsgGCCStrike15_v2_Client2GcAckXPShopTracks& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  CMsgGCCStrike15_v2_Client2GcAckXPShopTracks* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgGCCStrike15_v2_Client2GcAckXPShopTracks)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgGCCStrike15_v2_Client2GcAckXPShopTracks::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgGCCStrike15_v2_Client2GcAckXPShopTracks::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCCStrike15_v2_Client2GcAckXPShopTracks::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cstrike15_5fgcmessages_2eproto_getter, &descriptor_table_cstrike15_5fgcmessages_2eproto_once,
      file_level_metadata_cstrike15_5fgcmessages_2eproto[125]);
}

// ===================================================================

class CMsgGC_GlobalGame_Subscribe::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGC_GlobalGame_Subscribe>()._impl_._has_bits_);
  static void set_has_ticket(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgGC_GlobalGame_Subscribe::CMsgGC_GlobalGame_Subscribe(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgGC_GlobalGame_Subscribe)
}
CMsgGC_GlobalGame_Subscribe::CMsgGC_GlobalGame_Subscribe(const CMsgGC_GlobalGame_Subscribe& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgGC_GlobalGame_Subscribe* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.ticket_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.ticket_ = from._impl_.ticket_;
  // @@protoc_insertion_point(copy_constructor:CMsgGC_GlobalGame_Subscribe)
}

inline void CMsgGC_GlobalGame_Subscribe::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.ticket_){uint64_t{0u}}
  };
}

CMsgGC_GlobalGame_Subscribe::~CMsgGC_GlobalGame_Subscribe() {
  // @@protoc_insertion_point(destructor:CMsgGC_GlobalGame_Subscribe)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgGC_GlobalGame_Subscribe::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgGC_GlobalGame_Subscribe::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgGC_GlobalGame_Subscribe::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGC_GlobalGame_Subscribe)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.ticket_ = uint64_t{0u};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGC_GlobalGame_Subscribe::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 ticket = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_ticket(&has_bits);
          _impl_.ticket_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgGC_GlobalGame_Subscribe::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGC_GlobalGame_Subscribe)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint64 ticket = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_ticket(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGC_GlobalGame_Subscribe)
  return target;
}

size_t CMsgGC_GlobalGame_Subscribe::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGC_GlobalGame_Subscribe)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint64 ticket = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_ticket());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgGC_GlobalGame_Subscribe::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgGC_GlobalGame_Subscribe::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgGC_GlobalGame_Subscribe::GetClassData() const { return &_class_data_; }


void CMsgGC_GlobalGame_Subscribe::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgGC_GlobalGame_Subscribe*>(&to_msg);
  auto& from = static_cast<const CMsgGC_GlobalGame_Subscribe&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgGC_GlobalGame_Subscribe)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_ticket()) {
    _this->_internal_set_ticket(from._internal_ticket());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgGC_GlobalGame_Subscribe::CopyFrom(const CMsgGC_GlobalGame_Subscribe& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGC_GlobalGame_Subscribe)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGC_GlobalGame_Subscribe::IsInitialized() const {
  return true;
}

void CMsgGC_GlobalGame_Subscribe::InternalSwap(CMsgGC_GlobalGame_Subscribe* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.ticket_, other->_impl_.ticket_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGC_GlobalGame_Subscribe::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cstrike15_5fgcmessages_2eproto_getter, &descriptor_table_cstrike15_5fgcmessages_2eproto_once,
      file_level_metadata_cstrike15_5fgcmessages_2eproto[126]);
}

// ===================================================================

class CMsgGC_GlobalGame_Unsubscribe::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGC_GlobalGame_Unsubscribe>()._impl_._has_bits_);
  static void set_has_timeleft(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgGC_GlobalGame_Unsubscribe::CMsgGC_GlobalGame_Unsubscribe(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgGC_GlobalGame_Unsubscribe)
}
CMsgGC_GlobalGame_Unsubscribe::CMsgGC_GlobalGame_Unsubscribe(const CMsgGC_GlobalGame_Unsubscribe& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgGC_GlobalGame_Unsubscribe* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.timeleft_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.timeleft_ = from._impl_.timeleft_;
  // @@protoc_insertion_point(copy_constructor:CMsgGC_GlobalGame_Unsubscribe)
}

inline void CMsgGC_GlobalGame_Unsubscribe::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.timeleft_){0}
  };
}

CMsgGC_GlobalGame_Unsubscribe::~CMsgGC_GlobalGame_Unsubscribe() {
  // @@protoc_insertion_point(destructor:CMsgGC_GlobalGame_Unsubscribe)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgGC_GlobalGame_Unsubscribe::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgGC_GlobalGame_Unsubscribe::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgGC_GlobalGame_Unsubscribe::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGC_GlobalGame_Unsubscribe)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.timeleft_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGC_GlobalGame_Unsubscribe::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 timeleft = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_timeleft(&has_bits);
          _impl_.timeleft_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgGC_GlobalGame_Unsubscribe::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGC_GlobalGame_Unsubscribe)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 timeleft = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_timeleft(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGC_GlobalGame_Unsubscribe)
  return target;
}

size_t CMsgGC_GlobalGame_Unsubscribe::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGC_GlobalGame_Unsubscribe)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int32 timeleft = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_timeleft());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgGC_GlobalGame_Unsubscribe::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgGC_GlobalGame_Unsubscribe::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgGC_GlobalGame_Unsubscribe::GetClassData() const { return &_class_data_; }


void CMsgGC_GlobalGame_Unsubscribe::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgGC_GlobalGame_Unsubscribe*>(&to_msg);
  auto& from = static_cast<const CMsgGC_GlobalGame_Unsubscribe&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgGC_GlobalGame_Unsubscribe)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_timeleft()) {
    _this->_internal_set_timeleft(from._internal_timeleft());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgGC_GlobalGame_Unsubscribe::CopyFrom(const CMsgGC_GlobalGame_Unsubscribe& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGC_GlobalGame_Unsubscribe)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGC_GlobalGame_Unsubscribe::IsInitialized() const {
  return true;
}

void CMsgGC_GlobalGame_Unsubscribe::InternalSwap(CMsgGC_GlobalGame_Unsubscribe* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.timeleft_, other->_impl_.timeleft_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGC_GlobalGame_Unsubscribe::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cstrike15_5fgcmessages_2eproto_getter, &descriptor_table_cstrike15_5fgcmessages_2eproto_once,
      file_level_metadata_cstrike15_5fgcmessages_2eproto[127]);
}

// ===================================================================

class CMsgGC_GlobalGame_Play::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGC_GlobalGame_Play>()._impl_._has_bits_);
  static void set_has_ticket(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_gametimems(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_msperpoint(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CMsgGC_GlobalGame_Play::CMsgGC_GlobalGame_Play(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgGC_GlobalGame_Play)
}
CMsgGC_GlobalGame_Play::CMsgGC_GlobalGame_Play(const CMsgGC_GlobalGame_Play& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgGC_GlobalGame_Play* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.ticket_){}
    , decltype(_impl_.gametimems_){}
    , decltype(_impl_.msperpoint_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.ticket_, &from._impl_.ticket_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.msperpoint_) -
    reinterpret_cast<char*>(&_impl_.ticket_)) + sizeof(_impl_.msperpoint_));
  // @@protoc_insertion_point(copy_constructor:CMsgGC_GlobalGame_Play)
}

inline void CMsgGC_GlobalGame_Play::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.ticket_){uint64_t{0u}}
    , decltype(_impl_.gametimems_){0u}
    , decltype(_impl_.msperpoint_){0u}
  };
}

CMsgGC_GlobalGame_Play::~CMsgGC_GlobalGame_Play() {
  // @@protoc_insertion_point(destructor:CMsgGC_GlobalGame_Play)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgGC_GlobalGame_Play::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgGC_GlobalGame_Play::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgGC_GlobalGame_Play::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGC_GlobalGame_Play)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.ticket_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.msperpoint_) -
        reinterpret_cast<char*>(&_impl_.ticket_)) + sizeof(_impl_.msperpoint_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGC_GlobalGame_Play::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 ticket = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_ticket(&has_bits);
          _impl_.ticket_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 gametimems = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_gametimems(&has_bits);
          _impl_.gametimems_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 msperpoint = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_msperpoint(&has_bits);
          _impl_.msperpoint_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgGC_GlobalGame_Play::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGC_GlobalGame_Play)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint64 ticket = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_ticket(), target);
  }

  // optional uint32 gametimems = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_gametimems(), target);
  }

  // optional uint32 msperpoint = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_msperpoint(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGC_GlobalGame_Play)
  return target;
}

size_t CMsgGC_GlobalGame_Play::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGC_GlobalGame_Play)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint64 ticket = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_ticket());
    }

    // optional uint32 gametimems = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_gametimems());
    }

    // optional uint32 msperpoint = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_msperpoint());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgGC_GlobalGame_Play::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgGC_GlobalGame_Play::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgGC_GlobalGame_Play::GetClassData() const { return &_class_data_; }


void CMsgGC_GlobalGame_Play::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgGC_GlobalGame_Play*>(&to_msg);
  auto& from = static_cast<const CMsgGC_GlobalGame_Play&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgGC_GlobalGame_Play)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.ticket_ = from._impl_.ticket_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.gametimems_ = from._impl_.gametimems_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.msperpoint_ = from._impl_.msperpoint_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgGC_GlobalGame_Play::CopyFrom(const CMsgGC_GlobalGame_Play& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGC_GlobalGame_Play)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGC_GlobalGame_Play::IsInitialized() const {
  return true;
}

void CMsgGC_GlobalGame_Play::InternalSwap(CMsgGC_GlobalGame_Play* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgGC_GlobalGame_Play, _impl_.msperpoint_)
      + sizeof(CMsgGC_GlobalGame_Play::_impl_.msperpoint_)
      - PROTOBUF_FIELD_OFFSET(CMsgGC_GlobalGame_Play, _impl_.ticket_)>(
          reinterpret_cast<char*>(&_impl_.ticket_),
          reinterpret_cast<char*>(&other->_impl_.ticket_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGC_GlobalGame_Play::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cstrike15_5fgcmessages_2eproto_getter, &descriptor_table_cstrike15_5fgcmessages_2eproto_once,
      file_level_metadata_cstrike15_5fgcmessages_2eproto[128]);
}

// ===================================================================

class CMsgGCCStrike15_v2_AcknowledgePenalty::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCCStrike15_v2_AcknowledgePenalty>()._impl_._has_bits_);
  static void set_has_acknowledged(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgGCCStrike15_v2_AcknowledgePenalty::CMsgGCCStrike15_v2_AcknowledgePenalty(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgGCCStrike15_v2_AcknowledgePenalty)
}
CMsgGCCStrike15_v2_AcknowledgePenalty::CMsgGCCStrike15_v2_AcknowledgePenalty(const CMsgGCCStrike15_v2_AcknowledgePenalty& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgGCCStrike15_v2_AcknowledgePenalty* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.acknowledged_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.acknowledged_ = from._impl_.acknowledged_;
  // @@protoc_insertion_point(copy_constructor:CMsgGCCStrike15_v2_AcknowledgePenalty)
}

inline void CMsgGCCStrike15_v2_AcknowledgePenalty::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.acknowledged_){0}
  };
}

CMsgGCCStrike15_v2_AcknowledgePenalty::~CMsgGCCStrike15_v2_AcknowledgePenalty() {
  // @@protoc_insertion_point(destructor:CMsgGCCStrike15_v2_AcknowledgePenalty)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgGCCStrike15_v2_AcknowledgePenalty::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgGCCStrike15_v2_AcknowledgePenalty::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgGCCStrike15_v2_AcknowledgePenalty::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCCStrike15_v2_AcknowledgePenalty)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.acknowledged_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCCStrike15_v2_AcknowledgePenalty::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 acknowledged = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_acknowledged(&has_bits);
          _impl_.acknowledged_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgGCCStrike15_v2_AcknowledgePenalty::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCCStrike15_v2_AcknowledgePenalty)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 acknowledged = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_acknowledged(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCCStrike15_v2_AcknowledgePenalty)
  return target;
}

size_t CMsgGCCStrike15_v2_AcknowledgePenalty::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCCStrike15_v2_AcknowledgePenalty)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int32 acknowledged = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_acknowledged());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgGCCStrike15_v2_AcknowledgePenalty::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgGCCStrike15_v2_AcknowledgePenalty::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgGCCStrike15_v2_AcknowledgePenalty::GetClassData() const { return &_class_data_; }


void CMsgGCCStrike15_v2_AcknowledgePenalty::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgGCCStrike15_v2_AcknowledgePenalty*>(&to_msg);
  auto& from = static_cast<const CMsgGCCStrike15_v2_AcknowledgePenalty&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCCStrike15_v2_AcknowledgePenalty)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_acknowledged()) {
    _this->_internal_set_acknowledged(from._internal_acknowledged());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgGCCStrike15_v2_AcknowledgePenalty::CopyFrom(const CMsgGCCStrike15_v2_AcknowledgePenalty& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCCStrike15_v2_AcknowledgePenalty)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCCStrike15_v2_AcknowledgePenalty::IsInitialized() const {
  return true;
}

void CMsgGCCStrike15_v2_AcknowledgePenalty::InternalSwap(CMsgGCCStrike15_v2_AcknowledgePenalty* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.acknowledged_, other->_impl_.acknowledged_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCCStrike15_v2_AcknowledgePenalty::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cstrike15_5fgcmessages_2eproto_getter, &descriptor_table_cstrike15_5fgcmessages_2eproto_once,
      file_level_metadata_cstrike15_5fgcmessages_2eproto[129]);
}

// ===================================================================

class CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin>()._impl_._has_bits_);
  static void set_has_defindex(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_upgradeid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_hours(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_prestigetime(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin::CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin)
}
CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin::CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin(const CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.upgradeid_){}
    , decltype(_impl_.defindex_){}
    , decltype(_impl_.hours_){}
    , decltype(_impl_.prestigetime_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.upgradeid_, &from._impl_.upgradeid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.prestigetime_) -
    reinterpret_cast<char*>(&_impl_.upgradeid_)) + sizeof(_impl_.prestigetime_));
  // @@protoc_insertion_point(copy_constructor:CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin)
}

inline void CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.upgradeid_){uint64_t{0u}}
    , decltype(_impl_.defindex_){0u}
    , decltype(_impl_.hours_){0u}
    , decltype(_impl_.prestigetime_){0u}
  };
}

CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin::~CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin() {
  // @@protoc_insertion_point(destructor:CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&_impl_.upgradeid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.prestigetime_) -
        reinterpret_cast<char*>(&_impl_.upgradeid_)) + sizeof(_impl_.prestigetime_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 defindex = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_defindex(&has_bits);
          _impl_.defindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 upgradeid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_upgradeid(&has_bits);
          _impl_.upgradeid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 hours = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_hours(&has_bits);
          _impl_.hours_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 prestigetime = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_prestigetime(&has_bits);
          _impl_.prestigetime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 defindex = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_defindex(), target);
  }

  // optional uint64 upgradeid = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_upgradeid(), target);
  }

  // optional uint32 hours = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_hours(), target);
  }

  // optional uint32 prestigetime = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_prestigetime(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin)
  return target;
}

size_t CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional uint64 upgradeid = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_upgradeid());
    }

    // optional uint32 defindex = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_defindex());
    }

    // optional uint32 hours = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_hours());
    }

    // optional uint32 prestigetime = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_prestigetime());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin::GetClassData() const { return &_class_data_; }


void CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin*>(&to_msg);
  auto& from = static_cast<const CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.upgradeid_ = from._impl_.upgradeid_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.defindex_ = from._impl_.defindex_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.hours_ = from._impl_.hours_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.prestigetime_ = from._impl_.prestigetime_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin::CopyFrom(const CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin::IsInitialized() const {
  return true;
}

void CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin::InternalSwap(CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin, _impl_.prestigetime_)
      + sizeof(CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin::_impl_.prestigetime_)
      - PROTOBUF_FIELD_OFFSET(CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin, _impl_.upgradeid_)>(
          reinterpret_cast<char*>(&_impl_.upgradeid_),
          reinterpret_cast<char*>(&other->_impl_.upgradeid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cstrike15_5fgcmessages_2eproto_getter, &descriptor_table_cstrike15_5fgcmessages_2eproto_once,
      file_level_metadata_cstrike15_5fgcmessages_2eproto[130]);
}

// ===================================================================

class CMsgGCCStrike15_v2_Client2GCStreamUnlock::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCCStrike15_v2_Client2GCStreamUnlock>()._impl_._has_bits_);
  static void set_has_ticket(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_os(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgGCCStrike15_v2_Client2GCStreamUnlock::CMsgGCCStrike15_v2_Client2GCStreamUnlock(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgGCCStrike15_v2_Client2GCStreamUnlock)
}
CMsgGCCStrike15_v2_Client2GCStreamUnlock::CMsgGCCStrike15_v2_Client2GCStreamUnlock(const CMsgGCCStrike15_v2_Client2GCStreamUnlock& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgGCCStrike15_v2_Client2GCStreamUnlock* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.ticket_){}
    , decltype(_impl_.os_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.ticket_, &from._impl_.ticket_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.os_) -
    reinterpret_cast<char*>(&_impl_.ticket_)) + sizeof(_impl_.os_));
  // @@protoc_insertion_point(copy_constructor:CMsgGCCStrike15_v2_Client2GCStreamUnlock)
}

inline void CMsgGCCStrike15_v2_Client2GCStreamUnlock::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.ticket_){uint64_t{0u}}
    , decltype(_impl_.os_){0}
  };
}

CMsgGCCStrike15_v2_Client2GCStreamUnlock::~CMsgGCCStrike15_v2_Client2GCStreamUnlock() {
  // @@protoc_insertion_point(destructor:CMsgGCCStrike15_v2_Client2GCStreamUnlock)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgGCCStrike15_v2_Client2GCStreamUnlock::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgGCCStrike15_v2_Client2GCStreamUnlock::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgGCCStrike15_v2_Client2GCStreamUnlock::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCCStrike15_v2_Client2GCStreamUnlock)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.ticket_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.os_) -
        reinterpret_cast<char*>(&_impl_.ticket_)) + sizeof(_impl_.os_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCCStrike15_v2_Client2GCStreamUnlock::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 ticket = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_ticket(&has_bits);
          _impl_.ticket_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 os = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_os(&has_bits);
          _impl_.os_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgGCCStrike15_v2_Client2GCStreamUnlock::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCCStrike15_v2_Client2GCStreamUnlock)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint64 ticket = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_ticket(), target);
  }

  // optional int32 os = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_os(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCCStrike15_v2_Client2GCStreamUnlock)
  return target;
}

size_t CMsgGCCStrike15_v2_Client2GCStreamUnlock::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCCStrike15_v2_Client2GCStreamUnlock)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint64 ticket = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_ticket());
    }

    // optional int32 os = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_os());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgGCCStrike15_v2_Client2GCStreamUnlock::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgGCCStrike15_v2_Client2GCStreamUnlock::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgGCCStrike15_v2_Client2GCStreamUnlock::GetClassData() const { return &_class_data_; }


void CMsgGCCStrike15_v2_Client2GCStreamUnlock::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgGCCStrike15_v2_Client2GCStreamUnlock*>(&to_msg);
  auto& from = static_cast<const CMsgGCCStrike15_v2_Client2GCStreamUnlock&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCCStrike15_v2_Client2GCStreamUnlock)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.ticket_ = from._impl_.ticket_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.os_ = from._impl_.os_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgGCCStrike15_v2_Client2GCStreamUnlock::CopyFrom(const CMsgGCCStrike15_v2_Client2GCStreamUnlock& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCCStrike15_v2_Client2GCStreamUnlock)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCCStrike15_v2_Client2GCStreamUnlock::IsInitialized() const {
  return true;
}

void CMsgGCCStrike15_v2_Client2GCStreamUnlock::InternalSwap(CMsgGCCStrike15_v2_Client2GCStreamUnlock* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgGCCStrike15_v2_Client2GCStreamUnlock, _impl_.os_)
      + sizeof(CMsgGCCStrike15_v2_Client2GCStreamUnlock::_impl_.os_)
      - PROTOBUF_FIELD_OFFSET(CMsgGCCStrike15_v2_Client2GCStreamUnlock, _impl_.ticket_)>(
          reinterpret_cast<char*>(&_impl_.ticket_),
          reinterpret_cast<char*>(&other->_impl_.ticket_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCCStrike15_v2_Client2GCStreamUnlock::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cstrike15_5fgcmessages_2eproto_getter, &descriptor_table_cstrike15_5fgcmessages_2eproto_once,
      file_level_metadata_cstrike15_5fgcmessages_2eproto[131]);
}

// ===================================================================

class CMsgGCCStrike15_v2_ClientToGCRequestElevate::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCCStrike15_v2_ClientToGCRequestElevate>()._impl_._has_bits_);
  static void set_has_stage(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgGCCStrike15_v2_ClientToGCRequestElevate::CMsgGCCStrike15_v2_ClientToGCRequestElevate(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgGCCStrike15_v2_ClientToGCRequestElevate)
}
CMsgGCCStrike15_v2_ClientToGCRequestElevate::CMsgGCCStrike15_v2_ClientToGCRequestElevate(const CMsgGCCStrike15_v2_ClientToGCRequestElevate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgGCCStrike15_v2_ClientToGCRequestElevate* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.stage_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.stage_ = from._impl_.stage_;
  // @@protoc_insertion_point(copy_constructor:CMsgGCCStrike15_v2_ClientToGCRequestElevate)
}

inline void CMsgGCCStrike15_v2_ClientToGCRequestElevate::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.stage_){0u}
  };
}

CMsgGCCStrike15_v2_ClientToGCRequestElevate::~CMsgGCCStrike15_v2_ClientToGCRequestElevate() {
  // @@protoc_insertion_point(destructor:CMsgGCCStrike15_v2_ClientToGCRequestElevate)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgGCCStrike15_v2_ClientToGCRequestElevate::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgGCCStrike15_v2_ClientToGCRequestElevate::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgGCCStrike15_v2_ClientToGCRequestElevate::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCCStrike15_v2_ClientToGCRequestElevate)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.stage_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCCStrike15_v2_ClientToGCRequestElevate::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 stage = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_stage(&has_bits);
          _impl_.stage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgGCCStrike15_v2_ClientToGCRequestElevate::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCCStrike15_v2_ClientToGCRequestElevate)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 stage = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_stage(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCCStrike15_v2_ClientToGCRequestElevate)
  return target;
}

size_t CMsgGCCStrike15_v2_ClientToGCRequestElevate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCCStrike15_v2_ClientToGCRequestElevate)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 stage = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_stage());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgGCCStrike15_v2_ClientToGCRequestElevate::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgGCCStrike15_v2_ClientToGCRequestElevate::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgGCCStrike15_v2_ClientToGCRequestElevate::GetClassData() const { return &_class_data_; }


void CMsgGCCStrike15_v2_ClientToGCRequestElevate::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgGCCStrike15_v2_ClientToGCRequestElevate*>(&to_msg);
  auto& from = static_cast<const CMsgGCCStrike15_v2_ClientToGCRequestElevate&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCCStrike15_v2_ClientToGCRequestElevate)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_stage()) {
    _this->_internal_set_stage(from._internal_stage());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgGCCStrike15_v2_ClientToGCRequestElevate::CopyFrom(const CMsgGCCStrike15_v2_ClientToGCRequestElevate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCCStrike15_v2_ClientToGCRequestElevate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCCStrike15_v2_ClientToGCRequestElevate::IsInitialized() const {
  return true;
}

void CMsgGCCStrike15_v2_ClientToGCRequestElevate::InternalSwap(CMsgGCCStrike15_v2_ClientToGCRequestElevate* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.stage_, other->_impl_.stage_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCCStrike15_v2_ClientToGCRequestElevate::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cstrike15_5fgcmessages_2eproto_getter, &descriptor_table_cstrike15_5fgcmessages_2eproto_once,
      file_level_metadata_cstrike15_5fgcmessages_2eproto[132]);
}

// ===================================================================

class CMsgGCCStrike15_v2_ClientToGCChat::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCCStrike15_v2_ClientToGCChat>()._impl_._has_bits_);
  static void set_has_match_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_text(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgGCCStrike15_v2_ClientToGCChat::CMsgGCCStrike15_v2_ClientToGCChat(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgGCCStrike15_v2_ClientToGCChat)
}
CMsgGCCStrike15_v2_ClientToGCChat::CMsgGCCStrike15_v2_ClientToGCChat(const CMsgGCCStrike15_v2_ClientToGCChat& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgGCCStrike15_v2_ClientToGCChat* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.text_){}
    , decltype(_impl_.match_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.text_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.text_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_text()) {
    _this->_impl_.text_.Set(from._internal_text(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.match_id_ = from._impl_.match_id_;
  // @@protoc_insertion_point(copy_constructor:CMsgGCCStrike15_v2_ClientToGCChat)
}

inline void CMsgGCCStrike15_v2_ClientToGCChat::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.text_){}
    , decltype(_impl_.match_id_){uint64_t{0u}}
  };
  _impl_.text_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.text_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CMsgGCCStrike15_v2_ClientToGCChat::~CMsgGCCStrike15_v2_ClientToGCChat() {
  // @@protoc_insertion_point(destructor:CMsgGCCStrike15_v2_ClientToGCChat)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgGCCStrike15_v2_ClientToGCChat::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.text_.Destroy();
}

void CMsgGCCStrike15_v2_ClientToGCChat::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgGCCStrike15_v2_ClientToGCChat::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCCStrike15_v2_ClientToGCChat)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.text_.ClearNonDefaultToEmpty();
  }
  _impl_.match_id_ = uint64_t{0u};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCCStrike15_v2_ClientToGCChat::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 match_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_match_id(&has_bits);
          _impl_.match_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string text = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_text();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CMsgGCCStrike15_v2_ClientToGCChat.text");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgGCCStrike15_v2_ClientToGCChat::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCCStrike15_v2_ClientToGCChat)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint64 match_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_match_id(), target);
  }

  // optional string text = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_text().data(), static_cast<int>(this->_internal_text().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgGCCStrike15_v2_ClientToGCChat.text");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_text(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCCStrike15_v2_ClientToGCChat)
  return target;
}

size_t CMsgGCCStrike15_v2_ClientToGCChat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCCStrike15_v2_ClientToGCChat)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string text = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_text());
    }

    // optional uint64 match_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_match_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgGCCStrike15_v2_ClientToGCChat::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgGCCStrike15_v2_ClientToGCChat::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgGCCStrike15_v2_ClientToGCChat::GetClassData() const { return &_class_data_; }


void CMsgGCCStrike15_v2_ClientToGCChat::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgGCCStrike15_v2_ClientToGCChat*>(&to_msg);
  auto& from = static_cast<const CMsgGCCStrike15_v2_ClientToGCChat&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCCStrike15_v2_ClientToGCChat)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_text(from._internal_text());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.match_id_ = from._impl_.match_id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgGCCStrike15_v2_ClientToGCChat::CopyFrom(const CMsgGCCStrike15_v2_ClientToGCChat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCCStrike15_v2_ClientToGCChat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCCStrike15_v2_ClientToGCChat::IsInitialized() const {
  return true;
}

void CMsgGCCStrike15_v2_ClientToGCChat::InternalSwap(CMsgGCCStrike15_v2_ClientToGCChat* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.text_, lhs_arena,
      &other->_impl_.text_, rhs_arena
  );
  swap(_impl_.match_id_, other->_impl_.match_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCCStrike15_v2_ClientToGCChat::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cstrike15_5fgcmessages_2eproto_getter, &descriptor_table_cstrike15_5fgcmessages_2eproto_once,
      file_level_metadata_cstrike15_5fgcmessages_2eproto[133]);
}

// ===================================================================

class CMsgGCCStrike15_v2_GCToClientChat::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCCStrike15_v2_GCToClientChat>()._impl_._has_bits_);
  static void set_has_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_text(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgGCCStrike15_v2_GCToClientChat::CMsgGCCStrike15_v2_GCToClientChat(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgGCCStrike15_v2_GCToClientChat)
}
CMsgGCCStrike15_v2_GCToClientChat::CMsgGCCStrike15_v2_GCToClientChat(const CMsgGCCStrike15_v2_GCToClientChat& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgGCCStrike15_v2_GCToClientChat* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.text_){}
    , decltype(_impl_.account_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.text_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.text_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_text()) {
    _this->_impl_.text_.Set(from._internal_text(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.account_id_ = from._impl_.account_id_;
  // @@protoc_insertion_point(copy_constructor:CMsgGCCStrike15_v2_GCToClientChat)
}

inline void CMsgGCCStrike15_v2_GCToClientChat::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.text_){}
    , decltype(_impl_.account_id_){0u}
  };
  _impl_.text_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.text_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CMsgGCCStrike15_v2_GCToClientChat::~CMsgGCCStrike15_v2_GCToClientChat() {
  // @@protoc_insertion_point(destructor:CMsgGCCStrike15_v2_GCToClientChat)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgGCCStrike15_v2_GCToClientChat::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.text_.Destroy();
}

void CMsgGCCStrike15_v2_GCToClientChat::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgGCCStrike15_v2_GCToClientChat::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCCStrike15_v2_GCToClientChat)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.text_.ClearNonDefaultToEmpty();
  }
  _impl_.account_id_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCCStrike15_v2_GCToClientChat::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 account_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_account_id(&has_bits);
          _impl_.account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string text = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_text();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CMsgGCCStrike15_v2_GCToClientChat.text");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgGCCStrike15_v2_GCToClientChat::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCCStrike15_v2_GCToClientChat)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_account_id(), target);
  }

  // optional string text = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_text().data(), static_cast<int>(this->_internal_text().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgGCCStrike15_v2_GCToClientChat.text");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_text(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCCStrike15_v2_GCToClientChat)
  return target;
}

size_t CMsgGCCStrike15_v2_GCToClientChat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCCStrike15_v2_GCToClientChat)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string text = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_text());
    }

    // optional uint32 account_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_account_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgGCCStrike15_v2_GCToClientChat::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgGCCStrike15_v2_GCToClientChat::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgGCCStrike15_v2_GCToClientChat::GetClassData() const { return &_class_data_; }


void CMsgGCCStrike15_v2_GCToClientChat::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgGCCStrike15_v2_GCToClientChat*>(&to_msg);
  auto& from = static_cast<const CMsgGCCStrike15_v2_GCToClientChat&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCCStrike15_v2_GCToClientChat)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_text(from._internal_text());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.account_id_ = from._impl_.account_id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgGCCStrike15_v2_GCToClientChat::CopyFrom(const CMsgGCCStrike15_v2_GCToClientChat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCCStrike15_v2_GCToClientChat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCCStrike15_v2_GCToClientChat::IsInitialized() const {
  return true;
}

void CMsgGCCStrike15_v2_GCToClientChat::InternalSwap(CMsgGCCStrike15_v2_GCToClientChat* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.text_, lhs_arena,
      &other->_impl_.text_, rhs_arena
  );
  swap(_impl_.account_id_, other->_impl_.account_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCCStrike15_v2_GCToClientChat::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cstrike15_5fgcmessages_2eproto_getter, &descriptor_table_cstrike15_5fgcmessages_2eproto_once,
      file_level_metadata_cstrike15_5fgcmessages_2eproto[134]);
}

// ===================================================================

class CMsgGCCStrike15_v2_ClientAuthKeyCode::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCCStrike15_v2_ClientAuthKeyCode>()._impl_._has_bits_);
  static void set_has_eventid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_code(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgGCCStrike15_v2_ClientAuthKeyCode::CMsgGCCStrike15_v2_ClientAuthKeyCode(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgGCCStrike15_v2_ClientAuthKeyCode)
}
CMsgGCCStrike15_v2_ClientAuthKeyCode::CMsgGCCStrike15_v2_ClientAuthKeyCode(const CMsgGCCStrike15_v2_ClientAuthKeyCode& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgGCCStrike15_v2_ClientAuthKeyCode* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.code_){}
    , decltype(_impl_.eventid_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.code_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.code_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_code()) {
    _this->_impl_.code_.Set(from._internal_code(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.eventid_ = from._impl_.eventid_;
  // @@protoc_insertion_point(copy_constructor:CMsgGCCStrike15_v2_ClientAuthKeyCode)
}

inline void CMsgGCCStrike15_v2_ClientAuthKeyCode::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.code_){}
    , decltype(_impl_.eventid_){0u}
  };
  _impl_.code_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.code_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CMsgGCCStrike15_v2_ClientAuthKeyCode::~CMsgGCCStrike15_v2_ClientAuthKeyCode() {
  // @@protoc_insertion_point(destructor:CMsgGCCStrike15_v2_ClientAuthKeyCode)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgGCCStrike15_v2_ClientAuthKeyCode::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.code_.Destroy();
}

void CMsgGCCStrike15_v2_ClientAuthKeyCode::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgGCCStrike15_v2_ClientAuthKeyCode::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCCStrike15_v2_ClientAuthKeyCode)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.code_.ClearNonDefaultToEmpty();
  }
  _impl_.eventid_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCCStrike15_v2_ClientAuthKeyCode::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 eventid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_eventid(&has_bits);
          _impl_.eventid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string code = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_code();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CMsgGCCStrike15_v2_ClientAuthKeyCode.code");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgGCCStrike15_v2_ClientAuthKeyCode::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCCStrike15_v2_ClientAuthKeyCode)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 eventid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_eventid(), target);
  }

  // optional string code = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_code().data(), static_cast<int>(this->_internal_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgGCCStrike15_v2_ClientAuthKeyCode.code");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_code(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCCStrike15_v2_ClientAuthKeyCode)
  return target;
}

size_t CMsgGCCStrike15_v2_ClientAuthKeyCode::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCCStrike15_v2_ClientAuthKeyCode)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string code = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_code());
    }

    // optional uint32 eventid = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_eventid());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgGCCStrike15_v2_ClientAuthKeyCode::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgGCCStrike15_v2_ClientAuthKeyCode::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgGCCStrike15_v2_ClientAuthKeyCode::GetClassData() const { return &_class_data_; }


void CMsgGCCStrike15_v2_ClientAuthKeyCode::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgGCCStrike15_v2_ClientAuthKeyCode*>(&to_msg);
  auto& from = static_cast<const CMsgGCCStrike15_v2_ClientAuthKeyCode&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCCStrike15_v2_ClientAuthKeyCode)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_code(from._internal_code());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.eventid_ = from._impl_.eventid_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgGCCStrike15_v2_ClientAuthKeyCode::CopyFrom(const CMsgGCCStrike15_v2_ClientAuthKeyCode& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCCStrike15_v2_ClientAuthKeyCode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCCStrike15_v2_ClientAuthKeyCode::IsInitialized() const {
  return true;
}

void CMsgGCCStrike15_v2_ClientAuthKeyCode::InternalSwap(CMsgGCCStrike15_v2_ClientAuthKeyCode* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.code_, lhs_arena,
      &other->_impl_.code_, rhs_arena
  );
  swap(_impl_.eventid_, other->_impl_.eventid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCCStrike15_v2_ClientAuthKeyCode::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cstrike15_5fgcmessages_2eproto_getter, &descriptor_table_cstrike15_5fgcmessages_2eproto_once,
      file_level_metadata_cstrike15_5fgcmessages_2eproto[135]);
}

// ===================================================================

class CMsgGCCStrike15_GotvSyncPacket::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCCStrike15_GotvSyncPacket>()._impl_._has_bits_);
  static const ::CEngineGotvSyncPacket& data(const CMsgGCCStrike15_GotvSyncPacket* msg);
  static void set_has_data(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::CEngineGotvSyncPacket&
CMsgGCCStrike15_GotvSyncPacket::_Internal::data(const CMsgGCCStrike15_GotvSyncPacket* msg) {
  return *msg->_impl_.data_;
}
void CMsgGCCStrike15_GotvSyncPacket::clear_data() {
  if (_impl_.data_ != nullptr) _impl_.data_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
CMsgGCCStrike15_GotvSyncPacket::CMsgGCCStrike15_GotvSyncPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgGCCStrike15_GotvSyncPacket)
}
CMsgGCCStrike15_GotvSyncPacket::CMsgGCCStrike15_GotvSyncPacket(const CMsgGCCStrike15_GotvSyncPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgGCCStrike15_GotvSyncPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.data_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_data()) {
    _this->_impl_.data_ = new ::CEngineGotvSyncPacket(*from._impl_.data_);
  }
  // @@protoc_insertion_point(copy_constructor:CMsgGCCStrike15_GotvSyncPacket)
}

inline void CMsgGCCStrike15_GotvSyncPacket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.data_){nullptr}
  };
}

CMsgGCCStrike15_GotvSyncPacket::~CMsgGCCStrike15_GotvSyncPacket() {
  // @@protoc_insertion_point(destructor:CMsgGCCStrike15_GotvSyncPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgGCCStrike15_GotvSyncPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.data_;
}

void CMsgGCCStrike15_GotvSyncPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgGCCStrike15_GotvSyncPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCCStrike15_GotvSyncPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.data_ != nullptr);
    _impl_.data_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCCStrike15_GotvSyncPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .CEngineGotvSyncPacket data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_data(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgGCCStrike15_GotvSyncPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCCStrike15_GotvSyncPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .CEngineGotvSyncPacket data = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::data(this),
        _Internal::data(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCCStrike15_GotvSyncPacket)
  return target;
}

size_t CMsgGCCStrike15_GotvSyncPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCCStrike15_GotvSyncPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .CEngineGotvSyncPacket data = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.data_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgGCCStrike15_GotvSyncPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgGCCStrike15_GotvSyncPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgGCCStrike15_GotvSyncPacket::GetClassData() const { return &_class_data_; }


void CMsgGCCStrike15_GotvSyncPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgGCCStrike15_GotvSyncPacket*>(&to_msg);
  auto& from = static_cast<const CMsgGCCStrike15_GotvSyncPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCCStrike15_GotvSyncPacket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_data()) {
    _this->_internal_mutable_data()->::CEngineGotvSyncPacket::MergeFrom(
        from._internal_data());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgGCCStrike15_GotvSyncPacket::CopyFrom(const CMsgGCCStrike15_GotvSyncPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCCStrike15_GotvSyncPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCCStrike15_GotvSyncPacket::IsInitialized() const {
  return true;
}

void CMsgGCCStrike15_GotvSyncPacket::InternalSwap(CMsgGCCStrike15_GotvSyncPacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.data_, other->_impl_.data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCCStrike15_GotvSyncPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cstrike15_5fgcmessages_2eproto_getter, &descriptor_table_cstrike15_5fgcmessages_2eproto_once,
      file_level_metadata_cstrike15_5fgcmessages_2eproto[136]);
}

// ===================================================================

class PlayerDecalDigitalSignature::_Internal {
 public:
  using HasBits = decltype(std::declval<PlayerDecalDigitalSignature>()._impl_._has_bits_);
  static void set_has_signature(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_accountid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_rtime(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_tx_defidx(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_entindex(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_hitbox(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_creationtime(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_equipslot(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_trace_id(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_tint_id(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
};

PlayerDecalDigitalSignature::PlayerDecalDigitalSignature(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:PlayerDecalDigitalSignature)
}
PlayerDecalDigitalSignature::PlayerDecalDigitalSignature(const PlayerDecalDigitalSignature& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PlayerDecalDigitalSignature* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.endpos_){from._impl_.endpos_}
    , decltype(_impl_.startpos_){from._impl_.startpos_}
    , decltype(_impl_.left_){from._impl_.left_}
    , decltype(_impl_.normal_){from._impl_.normal_}
    , decltype(_impl_.signature_){}
    , decltype(_impl_.accountid_){}
    , decltype(_impl_.rtime_){}
    , decltype(_impl_.tx_defidx_){}
    , decltype(_impl_.entindex_){}
    , decltype(_impl_.hitbox_){}
    , decltype(_impl_.creationtime_){}
    , decltype(_impl_.equipslot_){}
    , decltype(_impl_.trace_id_){}
    , decltype(_impl_.tint_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.signature_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.signature_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_signature()) {
    _this->_impl_.signature_.Set(from._internal_signature(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.accountid_, &from._impl_.accountid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.tint_id_) -
    reinterpret_cast<char*>(&_impl_.accountid_)) + sizeof(_impl_.tint_id_));
  // @@protoc_insertion_point(copy_constructor:PlayerDecalDigitalSignature)
}

inline void PlayerDecalDigitalSignature::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.endpos_){arena}
    , decltype(_impl_.startpos_){arena}
    , decltype(_impl_.left_){arena}
    , decltype(_impl_.normal_){arena}
    , decltype(_impl_.signature_){}
    , decltype(_impl_.accountid_){0u}
    , decltype(_impl_.rtime_){0u}
    , decltype(_impl_.tx_defidx_){0u}
    , decltype(_impl_.entindex_){0}
    , decltype(_impl_.hitbox_){0u}
    , decltype(_impl_.creationtime_){0}
    , decltype(_impl_.equipslot_){0u}
    , decltype(_impl_.trace_id_){0u}
    , decltype(_impl_.tint_id_){0u}
  };
  _impl_.signature_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.signature_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PlayerDecalDigitalSignature::~PlayerDecalDigitalSignature() {
  // @@protoc_insertion_point(destructor:PlayerDecalDigitalSignature)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PlayerDecalDigitalSignature::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.endpos_.~RepeatedField();
  _impl_.startpos_.~RepeatedField();
  _impl_.left_.~RepeatedField();
  _impl_.normal_.~RepeatedField();
  _impl_.signature_.Destroy();
}

void PlayerDecalDigitalSignature::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PlayerDecalDigitalSignature::Clear() {
// @@protoc_insertion_point(message_clear_start:PlayerDecalDigitalSignature)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.endpos_.Clear();
  _impl_.startpos_.Clear();
  _impl_.left_.Clear();
  _impl_.normal_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.signature_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&_impl_.accountid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.equipslot_) -
        reinterpret_cast<char*>(&_impl_.accountid_)) + sizeof(_impl_.equipslot_));
  }
  if (cached_has_bits & 0x00000300u) {
    ::memset(&_impl_.trace_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.tint_id_) -
        reinterpret_cast<char*>(&_impl_.trace_id_)) + sizeof(_impl_.tint_id_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PlayerDecalDigitalSignature::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bytes signature = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_signature();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 accountid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_accountid(&has_bits);
          _impl_.accountid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 rtime = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_rtime(&has_bits);
          _impl_.rtime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated float endpos = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_endpos(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
            ptr += sizeof(float);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<37>(ptr));
        } else if (static_cast<uint8_t>(tag) == 34) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_endpos(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated float startpos = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 45)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_startpos(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
            ptr += sizeof(float);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<45>(ptr));
        } else if (static_cast<uint8_t>(tag) == 42) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_startpos(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated float left = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 53)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_left(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
            ptr += sizeof(float);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<53>(ptr));
        } else if (static_cast<uint8_t>(tag) == 50) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_left(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 tx_defidx = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_tx_defidx(&has_bits);
          _impl_.tx_defidx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 entindex = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_entindex(&has_bits);
          _impl_.entindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 hitbox = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_hitbox(&has_bits);
          _impl_.hitbox_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float creationtime = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 85)) {
          _Internal::set_has_creationtime(&has_bits);
          _impl_.creationtime_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 equipslot = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _Internal::set_has_equipslot(&has_bits);
          _impl_.equipslot_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 trace_id = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _Internal::set_has_trace_id(&has_bits);
          _impl_.trace_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated float normal = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 109)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_normal(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
            ptr += sizeof(float);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<109>(ptr));
        } else if (static_cast<uint8_t>(tag) == 106) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_normal(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 tint_id = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          _Internal::set_has_tint_id(&has_bits);
          _impl_.tint_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PlayerDecalDigitalSignature::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlayerDecalDigitalSignature)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bytes signature = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_signature(), target);
  }

  // optional uint32 accountid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_accountid(), target);
  }

  // optional uint32 rtime = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_rtime(), target);
  }

  // repeated float endpos = 4;
  for (int i = 0, n = this->_internal_endpos_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(4, this->_internal_endpos(i), target);
  }

  // repeated float startpos = 5;
  for (int i = 0, n = this->_internal_startpos_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(5, this->_internal_startpos(i), target);
  }

  // repeated float left = 6;
  for (int i = 0, n = this->_internal_left_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(6, this->_internal_left(i), target);
  }

  // optional uint32 tx_defidx = 7;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(7, this->_internal_tx_defidx(), target);
  }

  // optional int32 entindex = 8;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(8, this->_internal_entindex(), target);
  }

  // optional uint32 hitbox = 9;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(9, this->_internal_hitbox(), target);
  }

  // optional float creationtime = 10;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(10, this->_internal_creationtime(), target);
  }

  // optional uint32 equipslot = 11;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(11, this->_internal_equipslot(), target);
  }

  // optional uint32 trace_id = 12;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(12, this->_internal_trace_id(), target);
  }

  // repeated float normal = 13;
  for (int i = 0, n = this->_internal_normal_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(13, this->_internal_normal(i), target);
  }

  // optional uint32 tint_id = 14;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(14, this->_internal_tint_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlayerDecalDigitalSignature)
  return target;
}

size_t PlayerDecalDigitalSignature::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlayerDecalDigitalSignature)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float endpos = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_endpos_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_endpos_size());
    total_size += data_size;
  }

  // repeated float startpos = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_startpos_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_startpos_size());
    total_size += data_size;
  }

  // repeated float left = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_left_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_left_size());
    total_size += data_size;
  }

  // repeated float normal = 13;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_normal_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_normal_size());
    total_size += data_size;
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional bytes signature = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_signature());
    }

    // optional uint32 accountid = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_accountid());
    }

    // optional uint32 rtime = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_rtime());
    }

    // optional uint32 tx_defidx = 7;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_tx_defidx());
    }

    // optional int32 entindex = 8;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_entindex());
    }

    // optional uint32 hitbox = 9;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_hitbox());
    }

    // optional float creationtime = 10;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 4;
    }

    // optional uint32 equipslot = 11;
    if (cached_has_bits & 0x00000080u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_equipslot());
    }

  }
  if (cached_has_bits & 0x00000300u) {
    // optional uint32 trace_id = 12;
    if (cached_has_bits & 0x00000100u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_trace_id());
    }

    // optional uint32 tint_id = 14;
    if (cached_has_bits & 0x00000200u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_tint_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PlayerDecalDigitalSignature::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PlayerDecalDigitalSignature::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PlayerDecalDigitalSignature::GetClassData() const { return &_class_data_; }


void PlayerDecalDigitalSignature::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PlayerDecalDigitalSignature*>(&to_msg);
  auto& from = static_cast<const PlayerDecalDigitalSignature&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:PlayerDecalDigitalSignature)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.endpos_.MergeFrom(from._impl_.endpos_);
  _this->_impl_.startpos_.MergeFrom(from._impl_.startpos_);
  _this->_impl_.left_.MergeFrom(from._impl_.left_);
  _this->_impl_.normal_.MergeFrom(from._impl_.normal_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_signature(from._internal_signature());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.accountid_ = from._impl_.accountid_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.rtime_ = from._impl_.rtime_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.tx_defidx_ = from._impl_.tx_defidx_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.entindex_ = from._impl_.entindex_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.hitbox_ = from._impl_.hitbox_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.creationtime_ = from._impl_.creationtime_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.equipslot_ = from._impl_.equipslot_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.trace_id_ = from._impl_.trace_id_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.tint_id_ = from._impl_.tint_id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PlayerDecalDigitalSignature::CopyFrom(const PlayerDecalDigitalSignature& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlayerDecalDigitalSignature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerDecalDigitalSignature::IsInitialized() const {
  return true;
}

void PlayerDecalDigitalSignature::InternalSwap(PlayerDecalDigitalSignature* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.endpos_.InternalSwap(&other->_impl_.endpos_);
  _impl_.startpos_.InternalSwap(&other->_impl_.startpos_);
  _impl_.left_.InternalSwap(&other->_impl_.left_);
  _impl_.normal_.InternalSwap(&other->_impl_.normal_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.signature_, lhs_arena,
      &other->_impl_.signature_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PlayerDecalDigitalSignature, _impl_.tint_id_)
      + sizeof(PlayerDecalDigitalSignature::_impl_.tint_id_)
      - PROTOBUF_FIELD_OFFSET(PlayerDecalDigitalSignature, _impl_.accountid_)>(
          reinterpret_cast<char*>(&_impl_.accountid_),
          reinterpret_cast<char*>(&other->_impl_.accountid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PlayerDecalDigitalSignature::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cstrike15_5fgcmessages_2eproto_getter, &descriptor_table_cstrike15_5fgcmessages_2eproto_once,
      file_level_metadata_cstrike15_5fgcmessages_2eproto[137]);
}

// ===================================================================

class CMsgGCCStrike15_v2_ClientPlayerDecalSign::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCCStrike15_v2_ClientPlayerDecalSign>()._impl_._has_bits_);
  static const ::PlayerDecalDigitalSignature& data(const CMsgGCCStrike15_v2_ClientPlayerDecalSign* msg);
  static void set_has_data(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_itemid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::PlayerDecalDigitalSignature&
CMsgGCCStrike15_v2_ClientPlayerDecalSign::_Internal::data(const CMsgGCCStrike15_v2_ClientPlayerDecalSign* msg) {
  return *msg->_impl_.data_;
}
CMsgGCCStrike15_v2_ClientPlayerDecalSign::CMsgGCCStrike15_v2_ClientPlayerDecalSign(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgGCCStrike15_v2_ClientPlayerDecalSign)
}
CMsgGCCStrike15_v2_ClientPlayerDecalSign::CMsgGCCStrike15_v2_ClientPlayerDecalSign(const CMsgGCCStrike15_v2_ClientPlayerDecalSign& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgGCCStrike15_v2_ClientPlayerDecalSign* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.data_){nullptr}
    , decltype(_impl_.itemid_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_data()) {
    _this->_impl_.data_ = new ::PlayerDecalDigitalSignature(*from._impl_.data_);
  }
  _this->_impl_.itemid_ = from._impl_.itemid_;
  // @@protoc_insertion_point(copy_constructor:CMsgGCCStrike15_v2_ClientPlayerDecalSign)
}

inline void CMsgGCCStrike15_v2_ClientPlayerDecalSign::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.data_){nullptr}
    , decltype(_impl_.itemid_){uint64_t{0u}}
  };
}

CMsgGCCStrike15_v2_ClientPlayerDecalSign::~CMsgGCCStrike15_v2_ClientPlayerDecalSign() {
  // @@protoc_insertion_point(destructor:CMsgGCCStrike15_v2_ClientPlayerDecalSign)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgGCCStrike15_v2_ClientPlayerDecalSign::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.data_;
}

void CMsgGCCStrike15_v2_ClientPlayerDecalSign::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgGCCStrike15_v2_ClientPlayerDecalSign::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCCStrike15_v2_ClientPlayerDecalSign)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.data_ != nullptr);
    _impl_.data_->Clear();
  }
  _impl_.itemid_ = uint64_t{0u};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCCStrike15_v2_ClientPlayerDecalSign::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .PlayerDecalDigitalSignature data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_data(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 itemid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_itemid(&has_bits);
          _impl_.itemid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgGCCStrike15_v2_ClientPlayerDecalSign::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCCStrike15_v2_ClientPlayerDecalSign)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .PlayerDecalDigitalSignature data = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::data(this),
        _Internal::data(this).GetCachedSize(), target, stream);
  }

  // optional uint64 itemid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_itemid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCCStrike15_v2_ClientPlayerDecalSign)
  return target;
}

size_t CMsgGCCStrike15_v2_ClientPlayerDecalSign::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCCStrike15_v2_ClientPlayerDecalSign)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .PlayerDecalDigitalSignature data = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.data_);
    }

    // optional uint64 itemid = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_itemid());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgGCCStrike15_v2_ClientPlayerDecalSign::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgGCCStrike15_v2_ClientPlayerDecalSign::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgGCCStrike15_v2_ClientPlayerDecalSign::GetClassData() const { return &_class_data_; }


void CMsgGCCStrike15_v2_ClientPlayerDecalSign::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgGCCStrike15_v2_ClientPlayerDecalSign*>(&to_msg);
  auto& from = static_cast<const CMsgGCCStrike15_v2_ClientPlayerDecalSign&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCCStrike15_v2_ClientPlayerDecalSign)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_data()->::PlayerDecalDigitalSignature::MergeFrom(
          from._internal_data());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.itemid_ = from._impl_.itemid_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgGCCStrike15_v2_ClientPlayerDecalSign::CopyFrom(const CMsgGCCStrike15_v2_ClientPlayerDecalSign& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCCStrike15_v2_ClientPlayerDecalSign)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCCStrike15_v2_ClientPlayerDecalSign::IsInitialized() const {
  return true;
}

void CMsgGCCStrike15_v2_ClientPlayerDecalSign::InternalSwap(CMsgGCCStrike15_v2_ClientPlayerDecalSign* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgGCCStrike15_v2_ClientPlayerDecalSign, _impl_.itemid_)
      + sizeof(CMsgGCCStrike15_v2_ClientPlayerDecalSign::_impl_.itemid_)
      - PROTOBUF_FIELD_OFFSET(CMsgGCCStrike15_v2_ClientPlayerDecalSign, _impl_.data_)>(
          reinterpret_cast<char*>(&_impl_.data_),
          reinterpret_cast<char*>(&other->_impl_.data_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCCStrike15_v2_ClientPlayerDecalSign::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cstrike15_5fgcmessages_2eproto_getter, &descriptor_table_cstrike15_5fgcmessages_2eproto_once,
      file_level_metadata_cstrike15_5fgcmessages_2eproto[138]);
}

// ===================================================================

class CMsgGCCStrike15_v2_BetaEnrollment::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCCStrike15_v2_BetaEnrollment>()._impl_._has_bits_);
  static void set_has_eresult(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgGCCStrike15_v2_BetaEnrollment::CMsgGCCStrike15_v2_BetaEnrollment(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgGCCStrike15_v2_BetaEnrollment)
}
CMsgGCCStrike15_v2_BetaEnrollment::CMsgGCCStrike15_v2_BetaEnrollment(const CMsgGCCStrike15_v2_BetaEnrollment& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgGCCStrike15_v2_BetaEnrollment* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.eresult_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.eresult_ = from._impl_.eresult_;
  // @@protoc_insertion_point(copy_constructor:CMsgGCCStrike15_v2_BetaEnrollment)
}

inline void CMsgGCCStrike15_v2_BetaEnrollment::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.eresult_){0u}
  };
}

CMsgGCCStrike15_v2_BetaEnrollment::~CMsgGCCStrike15_v2_BetaEnrollment() {
  // @@protoc_insertion_point(destructor:CMsgGCCStrike15_v2_BetaEnrollment)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgGCCStrike15_v2_BetaEnrollment::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgGCCStrike15_v2_BetaEnrollment::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgGCCStrike15_v2_BetaEnrollment::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCCStrike15_v2_BetaEnrollment)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.eresult_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCCStrike15_v2_BetaEnrollment::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 eresult = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_eresult(&has_bits);
          _impl_.eresult_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgGCCStrike15_v2_BetaEnrollment::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCCStrike15_v2_BetaEnrollment)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 eresult = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_eresult(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCCStrike15_v2_BetaEnrollment)
  return target;
}

size_t CMsgGCCStrike15_v2_BetaEnrollment::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCCStrike15_v2_BetaEnrollment)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 eresult = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_eresult());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgGCCStrike15_v2_BetaEnrollment::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgGCCStrike15_v2_BetaEnrollment::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgGCCStrike15_v2_BetaEnrollment::GetClassData() const { return &_class_data_; }


void CMsgGCCStrike15_v2_BetaEnrollment::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgGCCStrike15_v2_BetaEnrollment*>(&to_msg);
  auto& from = static_cast<const CMsgGCCStrike15_v2_BetaEnrollment&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCCStrike15_v2_BetaEnrollment)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_eresult()) {
    _this->_internal_set_eresult(from._internal_eresult());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgGCCStrike15_v2_BetaEnrollment::CopyFrom(const CMsgGCCStrike15_v2_BetaEnrollment& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCCStrike15_v2_BetaEnrollment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCCStrike15_v2_BetaEnrollment::IsInitialized() const {
  return true;
}

void CMsgGCCStrike15_v2_BetaEnrollment::InternalSwap(CMsgGCCStrike15_v2_BetaEnrollment* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.eresult_, other->_impl_.eresult_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCCStrike15_v2_BetaEnrollment::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cstrike15_5fgcmessages_2eproto_getter, &descriptor_table_cstrike15_5fgcmessages_2eproto_once,
      file_level_metadata_cstrike15_5fgcmessages_2eproto[139]);
}

// ===================================================================

class CMsgGCCStrike15_v2_ClientLogonFatalError::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCCStrike15_v2_ClientLogonFatalError>()._impl_._has_bits_);
  static void set_has_errorcode(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_message(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_country(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgGCCStrike15_v2_ClientLogonFatalError::CMsgGCCStrike15_v2_ClientLogonFatalError(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgGCCStrike15_v2_ClientLogonFatalError)
}
CMsgGCCStrike15_v2_ClientLogonFatalError::CMsgGCCStrike15_v2_ClientLogonFatalError(const CMsgGCCStrike15_v2_ClientLogonFatalError& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgGCCStrike15_v2_ClientLogonFatalError* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.message_){}
    , decltype(_impl_.country_){}
    , decltype(_impl_.errorcode_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_message()) {
    _this->_impl_.message_.Set(from._internal_message(), 
      _this->GetArenaForAllocation());
  }
  _impl_.country_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.country_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_country()) {
    _this->_impl_.country_.Set(from._internal_country(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.errorcode_ = from._impl_.errorcode_;
  // @@protoc_insertion_point(copy_constructor:CMsgGCCStrike15_v2_ClientLogonFatalError)
}

inline void CMsgGCCStrike15_v2_ClientLogonFatalError::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.message_){}
    , decltype(_impl_.country_){}
    , decltype(_impl_.errorcode_){0u}
  };
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.country_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.country_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CMsgGCCStrike15_v2_ClientLogonFatalError::~CMsgGCCStrike15_v2_ClientLogonFatalError() {
  // @@protoc_insertion_point(destructor:CMsgGCCStrike15_v2_ClientLogonFatalError)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgGCCStrike15_v2_ClientLogonFatalError::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.message_.Destroy();
  _impl_.country_.Destroy();
}

void CMsgGCCStrike15_v2_ClientLogonFatalError::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgGCCStrike15_v2_ClientLogonFatalError::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCCStrike15_v2_ClientLogonFatalError)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.message_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.country_.ClearNonDefaultToEmpty();
    }
  }
  _impl_.errorcode_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCCStrike15_v2_ClientLogonFatalError::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 errorcode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_errorcode(&has_bits);
          _impl_.errorcode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string message = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_message();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CMsgGCCStrike15_v2_ClientLogonFatalError.message");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string country = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_country();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CMsgGCCStrike15_v2_ClientLogonFatalError.country");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgGCCStrike15_v2_ClientLogonFatalError::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCCStrike15_v2_ClientLogonFatalError)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 errorcode = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_errorcode(), target);
  }

  // optional string message = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgGCCStrike15_v2_ClientLogonFatalError.message");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_message(), target);
  }

  // optional string country = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_country().data(), static_cast<int>(this->_internal_country().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgGCCStrike15_v2_ClientLogonFatalError.country");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_country(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCCStrike15_v2_ClientLogonFatalError)
  return target;
}

size_t CMsgGCCStrike15_v2_ClientLogonFatalError::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCCStrike15_v2_ClientLogonFatalError)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string message = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_message());
    }

    // optional string country = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_country());
    }

    // optional uint32 errorcode = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_errorcode());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgGCCStrike15_v2_ClientLogonFatalError::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgGCCStrike15_v2_ClientLogonFatalError::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgGCCStrike15_v2_ClientLogonFatalError::GetClassData() const { return &_class_data_; }


void CMsgGCCStrike15_v2_ClientLogonFatalError::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgGCCStrike15_v2_ClientLogonFatalError*>(&to_msg);
  auto& from = static_cast<const CMsgGCCStrike15_v2_ClientLogonFatalError&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCCStrike15_v2_ClientLogonFatalError)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_message(from._internal_message());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_country(from._internal_country());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.errorcode_ = from._impl_.errorcode_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgGCCStrike15_v2_ClientLogonFatalError::CopyFrom(const CMsgGCCStrike15_v2_ClientLogonFatalError& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCCStrike15_v2_ClientLogonFatalError)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCCStrike15_v2_ClientLogonFatalError::IsInitialized() const {
  return true;
}

void CMsgGCCStrike15_v2_ClientLogonFatalError::InternalSwap(CMsgGCCStrike15_v2_ClientLogonFatalError* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.message_, lhs_arena,
      &other->_impl_.message_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.country_, lhs_arena,
      &other->_impl_.country_, rhs_arena
  );
  swap(_impl_.errorcode_, other->_impl_.errorcode_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCCStrike15_v2_ClientLogonFatalError::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cstrike15_5fgcmessages_2eproto_getter, &descriptor_table_cstrike15_5fgcmessages_2eproto_once,
      file_level_metadata_cstrike15_5fgcmessages_2eproto[140]);
}

// ===================================================================

class CMsgGCCStrike15_v2_ClientPollState::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCCStrike15_v2_ClientPollState>()._impl_._has_bits_);
  static void set_has_pollid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgGCCStrike15_v2_ClientPollState::CMsgGCCStrike15_v2_ClientPollState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgGCCStrike15_v2_ClientPollState)
}
CMsgGCCStrike15_v2_ClientPollState::CMsgGCCStrike15_v2_ClientPollState(const CMsgGCCStrike15_v2_ClientPollState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgGCCStrike15_v2_ClientPollState* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.names_){from._impl_.names_}
    , decltype(_impl_.values_){from._impl_.values_}
    , decltype(_impl_.pollid_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.pollid_ = from._impl_.pollid_;
  // @@protoc_insertion_point(copy_constructor:CMsgGCCStrike15_v2_ClientPollState)
}

inline void CMsgGCCStrike15_v2_ClientPollState::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.names_){arena}
    , decltype(_impl_.values_){arena}
    , decltype(_impl_.pollid_){0u}
  };
}

CMsgGCCStrike15_v2_ClientPollState::~CMsgGCCStrike15_v2_ClientPollState() {
  // @@protoc_insertion_point(destructor:CMsgGCCStrike15_v2_ClientPollState)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgGCCStrike15_v2_ClientPollState::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.names_.~RepeatedPtrField();
  _impl_.values_.~RepeatedField();
}

void CMsgGCCStrike15_v2_ClientPollState::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgGCCStrike15_v2_ClientPollState::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCCStrike15_v2_ClientPollState)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.names_.Clear();
  _impl_.values_.Clear();
  _impl_.pollid_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCCStrike15_v2_ClientPollState::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 pollid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_pollid(&has_bits);
          _impl_.pollid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string names = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_names();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            #ifndef NDEBUG
            ::_pbi::VerifyUTF8(str, "CMsgGCCStrike15_v2_ClientPollState.names");
            #endif  // !NDEBUG
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated int32 values = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_values(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<24>(ptr));
        } else if (static_cast<uint8_t>(tag) == 26) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_values(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgGCCStrike15_v2_ClientPollState::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCCStrike15_v2_ClientPollState)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 pollid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_pollid(), target);
  }

  // repeated string names = 2;
  for (int i = 0, n = this->_internal_names_size(); i < n; i++) {
    const auto& s = this->_internal_names(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgGCCStrike15_v2_ClientPollState.names");
    target = stream->WriteString(2, s, target);
  }

  // repeated int32 values = 3;
  for (int i = 0, n = this->_internal_values_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_values(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCCStrike15_v2_ClientPollState)
  return target;
}

size_t CMsgGCCStrike15_v2_ClientPollState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCCStrike15_v2_ClientPollState)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string names = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.names_.size());
  for (int i = 0, n = _impl_.names_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.names_.Get(i));
  }

  // repeated int32 values = 3;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.values_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_values_size());
    total_size += data_size;
  }

  // optional uint32 pollid = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_pollid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgGCCStrike15_v2_ClientPollState::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgGCCStrike15_v2_ClientPollState::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgGCCStrike15_v2_ClientPollState::GetClassData() const { return &_class_data_; }


void CMsgGCCStrike15_v2_ClientPollState::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgGCCStrike15_v2_ClientPollState*>(&to_msg);
  auto& from = static_cast<const CMsgGCCStrike15_v2_ClientPollState&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCCStrike15_v2_ClientPollState)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.names_.MergeFrom(from._impl_.names_);
  _this->_impl_.values_.MergeFrom(from._impl_.values_);
  if (from._internal_has_pollid()) {
    _this->_internal_set_pollid(from._internal_pollid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgGCCStrike15_v2_ClientPollState::CopyFrom(const CMsgGCCStrike15_v2_ClientPollState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCCStrike15_v2_ClientPollState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCCStrike15_v2_ClientPollState::IsInitialized() const {
  return true;
}

void CMsgGCCStrike15_v2_ClientPollState::InternalSwap(CMsgGCCStrike15_v2_ClientPollState* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.names_.InternalSwap(&other->_impl_.names_);
  _impl_.values_.InternalSwap(&other->_impl_.values_);
  swap(_impl_.pollid_, other->_impl_.pollid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCCStrike15_v2_ClientPollState::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cstrike15_5fgcmessages_2eproto_getter, &descriptor_table_cstrike15_5fgcmessages_2eproto_once,
      file_level_metadata_cstrike15_5fgcmessages_2eproto[141]);
}

// ===================================================================

class CMsgGCCStrike15_v2_Party_Register::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCCStrike15_v2_Party_Register>()._impl_._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_ver(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_apr(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_ark(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_nby(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_grp(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_slots(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_launcher(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_game_type(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
};

CMsgGCCStrike15_v2_Party_Register::CMsgGCCStrike15_v2_Party_Register(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgGCCStrike15_v2_Party_Register)
}
CMsgGCCStrike15_v2_Party_Register::CMsgGCCStrike15_v2_Party_Register(const CMsgGCCStrike15_v2_Party_Register& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgGCCStrike15_v2_Party_Register* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.id_){}
    , decltype(_impl_.ver_){}
    , decltype(_impl_.apr_){}
    , decltype(_impl_.ark_){}
    , decltype(_impl_.nby_){}
    , decltype(_impl_.grp_){}
    , decltype(_impl_.slots_){}
    , decltype(_impl_.launcher_){}
    , decltype(_impl_.game_type_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.id_, &from._impl_.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.game_type_) -
    reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.game_type_));
  // @@protoc_insertion_point(copy_constructor:CMsgGCCStrike15_v2_Party_Register)
}

inline void CMsgGCCStrike15_v2_Party_Register::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.id_){0u}
    , decltype(_impl_.ver_){0u}
    , decltype(_impl_.apr_){0u}
    , decltype(_impl_.ark_){0u}
    , decltype(_impl_.nby_){0u}
    , decltype(_impl_.grp_){0u}
    , decltype(_impl_.slots_){0u}
    , decltype(_impl_.launcher_){0u}
    , decltype(_impl_.game_type_){0u}
  };
}

CMsgGCCStrike15_v2_Party_Register::~CMsgGCCStrike15_v2_Party_Register() {
  // @@protoc_insertion_point(destructor:CMsgGCCStrike15_v2_Party_Register)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgGCCStrike15_v2_Party_Register::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgGCCStrike15_v2_Party_Register::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgGCCStrike15_v2_Party_Register::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCCStrike15_v2_Party_Register)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&_impl_.id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.launcher_) -
        reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.launcher_));
  }
  _impl_.game_type_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCCStrike15_v2_Party_Register::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_id(&has_bits);
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 ver = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_ver(&has_bits);
          _impl_.ver_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 apr = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_apr(&has_bits);
          _impl_.apr_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 ark = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_ark(&has_bits);
          _impl_.ark_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 nby = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_nby(&has_bits);
          _impl_.nby_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 grp = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_grp(&has_bits);
          _impl_.grp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 slots = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_slots(&has_bits);
          _impl_.slots_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 launcher = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_launcher(&has_bits);
          _impl_.launcher_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 game_type = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_game_type(&has_bits);
          _impl_.game_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgGCCStrike15_v2_Party_Register::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCCStrike15_v2_Party_Register)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  // optional uint32 ver = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_ver(), target);
  }

  // optional uint32 apr = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_apr(), target);
  }

  // optional uint32 ark = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_ark(), target);
  }

  // optional uint32 nby = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_nby(), target);
  }

  // optional uint32 grp = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_grp(), target);
  }

  // optional uint32 slots = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(7, this->_internal_slots(), target);
  }

  // optional uint32 launcher = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(8, this->_internal_launcher(), target);
  }

  // optional uint32 game_type = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(9, this->_internal_game_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCCStrike15_v2_Party_Register)
  return target;
}

size_t CMsgGCCStrike15_v2_Party_Register::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCCStrike15_v2_Party_Register)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional uint32 id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_id());
    }

    // optional uint32 ver = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_ver());
    }

    // optional uint32 apr = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_apr());
    }

    // optional uint32 ark = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_ark());
    }

    // optional uint32 nby = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_nby());
    }

    // optional uint32 grp = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_grp());
    }

    // optional uint32 slots = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_slots());
    }

    // optional uint32 launcher = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_launcher());
    }

  }
  // optional uint32 game_type = 9;
  if (cached_has_bits & 0x00000100u) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_game_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgGCCStrike15_v2_Party_Register::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgGCCStrike15_v2_Party_Register::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgGCCStrike15_v2_Party_Register::GetClassData() const { return &_class_data_; }


void CMsgGCCStrike15_v2_Party_Register::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgGCCStrike15_v2_Party_Register*>(&to_msg);
  auto& from = static_cast<const CMsgGCCStrike15_v2_Party_Register&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCCStrike15_v2_Party_Register)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.id_ = from._impl_.id_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.ver_ = from._impl_.ver_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.apr_ = from._impl_.apr_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.ark_ = from._impl_.ark_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.nby_ = from._impl_.nby_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.grp_ = from._impl_.grp_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.slots_ = from._impl_.slots_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.launcher_ = from._impl_.launcher_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    _this->_internal_set_game_type(from._internal_game_type());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgGCCStrike15_v2_Party_Register::CopyFrom(const CMsgGCCStrike15_v2_Party_Register& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCCStrike15_v2_Party_Register)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCCStrike15_v2_Party_Register::IsInitialized() const {
  return true;
}

void CMsgGCCStrike15_v2_Party_Register::InternalSwap(CMsgGCCStrike15_v2_Party_Register* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgGCCStrike15_v2_Party_Register, _impl_.game_type_)
      + sizeof(CMsgGCCStrike15_v2_Party_Register::_impl_.game_type_)
      - PROTOBUF_FIELD_OFFSET(CMsgGCCStrike15_v2_Party_Register, _impl_.id_)>(
          reinterpret_cast<char*>(&_impl_.id_),
          reinterpret_cast<char*>(&other->_impl_.id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCCStrike15_v2_Party_Register::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cstrike15_5fgcmessages_2eproto_getter, &descriptor_table_cstrike15_5fgcmessages_2eproto_once,
      file_level_metadata_cstrike15_5fgcmessages_2eproto[142]);
}

// ===================================================================

class CMsgGCCStrike15_v2_Party_Search::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCCStrike15_v2_Party_Search>()._impl_._has_bits_);
  static void set_has_ver(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_apr(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_ark(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_launcher(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_game_type(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

CMsgGCCStrike15_v2_Party_Search::CMsgGCCStrike15_v2_Party_Search(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgGCCStrike15_v2_Party_Search)
}
CMsgGCCStrike15_v2_Party_Search::CMsgGCCStrike15_v2_Party_Search(const CMsgGCCStrike15_v2_Party_Search& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgGCCStrike15_v2_Party_Search* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.grps_){from._impl_.grps_}
    , decltype(_impl_.ver_){}
    , decltype(_impl_.apr_){}
    , decltype(_impl_.ark_){}
    , decltype(_impl_.launcher_){}
    , decltype(_impl_.game_type_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.ver_, &from._impl_.ver_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.game_type_) -
    reinterpret_cast<char*>(&_impl_.ver_)) + sizeof(_impl_.game_type_));
  // @@protoc_insertion_point(copy_constructor:CMsgGCCStrike15_v2_Party_Search)
}

inline void CMsgGCCStrike15_v2_Party_Search::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.grps_){arena}
    , decltype(_impl_.ver_){0u}
    , decltype(_impl_.apr_){0u}
    , decltype(_impl_.ark_){0u}
    , decltype(_impl_.launcher_){0u}
    , decltype(_impl_.game_type_){0u}
  };
}

CMsgGCCStrike15_v2_Party_Search::~CMsgGCCStrike15_v2_Party_Search() {
  // @@protoc_insertion_point(destructor:CMsgGCCStrike15_v2_Party_Search)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgGCCStrike15_v2_Party_Search::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.grps_.~RepeatedField();
}

void CMsgGCCStrike15_v2_Party_Search::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgGCCStrike15_v2_Party_Search::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCCStrike15_v2_Party_Search)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.grps_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&_impl_.ver_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.game_type_) -
        reinterpret_cast<char*>(&_impl_.ver_)) + sizeof(_impl_.game_type_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCCStrike15_v2_Party_Search::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 ver = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_ver(&has_bits);
          _impl_.ver_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 apr = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_apr(&has_bits);
          _impl_.apr_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 ark = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_ark(&has_bits);
          _impl_.ark_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 grps = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_grps(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<32>(ptr));
        } else if (static_cast<uint8_t>(tag) == 34) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_grps(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 launcher = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_launcher(&has_bits);
          _impl_.launcher_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 game_type = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_game_type(&has_bits);
          _impl_.game_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgGCCStrike15_v2_Party_Search::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCCStrike15_v2_Party_Search)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 ver = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_ver(), target);
  }

  // optional uint32 apr = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_apr(), target);
  }

  // optional uint32 ark = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_ark(), target);
  }

  // repeated uint32 grps = 4;
  for (int i = 0, n = this->_internal_grps_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_grps(i), target);
  }

  // optional uint32 launcher = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_launcher(), target);
  }

  // optional uint32 game_type = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_game_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCCStrike15_v2_Party_Search)
  return target;
}

size_t CMsgGCCStrike15_v2_Party_Search::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCCStrike15_v2_Party_Search)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 grps = 4;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.grps_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_grps_size());
    total_size += data_size;
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional uint32 ver = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_ver());
    }

    // optional uint32 apr = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_apr());
    }

    // optional uint32 ark = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_ark());
    }

    // optional uint32 launcher = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_launcher());
    }

    // optional uint32 game_type = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_game_type());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgGCCStrike15_v2_Party_Search::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgGCCStrike15_v2_Party_Search::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgGCCStrike15_v2_Party_Search::GetClassData() const { return &_class_data_; }


void CMsgGCCStrike15_v2_Party_Search::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgGCCStrike15_v2_Party_Search*>(&to_msg);
  auto& from = static_cast<const CMsgGCCStrike15_v2_Party_Search&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCCStrike15_v2_Party_Search)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.grps_.MergeFrom(from._impl_.grps_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.ver_ = from._impl_.ver_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.apr_ = from._impl_.apr_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.ark_ = from._impl_.ark_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.launcher_ = from._impl_.launcher_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.game_type_ = from._impl_.game_type_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgGCCStrike15_v2_Party_Search::CopyFrom(const CMsgGCCStrike15_v2_Party_Search& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCCStrike15_v2_Party_Search)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCCStrike15_v2_Party_Search::IsInitialized() const {
  return true;
}

void CMsgGCCStrike15_v2_Party_Search::InternalSwap(CMsgGCCStrike15_v2_Party_Search* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.grps_.InternalSwap(&other->_impl_.grps_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgGCCStrike15_v2_Party_Search, _impl_.game_type_)
      + sizeof(CMsgGCCStrike15_v2_Party_Search::_impl_.game_type_)
      - PROTOBUF_FIELD_OFFSET(CMsgGCCStrike15_v2_Party_Search, _impl_.ver_)>(
          reinterpret_cast<char*>(&_impl_.ver_),
          reinterpret_cast<char*>(&other->_impl_.ver_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCCStrike15_v2_Party_Search::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cstrike15_5fgcmessages_2eproto_getter, &descriptor_table_cstrike15_5fgcmessages_2eproto_once,
      file_level_metadata_cstrike15_5fgcmessages_2eproto[143]);
}

// ===================================================================

class CMsgGCCStrike15_v2_Party_SearchResults_Entry::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCCStrike15_v2_Party_SearchResults_Entry>()._impl_._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_grp(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_game_type(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_apr(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_ark(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_loc(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_accountid(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

CMsgGCCStrike15_v2_Party_SearchResults_Entry::CMsgGCCStrike15_v2_Party_SearchResults_Entry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgGCCStrike15_v2_Party_SearchResults.Entry)
}
CMsgGCCStrike15_v2_Party_SearchResults_Entry::CMsgGCCStrike15_v2_Party_SearchResults_Entry(const CMsgGCCStrike15_v2_Party_SearchResults_Entry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgGCCStrike15_v2_Party_SearchResults_Entry* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.id_){}
    , decltype(_impl_.grp_){}
    , decltype(_impl_.game_type_){}
    , decltype(_impl_.apr_){}
    , decltype(_impl_.ark_){}
    , decltype(_impl_.loc_){}
    , decltype(_impl_.accountid_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.id_, &from._impl_.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.accountid_) -
    reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.accountid_));
  // @@protoc_insertion_point(copy_constructor:CMsgGCCStrike15_v2_Party_SearchResults.Entry)
}

inline void CMsgGCCStrike15_v2_Party_SearchResults_Entry::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.id_){0u}
    , decltype(_impl_.grp_){0u}
    , decltype(_impl_.game_type_){0u}
    , decltype(_impl_.apr_){0u}
    , decltype(_impl_.ark_){0u}
    , decltype(_impl_.loc_){0u}
    , decltype(_impl_.accountid_){0u}
  };
}

CMsgGCCStrike15_v2_Party_SearchResults_Entry::~CMsgGCCStrike15_v2_Party_SearchResults_Entry() {
  // @@protoc_insertion_point(destructor:CMsgGCCStrike15_v2_Party_SearchResults.Entry)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgGCCStrike15_v2_Party_SearchResults_Entry::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgGCCStrike15_v2_Party_SearchResults_Entry::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgGCCStrike15_v2_Party_SearchResults_Entry::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCCStrike15_v2_Party_SearchResults.Entry)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    ::memset(&_impl_.id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.accountid_) -
        reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.accountid_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCCStrike15_v2_Party_SearchResults_Entry::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_id(&has_bits);
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 grp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_grp(&has_bits);
          _impl_.grp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 game_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_game_type(&has_bits);
          _impl_.game_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 apr = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_apr(&has_bits);
          _impl_.apr_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 ark = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_ark(&has_bits);
          _impl_.ark_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 loc = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_loc(&has_bits);
          _impl_.loc_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 accountid = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_accountid(&has_bits);
          _impl_.accountid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgGCCStrike15_v2_Party_SearchResults_Entry::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCCStrike15_v2_Party_SearchResults.Entry)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  // optional uint32 grp = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_grp(), target);
  }

  // optional uint32 game_type = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_game_type(), target);
  }

  // optional uint32 apr = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_apr(), target);
  }

  // optional uint32 ark = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_ark(), target);
  }

  // optional uint32 loc = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_loc(), target);
  }

  // optional uint32 accountid = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(7, this->_internal_accountid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCCStrike15_v2_Party_SearchResults.Entry)
  return target;
}

size_t CMsgGCCStrike15_v2_Party_SearchResults_Entry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCCStrike15_v2_Party_SearchResults.Entry)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional uint32 id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_id());
    }

    // optional uint32 grp = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_grp());
    }

    // optional uint32 game_type = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_game_type());
    }

    // optional uint32 apr = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_apr());
    }

    // optional uint32 ark = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_ark());
    }

    // optional uint32 loc = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_loc());
    }

    // optional uint32 accountid = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_accountid());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgGCCStrike15_v2_Party_SearchResults_Entry::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgGCCStrike15_v2_Party_SearchResults_Entry::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgGCCStrike15_v2_Party_SearchResults_Entry::GetClassData() const { return &_class_data_; }


void CMsgGCCStrike15_v2_Party_SearchResults_Entry::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgGCCStrike15_v2_Party_SearchResults_Entry*>(&to_msg);
  auto& from = static_cast<const CMsgGCCStrike15_v2_Party_SearchResults_Entry&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCCStrike15_v2_Party_SearchResults.Entry)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.id_ = from._impl_.id_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.grp_ = from._impl_.grp_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.game_type_ = from._impl_.game_type_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.apr_ = from._impl_.apr_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.ark_ = from._impl_.ark_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.loc_ = from._impl_.loc_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.accountid_ = from._impl_.accountid_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgGCCStrike15_v2_Party_SearchResults_Entry::CopyFrom(const CMsgGCCStrike15_v2_Party_SearchResults_Entry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCCStrike15_v2_Party_SearchResults.Entry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCCStrike15_v2_Party_SearchResults_Entry::IsInitialized() const {
  return true;
}

void CMsgGCCStrike15_v2_Party_SearchResults_Entry::InternalSwap(CMsgGCCStrike15_v2_Party_SearchResults_Entry* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgGCCStrike15_v2_Party_SearchResults_Entry, _impl_.accountid_)
      + sizeof(CMsgGCCStrike15_v2_Party_SearchResults_Entry::_impl_.accountid_)
      - PROTOBUF_FIELD_OFFSET(CMsgGCCStrike15_v2_Party_SearchResults_Entry, _impl_.id_)>(
          reinterpret_cast<char*>(&_impl_.id_),
          reinterpret_cast<char*>(&other->_impl_.id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCCStrike15_v2_Party_SearchResults_Entry::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cstrike15_5fgcmessages_2eproto_getter, &descriptor_table_cstrike15_5fgcmessages_2eproto_once,
      file_level_metadata_cstrike15_5fgcmessages_2eproto[144]);
}

// ===================================================================

class CMsgGCCStrike15_v2_Party_SearchResults::_Internal {
 public:
};

CMsgGCCStrike15_v2_Party_SearchResults::CMsgGCCStrike15_v2_Party_SearchResults(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgGCCStrike15_v2_Party_SearchResults)
}
CMsgGCCStrike15_v2_Party_SearchResults::CMsgGCCStrike15_v2_Party_SearchResults(const CMsgGCCStrike15_v2_Party_SearchResults& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgGCCStrike15_v2_Party_SearchResults* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.entries_){from._impl_.entries_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgGCCStrike15_v2_Party_SearchResults)
}

inline void CMsgGCCStrike15_v2_Party_SearchResults::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.entries_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CMsgGCCStrike15_v2_Party_SearchResults::~CMsgGCCStrike15_v2_Party_SearchResults() {
  // @@protoc_insertion_point(destructor:CMsgGCCStrike15_v2_Party_SearchResults)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgGCCStrike15_v2_Party_SearchResults::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.entries_.~RepeatedPtrField();
}

void CMsgGCCStrike15_v2_Party_SearchResults::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgGCCStrike15_v2_Party_SearchResults::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCCStrike15_v2_Party_SearchResults)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.entries_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCCStrike15_v2_Party_SearchResults::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .CMsgGCCStrike15_v2_Party_SearchResults.Entry entries = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_entries(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgGCCStrike15_v2_Party_SearchResults::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCCStrike15_v2_Party_SearchResults)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CMsgGCCStrike15_v2_Party_SearchResults.Entry entries = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_entries_size()); i < n; i++) {
    const auto& repfield = this->_internal_entries(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCCStrike15_v2_Party_SearchResults)
  return target;
}

size_t CMsgGCCStrike15_v2_Party_SearchResults::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCCStrike15_v2_Party_SearchResults)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgGCCStrike15_v2_Party_SearchResults.Entry entries = 1;
  total_size += 1UL * this->_internal_entries_size();
  for (const auto& msg : this->_impl_.entries_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgGCCStrike15_v2_Party_SearchResults::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgGCCStrike15_v2_Party_SearchResults::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgGCCStrike15_v2_Party_SearchResults::GetClassData() const { return &_class_data_; }


void CMsgGCCStrike15_v2_Party_SearchResults::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgGCCStrike15_v2_Party_SearchResults*>(&to_msg);
  auto& from = static_cast<const CMsgGCCStrike15_v2_Party_SearchResults&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCCStrike15_v2_Party_SearchResults)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.entries_.MergeFrom(from._impl_.entries_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgGCCStrike15_v2_Party_SearchResults::CopyFrom(const CMsgGCCStrike15_v2_Party_SearchResults& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCCStrike15_v2_Party_SearchResults)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCCStrike15_v2_Party_SearchResults::IsInitialized() const {
  return true;
}

void CMsgGCCStrike15_v2_Party_SearchResults::InternalSwap(CMsgGCCStrike15_v2_Party_SearchResults* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.entries_.InternalSwap(&other->_impl_.entries_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCCStrike15_v2_Party_SearchResults::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cstrike15_5fgcmessages_2eproto_getter, &descriptor_table_cstrike15_5fgcmessages_2eproto_once,
      file_level_metadata_cstrike15_5fgcmessages_2eproto[145]);
}

// ===================================================================

class CMsgGCCStrike15_v2_Party_Invite::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCCStrike15_v2_Party_Invite>()._impl_._has_bits_);
  static void set_has_accountid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_lobbyid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgGCCStrike15_v2_Party_Invite::CMsgGCCStrike15_v2_Party_Invite(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgGCCStrike15_v2_Party_Invite)
}
CMsgGCCStrike15_v2_Party_Invite::CMsgGCCStrike15_v2_Party_Invite(const CMsgGCCStrike15_v2_Party_Invite& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgGCCStrike15_v2_Party_Invite* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.accountid_){}
    , decltype(_impl_.lobbyid_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.accountid_, &from._impl_.accountid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.lobbyid_) -
    reinterpret_cast<char*>(&_impl_.accountid_)) + sizeof(_impl_.lobbyid_));
  // @@protoc_insertion_point(copy_constructor:CMsgGCCStrike15_v2_Party_Invite)
}

inline void CMsgGCCStrike15_v2_Party_Invite::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.accountid_){0u}
    , decltype(_impl_.lobbyid_){0u}
  };
}

CMsgGCCStrike15_v2_Party_Invite::~CMsgGCCStrike15_v2_Party_Invite() {
  // @@protoc_insertion_point(destructor:CMsgGCCStrike15_v2_Party_Invite)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgGCCStrike15_v2_Party_Invite::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgGCCStrike15_v2_Party_Invite::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgGCCStrike15_v2_Party_Invite::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCCStrike15_v2_Party_Invite)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.accountid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.lobbyid_) -
        reinterpret_cast<char*>(&_impl_.accountid_)) + sizeof(_impl_.lobbyid_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCCStrike15_v2_Party_Invite::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 accountid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_accountid(&has_bits);
          _impl_.accountid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 lobbyid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_lobbyid(&has_bits);
          _impl_.lobbyid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgGCCStrike15_v2_Party_Invite::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCCStrike15_v2_Party_Invite)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 accountid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_accountid(), target);
  }

  // optional uint32 lobbyid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_lobbyid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCCStrike15_v2_Party_Invite)
  return target;
}

size_t CMsgGCCStrike15_v2_Party_Invite::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCCStrike15_v2_Party_Invite)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 accountid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_accountid());
    }

    // optional uint32 lobbyid = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_lobbyid());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgGCCStrike15_v2_Party_Invite::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgGCCStrike15_v2_Party_Invite::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgGCCStrike15_v2_Party_Invite::GetClassData() const { return &_class_data_; }


void CMsgGCCStrike15_v2_Party_Invite::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgGCCStrike15_v2_Party_Invite*>(&to_msg);
  auto& from = static_cast<const CMsgGCCStrike15_v2_Party_Invite&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCCStrike15_v2_Party_Invite)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.accountid_ = from._impl_.accountid_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.lobbyid_ = from._impl_.lobbyid_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgGCCStrike15_v2_Party_Invite::CopyFrom(const CMsgGCCStrike15_v2_Party_Invite& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCCStrike15_v2_Party_Invite)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCCStrike15_v2_Party_Invite::IsInitialized() const {
  return true;
}

void CMsgGCCStrike15_v2_Party_Invite::InternalSwap(CMsgGCCStrike15_v2_Party_Invite* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgGCCStrike15_v2_Party_Invite, _impl_.lobbyid_)
      + sizeof(CMsgGCCStrike15_v2_Party_Invite::_impl_.lobbyid_)
      - PROTOBUF_FIELD_OFFSET(CMsgGCCStrike15_v2_Party_Invite, _impl_.accountid_)>(
          reinterpret_cast<char*>(&_impl_.accountid_),
          reinterpret_cast<char*>(&other->_impl_.accountid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCCStrike15_v2_Party_Invite::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cstrike15_5fgcmessages_2eproto_getter, &descriptor_table_cstrike15_5fgcmessages_2eproto_once,
      file_level_metadata_cstrike15_5fgcmessages_2eproto[146]);
}

// ===================================================================

class CMsgGCCStrike15_v2_Account_RequestCoPlays_Player::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCCStrike15_v2_Account_RequestCoPlays_Player>()._impl_._has_bits_);
  static void set_has_accountid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_rtcoplay(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_online(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CMsgGCCStrike15_v2_Account_RequestCoPlays_Player::CMsgGCCStrike15_v2_Account_RequestCoPlays_Player(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgGCCStrike15_v2_Account_RequestCoPlays.Player)
}
CMsgGCCStrike15_v2_Account_RequestCoPlays_Player::CMsgGCCStrike15_v2_Account_RequestCoPlays_Player(const CMsgGCCStrike15_v2_Account_RequestCoPlays_Player& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgGCCStrike15_v2_Account_RequestCoPlays_Player* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.accountid_){}
    , decltype(_impl_.rtcoplay_){}
    , decltype(_impl_.online_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.accountid_, &from._impl_.accountid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.online_) -
    reinterpret_cast<char*>(&_impl_.accountid_)) + sizeof(_impl_.online_));
  // @@protoc_insertion_point(copy_constructor:CMsgGCCStrike15_v2_Account_RequestCoPlays.Player)
}

inline void CMsgGCCStrike15_v2_Account_RequestCoPlays_Player::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.accountid_){0u}
    , decltype(_impl_.rtcoplay_){0u}
    , decltype(_impl_.online_){false}
  };
}

CMsgGCCStrike15_v2_Account_RequestCoPlays_Player::~CMsgGCCStrike15_v2_Account_RequestCoPlays_Player() {
  // @@protoc_insertion_point(destructor:CMsgGCCStrike15_v2_Account_RequestCoPlays.Player)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgGCCStrike15_v2_Account_RequestCoPlays_Player::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgGCCStrike15_v2_Account_RequestCoPlays_Player::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgGCCStrike15_v2_Account_RequestCoPlays_Player::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCCStrike15_v2_Account_RequestCoPlays.Player)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.accountid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.online_) -
        reinterpret_cast<char*>(&_impl_.accountid_)) + sizeof(_impl_.online_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCCStrike15_v2_Account_RequestCoPlays_Player::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 accountid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_accountid(&has_bits);
          _impl_.accountid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 rtcoplay = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_rtcoplay(&has_bits);
          _impl_.rtcoplay_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool online = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_online(&has_bits);
          _impl_.online_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgGCCStrike15_v2_Account_RequestCoPlays_Player::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCCStrike15_v2_Account_RequestCoPlays.Player)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 accountid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_accountid(), target);
  }

  // optional uint32 rtcoplay = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_rtcoplay(), target);
  }

  // optional bool online = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_online(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCCStrike15_v2_Account_RequestCoPlays.Player)
  return target;
}

size_t CMsgGCCStrike15_v2_Account_RequestCoPlays_Player::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCCStrike15_v2_Account_RequestCoPlays.Player)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint32 accountid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_accountid());
    }

    // optional uint32 rtcoplay = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_rtcoplay());
    }

    // optional bool online = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgGCCStrike15_v2_Account_RequestCoPlays_Player::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgGCCStrike15_v2_Account_RequestCoPlays_Player::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgGCCStrike15_v2_Account_RequestCoPlays_Player::GetClassData() const { return &_class_data_; }


void CMsgGCCStrike15_v2_Account_RequestCoPlays_Player::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgGCCStrike15_v2_Account_RequestCoPlays_Player*>(&to_msg);
  auto& from = static_cast<const CMsgGCCStrike15_v2_Account_RequestCoPlays_Player&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCCStrike15_v2_Account_RequestCoPlays.Player)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.accountid_ = from._impl_.accountid_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.rtcoplay_ = from._impl_.rtcoplay_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.online_ = from._impl_.online_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgGCCStrike15_v2_Account_RequestCoPlays_Player::CopyFrom(const CMsgGCCStrike15_v2_Account_RequestCoPlays_Player& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCCStrike15_v2_Account_RequestCoPlays.Player)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCCStrike15_v2_Account_RequestCoPlays_Player::IsInitialized() const {
  return true;
}

void CMsgGCCStrike15_v2_Account_RequestCoPlays_Player::InternalSwap(CMsgGCCStrike15_v2_Account_RequestCoPlays_Player* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgGCCStrike15_v2_Account_RequestCoPlays_Player, _impl_.online_)
      + sizeof(CMsgGCCStrike15_v2_Account_RequestCoPlays_Player::_impl_.online_)
      - PROTOBUF_FIELD_OFFSET(CMsgGCCStrike15_v2_Account_RequestCoPlays_Player, _impl_.accountid_)>(
          reinterpret_cast<char*>(&_impl_.accountid_),
          reinterpret_cast<char*>(&other->_impl_.accountid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCCStrike15_v2_Account_RequestCoPlays_Player::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cstrike15_5fgcmessages_2eproto_getter, &descriptor_table_cstrike15_5fgcmessages_2eproto_once,
      file_level_metadata_cstrike15_5fgcmessages_2eproto[147]);
}

// ===================================================================

class CMsgGCCStrike15_v2_Account_RequestCoPlays::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCCStrike15_v2_Account_RequestCoPlays>()._impl_._has_bits_);
  static void set_has_servertime(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgGCCStrike15_v2_Account_RequestCoPlays::CMsgGCCStrike15_v2_Account_RequestCoPlays(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgGCCStrike15_v2_Account_RequestCoPlays)
}
CMsgGCCStrike15_v2_Account_RequestCoPlays::CMsgGCCStrike15_v2_Account_RequestCoPlays(const CMsgGCCStrike15_v2_Account_RequestCoPlays& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgGCCStrike15_v2_Account_RequestCoPlays* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.players_){from._impl_.players_}
    , decltype(_impl_.servertime_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.servertime_ = from._impl_.servertime_;
  // @@protoc_insertion_point(copy_constructor:CMsgGCCStrike15_v2_Account_RequestCoPlays)
}

inline void CMsgGCCStrike15_v2_Account_RequestCoPlays::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.players_){arena}
    , decltype(_impl_.servertime_){0u}
  };
}

CMsgGCCStrike15_v2_Account_RequestCoPlays::~CMsgGCCStrike15_v2_Account_RequestCoPlays() {
  // @@protoc_insertion_point(destructor:CMsgGCCStrike15_v2_Account_RequestCoPlays)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgGCCStrike15_v2_Account_RequestCoPlays::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.players_.~RepeatedPtrField();
}

void CMsgGCCStrike15_v2_Account_RequestCoPlays::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgGCCStrike15_v2_Account_RequestCoPlays::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCCStrike15_v2_Account_RequestCoPlays)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.players_.Clear();
  _impl_.servertime_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCCStrike15_v2_Account_RequestCoPlays::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .CMsgGCCStrike15_v2_Account_RequestCoPlays.Player players = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_players(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional uint32 servertime = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_servertime(&has_bits);
          _impl_.servertime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgGCCStrike15_v2_Account_RequestCoPlays::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCCStrike15_v2_Account_RequestCoPlays)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CMsgGCCStrike15_v2_Account_RequestCoPlays.Player players = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_players_size()); i < n; i++) {
    const auto& repfield = this->_internal_players(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 servertime = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_servertime(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCCStrike15_v2_Account_RequestCoPlays)
  return target;
}

size_t CMsgGCCStrike15_v2_Account_RequestCoPlays::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCCStrike15_v2_Account_RequestCoPlays)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgGCCStrike15_v2_Account_RequestCoPlays.Player players = 1;
  total_size += 1UL * this->_internal_players_size();
  for (const auto& msg : this->_impl_.players_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional uint32 servertime = 2;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_servertime());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgGCCStrike15_v2_Account_RequestCoPlays::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgGCCStrike15_v2_Account_RequestCoPlays::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgGCCStrike15_v2_Account_RequestCoPlays::GetClassData() const { return &_class_data_; }


void CMsgGCCStrike15_v2_Account_RequestCoPlays::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgGCCStrike15_v2_Account_RequestCoPlays*>(&to_msg);
  auto& from = static_cast<const CMsgGCCStrike15_v2_Account_RequestCoPlays&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCCStrike15_v2_Account_RequestCoPlays)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.players_.MergeFrom(from._impl_.players_);
  if (from._internal_has_servertime()) {
    _this->_internal_set_servertime(from._internal_servertime());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgGCCStrike15_v2_Account_RequestCoPlays::CopyFrom(const CMsgGCCStrike15_v2_Account_RequestCoPlays& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCCStrike15_v2_Account_RequestCoPlays)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCCStrike15_v2_Account_RequestCoPlays::IsInitialized() const {
  return true;
}

void CMsgGCCStrike15_v2_Account_RequestCoPlays::InternalSwap(CMsgGCCStrike15_v2_Account_RequestCoPlays* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.players_.InternalSwap(&other->_impl_.players_);
  swap(_impl_.servertime_, other->_impl_.servertime_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCCStrike15_v2_Account_RequestCoPlays::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cstrike15_5fgcmessages_2eproto_getter, &descriptor_table_cstrike15_5fgcmessages_2eproto_once,
      file_level_metadata_cstrike15_5fgcmessages_2eproto[148]);
}

// ===================================================================

class CMsgGCCStrike15_v2_ClientToGCRequestTicket::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCCStrike15_v2_ClientToGCRequestTicket>()._impl_._has_bits_);
  static void set_has_authorized_steam_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_authorized_public_ip(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_gameserver_steam_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_gameserver_sdr_routing(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgGCCStrike15_v2_ClientToGCRequestTicket::CMsgGCCStrike15_v2_ClientToGCRequestTicket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgGCCStrike15_v2_ClientToGCRequestTicket)
}
CMsgGCCStrike15_v2_ClientToGCRequestTicket::CMsgGCCStrike15_v2_ClientToGCRequestTicket(const CMsgGCCStrike15_v2_ClientToGCRequestTicket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgGCCStrike15_v2_ClientToGCRequestTicket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.gameserver_sdr_routing_){}
    , decltype(_impl_.authorized_steam_id_){}
    , decltype(_impl_.gameserver_steam_id_){}
    , decltype(_impl_.authorized_public_ip_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.gameserver_sdr_routing_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.gameserver_sdr_routing_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_gameserver_sdr_routing()) {
    _this->_impl_.gameserver_sdr_routing_.Set(from._internal_gameserver_sdr_routing(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.authorized_steam_id_, &from._impl_.authorized_steam_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.authorized_public_ip_) -
    reinterpret_cast<char*>(&_impl_.authorized_steam_id_)) + sizeof(_impl_.authorized_public_ip_));
  // @@protoc_insertion_point(copy_constructor:CMsgGCCStrike15_v2_ClientToGCRequestTicket)
}

inline void CMsgGCCStrike15_v2_ClientToGCRequestTicket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.gameserver_sdr_routing_){}
    , decltype(_impl_.authorized_steam_id_){uint64_t{0u}}
    , decltype(_impl_.gameserver_steam_id_){uint64_t{0u}}
    , decltype(_impl_.authorized_public_ip_){0u}
  };
  _impl_.gameserver_sdr_routing_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.gameserver_sdr_routing_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CMsgGCCStrike15_v2_ClientToGCRequestTicket::~CMsgGCCStrike15_v2_ClientToGCRequestTicket() {
  // @@protoc_insertion_point(destructor:CMsgGCCStrike15_v2_ClientToGCRequestTicket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgGCCStrike15_v2_ClientToGCRequestTicket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.gameserver_sdr_routing_.Destroy();
}

void CMsgGCCStrike15_v2_ClientToGCRequestTicket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgGCCStrike15_v2_ClientToGCRequestTicket::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCCStrike15_v2_ClientToGCRequestTicket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.gameserver_sdr_routing_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&_impl_.authorized_steam_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.authorized_public_ip_) -
        reinterpret_cast<char*>(&_impl_.authorized_steam_id_)) + sizeof(_impl_.authorized_public_ip_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCCStrike15_v2_ClientToGCRequestTicket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional fixed64 authorized_steam_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_authorized_steam_id(&has_bits);
          _impl_.authorized_steam_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional fixed32 authorized_public_ip = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _Internal::set_has_authorized_public_ip(&has_bits);
          _impl_.authorized_public_ip_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint32_t>(ptr);
          ptr += sizeof(uint32_t);
        } else
          goto handle_unusual;
        continue;
      // optional fixed64 gameserver_steam_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _Internal::set_has_gameserver_steam_id(&has_bits);
          _impl_.gameserver_steam_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional string gameserver_sdr_routing = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_gameserver_sdr_routing();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CMsgGCCStrike15_v2_ClientToGCRequestTicket.gameserver_sdr_routing");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgGCCStrike15_v2_ClientToGCRequestTicket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCCStrike15_v2_ClientToGCRequestTicket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional fixed64 authorized_steam_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed64ToArray(1, this->_internal_authorized_steam_id(), target);
  }

  // optional fixed32 authorized_public_ip = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed32ToArray(2, this->_internal_authorized_public_ip(), target);
  }

  // optional fixed64 gameserver_steam_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed64ToArray(3, this->_internal_gameserver_steam_id(), target);
  }

  // optional string gameserver_sdr_routing = 5;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_gameserver_sdr_routing().data(), static_cast<int>(this->_internal_gameserver_sdr_routing().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgGCCStrike15_v2_ClientToGCRequestTicket.gameserver_sdr_routing");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_gameserver_sdr_routing(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCCStrike15_v2_ClientToGCRequestTicket)
  return target;
}

size_t CMsgGCCStrike15_v2_ClientToGCRequestTicket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCCStrike15_v2_ClientToGCRequestTicket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string gameserver_sdr_routing = 5;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_gameserver_sdr_routing());
    }

    // optional fixed64 authorized_steam_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional fixed64 gameserver_steam_id = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional fixed32 authorized_public_ip = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgGCCStrike15_v2_ClientToGCRequestTicket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgGCCStrike15_v2_ClientToGCRequestTicket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgGCCStrike15_v2_ClientToGCRequestTicket::GetClassData() const { return &_class_data_; }


void CMsgGCCStrike15_v2_ClientToGCRequestTicket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgGCCStrike15_v2_ClientToGCRequestTicket*>(&to_msg);
  auto& from = static_cast<const CMsgGCCStrike15_v2_ClientToGCRequestTicket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCCStrike15_v2_ClientToGCRequestTicket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_gameserver_sdr_routing(from._internal_gameserver_sdr_routing());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.authorized_steam_id_ = from._impl_.authorized_steam_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.gameserver_steam_id_ = from._impl_.gameserver_steam_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.authorized_public_ip_ = from._impl_.authorized_public_ip_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgGCCStrike15_v2_ClientToGCRequestTicket::CopyFrom(const CMsgGCCStrike15_v2_ClientToGCRequestTicket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCCStrike15_v2_ClientToGCRequestTicket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCCStrike15_v2_ClientToGCRequestTicket::IsInitialized() const {
  return true;
}

void CMsgGCCStrike15_v2_ClientToGCRequestTicket::InternalSwap(CMsgGCCStrike15_v2_ClientToGCRequestTicket* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.gameserver_sdr_routing_, lhs_arena,
      &other->_impl_.gameserver_sdr_routing_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgGCCStrike15_v2_ClientToGCRequestTicket, _impl_.authorized_public_ip_)
      + sizeof(CMsgGCCStrike15_v2_ClientToGCRequestTicket::_impl_.authorized_public_ip_)
      - PROTOBUF_FIELD_OFFSET(CMsgGCCStrike15_v2_ClientToGCRequestTicket, _impl_.authorized_steam_id_)>(
          reinterpret_cast<char*>(&_impl_.authorized_steam_id_),
          reinterpret_cast<char*>(&other->_impl_.authorized_steam_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCCStrike15_v2_ClientToGCRequestTicket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cstrike15_5fgcmessages_2eproto_getter, &descriptor_table_cstrike15_5fgcmessages_2eproto_once,
      file_level_metadata_cstrike15_5fgcmessages_2eproto[149]);
}

// ===================================================================

class CMsgGCToClientSteamDatagramTicket::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCToClientSteamDatagramTicket>()._impl_._has_bits_);
  static void set_has_serialized_ticket(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgGCToClientSteamDatagramTicket::CMsgGCToClientSteamDatagramTicket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgGCToClientSteamDatagramTicket)
}
CMsgGCToClientSteamDatagramTicket::CMsgGCToClientSteamDatagramTicket(const CMsgGCToClientSteamDatagramTicket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgGCToClientSteamDatagramTicket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.serialized_ticket_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.serialized_ticket_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.serialized_ticket_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_serialized_ticket()) {
    _this->_impl_.serialized_ticket_.Set(from._internal_serialized_ticket(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:CMsgGCToClientSteamDatagramTicket)
}

inline void CMsgGCToClientSteamDatagramTicket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.serialized_ticket_){}
  };
  _impl_.serialized_ticket_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.serialized_ticket_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CMsgGCToClientSteamDatagramTicket::~CMsgGCToClientSteamDatagramTicket() {
  // @@protoc_insertion_point(destructor:CMsgGCToClientSteamDatagramTicket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgGCToClientSteamDatagramTicket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.serialized_ticket_.Destroy();
}

void CMsgGCToClientSteamDatagramTicket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgGCToClientSteamDatagramTicket::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCToClientSteamDatagramTicket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.serialized_ticket_.ClearNonDefaultToEmpty();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCToClientSteamDatagramTicket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bytes serialized_ticket = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          auto str = _internal_mutable_serialized_ticket();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgGCToClientSteamDatagramTicket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCToClientSteamDatagramTicket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bytes serialized_ticket = 16;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        16, this->_internal_serialized_ticket(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCToClientSteamDatagramTicket)
  return target;
}

size_t CMsgGCToClientSteamDatagramTicket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCToClientSteamDatagramTicket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bytes serialized_ticket = 16;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_serialized_ticket());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgGCToClientSteamDatagramTicket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgGCToClientSteamDatagramTicket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgGCToClientSteamDatagramTicket::GetClassData() const { return &_class_data_; }


void CMsgGCToClientSteamDatagramTicket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgGCToClientSteamDatagramTicket*>(&to_msg);
  auto& from = static_cast<const CMsgGCToClientSteamDatagramTicket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCToClientSteamDatagramTicket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_serialized_ticket()) {
    _this->_internal_set_serialized_ticket(from._internal_serialized_ticket());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgGCToClientSteamDatagramTicket::CopyFrom(const CMsgGCToClientSteamDatagramTicket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCToClientSteamDatagramTicket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCToClientSteamDatagramTicket::IsInitialized() const {
  return true;
}

void CMsgGCToClientSteamDatagramTicket::InternalSwap(CMsgGCToClientSteamDatagramTicket* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.serialized_ticket_, lhs_arena,
      &other->_impl_.serialized_ticket_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCToClientSteamDatagramTicket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cstrike15_5fgcmessages_2eproto_getter, &descriptor_table_cstrike15_5fgcmessages_2eproto_once,
      file_level_metadata_cstrike15_5fgcmessages_2eproto[150]);
}

// ===================================================================

class CMsgGCCStrike15_v2_ClientRequestOffers::_Internal {
 public:
};

CMsgGCCStrike15_v2_ClientRequestOffers::CMsgGCCStrike15_v2_ClientRequestOffers(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:CMsgGCCStrike15_v2_ClientRequestOffers)
}
CMsgGCCStrike15_v2_ClientRequestOffers::CMsgGCCStrike15_v2_ClientRequestOffers(const CMsgGCCStrike15_v2_ClientRequestOffers& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  CMsgGCCStrike15_v2_ClientRequestOffers* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgGCCStrike15_v2_ClientRequestOffers)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgGCCStrike15_v2_ClientRequestOffers::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgGCCStrike15_v2_ClientRequestOffers::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCCStrike15_v2_ClientRequestOffers::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cstrike15_5fgcmessages_2eproto_getter, &descriptor_table_cstrike15_5fgcmessages_2eproto_once,
      file_level_metadata_cstrike15_5fgcmessages_2eproto[151]);
}

// ===================================================================

class CMsgGCCStrike15_v2_ClientRequestSouvenir::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCCStrike15_v2_ClientRequestSouvenir>()._impl_._has_bits_);
  static void set_has_itemid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_matchid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_eventid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CMsgGCCStrike15_v2_ClientRequestSouvenir::CMsgGCCStrike15_v2_ClientRequestSouvenir(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgGCCStrike15_v2_ClientRequestSouvenir)
}
CMsgGCCStrike15_v2_ClientRequestSouvenir::CMsgGCCStrike15_v2_ClientRequestSouvenir(const CMsgGCCStrike15_v2_ClientRequestSouvenir& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgGCCStrike15_v2_ClientRequestSouvenir* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.itemid_){}
    , decltype(_impl_.matchid_){}
    , decltype(_impl_.eventid_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.itemid_, &from._impl_.itemid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.eventid_) -
    reinterpret_cast<char*>(&_impl_.itemid_)) + sizeof(_impl_.eventid_));
  // @@protoc_insertion_point(copy_constructor:CMsgGCCStrike15_v2_ClientRequestSouvenir)
}

inline void CMsgGCCStrike15_v2_ClientRequestSouvenir::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.itemid_){uint64_t{0u}}
    , decltype(_impl_.matchid_){uint64_t{0u}}
    , decltype(_impl_.eventid_){0}
  };
}

CMsgGCCStrike15_v2_ClientRequestSouvenir::~CMsgGCCStrike15_v2_ClientRequestSouvenir() {
  // @@protoc_insertion_point(destructor:CMsgGCCStrike15_v2_ClientRequestSouvenir)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgGCCStrike15_v2_ClientRequestSouvenir::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgGCCStrike15_v2_ClientRequestSouvenir::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgGCCStrike15_v2_ClientRequestSouvenir::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCCStrike15_v2_ClientRequestSouvenir)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.itemid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.eventid_) -
        reinterpret_cast<char*>(&_impl_.itemid_)) + sizeof(_impl_.eventid_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCCStrike15_v2_ClientRequestSouvenir::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 itemid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_itemid(&has_bits);
          _impl_.itemid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 matchid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_matchid(&has_bits);
          _impl_.matchid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 eventid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_eventid(&has_bits);
          _impl_.eventid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgGCCStrike15_v2_ClientRequestSouvenir::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCCStrike15_v2_ClientRequestSouvenir)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint64 itemid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_itemid(), target);
  }

  // optional uint64 matchid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_matchid(), target);
  }

  // optional int32 eventid = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_eventid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCCStrike15_v2_ClientRequestSouvenir)
  return target;
}

size_t CMsgGCCStrike15_v2_ClientRequestSouvenir::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCCStrike15_v2_ClientRequestSouvenir)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint64 itemid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_itemid());
    }

    // optional uint64 matchid = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_matchid());
    }

    // optional int32 eventid = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_eventid());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgGCCStrike15_v2_ClientRequestSouvenir::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgGCCStrike15_v2_ClientRequestSouvenir::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgGCCStrike15_v2_ClientRequestSouvenir::GetClassData() const { return &_class_data_; }


void CMsgGCCStrike15_v2_ClientRequestSouvenir::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgGCCStrike15_v2_ClientRequestSouvenir*>(&to_msg);
  auto& from = static_cast<const CMsgGCCStrike15_v2_ClientRequestSouvenir&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCCStrike15_v2_ClientRequestSouvenir)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.itemid_ = from._impl_.itemid_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.matchid_ = from._impl_.matchid_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.eventid_ = from._impl_.eventid_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgGCCStrike15_v2_ClientRequestSouvenir::CopyFrom(const CMsgGCCStrike15_v2_ClientRequestSouvenir& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCCStrike15_v2_ClientRequestSouvenir)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCCStrike15_v2_ClientRequestSouvenir::IsInitialized() const {
  return true;
}

void CMsgGCCStrike15_v2_ClientRequestSouvenir::InternalSwap(CMsgGCCStrike15_v2_ClientRequestSouvenir* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgGCCStrike15_v2_ClientRequestSouvenir, _impl_.eventid_)
      + sizeof(CMsgGCCStrike15_v2_ClientRequestSouvenir::_impl_.eventid_)
      - PROTOBUF_FIELD_OFFSET(CMsgGCCStrike15_v2_ClientRequestSouvenir, _impl_.itemid_)>(
          reinterpret_cast<char*>(&_impl_.itemid_),
          reinterpret_cast<char*>(&other->_impl_.itemid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCCStrike15_v2_ClientRequestSouvenir::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cstrike15_5fgcmessages_2eproto_getter, &descriptor_table_cstrike15_5fgcmessages_2eproto_once,
      file_level_metadata_cstrike15_5fgcmessages_2eproto[152]);
}

// ===================================================================

class CMsgGCCStrike15_v2_ClientAccountBalance::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCCStrike15_v2_ClientAccountBalance>()._impl_._has_bits_);
  static void set_has_amount(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_url(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgGCCStrike15_v2_ClientAccountBalance::CMsgGCCStrike15_v2_ClientAccountBalance(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgGCCStrike15_v2_ClientAccountBalance)
}
CMsgGCCStrike15_v2_ClientAccountBalance::CMsgGCCStrike15_v2_ClientAccountBalance(const CMsgGCCStrike15_v2_ClientAccountBalance& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgGCCStrike15_v2_ClientAccountBalance* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.url_){}
    , decltype(_impl_.amount_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_url()) {
    _this->_impl_.url_.Set(from._internal_url(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.amount_ = from._impl_.amount_;
  // @@protoc_insertion_point(copy_constructor:CMsgGCCStrike15_v2_ClientAccountBalance)
}

inline void CMsgGCCStrike15_v2_ClientAccountBalance::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.url_){}
    , decltype(_impl_.amount_){uint64_t{0u}}
  };
  _impl_.url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CMsgGCCStrike15_v2_ClientAccountBalance::~CMsgGCCStrike15_v2_ClientAccountBalance() {
  // @@protoc_insertion_point(destructor:CMsgGCCStrike15_v2_ClientAccountBalance)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgGCCStrike15_v2_ClientAccountBalance::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.url_.Destroy();
}

void CMsgGCCStrike15_v2_ClientAccountBalance::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgGCCStrike15_v2_ClientAccountBalance::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCCStrike15_v2_ClientAccountBalance)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.url_.ClearNonDefaultToEmpty();
  }
  _impl_.amount_ = uint64_t{0u};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCCStrike15_v2_ClientAccountBalance::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 amount = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_amount(&has_bits);
          _impl_.amount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string url = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_url();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CMsgGCCStrike15_v2_ClientAccountBalance.url");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgGCCStrike15_v2_ClientAccountBalance::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCCStrike15_v2_ClientAccountBalance)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint64 amount = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_amount(), target);
  }

  // optional string url = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_url().data(), static_cast<int>(this->_internal_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgGCCStrike15_v2_ClientAccountBalance.url");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_url(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCCStrike15_v2_ClientAccountBalance)
  return target;
}

size_t CMsgGCCStrike15_v2_ClientAccountBalance::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCCStrike15_v2_ClientAccountBalance)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string url = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_url());
    }

    // optional uint64 amount = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_amount());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgGCCStrike15_v2_ClientAccountBalance::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgGCCStrike15_v2_ClientAccountBalance::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgGCCStrike15_v2_ClientAccountBalance::GetClassData() const { return &_class_data_; }


void CMsgGCCStrike15_v2_ClientAccountBalance::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgGCCStrike15_v2_ClientAccountBalance*>(&to_msg);
  auto& from = static_cast<const CMsgGCCStrike15_v2_ClientAccountBalance&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCCStrike15_v2_ClientAccountBalance)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_url(from._internal_url());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.amount_ = from._impl_.amount_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgGCCStrike15_v2_ClientAccountBalance::CopyFrom(const CMsgGCCStrike15_v2_ClientAccountBalance& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCCStrike15_v2_ClientAccountBalance)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCCStrike15_v2_ClientAccountBalance::IsInitialized() const {
  return true;
}

void CMsgGCCStrike15_v2_ClientAccountBalance::InternalSwap(CMsgGCCStrike15_v2_ClientAccountBalance* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.url_, lhs_arena,
      &other->_impl_.url_, rhs_arena
  );
  swap(_impl_.amount_, other->_impl_.amount_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCCStrike15_v2_ClientAccountBalance::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cstrike15_5fgcmessages_2eproto_getter, &descriptor_table_cstrike15_5fgcmessages_2eproto_once,
      file_level_metadata_cstrike15_5fgcmessages_2eproto[153]);
}

// ===================================================================

class CMsgGCCStrike15_v2_ClientPartyJoinRelay::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCCStrike15_v2_ClientPartyJoinRelay>()._impl_._has_bits_);
  static void set_has_accountid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_lobbyid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgGCCStrike15_v2_ClientPartyJoinRelay::CMsgGCCStrike15_v2_ClientPartyJoinRelay(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgGCCStrike15_v2_ClientPartyJoinRelay)
}
CMsgGCCStrike15_v2_ClientPartyJoinRelay::CMsgGCCStrike15_v2_ClientPartyJoinRelay(const CMsgGCCStrike15_v2_ClientPartyJoinRelay& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgGCCStrike15_v2_ClientPartyJoinRelay* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.lobbyid_){}
    , decltype(_impl_.accountid_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.lobbyid_, &from._impl_.lobbyid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.accountid_) -
    reinterpret_cast<char*>(&_impl_.lobbyid_)) + sizeof(_impl_.accountid_));
  // @@protoc_insertion_point(copy_constructor:CMsgGCCStrike15_v2_ClientPartyJoinRelay)
}

inline void CMsgGCCStrike15_v2_ClientPartyJoinRelay::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.lobbyid_){uint64_t{0u}}
    , decltype(_impl_.accountid_){0u}
  };
}

CMsgGCCStrike15_v2_ClientPartyJoinRelay::~CMsgGCCStrike15_v2_ClientPartyJoinRelay() {
  // @@protoc_insertion_point(destructor:CMsgGCCStrike15_v2_ClientPartyJoinRelay)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgGCCStrike15_v2_ClientPartyJoinRelay::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgGCCStrike15_v2_ClientPartyJoinRelay::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgGCCStrike15_v2_ClientPartyJoinRelay::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCCStrike15_v2_ClientPartyJoinRelay)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.lobbyid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.accountid_) -
        reinterpret_cast<char*>(&_impl_.lobbyid_)) + sizeof(_impl_.accountid_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCCStrike15_v2_ClientPartyJoinRelay::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 accountid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_accountid(&has_bits);
          _impl_.accountid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 lobbyid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_lobbyid(&has_bits);
          _impl_.lobbyid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgGCCStrike15_v2_ClientPartyJoinRelay::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCCStrike15_v2_ClientPartyJoinRelay)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 accountid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_accountid(), target);
  }

  // optional uint64 lobbyid = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_lobbyid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCCStrike15_v2_ClientPartyJoinRelay)
  return target;
}

size_t CMsgGCCStrike15_v2_ClientPartyJoinRelay::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCCStrike15_v2_ClientPartyJoinRelay)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint64 lobbyid = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_lobbyid());
    }

    // optional uint32 accountid = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_accountid());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgGCCStrike15_v2_ClientPartyJoinRelay::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgGCCStrike15_v2_ClientPartyJoinRelay::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgGCCStrike15_v2_ClientPartyJoinRelay::GetClassData() const { return &_class_data_; }


void CMsgGCCStrike15_v2_ClientPartyJoinRelay::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgGCCStrike15_v2_ClientPartyJoinRelay*>(&to_msg);
  auto& from = static_cast<const CMsgGCCStrike15_v2_ClientPartyJoinRelay&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCCStrike15_v2_ClientPartyJoinRelay)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.lobbyid_ = from._impl_.lobbyid_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.accountid_ = from._impl_.accountid_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgGCCStrike15_v2_ClientPartyJoinRelay::CopyFrom(const CMsgGCCStrike15_v2_ClientPartyJoinRelay& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCCStrike15_v2_ClientPartyJoinRelay)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCCStrike15_v2_ClientPartyJoinRelay::IsInitialized() const {
  return true;
}

void CMsgGCCStrike15_v2_ClientPartyJoinRelay::InternalSwap(CMsgGCCStrike15_v2_ClientPartyJoinRelay* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgGCCStrike15_v2_ClientPartyJoinRelay, _impl_.accountid_)
      + sizeof(CMsgGCCStrike15_v2_ClientPartyJoinRelay::_impl_.accountid_)
      - PROTOBUF_FIELD_OFFSET(CMsgGCCStrike15_v2_ClientPartyJoinRelay, _impl_.lobbyid_)>(
          reinterpret_cast<char*>(&_impl_.lobbyid_),
          reinterpret_cast<char*>(&other->_impl_.lobbyid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCCStrike15_v2_ClientPartyJoinRelay::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cstrike15_5fgcmessages_2eproto_getter, &descriptor_table_cstrike15_5fgcmessages_2eproto_once,
      file_level_metadata_cstrike15_5fgcmessages_2eproto[154]);
}

// ===================================================================

class CMsgGCCStrike15_v2_ClientPartyWarning_Entry::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCCStrike15_v2_ClientPartyWarning_Entry>()._impl_._has_bits_);
  static void set_has_accountid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_warntype(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgGCCStrike15_v2_ClientPartyWarning_Entry::CMsgGCCStrike15_v2_ClientPartyWarning_Entry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgGCCStrike15_v2_ClientPartyWarning.Entry)
}
CMsgGCCStrike15_v2_ClientPartyWarning_Entry::CMsgGCCStrike15_v2_ClientPartyWarning_Entry(const CMsgGCCStrike15_v2_ClientPartyWarning_Entry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgGCCStrike15_v2_ClientPartyWarning_Entry* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.accountid_){}
    , decltype(_impl_.warntype_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.accountid_, &from._impl_.accountid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.warntype_) -
    reinterpret_cast<char*>(&_impl_.accountid_)) + sizeof(_impl_.warntype_));
  // @@protoc_insertion_point(copy_constructor:CMsgGCCStrike15_v2_ClientPartyWarning.Entry)
}

inline void CMsgGCCStrike15_v2_ClientPartyWarning_Entry::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.accountid_){0u}
    , decltype(_impl_.warntype_){0u}
  };
}

CMsgGCCStrike15_v2_ClientPartyWarning_Entry::~CMsgGCCStrike15_v2_ClientPartyWarning_Entry() {
  // @@protoc_insertion_point(destructor:CMsgGCCStrike15_v2_ClientPartyWarning.Entry)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgGCCStrike15_v2_ClientPartyWarning_Entry::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgGCCStrike15_v2_ClientPartyWarning_Entry::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgGCCStrike15_v2_ClientPartyWarning_Entry::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCCStrike15_v2_ClientPartyWarning.Entry)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.accountid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.warntype_) -
        reinterpret_cast<char*>(&_impl_.accountid_)) + sizeof(_impl_.warntype_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCCStrike15_v2_ClientPartyWarning_Entry::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 accountid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_accountid(&has_bits);
          _impl_.accountid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 warntype = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_warntype(&has_bits);
          _impl_.warntype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgGCCStrike15_v2_ClientPartyWarning_Entry::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCCStrike15_v2_ClientPartyWarning.Entry)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 accountid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_accountid(), target);
  }

  // optional uint32 warntype = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_warntype(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCCStrike15_v2_ClientPartyWarning.Entry)
  return target;
}

size_t CMsgGCCStrike15_v2_ClientPartyWarning_Entry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCCStrike15_v2_ClientPartyWarning.Entry)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 accountid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_accountid());
    }

    // optional uint32 warntype = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_warntype());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgGCCStrike15_v2_ClientPartyWarning_Entry::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgGCCStrike15_v2_ClientPartyWarning_Entry::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgGCCStrike15_v2_ClientPartyWarning_Entry::GetClassData() const { return &_class_data_; }


void CMsgGCCStrike15_v2_ClientPartyWarning_Entry::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgGCCStrike15_v2_ClientPartyWarning_Entry*>(&to_msg);
  auto& from = static_cast<const CMsgGCCStrike15_v2_ClientPartyWarning_Entry&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCCStrike15_v2_ClientPartyWarning.Entry)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.accountid_ = from._impl_.accountid_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.warntype_ = from._impl_.warntype_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgGCCStrike15_v2_ClientPartyWarning_Entry::CopyFrom(const CMsgGCCStrike15_v2_ClientPartyWarning_Entry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCCStrike15_v2_ClientPartyWarning.Entry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCCStrike15_v2_ClientPartyWarning_Entry::IsInitialized() const {
  return true;
}

void CMsgGCCStrike15_v2_ClientPartyWarning_Entry::InternalSwap(CMsgGCCStrike15_v2_ClientPartyWarning_Entry* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgGCCStrike15_v2_ClientPartyWarning_Entry, _impl_.warntype_)
      + sizeof(CMsgGCCStrike15_v2_ClientPartyWarning_Entry::_impl_.warntype_)
      - PROTOBUF_FIELD_OFFSET(CMsgGCCStrike15_v2_ClientPartyWarning_Entry, _impl_.accountid_)>(
          reinterpret_cast<char*>(&_impl_.accountid_),
          reinterpret_cast<char*>(&other->_impl_.accountid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCCStrike15_v2_ClientPartyWarning_Entry::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cstrike15_5fgcmessages_2eproto_getter, &descriptor_table_cstrike15_5fgcmessages_2eproto_once,
      file_level_metadata_cstrike15_5fgcmessages_2eproto[155]);
}

// ===================================================================

class CMsgGCCStrike15_v2_ClientPartyWarning::_Internal {
 public:
};

CMsgGCCStrike15_v2_ClientPartyWarning::CMsgGCCStrike15_v2_ClientPartyWarning(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgGCCStrike15_v2_ClientPartyWarning)
}
CMsgGCCStrike15_v2_ClientPartyWarning::CMsgGCCStrike15_v2_ClientPartyWarning(const CMsgGCCStrike15_v2_ClientPartyWarning& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgGCCStrike15_v2_ClientPartyWarning* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.entries_){from._impl_.entries_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgGCCStrike15_v2_ClientPartyWarning)
}

inline void CMsgGCCStrike15_v2_ClientPartyWarning::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.entries_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CMsgGCCStrike15_v2_ClientPartyWarning::~CMsgGCCStrike15_v2_ClientPartyWarning() {
  // @@protoc_insertion_point(destructor:CMsgGCCStrike15_v2_ClientPartyWarning)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgGCCStrike15_v2_ClientPartyWarning::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.entries_.~RepeatedPtrField();
}

void CMsgGCCStrike15_v2_ClientPartyWarning::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgGCCStrike15_v2_ClientPartyWarning::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCCStrike15_v2_ClientPartyWarning)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.entries_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCCStrike15_v2_ClientPartyWarning::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .CMsgGCCStrike15_v2_ClientPartyWarning.Entry entries = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_entries(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgGCCStrike15_v2_ClientPartyWarning::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCCStrike15_v2_ClientPartyWarning)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CMsgGCCStrike15_v2_ClientPartyWarning.Entry entries = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_entries_size()); i < n; i++) {
    const auto& repfield = this->_internal_entries(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCCStrike15_v2_ClientPartyWarning)
  return target;
}

size_t CMsgGCCStrike15_v2_ClientPartyWarning::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCCStrike15_v2_ClientPartyWarning)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgGCCStrike15_v2_ClientPartyWarning.Entry entries = 1;
  total_size += 1UL * this->_internal_entries_size();
  for (const auto& msg : this->_impl_.entries_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgGCCStrike15_v2_ClientPartyWarning::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgGCCStrike15_v2_ClientPartyWarning::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgGCCStrike15_v2_ClientPartyWarning::GetClassData() const { return &_class_data_; }


void CMsgGCCStrike15_v2_ClientPartyWarning::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgGCCStrike15_v2_ClientPartyWarning*>(&to_msg);
  auto& from = static_cast<const CMsgGCCStrike15_v2_ClientPartyWarning&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCCStrike15_v2_ClientPartyWarning)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.entries_.MergeFrom(from._impl_.entries_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgGCCStrike15_v2_ClientPartyWarning::CopyFrom(const CMsgGCCStrike15_v2_ClientPartyWarning& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCCStrike15_v2_ClientPartyWarning)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCCStrike15_v2_ClientPartyWarning::IsInitialized() const {
  return true;
}

void CMsgGCCStrike15_v2_ClientPartyWarning::InternalSwap(CMsgGCCStrike15_v2_ClientPartyWarning* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.entries_.InternalSwap(&other->_impl_.entries_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCCStrike15_v2_ClientPartyWarning::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cstrike15_5fgcmessages_2eproto_getter, &descriptor_table_cstrike15_5fgcmessages_2eproto_once,
      file_level_metadata_cstrike15_5fgcmessages_2eproto[156]);
}

// ===================================================================

class CMsgGCCStrike15_v2_SetEventFavorite::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCCStrike15_v2_SetEventFavorite>()._impl_._has_bits_);
  static void set_has_eventid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_is_favorite(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgGCCStrike15_v2_SetEventFavorite::CMsgGCCStrike15_v2_SetEventFavorite(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgGCCStrike15_v2_SetEventFavorite)
}
CMsgGCCStrike15_v2_SetEventFavorite::CMsgGCCStrike15_v2_SetEventFavorite(const CMsgGCCStrike15_v2_SetEventFavorite& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgGCCStrike15_v2_SetEventFavorite* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.eventid_){}
    , decltype(_impl_.is_favorite_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.eventid_, &from._impl_.eventid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.is_favorite_) -
    reinterpret_cast<char*>(&_impl_.eventid_)) + sizeof(_impl_.is_favorite_));
  // @@protoc_insertion_point(copy_constructor:CMsgGCCStrike15_v2_SetEventFavorite)
}

inline void CMsgGCCStrike15_v2_SetEventFavorite::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.eventid_){uint64_t{0u}}
    , decltype(_impl_.is_favorite_){false}
  };
}

CMsgGCCStrike15_v2_SetEventFavorite::~CMsgGCCStrike15_v2_SetEventFavorite() {
  // @@protoc_insertion_point(destructor:CMsgGCCStrike15_v2_SetEventFavorite)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgGCCStrike15_v2_SetEventFavorite::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgGCCStrike15_v2_SetEventFavorite::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgGCCStrike15_v2_SetEventFavorite::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCCStrike15_v2_SetEventFavorite)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.eventid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.is_favorite_) -
        reinterpret_cast<char*>(&_impl_.eventid_)) + sizeof(_impl_.is_favorite_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCCStrike15_v2_SetEventFavorite::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 eventid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_eventid(&has_bits);
          _impl_.eventid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_favorite = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_is_favorite(&has_bits);
          _impl_.is_favorite_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgGCCStrike15_v2_SetEventFavorite::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCCStrike15_v2_SetEventFavorite)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint64 eventid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_eventid(), target);
  }

  // optional bool is_favorite = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_is_favorite(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCCStrike15_v2_SetEventFavorite)
  return target;
}

size_t CMsgGCCStrike15_v2_SetEventFavorite::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCCStrike15_v2_SetEventFavorite)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint64 eventid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_eventid());
    }

    // optional bool is_favorite = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgGCCStrike15_v2_SetEventFavorite::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgGCCStrike15_v2_SetEventFavorite::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgGCCStrike15_v2_SetEventFavorite::GetClassData() const { return &_class_data_; }


void CMsgGCCStrike15_v2_SetEventFavorite::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgGCCStrike15_v2_SetEventFavorite*>(&to_msg);
  auto& from = static_cast<const CMsgGCCStrike15_v2_SetEventFavorite&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCCStrike15_v2_SetEventFavorite)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.eventid_ = from._impl_.eventid_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.is_favorite_ = from._impl_.is_favorite_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgGCCStrike15_v2_SetEventFavorite::CopyFrom(const CMsgGCCStrike15_v2_SetEventFavorite& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCCStrike15_v2_SetEventFavorite)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCCStrike15_v2_SetEventFavorite::IsInitialized() const {
  return true;
}

void CMsgGCCStrike15_v2_SetEventFavorite::InternalSwap(CMsgGCCStrike15_v2_SetEventFavorite* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgGCCStrike15_v2_SetEventFavorite, _impl_.is_favorite_)
      + sizeof(CMsgGCCStrike15_v2_SetEventFavorite::_impl_.is_favorite_)
      - PROTOBUF_FIELD_OFFSET(CMsgGCCStrike15_v2_SetEventFavorite, _impl_.eventid_)>(
          reinterpret_cast<char*>(&_impl_.eventid_),
          reinterpret_cast<char*>(&other->_impl_.eventid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCCStrike15_v2_SetEventFavorite::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cstrike15_5fgcmessages_2eproto_getter, &descriptor_table_cstrike15_5fgcmessages_2eproto_once,
      file_level_metadata_cstrike15_5fgcmessages_2eproto[157]);
}

// ===================================================================

class CMsgGCCStrike15_v2_GetEventFavorites_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCCStrike15_v2_GetEventFavorites_Request>()._impl_._has_bits_);
  static void set_has_all_events(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgGCCStrike15_v2_GetEventFavorites_Request::CMsgGCCStrike15_v2_GetEventFavorites_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgGCCStrike15_v2_GetEventFavorites_Request)
}
CMsgGCCStrike15_v2_GetEventFavorites_Request::CMsgGCCStrike15_v2_GetEventFavorites_Request(const CMsgGCCStrike15_v2_GetEventFavorites_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgGCCStrike15_v2_GetEventFavorites_Request* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.all_events_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.all_events_ = from._impl_.all_events_;
  // @@protoc_insertion_point(copy_constructor:CMsgGCCStrike15_v2_GetEventFavorites_Request)
}

inline void CMsgGCCStrike15_v2_GetEventFavorites_Request::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.all_events_){false}
  };
}

CMsgGCCStrike15_v2_GetEventFavorites_Request::~CMsgGCCStrike15_v2_GetEventFavorites_Request() {
  // @@protoc_insertion_point(destructor:CMsgGCCStrike15_v2_GetEventFavorites_Request)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgGCCStrike15_v2_GetEventFavorites_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgGCCStrike15_v2_GetEventFavorites_Request::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgGCCStrike15_v2_GetEventFavorites_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCCStrike15_v2_GetEventFavorites_Request)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.all_events_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCCStrike15_v2_GetEventFavorites_Request::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool all_events = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_all_events(&has_bits);
          _impl_.all_events_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgGCCStrike15_v2_GetEventFavorites_Request::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCCStrike15_v2_GetEventFavorites_Request)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool all_events = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_all_events(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCCStrike15_v2_GetEventFavorites_Request)
  return target;
}

size_t CMsgGCCStrike15_v2_GetEventFavorites_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCCStrike15_v2_GetEventFavorites_Request)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool all_events = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgGCCStrike15_v2_GetEventFavorites_Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgGCCStrike15_v2_GetEventFavorites_Request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgGCCStrike15_v2_GetEventFavorites_Request::GetClassData() const { return &_class_data_; }


void CMsgGCCStrike15_v2_GetEventFavorites_Request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgGCCStrike15_v2_GetEventFavorites_Request*>(&to_msg);
  auto& from = static_cast<const CMsgGCCStrike15_v2_GetEventFavorites_Request&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCCStrike15_v2_GetEventFavorites_Request)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_all_events()) {
    _this->_internal_set_all_events(from._internal_all_events());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgGCCStrike15_v2_GetEventFavorites_Request::CopyFrom(const CMsgGCCStrike15_v2_GetEventFavorites_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCCStrike15_v2_GetEventFavorites_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCCStrike15_v2_GetEventFavorites_Request::IsInitialized() const {
  return true;
}

void CMsgGCCStrike15_v2_GetEventFavorites_Request::InternalSwap(CMsgGCCStrike15_v2_GetEventFavorites_Request* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.all_events_, other->_impl_.all_events_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCCStrike15_v2_GetEventFavorites_Request::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cstrike15_5fgcmessages_2eproto_getter, &descriptor_table_cstrike15_5fgcmessages_2eproto_once,
      file_level_metadata_cstrike15_5fgcmessages_2eproto[158]);
}

// ===================================================================

class CMsgGCCStrike15_v2_GetEventFavorites_Response::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCCStrike15_v2_GetEventFavorites_Response>()._impl_._has_bits_);
  static void set_has_all_events(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_json_favorites(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_json_featured(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgGCCStrike15_v2_GetEventFavorites_Response::CMsgGCCStrike15_v2_GetEventFavorites_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgGCCStrike15_v2_GetEventFavorites_Response)
}
CMsgGCCStrike15_v2_GetEventFavorites_Response::CMsgGCCStrike15_v2_GetEventFavorites_Response(const CMsgGCCStrike15_v2_GetEventFavorites_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgGCCStrike15_v2_GetEventFavorites_Response* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.json_favorites_){}
    , decltype(_impl_.json_featured_){}
    , decltype(_impl_.all_events_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.json_favorites_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.json_favorites_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_json_favorites()) {
    _this->_impl_.json_favorites_.Set(from._internal_json_favorites(), 
      _this->GetArenaForAllocation());
  }
  _impl_.json_featured_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.json_featured_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_json_featured()) {
    _this->_impl_.json_featured_.Set(from._internal_json_featured(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.all_events_ = from._impl_.all_events_;
  // @@protoc_insertion_point(copy_constructor:CMsgGCCStrike15_v2_GetEventFavorites_Response)
}

inline void CMsgGCCStrike15_v2_GetEventFavorites_Response::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.json_favorites_){}
    , decltype(_impl_.json_featured_){}
    , decltype(_impl_.all_events_){false}
  };
  _impl_.json_favorites_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.json_favorites_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.json_featured_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.json_featured_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CMsgGCCStrike15_v2_GetEventFavorites_Response::~CMsgGCCStrike15_v2_GetEventFavorites_Response() {
  // @@protoc_insertion_point(destructor:CMsgGCCStrike15_v2_GetEventFavorites_Response)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgGCCStrike15_v2_GetEventFavorites_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.json_favorites_.Destroy();
  _impl_.json_featured_.Destroy();
}

void CMsgGCCStrike15_v2_GetEventFavorites_Response::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgGCCStrike15_v2_GetEventFavorites_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCCStrike15_v2_GetEventFavorites_Response)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.json_favorites_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.json_featured_.ClearNonDefaultToEmpty();
    }
  }
  _impl_.all_events_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCCStrike15_v2_GetEventFavorites_Response::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool all_events = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_all_events(&has_bits);
          _impl_.all_events_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string json_favorites = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_json_favorites();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CMsgGCCStrike15_v2_GetEventFavorites_Response.json_favorites");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string json_featured = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_json_featured();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CMsgGCCStrike15_v2_GetEventFavorites_Response.json_featured");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgGCCStrike15_v2_GetEventFavorites_Response::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCCStrike15_v2_GetEventFavorites_Response)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool all_events = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_all_events(), target);
  }

  // optional string json_favorites = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_json_favorites().data(), static_cast<int>(this->_internal_json_favorites().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgGCCStrike15_v2_GetEventFavorites_Response.json_favorites");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_json_favorites(), target);
  }

  // optional string json_featured = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_json_featured().data(), static_cast<int>(this->_internal_json_featured().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgGCCStrike15_v2_GetEventFavorites_Response.json_featured");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_json_featured(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCCStrike15_v2_GetEventFavorites_Response)
  return target;
}

size_t CMsgGCCStrike15_v2_GetEventFavorites_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCCStrike15_v2_GetEventFavorites_Response)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string json_favorites = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_json_favorites());
    }

    // optional string json_featured = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_json_featured());
    }

    // optional bool all_events = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgGCCStrike15_v2_GetEventFavorites_Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgGCCStrike15_v2_GetEventFavorites_Response::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgGCCStrike15_v2_GetEventFavorites_Response::GetClassData() const { return &_class_data_; }


void CMsgGCCStrike15_v2_GetEventFavorites_Response::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgGCCStrike15_v2_GetEventFavorites_Response*>(&to_msg);
  auto& from = static_cast<const CMsgGCCStrike15_v2_GetEventFavorites_Response&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCCStrike15_v2_GetEventFavorites_Response)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_json_favorites(from._internal_json_favorites());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_json_featured(from._internal_json_featured());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.all_events_ = from._impl_.all_events_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgGCCStrike15_v2_GetEventFavorites_Response::CopyFrom(const CMsgGCCStrike15_v2_GetEventFavorites_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCCStrike15_v2_GetEventFavorites_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCCStrike15_v2_GetEventFavorites_Response::IsInitialized() const {
  return true;
}

void CMsgGCCStrike15_v2_GetEventFavorites_Response::InternalSwap(CMsgGCCStrike15_v2_GetEventFavorites_Response* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.json_favorites_, lhs_arena,
      &other->_impl_.json_favorites_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.json_featured_, lhs_arena,
      &other->_impl_.json_featured_, rhs_arena
  );
  swap(_impl_.all_events_, other->_impl_.all_events_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCCStrike15_v2_GetEventFavorites_Response::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cstrike15_5fgcmessages_2eproto_getter, &descriptor_table_cstrike15_5fgcmessages_2eproto_once,
      file_level_metadata_cstrike15_5fgcmessages_2eproto[159]);
}

// ===================================================================

class CMsgGCCStrike15_v2_ClientPerfReport_Entry::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCCStrike15_v2_ClientPerfReport_Entry>()._impl_._has_bits_);
  static void set_has_perfcounter(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_length(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_reference(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_actual(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_sourceid(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_status(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

CMsgGCCStrike15_v2_ClientPerfReport_Entry::CMsgGCCStrike15_v2_ClientPerfReport_Entry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgGCCStrike15_v2_ClientPerfReport.Entry)
}
CMsgGCCStrike15_v2_ClientPerfReport_Entry::CMsgGCCStrike15_v2_ClientPerfReport_Entry(const CMsgGCCStrike15_v2_ClientPerfReport_Entry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgGCCStrike15_v2_ClientPerfReport_Entry* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.reference_){}
    , decltype(_impl_.actual_){}
    , decltype(_impl_.perfcounter_){}
    , decltype(_impl_.length_){}
    , decltype(_impl_.sourceid_){}
    , decltype(_impl_.status_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.reference_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.reference_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_reference()) {
    _this->_impl_.reference_.Set(from._internal_reference(), 
      _this->GetArenaForAllocation());
  }
  _impl_.actual_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.actual_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_actual()) {
    _this->_impl_.actual_.Set(from._internal_actual(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.perfcounter_, &from._impl_.perfcounter_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.status_) -
    reinterpret_cast<char*>(&_impl_.perfcounter_)) + sizeof(_impl_.status_));
  // @@protoc_insertion_point(copy_constructor:CMsgGCCStrike15_v2_ClientPerfReport.Entry)
}

inline void CMsgGCCStrike15_v2_ClientPerfReport_Entry::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.reference_){}
    , decltype(_impl_.actual_){}
    , decltype(_impl_.perfcounter_){0u}
    , decltype(_impl_.length_){0u}
    , decltype(_impl_.sourceid_){0u}
    , decltype(_impl_.status_){0u}
  };
  _impl_.reference_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.reference_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.actual_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.actual_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CMsgGCCStrike15_v2_ClientPerfReport_Entry::~CMsgGCCStrike15_v2_ClientPerfReport_Entry() {
  // @@protoc_insertion_point(destructor:CMsgGCCStrike15_v2_ClientPerfReport.Entry)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgGCCStrike15_v2_ClientPerfReport_Entry::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.reference_.Destroy();
  _impl_.actual_.Destroy();
}

void CMsgGCCStrike15_v2_ClientPerfReport_Entry::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgGCCStrike15_v2_ClientPerfReport_Entry::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCCStrike15_v2_ClientPerfReport.Entry)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.reference_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.actual_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000003cu) {
    ::memset(&_impl_.perfcounter_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.status_) -
        reinterpret_cast<char*>(&_impl_.perfcounter_)) + sizeof(_impl_.status_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCCStrike15_v2_ClientPerfReport_Entry::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 perfcounter = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_perfcounter(&has_bits);
          _impl_.perfcounter_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 length = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_length(&has_bits);
          _impl_.length_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes reference = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_reference();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes actual = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_actual();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 sourceid = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_sourceid(&has_bits);
          _impl_.sourceid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 status = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_status(&has_bits);
          _impl_.status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgGCCStrike15_v2_ClientPerfReport_Entry::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCCStrike15_v2_ClientPerfReport.Entry)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 perfcounter = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_perfcounter(), target);
  }

  // optional uint32 length = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_length(), target);
  }

  // optional bytes reference = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_reference(), target);
  }

  // optional bytes actual = 4;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_actual(), target);
  }

  // optional uint32 sourceid = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_sourceid(), target);
  }

  // optional uint32 status = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCCStrike15_v2_ClientPerfReport.Entry)
  return target;
}

size_t CMsgGCCStrike15_v2_ClientPerfReport_Entry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCCStrike15_v2_ClientPerfReport.Entry)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional bytes reference = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_reference());
    }

    // optional bytes actual = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_actual());
    }

    // optional uint32 perfcounter = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_perfcounter());
    }

    // optional uint32 length = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_length());
    }

    // optional uint32 sourceid = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_sourceid());
    }

    // optional uint32 status = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_status());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgGCCStrike15_v2_ClientPerfReport_Entry::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgGCCStrike15_v2_ClientPerfReport_Entry::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgGCCStrike15_v2_ClientPerfReport_Entry::GetClassData() const { return &_class_data_; }


void CMsgGCCStrike15_v2_ClientPerfReport_Entry::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgGCCStrike15_v2_ClientPerfReport_Entry*>(&to_msg);
  auto& from = static_cast<const CMsgGCCStrike15_v2_ClientPerfReport_Entry&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCCStrike15_v2_ClientPerfReport.Entry)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_reference(from._internal_reference());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_actual(from._internal_actual());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.perfcounter_ = from._impl_.perfcounter_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.length_ = from._impl_.length_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.sourceid_ = from._impl_.sourceid_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.status_ = from._impl_.status_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgGCCStrike15_v2_ClientPerfReport_Entry::CopyFrom(const CMsgGCCStrike15_v2_ClientPerfReport_Entry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCCStrike15_v2_ClientPerfReport.Entry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCCStrike15_v2_ClientPerfReport_Entry::IsInitialized() const {
  return true;
}

void CMsgGCCStrike15_v2_ClientPerfReport_Entry::InternalSwap(CMsgGCCStrike15_v2_ClientPerfReport_Entry* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.reference_, lhs_arena,
      &other->_impl_.reference_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.actual_, lhs_arena,
      &other->_impl_.actual_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgGCCStrike15_v2_ClientPerfReport_Entry, _impl_.status_)
      + sizeof(CMsgGCCStrike15_v2_ClientPerfReport_Entry::_impl_.status_)
      - PROTOBUF_FIELD_OFFSET(CMsgGCCStrike15_v2_ClientPerfReport_Entry, _impl_.perfcounter_)>(
          reinterpret_cast<char*>(&_impl_.perfcounter_),
          reinterpret_cast<char*>(&other->_impl_.perfcounter_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCCStrike15_v2_ClientPerfReport_Entry::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cstrike15_5fgcmessages_2eproto_getter, &descriptor_table_cstrike15_5fgcmessages_2eproto_once,
      file_level_metadata_cstrike15_5fgcmessages_2eproto[160]);
}

// ===================================================================

class CMsgGCCStrike15_v2_ClientPerfReport::_Internal {
 public:
};

CMsgGCCStrike15_v2_ClientPerfReport::CMsgGCCStrike15_v2_ClientPerfReport(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgGCCStrike15_v2_ClientPerfReport)
}
CMsgGCCStrike15_v2_ClientPerfReport::CMsgGCCStrike15_v2_ClientPerfReport(const CMsgGCCStrike15_v2_ClientPerfReport& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgGCCStrike15_v2_ClientPerfReport* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.entries_){from._impl_.entries_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgGCCStrike15_v2_ClientPerfReport)
}

inline void CMsgGCCStrike15_v2_ClientPerfReport::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.entries_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CMsgGCCStrike15_v2_ClientPerfReport::~CMsgGCCStrike15_v2_ClientPerfReport() {
  // @@protoc_insertion_point(destructor:CMsgGCCStrike15_v2_ClientPerfReport)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgGCCStrike15_v2_ClientPerfReport::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.entries_.~RepeatedPtrField();
}

void CMsgGCCStrike15_v2_ClientPerfReport::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgGCCStrike15_v2_ClientPerfReport::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCCStrike15_v2_ClientPerfReport)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.entries_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCCStrike15_v2_ClientPerfReport::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .CMsgGCCStrike15_v2_ClientPerfReport.Entry entries = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_entries(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgGCCStrike15_v2_ClientPerfReport::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCCStrike15_v2_ClientPerfReport)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CMsgGCCStrike15_v2_ClientPerfReport.Entry entries = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_entries_size()); i < n; i++) {
    const auto& repfield = this->_internal_entries(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCCStrike15_v2_ClientPerfReport)
  return target;
}

size_t CMsgGCCStrike15_v2_ClientPerfReport::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCCStrike15_v2_ClientPerfReport)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgGCCStrike15_v2_ClientPerfReport.Entry entries = 1;
  total_size += 1UL * this->_internal_entries_size();
  for (const auto& msg : this->_impl_.entries_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgGCCStrike15_v2_ClientPerfReport::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgGCCStrike15_v2_ClientPerfReport::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgGCCStrike15_v2_ClientPerfReport::GetClassData() const { return &_class_data_; }


void CMsgGCCStrike15_v2_ClientPerfReport::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgGCCStrike15_v2_ClientPerfReport*>(&to_msg);
  auto& from = static_cast<const CMsgGCCStrike15_v2_ClientPerfReport&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCCStrike15_v2_ClientPerfReport)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.entries_.MergeFrom(from._impl_.entries_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgGCCStrike15_v2_ClientPerfReport::CopyFrom(const CMsgGCCStrike15_v2_ClientPerfReport& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCCStrike15_v2_ClientPerfReport)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCCStrike15_v2_ClientPerfReport::IsInitialized() const {
  return true;
}

void CMsgGCCStrike15_v2_ClientPerfReport::InternalSwap(CMsgGCCStrike15_v2_ClientPerfReport* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.entries_.InternalSwap(&other->_impl_.entries_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCCStrike15_v2_ClientPerfReport::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cstrike15_5fgcmessages_2eproto_getter, &descriptor_table_cstrike15_5fgcmessages_2eproto_once,
      file_level_metadata_cstrike15_5fgcmessages_2eproto[161]);
}

// ===================================================================

class CVDiagnostic::_Internal {
 public:
  using HasBits = decltype(std::declval<CVDiagnostic>()._impl_._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_extended(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_string_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CVDiagnostic::CVDiagnostic(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CVDiagnostic)
}
CVDiagnostic::CVDiagnostic(const CVDiagnostic& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CVDiagnostic* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.string_value_){}
    , decltype(_impl_.id_){}
    , decltype(_impl_.extended_){}
    , decltype(_impl_.value_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.string_value_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.string_value_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_string_value()) {
    _this->_impl_.string_value_.Set(from._internal_string_value(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.id_, &from._impl_.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.value_) -
    reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.value_));
  // @@protoc_insertion_point(copy_constructor:CVDiagnostic)
}

inline void CVDiagnostic::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.string_value_){}
    , decltype(_impl_.id_){0u}
    , decltype(_impl_.extended_){0u}
    , decltype(_impl_.value_){uint64_t{0u}}
  };
  _impl_.string_value_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.string_value_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CVDiagnostic::~CVDiagnostic() {
  // @@protoc_insertion_point(destructor:CVDiagnostic)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CVDiagnostic::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.string_value_.Destroy();
}

void CVDiagnostic::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CVDiagnostic::Clear() {
// @@protoc_insertion_point(message_clear_start:CVDiagnostic)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.string_value_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&_impl_.id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.value_) -
        reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.value_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CVDiagnostic::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_id(&has_bits);
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 extended = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_extended(&has_bits);
          _impl_.extended_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_value(&has_bits);
          _impl_.value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string string_value = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_string_value();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CVDiagnostic.string_value");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CVDiagnostic::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CVDiagnostic)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  // optional uint32 extended = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_extended(), target);
  }

  // optional uint64 value = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal_value(), target);
  }

  // optional string string_value = 4;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_string_value().data(), static_cast<int>(this->_internal_string_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CVDiagnostic.string_value");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_string_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CVDiagnostic)
  return target;
}

size_t CVDiagnostic::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CVDiagnostic)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string string_value = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_string_value());
    }

    // optional uint32 id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_id());
    }

    // optional uint32 extended = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_extended());
    }

    // optional uint64 value = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_value());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CVDiagnostic::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CVDiagnostic::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CVDiagnostic::GetClassData() const { return &_class_data_; }


void CVDiagnostic::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CVDiagnostic*>(&to_msg);
  auto& from = static_cast<const CVDiagnostic&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CVDiagnostic)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_string_value(from._internal_string_value());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.id_ = from._impl_.id_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.extended_ = from._impl_.extended_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.value_ = from._impl_.value_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CVDiagnostic::CopyFrom(const CVDiagnostic& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CVDiagnostic)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CVDiagnostic::IsInitialized() const {
  return true;
}

void CVDiagnostic::InternalSwap(CVDiagnostic* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.string_value_, lhs_arena,
      &other->_impl_.string_value_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CVDiagnostic, _impl_.value_)
      + sizeof(CVDiagnostic::_impl_.value_)
      - PROTOBUF_FIELD_OFFSET(CVDiagnostic, _impl_.id_)>(
          reinterpret_cast<char*>(&_impl_.id_),
          reinterpret_cast<char*>(&other->_impl_.id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CVDiagnostic::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cstrike15_5fgcmessages_2eproto_getter, &descriptor_table_cstrike15_5fgcmessages_2eproto_once,
      file_level_metadata_cstrike15_5fgcmessages_2eproto[162]);
}

// ===================================================================

class CMsgGCCStrike15_v2_ClientReportValidation::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCCStrike15_v2_ClientReportValidation>()._impl_._has_bits_);
  static void set_has_file_report(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_command_line(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_total_files(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_internal_error(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_trust_time(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_count_pending(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_count_completed(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_process_id(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_osversion(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_clientreportversion(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_status_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_diagnostic1(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_diagnostic2(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_diagnostic3(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_last_launch_data(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_report_count(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_client_time(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_diagnostic4(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_diagnostic5(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
};

CMsgGCCStrike15_v2_ClientReportValidation::CMsgGCCStrike15_v2_ClientReportValidation(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgGCCStrike15_v2_ClientReportValidation)
}
CMsgGCCStrike15_v2_ClientReportValidation::CMsgGCCStrike15_v2_ClientReportValidation(const CMsgGCCStrike15_v2_ClientReportValidation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgGCCStrike15_v2_ClientReportValidation* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.diagnostics_){from._impl_.diagnostics_}
    , decltype(_impl_.file_report_){}
    , decltype(_impl_.command_line_){}
    , decltype(_impl_.last_launch_data_){}
    , decltype(_impl_.total_files_){}
    , decltype(_impl_.internal_error_){}
    , decltype(_impl_.trust_time_){}
    , decltype(_impl_.count_pending_){}
    , decltype(_impl_.count_completed_){}
    , decltype(_impl_.process_id_){}
    , decltype(_impl_.osversion_){}
    , decltype(_impl_.clientreportversion_){}
    , decltype(_impl_.status_id_){}
    , decltype(_impl_.diagnostic1_){}
    , decltype(_impl_.diagnostic2_){}
    , decltype(_impl_.diagnostic3_){}
    , decltype(_impl_.client_time_){}
    , decltype(_impl_.diagnostic4_){}
    , decltype(_impl_.diagnostic5_){}
    , decltype(_impl_.report_count_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.file_report_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.file_report_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_file_report()) {
    _this->_impl_.file_report_.Set(from._internal_file_report(), 
      _this->GetArenaForAllocation());
  }
  _impl_.command_line_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.command_line_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_command_line()) {
    _this->_impl_.command_line_.Set(from._internal_command_line(), 
      _this->GetArenaForAllocation());
  }
  _impl_.last_launch_data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.last_launch_data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_last_launch_data()) {
    _this->_impl_.last_launch_data_.Set(from._internal_last_launch_data(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.total_files_, &from._impl_.total_files_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.report_count_) -
    reinterpret_cast<char*>(&_impl_.total_files_)) + sizeof(_impl_.report_count_));
  // @@protoc_insertion_point(copy_constructor:CMsgGCCStrike15_v2_ClientReportValidation)
}

inline void CMsgGCCStrike15_v2_ClientReportValidation::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.diagnostics_){arena}
    , decltype(_impl_.file_report_){}
    , decltype(_impl_.command_line_){}
    , decltype(_impl_.last_launch_data_){}
    , decltype(_impl_.total_files_){0u}
    , decltype(_impl_.internal_error_){0u}
    , decltype(_impl_.trust_time_){0u}
    , decltype(_impl_.count_pending_){0u}
    , decltype(_impl_.count_completed_){0u}
    , decltype(_impl_.process_id_){0u}
    , decltype(_impl_.osversion_){0}
    , decltype(_impl_.clientreportversion_){0u}
    , decltype(_impl_.status_id_){0u}
    , decltype(_impl_.diagnostic1_){0u}
    , decltype(_impl_.diagnostic2_){uint64_t{0u}}
    , decltype(_impl_.diagnostic3_){uint64_t{0u}}
    , decltype(_impl_.client_time_){uint64_t{0u}}
    , decltype(_impl_.diagnostic4_){uint64_t{0u}}
    , decltype(_impl_.diagnostic5_){uint64_t{0u}}
    , decltype(_impl_.report_count_){0u}
  };
  _impl_.file_report_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.file_report_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.command_line_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.command_line_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.last_launch_data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.last_launch_data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CMsgGCCStrike15_v2_ClientReportValidation::~CMsgGCCStrike15_v2_ClientReportValidation() {
  // @@protoc_insertion_point(destructor:CMsgGCCStrike15_v2_ClientReportValidation)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgGCCStrike15_v2_ClientReportValidation::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.diagnostics_.~RepeatedPtrField();
  _impl_.file_report_.Destroy();
  _impl_.command_line_.Destroy();
  _impl_.last_launch_data_.Destroy();
}

void CMsgGCCStrike15_v2_ClientReportValidation::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgGCCStrike15_v2_ClientReportValidation::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCCStrike15_v2_ClientReportValidation)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.diagnostics_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.file_report_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.command_line_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.last_launch_data_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x000000f8u) {
    ::memset(&_impl_.total_files_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.count_completed_) -
        reinterpret_cast<char*>(&_impl_.total_files_)) + sizeof(_impl_.count_completed_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&_impl_.process_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.client_time_) -
        reinterpret_cast<char*>(&_impl_.process_id_)) + sizeof(_impl_.client_time_));
  }
  if (cached_has_bits & 0x00070000u) {
    ::memset(&_impl_.diagnostic4_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.report_count_) -
        reinterpret_cast<char*>(&_impl_.diagnostic4_)) + sizeof(_impl_.report_count_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCCStrike15_v2_ClientReportValidation::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string file_report = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_file_report();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CMsgGCCStrike15_v2_ClientReportValidation.file_report");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string command_line = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_command_line();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CMsgGCCStrike15_v2_ClientReportValidation.command_line");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional uint32 total_files = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_total_files(&has_bits);
          _impl_.total_files_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 internal_error = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_internal_error(&has_bits);
          _impl_.internal_error_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 trust_time = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_trust_time(&has_bits);
          _impl_.trust_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 count_pending = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_count_pending(&has_bits);
          _impl_.count_pending_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 count_completed = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_count_completed(&has_bits);
          _impl_.count_completed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 process_id = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_process_id(&has_bits);
          _impl_.process_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 osversion = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_osversion(&has_bits);
          _impl_.osversion_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 clientreportversion = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_clientreportversion(&has_bits);
          _impl_.clientreportversion_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 status_id = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _Internal::set_has_status_id(&has_bits);
          _impl_.status_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 diagnostic1 = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _Internal::set_has_diagnostic1(&has_bits);
          _impl_.diagnostic1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 diagnostic2 = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _Internal::set_has_diagnostic2(&has_bits);
          _impl_.diagnostic2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 diagnostic3 = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          _Internal::set_has_diagnostic3(&has_bits);
          _impl_.diagnostic3_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string last_launch_data = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          auto str = _internal_mutable_last_launch_data();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CMsgGCCStrike15_v2_ClientReportValidation.last_launch_data");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional uint32 report_count = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          _Internal::set_has_report_count(&has_bits);
          _impl_.report_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 client_time = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          _Internal::set_has_client_time(&has_bits);
          _impl_.client_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 diagnostic4 = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 144)) {
          _Internal::set_has_diagnostic4(&has_bits);
          _impl_.diagnostic4_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 diagnostic5 = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 152)) {
          _Internal::set_has_diagnostic5(&has_bits);
          _impl_.diagnostic5_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .CVDiagnostic diagnostics = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_diagnostics(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<162>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgGCCStrike15_v2_ClientReportValidation::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCCStrike15_v2_ClientReportValidation)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string file_report = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_file_report().data(), static_cast<int>(this->_internal_file_report().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgGCCStrike15_v2_ClientReportValidation.file_report");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_file_report(), target);
  }

  // optional string command_line = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_command_line().data(), static_cast<int>(this->_internal_command_line().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgGCCStrike15_v2_ClientReportValidation.command_line");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_command_line(), target);
  }

  // optional uint32 total_files = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_total_files(), target);
  }

  // optional uint32 internal_error = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_internal_error(), target);
  }

  // optional uint32 trust_time = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_trust_time(), target);
  }

  // optional uint32 count_pending = 6;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_count_pending(), target);
  }

  // optional uint32 count_completed = 7;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(7, this->_internal_count_completed(), target);
  }

  // optional uint32 process_id = 8;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(8, this->_internal_process_id(), target);
  }

  // optional int32 osversion = 9;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(9, this->_internal_osversion(), target);
  }

  // optional uint32 clientreportversion = 10;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(10, this->_internal_clientreportversion(), target);
  }

  // optional uint32 status_id = 11;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(11, this->_internal_status_id(), target);
  }

  // optional uint32 diagnostic1 = 12;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(12, this->_internal_diagnostic1(), target);
  }

  // optional uint64 diagnostic2 = 13;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(13, this->_internal_diagnostic2(), target);
  }

  // optional uint64 diagnostic3 = 14;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(14, this->_internal_diagnostic3(), target);
  }

  // optional string last_launch_data = 15;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_last_launch_data().data(), static_cast<int>(this->_internal_last_launch_data().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgGCCStrike15_v2_ClientReportValidation.last_launch_data");
    target = stream->WriteStringMaybeAliased(
        15, this->_internal_last_launch_data(), target);
  }

  // optional uint32 report_count = 16;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(16, this->_internal_report_count(), target);
  }

  // optional uint64 client_time = 17;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(17, this->_internal_client_time(), target);
  }

  // optional uint64 diagnostic4 = 18;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(18, this->_internal_diagnostic4(), target);
  }

  // optional uint64 diagnostic5 = 19;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(19, this->_internal_diagnostic5(), target);
  }

  // repeated .CVDiagnostic diagnostics = 20;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_diagnostics_size()); i < n; i++) {
    const auto& repfield = this->_internal_diagnostics(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(20, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCCStrike15_v2_ClientReportValidation)
  return target;
}

size_t CMsgGCCStrike15_v2_ClientReportValidation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCCStrike15_v2_ClientReportValidation)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CVDiagnostic diagnostics = 20;
  total_size += 2UL * this->_internal_diagnostics_size();
  for (const auto& msg : this->_impl_.diagnostics_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string file_report = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_file_report());
    }

    // optional string command_line = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_command_line());
    }

    // optional string last_launch_data = 15;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_last_launch_data());
    }

    // optional uint32 total_files = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_total_files());
    }

    // optional uint32 internal_error = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_internal_error());
    }

    // optional uint32 trust_time = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_trust_time());
    }

    // optional uint32 count_pending = 6;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_count_pending());
    }

    // optional uint32 count_completed = 7;
    if (cached_has_bits & 0x00000080u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_count_completed());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional uint32 process_id = 8;
    if (cached_has_bits & 0x00000100u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_process_id());
    }

    // optional int32 osversion = 9;
    if (cached_has_bits & 0x00000200u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_osversion());
    }

    // optional uint32 clientreportversion = 10;
    if (cached_has_bits & 0x00000400u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_clientreportversion());
    }

    // optional uint32 status_id = 11;
    if (cached_has_bits & 0x00000800u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_status_id());
    }

    // optional uint32 diagnostic1 = 12;
    if (cached_has_bits & 0x00001000u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_diagnostic1());
    }

    // optional uint64 diagnostic2 = 13;
    if (cached_has_bits & 0x00002000u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_diagnostic2());
    }

    // optional uint64 diagnostic3 = 14;
    if (cached_has_bits & 0x00004000u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_diagnostic3());
    }

    // optional uint64 client_time = 17;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt64Size(
          this->_internal_client_time());
    }

  }
  if (cached_has_bits & 0x00070000u) {
    // optional uint64 diagnostic4 = 18;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt64Size(
          this->_internal_diagnostic4());
    }

    // optional uint64 diagnostic5 = 19;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt64Size(
          this->_internal_diagnostic5());
    }

    // optional uint32 report_count = 16;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_report_count());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgGCCStrike15_v2_ClientReportValidation::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgGCCStrike15_v2_ClientReportValidation::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgGCCStrike15_v2_ClientReportValidation::GetClassData() const { return &_class_data_; }


void CMsgGCCStrike15_v2_ClientReportValidation::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgGCCStrike15_v2_ClientReportValidation*>(&to_msg);
  auto& from = static_cast<const CMsgGCCStrike15_v2_ClientReportValidation&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCCStrike15_v2_ClientReportValidation)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.diagnostics_.MergeFrom(from._impl_.diagnostics_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_file_report(from._internal_file_report());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_command_line(from._internal_command_line());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_last_launch_data(from._internal_last_launch_data());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.total_files_ = from._impl_.total_files_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.internal_error_ = from._impl_.internal_error_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.trust_time_ = from._impl_.trust_time_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.count_pending_ = from._impl_.count_pending_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.count_completed_ = from._impl_.count_completed_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.process_id_ = from._impl_.process_id_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.osversion_ = from._impl_.osversion_;
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_impl_.clientreportversion_ = from._impl_.clientreportversion_;
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_impl_.status_id_ = from._impl_.status_id_;
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_impl_.diagnostic1_ = from._impl_.diagnostic1_;
    }
    if (cached_has_bits & 0x00002000u) {
      _this->_impl_.diagnostic2_ = from._impl_.diagnostic2_;
    }
    if (cached_has_bits & 0x00004000u) {
      _this->_impl_.diagnostic3_ = from._impl_.diagnostic3_;
    }
    if (cached_has_bits & 0x00008000u) {
      _this->_impl_.client_time_ = from._impl_.client_time_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00070000u) {
    if (cached_has_bits & 0x00010000u) {
      _this->_impl_.diagnostic4_ = from._impl_.diagnostic4_;
    }
    if (cached_has_bits & 0x00020000u) {
      _this->_impl_.diagnostic5_ = from._impl_.diagnostic5_;
    }
    if (cached_has_bits & 0x00040000u) {
      _this->_impl_.report_count_ = from._impl_.report_count_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgGCCStrike15_v2_ClientReportValidation::CopyFrom(const CMsgGCCStrike15_v2_ClientReportValidation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCCStrike15_v2_ClientReportValidation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCCStrike15_v2_ClientReportValidation::IsInitialized() const {
  return true;
}

void CMsgGCCStrike15_v2_ClientReportValidation::InternalSwap(CMsgGCCStrike15_v2_ClientReportValidation* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.diagnostics_.InternalSwap(&other->_impl_.diagnostics_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.file_report_, lhs_arena,
      &other->_impl_.file_report_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.command_line_, lhs_arena,
      &other->_impl_.command_line_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.last_launch_data_, lhs_arena,
      &other->_impl_.last_launch_data_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgGCCStrike15_v2_ClientReportValidation, _impl_.report_count_)
      + sizeof(CMsgGCCStrike15_v2_ClientReportValidation::_impl_.report_count_)
      - PROTOBUF_FIELD_OFFSET(CMsgGCCStrike15_v2_ClientReportValidation, _impl_.total_files_)>(
          reinterpret_cast<char*>(&_impl_.total_files_),
          reinterpret_cast<char*>(&other->_impl_.total_files_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCCStrike15_v2_ClientReportValidation::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cstrike15_5fgcmessages_2eproto_getter, &descriptor_table_cstrike15_5fgcmessages_2eproto_once,
      file_level_metadata_cstrike15_5fgcmessages_2eproto[163]);
}

// ===================================================================

class CMsgGCCStrike15_v2_GC2ClientRefuseSecureMode::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCCStrike15_v2_GC2ClientRefuseSecureMode>()._impl_._has_bits_);
  static void set_has_file_report(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_offer_insecure_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_offer_secure_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_show_unsigned_ui(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_kick_user(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_show_trusted_ui(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_show_warning_not_trusted(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_show_warning_not_trusted_2(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_files_prevented_trusted(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgGCCStrike15_v2_GC2ClientRefuseSecureMode::CMsgGCCStrike15_v2_GC2ClientRefuseSecureMode(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgGCCStrike15_v2_GC2ClientRefuseSecureMode)
}
CMsgGCCStrike15_v2_GC2ClientRefuseSecureMode::CMsgGCCStrike15_v2_GC2ClientRefuseSecureMode(const CMsgGCCStrike15_v2_GC2ClientRefuseSecureMode& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgGCCStrike15_v2_GC2ClientRefuseSecureMode* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.file_report_){}
    , decltype(_impl_.files_prevented_trusted_){}
    , decltype(_impl_.offer_insecure_mode_){}
    , decltype(_impl_.offer_secure_mode_){}
    , decltype(_impl_.show_unsigned_ui_){}
    , decltype(_impl_.kick_user_){}
    , decltype(_impl_.show_trusted_ui_){}
    , decltype(_impl_.show_warning_not_trusted_){}
    , decltype(_impl_.show_warning_not_trusted_2_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.file_report_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.file_report_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_file_report()) {
    _this->_impl_.file_report_.Set(from._internal_file_report(), 
      _this->GetArenaForAllocation());
  }
  _impl_.files_prevented_trusted_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.files_prevented_trusted_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_files_prevented_trusted()) {
    _this->_impl_.files_prevented_trusted_.Set(from._internal_files_prevented_trusted(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.offer_insecure_mode_, &from._impl_.offer_insecure_mode_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.show_warning_not_trusted_2_) -
    reinterpret_cast<char*>(&_impl_.offer_insecure_mode_)) + sizeof(_impl_.show_warning_not_trusted_2_));
  // @@protoc_insertion_point(copy_constructor:CMsgGCCStrike15_v2_GC2ClientRefuseSecureMode)
}

inline void CMsgGCCStrike15_v2_GC2ClientRefuseSecureMode::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.file_report_){}
    , decltype(_impl_.files_prevented_trusted_){}
    , decltype(_impl_.offer_insecure_mode_){false}
    , decltype(_impl_.offer_secure_mode_){false}
    , decltype(_impl_.show_unsigned_ui_){false}
    , decltype(_impl_.kick_user_){false}
    , decltype(_impl_.show_trusted_ui_){false}
    , decltype(_impl_.show_warning_not_trusted_){false}
    , decltype(_impl_.show_warning_not_trusted_2_){false}
  };
  _impl_.file_report_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.file_report_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.files_prevented_trusted_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.files_prevented_trusted_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CMsgGCCStrike15_v2_GC2ClientRefuseSecureMode::~CMsgGCCStrike15_v2_GC2ClientRefuseSecureMode() {
  // @@protoc_insertion_point(destructor:CMsgGCCStrike15_v2_GC2ClientRefuseSecureMode)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgGCCStrike15_v2_GC2ClientRefuseSecureMode::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.file_report_.Destroy();
  _impl_.files_prevented_trusted_.Destroy();
}

void CMsgGCCStrike15_v2_GC2ClientRefuseSecureMode::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgGCCStrike15_v2_GC2ClientRefuseSecureMode::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCCStrike15_v2_GC2ClientRefuseSecureMode)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.file_report_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.files_prevented_trusted_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x000000fcu) {
    ::memset(&_impl_.offer_insecure_mode_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.show_warning_not_trusted_) -
        reinterpret_cast<char*>(&_impl_.offer_insecure_mode_)) + sizeof(_impl_.show_warning_not_trusted_));
  }
  _impl_.show_warning_not_trusted_2_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCCStrike15_v2_GC2ClientRefuseSecureMode::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string file_report = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_file_report();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CMsgGCCStrike15_v2_GC2ClientRefuseSecureMode.file_report");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional bool offer_insecure_mode = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_offer_insecure_mode(&has_bits);
          _impl_.offer_insecure_mode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool offer_secure_mode = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_offer_secure_mode(&has_bits);
          _impl_.offer_secure_mode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool show_unsigned_ui = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_show_unsigned_ui(&has_bits);
          _impl_.show_unsigned_ui_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool kick_user = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_kick_user(&has_bits);
          _impl_.kick_user_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool show_trusted_ui = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_show_trusted_ui(&has_bits);
          _impl_.show_trusted_ui_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool show_warning_not_trusted = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_show_warning_not_trusted(&has_bits);
          _impl_.show_warning_not_trusted_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool show_warning_not_trusted_2 = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_show_warning_not_trusted_2(&has_bits);
          _impl_.show_warning_not_trusted_2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string files_prevented_trusted = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_files_prevented_trusted();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CMsgGCCStrike15_v2_GC2ClientRefuseSecureMode.files_prevented_trusted");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgGCCStrike15_v2_GC2ClientRefuseSecureMode::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCCStrike15_v2_GC2ClientRefuseSecureMode)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string file_report = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_file_report().data(), static_cast<int>(this->_internal_file_report().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgGCCStrike15_v2_GC2ClientRefuseSecureMode.file_report");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_file_report(), target);
  }

  // optional bool offer_insecure_mode = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_offer_insecure_mode(), target);
  }

  // optional bool offer_secure_mode = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_offer_secure_mode(), target);
  }

  // optional bool show_unsigned_ui = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_show_unsigned_ui(), target);
  }

  // optional bool kick_user = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_kick_user(), target);
  }

  // optional bool show_trusted_ui = 6;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(6, this->_internal_show_trusted_ui(), target);
  }

  // optional bool show_warning_not_trusted = 7;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(7, this->_internal_show_warning_not_trusted(), target);
  }

  // optional bool show_warning_not_trusted_2 = 8;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(8, this->_internal_show_warning_not_trusted_2(), target);
  }

  // optional string files_prevented_trusted = 9;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_files_prevented_trusted().data(), static_cast<int>(this->_internal_files_prevented_trusted().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgGCCStrike15_v2_GC2ClientRefuseSecureMode.files_prevented_trusted");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_files_prevented_trusted(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCCStrike15_v2_GC2ClientRefuseSecureMode)
  return target;
}

size_t CMsgGCCStrike15_v2_GC2ClientRefuseSecureMode::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCCStrike15_v2_GC2ClientRefuseSecureMode)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string file_report = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_file_report());
    }

    // optional string files_prevented_trusted = 9;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_files_prevented_trusted());
    }

    // optional bool offer_insecure_mode = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional bool offer_secure_mode = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional bool show_unsigned_ui = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional bool kick_user = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional bool show_trusted_ui = 6;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

    // optional bool show_warning_not_trusted = 7;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  // optional bool show_warning_not_trusted_2 = 8;
  if (cached_has_bits & 0x00000100u) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgGCCStrike15_v2_GC2ClientRefuseSecureMode::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgGCCStrike15_v2_GC2ClientRefuseSecureMode::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgGCCStrike15_v2_GC2ClientRefuseSecureMode::GetClassData() const { return &_class_data_; }


void CMsgGCCStrike15_v2_GC2ClientRefuseSecureMode::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgGCCStrike15_v2_GC2ClientRefuseSecureMode*>(&to_msg);
  auto& from = static_cast<const CMsgGCCStrike15_v2_GC2ClientRefuseSecureMode&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCCStrike15_v2_GC2ClientRefuseSecureMode)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_file_report(from._internal_file_report());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_files_prevented_trusted(from._internal_files_prevented_trusted());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.offer_insecure_mode_ = from._impl_.offer_insecure_mode_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.offer_secure_mode_ = from._impl_.offer_secure_mode_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.show_unsigned_ui_ = from._impl_.show_unsigned_ui_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.kick_user_ = from._impl_.kick_user_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.show_trusted_ui_ = from._impl_.show_trusted_ui_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.show_warning_not_trusted_ = from._impl_.show_warning_not_trusted_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    _this->_internal_set_show_warning_not_trusted_2(from._internal_show_warning_not_trusted_2());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgGCCStrike15_v2_GC2ClientRefuseSecureMode::CopyFrom(const CMsgGCCStrike15_v2_GC2ClientRefuseSecureMode& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCCStrike15_v2_GC2ClientRefuseSecureMode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCCStrike15_v2_GC2ClientRefuseSecureMode::IsInitialized() const {
  return true;
}

void CMsgGCCStrike15_v2_GC2ClientRefuseSecureMode::InternalSwap(CMsgGCCStrike15_v2_GC2ClientRefuseSecureMode* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.file_report_, lhs_arena,
      &other->_impl_.file_report_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.files_prevented_trusted_, lhs_arena,
      &other->_impl_.files_prevented_trusted_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgGCCStrike15_v2_GC2ClientRefuseSecureMode, _impl_.show_warning_not_trusted_2_)
      + sizeof(CMsgGCCStrike15_v2_GC2ClientRefuseSecureMode::_impl_.show_warning_not_trusted_2_)
      - PROTOBUF_FIELD_OFFSET(CMsgGCCStrike15_v2_GC2ClientRefuseSecureMode, _impl_.offer_insecure_mode_)>(
          reinterpret_cast<char*>(&_impl_.offer_insecure_mode_),
          reinterpret_cast<char*>(&other->_impl_.offer_insecure_mode_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCCStrike15_v2_GC2ClientRefuseSecureMode::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cstrike15_5fgcmessages_2eproto_getter, &descriptor_table_cstrike15_5fgcmessages_2eproto_once,
      file_level_metadata_cstrike15_5fgcmessages_2eproto[164]);
}

// ===================================================================

class CMsgGCCStrike15_v2_GC2ClientRequestValidation::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCCStrike15_v2_GC2ClientRequestValidation>()._impl_._has_bits_);
  static void set_has_full_report(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_module(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgGCCStrike15_v2_GC2ClientRequestValidation::CMsgGCCStrike15_v2_GC2ClientRequestValidation(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgGCCStrike15_v2_GC2ClientRequestValidation)
}
CMsgGCCStrike15_v2_GC2ClientRequestValidation::CMsgGCCStrike15_v2_GC2ClientRequestValidation(const CMsgGCCStrike15_v2_GC2ClientRequestValidation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgGCCStrike15_v2_GC2ClientRequestValidation* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.module_){}
    , decltype(_impl_.full_report_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.module_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.module_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_module()) {
    _this->_impl_.module_.Set(from._internal_module(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.full_report_ = from._impl_.full_report_;
  // @@protoc_insertion_point(copy_constructor:CMsgGCCStrike15_v2_GC2ClientRequestValidation)
}

inline void CMsgGCCStrike15_v2_GC2ClientRequestValidation::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.module_){}
    , decltype(_impl_.full_report_){false}
  };
  _impl_.module_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.module_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CMsgGCCStrike15_v2_GC2ClientRequestValidation::~CMsgGCCStrike15_v2_GC2ClientRequestValidation() {
  // @@protoc_insertion_point(destructor:CMsgGCCStrike15_v2_GC2ClientRequestValidation)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgGCCStrike15_v2_GC2ClientRequestValidation::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.module_.Destroy();
}

void CMsgGCCStrike15_v2_GC2ClientRequestValidation::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgGCCStrike15_v2_GC2ClientRequestValidation::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCCStrike15_v2_GC2ClientRequestValidation)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.module_.ClearNonDefaultToEmpty();
  }
  _impl_.full_report_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCCStrike15_v2_GC2ClientRequestValidation::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool full_report = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_full_report(&has_bits);
          _impl_.full_report_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string module = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_module();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CMsgGCCStrike15_v2_GC2ClientRequestValidation.module");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgGCCStrike15_v2_GC2ClientRequestValidation::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCCStrike15_v2_GC2ClientRequestValidation)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool full_report = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_full_report(), target);
  }

  // optional string module = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_module().data(), static_cast<int>(this->_internal_module().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgGCCStrike15_v2_GC2ClientRequestValidation.module");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_module(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCCStrike15_v2_GC2ClientRequestValidation)
  return target;
}

size_t CMsgGCCStrike15_v2_GC2ClientRequestValidation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCCStrike15_v2_GC2ClientRequestValidation)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string module = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_module());
    }

    // optional bool full_report = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgGCCStrike15_v2_GC2ClientRequestValidation::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgGCCStrike15_v2_GC2ClientRequestValidation::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgGCCStrike15_v2_GC2ClientRequestValidation::GetClassData() const { return &_class_data_; }


void CMsgGCCStrike15_v2_GC2ClientRequestValidation::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgGCCStrike15_v2_GC2ClientRequestValidation*>(&to_msg);
  auto& from = static_cast<const CMsgGCCStrike15_v2_GC2ClientRequestValidation&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCCStrike15_v2_GC2ClientRequestValidation)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_module(from._internal_module());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.full_report_ = from._impl_.full_report_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgGCCStrike15_v2_GC2ClientRequestValidation::CopyFrom(const CMsgGCCStrike15_v2_GC2ClientRequestValidation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCCStrike15_v2_GC2ClientRequestValidation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCCStrike15_v2_GC2ClientRequestValidation::IsInitialized() const {
  return true;
}

void CMsgGCCStrike15_v2_GC2ClientRequestValidation::InternalSwap(CMsgGCCStrike15_v2_GC2ClientRequestValidation* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.module_, lhs_arena,
      &other->_impl_.module_, rhs_arena
  );
  swap(_impl_.full_report_, other->_impl_.full_report_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCCStrike15_v2_GC2ClientRequestValidation::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cstrike15_5fgcmessages_2eproto_getter, &descriptor_table_cstrike15_5fgcmessages_2eproto_once,
      file_level_metadata_cstrike15_5fgcmessages_2eproto[165]);
}

// ===================================================================

class CMsgGCCStrike15_v2_GC2ClientInitSystem::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCCStrike15_v2_GC2ClientInitSystem>()._impl_._has_bits_);
  static void set_has_load(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_outputname(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_key_data(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_sha_hash(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_cookie(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_manifest(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_system_package(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_load_system(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
};

CMsgGCCStrike15_v2_GC2ClientInitSystem::CMsgGCCStrike15_v2_GC2ClientInitSystem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgGCCStrike15_v2_GC2ClientInitSystem)
}
CMsgGCCStrike15_v2_GC2ClientInitSystem::CMsgGCCStrike15_v2_GC2ClientInitSystem(const CMsgGCCStrike15_v2_GC2ClientInitSystem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgGCCStrike15_v2_GC2ClientInitSystem* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_){}
    , decltype(_impl_.outputname_){}
    , decltype(_impl_.key_data_){}
    , decltype(_impl_.sha_hash_){}
    , decltype(_impl_.manifest_){}
    , decltype(_impl_.system_package_){}
    , decltype(_impl_.load_){}
    , decltype(_impl_.load_system_){}
    , decltype(_impl_.cookie_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.outputname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.outputname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_outputname()) {
    _this->_impl_.outputname_.Set(from._internal_outputname(), 
      _this->GetArenaForAllocation());
  }
  _impl_.key_data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.key_data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_key_data()) {
    _this->_impl_.key_data_.Set(from._internal_key_data(), 
      _this->GetArenaForAllocation());
  }
  _impl_.sha_hash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sha_hash_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_sha_hash()) {
    _this->_impl_.sha_hash_.Set(from._internal_sha_hash(), 
      _this->GetArenaForAllocation());
  }
  _impl_.manifest_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.manifest_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_manifest()) {
    _this->_impl_.manifest_.Set(from._internal_manifest(), 
      _this->GetArenaForAllocation());
  }
  _impl_.system_package_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.system_package_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_system_package()) {
    _this->_impl_.system_package_.Set(from._internal_system_package(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.load_, &from._impl_.load_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.cookie_) -
    reinterpret_cast<char*>(&_impl_.load_)) + sizeof(_impl_.cookie_));
  // @@protoc_insertion_point(copy_constructor:CMsgGCCStrike15_v2_GC2ClientInitSystem)
}

inline void CMsgGCCStrike15_v2_GC2ClientInitSystem::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_){}
    , decltype(_impl_.outputname_){}
    , decltype(_impl_.key_data_){}
    , decltype(_impl_.sha_hash_){}
    , decltype(_impl_.manifest_){}
    , decltype(_impl_.system_package_){}
    , decltype(_impl_.load_){false}
    , decltype(_impl_.load_system_){false}
    , decltype(_impl_.cookie_){0}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.outputname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.outputname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.key_data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.key_data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.sha_hash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sha_hash_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.manifest_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.manifest_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.system_package_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.system_package_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CMsgGCCStrike15_v2_GC2ClientInitSystem::~CMsgGCCStrike15_v2_GC2ClientInitSystem() {
  // @@protoc_insertion_point(destructor:CMsgGCCStrike15_v2_GC2ClientInitSystem)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgGCCStrike15_v2_GC2ClientInitSystem::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
  _impl_.outputname_.Destroy();
  _impl_.key_data_.Destroy();
  _impl_.sha_hash_.Destroy();
  _impl_.manifest_.Destroy();
  _impl_.system_package_.Destroy();
}

void CMsgGCCStrike15_v2_GC2ClientInitSystem::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgGCCStrike15_v2_GC2ClientInitSystem::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCCStrike15_v2_GC2ClientInitSystem)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.outputname_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.key_data_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.sha_hash_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.manifest_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000020u) {
      _impl_.system_package_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x000000c0u) {
    ::memset(&_impl_.load_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.load_system_) -
        reinterpret_cast<char*>(&_impl_.load_)) + sizeof(_impl_.load_system_));
  }
  _impl_.cookie_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCCStrike15_v2_GC2ClientInitSystem::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool load = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_load(&has_bits);
          _impl_.load_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CMsgGCCStrike15_v2_GC2ClientInitSystem.name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string outputname = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_outputname();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CMsgGCCStrike15_v2_GC2ClientInitSystem.outputname");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional bytes key_data = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_key_data();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes sha_hash = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_sha_hash();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 cookie = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_cookie(&has_bits);
          _impl_.cookie_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string manifest = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_manifest();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CMsgGCCStrike15_v2_GC2ClientInitSystem.manifest");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional bytes system_package = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_system_package();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool load_system = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_load_system(&has_bits);
          _impl_.load_system_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgGCCStrike15_v2_GC2ClientInitSystem::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCCStrike15_v2_GC2ClientInitSystem)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool load = 1;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_load(), target);
  }

  // optional string name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgGCCStrike15_v2_GC2ClientInitSystem.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // optional string outputname = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_outputname().data(), static_cast<int>(this->_internal_outputname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgGCCStrike15_v2_GC2ClientInitSystem.outputname");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_outputname(), target);
  }

  // optional bytes key_data = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_key_data(), target);
  }

  // optional bytes sha_hash = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_sha_hash(), target);
  }

  // optional int32 cookie = 6;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(6, this->_internal_cookie(), target);
  }

  // optional string manifest = 7;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_manifest().data(), static_cast<int>(this->_internal_manifest().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgGCCStrike15_v2_GC2ClientInitSystem.manifest");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_manifest(), target);
  }

  // optional bytes system_package = 8;
  if (cached_has_bits & 0x00000020u) {
    target = stream->WriteBytesMaybeAliased(
        8, this->_internal_system_package(), target);
  }

  // optional bool load_system = 9;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(9, this->_internal_load_system(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCCStrike15_v2_GC2ClientInitSystem)
  return target;
}

size_t CMsgGCCStrike15_v2_GC2ClientInitSystem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCCStrike15_v2_GC2ClientInitSystem)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional string outputname = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_outputname());
    }

    // optional bytes key_data = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_key_data());
    }

    // optional bytes sha_hash = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_sha_hash());
    }

    // optional string manifest = 7;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_manifest());
    }

    // optional bytes system_package = 8;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_system_package());
    }

    // optional bool load = 1;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

    // optional bool load_system = 9;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  // optional int32 cookie = 6;
  if (cached_has_bits & 0x00000100u) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_cookie());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgGCCStrike15_v2_GC2ClientInitSystem::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgGCCStrike15_v2_GC2ClientInitSystem::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgGCCStrike15_v2_GC2ClientInitSystem::GetClassData() const { return &_class_data_; }


void CMsgGCCStrike15_v2_GC2ClientInitSystem::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgGCCStrike15_v2_GC2ClientInitSystem*>(&to_msg);
  auto& from = static_cast<const CMsgGCCStrike15_v2_GC2ClientInitSystem&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCCStrike15_v2_GC2ClientInitSystem)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_outputname(from._internal_outputname());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_key_data(from._internal_key_data());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_set_sha_hash(from._internal_sha_hash());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_set_manifest(from._internal_manifest());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_internal_set_system_package(from._internal_system_package());
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.load_ = from._impl_.load_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.load_system_ = from._impl_.load_system_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    _this->_internal_set_cookie(from._internal_cookie());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgGCCStrike15_v2_GC2ClientInitSystem::CopyFrom(const CMsgGCCStrike15_v2_GC2ClientInitSystem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCCStrike15_v2_GC2ClientInitSystem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCCStrike15_v2_GC2ClientInitSystem::IsInitialized() const {
  return true;
}

void CMsgGCCStrike15_v2_GC2ClientInitSystem::InternalSwap(CMsgGCCStrike15_v2_GC2ClientInitSystem* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.outputname_, lhs_arena,
      &other->_impl_.outputname_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.key_data_, lhs_arena,
      &other->_impl_.key_data_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.sha_hash_, lhs_arena,
      &other->_impl_.sha_hash_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.manifest_, lhs_arena,
      &other->_impl_.manifest_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.system_package_, lhs_arena,
      &other->_impl_.system_package_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgGCCStrike15_v2_GC2ClientInitSystem, _impl_.cookie_)
      + sizeof(CMsgGCCStrike15_v2_GC2ClientInitSystem::_impl_.cookie_)
      - PROTOBUF_FIELD_OFFSET(CMsgGCCStrike15_v2_GC2ClientInitSystem, _impl_.load_)>(
          reinterpret_cast<char*>(&_impl_.load_),
          reinterpret_cast<char*>(&other->_impl_.load_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCCStrike15_v2_GC2ClientInitSystem::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cstrike15_5fgcmessages_2eproto_getter, &descriptor_table_cstrike15_5fgcmessages_2eproto_once,
      file_level_metadata_cstrike15_5fgcmessages_2eproto[166]);
}

// ===================================================================

class CMsgGCCStrike15_v2_GC2ClientInitSystem_Response::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCCStrike15_v2_GC2ClientInitSystem_Response>()._impl_._has_bits_);
  static void set_has_success(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_diagnostic(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_sha_hash(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_response(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_error_code1(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_error_code2(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_handle(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_einit_result(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_aux_system1(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_aux_system2(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
};

CMsgGCCStrike15_v2_GC2ClientInitSystem_Response::CMsgGCCStrike15_v2_GC2ClientInitSystem_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgGCCStrike15_v2_GC2ClientInitSystem_Response)
}
CMsgGCCStrike15_v2_GC2ClientInitSystem_Response::CMsgGCCStrike15_v2_GC2ClientInitSystem_Response(const CMsgGCCStrike15_v2_GC2ClientInitSystem_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgGCCStrike15_v2_GC2ClientInitSystem_Response* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.diagnostic_){}
    , decltype(_impl_.sha_hash_){}
    , decltype(_impl_.success_){}
    , decltype(_impl_.response_){}
    , decltype(_impl_.error_code1_){}
    , decltype(_impl_.error_code2_){}
    , decltype(_impl_.handle_){}
    , decltype(_impl_.einit_result_){}
    , decltype(_impl_.aux_system1_){}
    , decltype(_impl_.aux_system2_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.diagnostic_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.diagnostic_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_diagnostic()) {
    _this->_impl_.diagnostic_.Set(from._internal_diagnostic(), 
      _this->GetArenaForAllocation());
  }
  _impl_.sha_hash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sha_hash_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_sha_hash()) {
    _this->_impl_.sha_hash_.Set(from._internal_sha_hash(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.success_, &from._impl_.success_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.aux_system2_) -
    reinterpret_cast<char*>(&_impl_.success_)) + sizeof(_impl_.aux_system2_));
  // @@protoc_insertion_point(copy_constructor:CMsgGCCStrike15_v2_GC2ClientInitSystem_Response)
}

inline void CMsgGCCStrike15_v2_GC2ClientInitSystem_Response::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.diagnostic_){}
    , decltype(_impl_.sha_hash_){}
    , decltype(_impl_.success_){false}
    , decltype(_impl_.response_){0}
    , decltype(_impl_.error_code1_){0}
    , decltype(_impl_.error_code2_){0}
    , decltype(_impl_.handle_){int64_t{0}}
    , decltype(_impl_.einit_result_){0}
    , decltype(_impl_.aux_system1_){0}
    , decltype(_impl_.aux_system2_){0}
  };
  _impl_.diagnostic_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.diagnostic_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.sha_hash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sha_hash_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CMsgGCCStrike15_v2_GC2ClientInitSystem_Response::~CMsgGCCStrike15_v2_GC2ClientInitSystem_Response() {
  // @@protoc_insertion_point(destructor:CMsgGCCStrike15_v2_GC2ClientInitSystem_Response)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgGCCStrike15_v2_GC2ClientInitSystem_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.diagnostic_.Destroy();
  _impl_.sha_hash_.Destroy();
}

void CMsgGCCStrike15_v2_GC2ClientInitSystem_Response::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgGCCStrike15_v2_GC2ClientInitSystem_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCCStrike15_v2_GC2ClientInitSystem_Response)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.diagnostic_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.sha_hash_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x000000fcu) {
    ::memset(&_impl_.success_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.einit_result_) -
        reinterpret_cast<char*>(&_impl_.success_)) + sizeof(_impl_.einit_result_));
  }
  if (cached_has_bits & 0x00000300u) {
    ::memset(&_impl_.aux_system1_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.aux_system2_) -
        reinterpret_cast<char*>(&_impl_.aux_system1_)) + sizeof(_impl_.aux_system2_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCCStrike15_v2_GC2ClientInitSystem_Response::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool success = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_success(&has_bits);
          _impl_.success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string diagnostic = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_diagnostic();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CMsgGCCStrike15_v2_GC2ClientInitSystem_Response.diagnostic");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional bytes sha_hash = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_sha_hash();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 response = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_response(&has_bits);
          _impl_.response_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 error_code1 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_error_code1(&has_bits);
          _impl_.error_code1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 error_code2 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_error_code2(&has_bits);
          _impl_.error_code2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 handle = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_handle(&has_bits);
          _impl_.handle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .EInitSystemResult einit_result = 8 [default = k_EInitSystemResult_Invalid];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::EInitSystemResult_IsValid(val))) {
            _internal_set_einit_result(static_cast<::EInitSystemResult>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(8, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional int32 aux_system1 = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_aux_system1(&has_bits);
          _impl_.aux_system1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 aux_system2 = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_aux_system2(&has_bits);
          _impl_.aux_system2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgGCCStrike15_v2_GC2ClientInitSystem_Response::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCCStrike15_v2_GC2ClientInitSystem_Response)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool success = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_success(), target);
  }

  // optional string diagnostic = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_diagnostic().data(), static_cast<int>(this->_internal_diagnostic().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgGCCStrike15_v2_GC2ClientInitSystem_Response.diagnostic");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_diagnostic(), target);
  }

  // optional bytes sha_hash = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_sha_hash(), target);
  }

  // optional int32 response = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_response(), target);
  }

  // optional int32 error_code1 = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_error_code1(), target);
  }

  // optional int32 error_code2 = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(6, this->_internal_error_code2(), target);
  }

  // optional int64 handle = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(7, this->_internal_handle(), target);
  }

  // optional .EInitSystemResult einit_result = 8 [default = k_EInitSystemResult_Invalid];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      8, this->_internal_einit_result(), target);
  }

  // optional int32 aux_system1 = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(9, this->_internal_aux_system1(), target);
  }

  // optional int32 aux_system2 = 10;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(10, this->_internal_aux_system2(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCCStrike15_v2_GC2ClientInitSystem_Response)
  return target;
}

size_t CMsgGCCStrike15_v2_GC2ClientInitSystem_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCCStrike15_v2_GC2ClientInitSystem_Response)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string diagnostic = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_diagnostic());
    }

    // optional bytes sha_hash = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_sha_hash());
    }

    // optional bool success = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional int32 response = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_response());
    }

    // optional int32 error_code1 = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_error_code1());
    }

    // optional int32 error_code2 = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_error_code2());
    }

    // optional int64 handle = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_handle());
    }

    // optional .EInitSystemResult einit_result = 8 [default = k_EInitSystemResult_Invalid];
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_einit_result());
    }

  }
  if (cached_has_bits & 0x00000300u) {
    // optional int32 aux_system1 = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_aux_system1());
    }

    // optional int32 aux_system2 = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_aux_system2());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgGCCStrike15_v2_GC2ClientInitSystem_Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgGCCStrike15_v2_GC2ClientInitSystem_Response::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgGCCStrike15_v2_GC2ClientInitSystem_Response::GetClassData() const { return &_class_data_; }


void CMsgGCCStrike15_v2_GC2ClientInitSystem_Response::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgGCCStrike15_v2_GC2ClientInitSystem_Response*>(&to_msg);
  auto& from = static_cast<const CMsgGCCStrike15_v2_GC2ClientInitSystem_Response&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCCStrike15_v2_GC2ClientInitSystem_Response)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_diagnostic(from._internal_diagnostic());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_sha_hash(from._internal_sha_hash());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.success_ = from._impl_.success_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.response_ = from._impl_.response_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.error_code1_ = from._impl_.error_code1_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.error_code2_ = from._impl_.error_code2_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.handle_ = from._impl_.handle_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.einit_result_ = from._impl_.einit_result_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.aux_system1_ = from._impl_.aux_system1_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.aux_system2_ = from._impl_.aux_system2_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgGCCStrike15_v2_GC2ClientInitSystem_Response::CopyFrom(const CMsgGCCStrike15_v2_GC2ClientInitSystem_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCCStrike15_v2_GC2ClientInitSystem_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCCStrike15_v2_GC2ClientInitSystem_Response::IsInitialized() const {
  return true;
}

void CMsgGCCStrike15_v2_GC2ClientInitSystem_Response::InternalSwap(CMsgGCCStrike15_v2_GC2ClientInitSystem_Response* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.diagnostic_, lhs_arena,
      &other->_impl_.diagnostic_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.sha_hash_, lhs_arena,
      &other->_impl_.sha_hash_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgGCCStrike15_v2_GC2ClientInitSystem_Response, _impl_.aux_system2_)
      + sizeof(CMsgGCCStrike15_v2_GC2ClientInitSystem_Response::_impl_.aux_system2_)
      - PROTOBUF_FIELD_OFFSET(CMsgGCCStrike15_v2_GC2ClientInitSystem_Response, _impl_.success_)>(
          reinterpret_cast<char*>(&_impl_.success_),
          reinterpret_cast<char*>(&other->_impl_.success_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCCStrike15_v2_GC2ClientInitSystem_Response::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cstrike15_5fgcmessages_2eproto_getter, &descriptor_table_cstrike15_5fgcmessages_2eproto_once,
      file_level_metadata_cstrike15_5fgcmessages_2eproto[167]);
}

// ===================================================================

class CMsgGCCStrike15_v2_SetPlayerLeaderboardSafeName::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCCStrike15_v2_SetPlayerLeaderboardSafeName>()._impl_._has_bits_);
  static void set_has_leaderboard_safe_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgGCCStrike15_v2_SetPlayerLeaderboardSafeName::CMsgGCCStrike15_v2_SetPlayerLeaderboardSafeName(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgGCCStrike15_v2_SetPlayerLeaderboardSafeName)
}
CMsgGCCStrike15_v2_SetPlayerLeaderboardSafeName::CMsgGCCStrike15_v2_SetPlayerLeaderboardSafeName(const CMsgGCCStrike15_v2_SetPlayerLeaderboardSafeName& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgGCCStrike15_v2_SetPlayerLeaderboardSafeName* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.leaderboard_safe_name_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.leaderboard_safe_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.leaderboard_safe_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_leaderboard_safe_name()) {
    _this->_impl_.leaderboard_safe_name_.Set(from._internal_leaderboard_safe_name(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:CMsgGCCStrike15_v2_SetPlayerLeaderboardSafeName)
}

inline void CMsgGCCStrike15_v2_SetPlayerLeaderboardSafeName::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.leaderboard_safe_name_){}
  };
  _impl_.leaderboard_safe_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.leaderboard_safe_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CMsgGCCStrike15_v2_SetPlayerLeaderboardSafeName::~CMsgGCCStrike15_v2_SetPlayerLeaderboardSafeName() {
  // @@protoc_insertion_point(destructor:CMsgGCCStrike15_v2_SetPlayerLeaderboardSafeName)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgGCCStrike15_v2_SetPlayerLeaderboardSafeName::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.leaderboard_safe_name_.Destroy();
}

void CMsgGCCStrike15_v2_SetPlayerLeaderboardSafeName::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgGCCStrike15_v2_SetPlayerLeaderboardSafeName::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCCStrike15_v2_SetPlayerLeaderboardSafeName)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.leaderboard_safe_name_.ClearNonDefaultToEmpty();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCCStrike15_v2_SetPlayerLeaderboardSafeName::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string leaderboard_safe_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_leaderboard_safe_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CMsgGCCStrike15_v2_SetPlayerLeaderboardSafeName.leaderboard_safe_name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgGCCStrike15_v2_SetPlayerLeaderboardSafeName::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCCStrike15_v2_SetPlayerLeaderboardSafeName)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string leaderboard_safe_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_leaderboard_safe_name().data(), static_cast<int>(this->_internal_leaderboard_safe_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgGCCStrike15_v2_SetPlayerLeaderboardSafeName.leaderboard_safe_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_leaderboard_safe_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCCStrike15_v2_SetPlayerLeaderboardSafeName)
  return target;
}

size_t CMsgGCCStrike15_v2_SetPlayerLeaderboardSafeName::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCCStrike15_v2_SetPlayerLeaderboardSafeName)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string leaderboard_safe_name = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_leaderboard_safe_name());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgGCCStrike15_v2_SetPlayerLeaderboardSafeName::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgGCCStrike15_v2_SetPlayerLeaderboardSafeName::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgGCCStrike15_v2_SetPlayerLeaderboardSafeName::GetClassData() const { return &_class_data_; }


void CMsgGCCStrike15_v2_SetPlayerLeaderboardSafeName::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgGCCStrike15_v2_SetPlayerLeaderboardSafeName*>(&to_msg);
  auto& from = static_cast<const CMsgGCCStrike15_v2_SetPlayerLeaderboardSafeName&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCCStrike15_v2_SetPlayerLeaderboardSafeName)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_leaderboard_safe_name()) {
    _this->_internal_set_leaderboard_safe_name(from._internal_leaderboard_safe_name());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgGCCStrike15_v2_SetPlayerLeaderboardSafeName::CopyFrom(const CMsgGCCStrike15_v2_SetPlayerLeaderboardSafeName& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCCStrike15_v2_SetPlayerLeaderboardSafeName)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCCStrike15_v2_SetPlayerLeaderboardSafeName::IsInitialized() const {
  return true;
}

void CMsgGCCStrike15_v2_SetPlayerLeaderboardSafeName::InternalSwap(CMsgGCCStrike15_v2_SetPlayerLeaderboardSafeName* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.leaderboard_safe_name_, lhs_arena,
      &other->_impl_.leaderboard_safe_name_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCCStrike15_v2_SetPlayerLeaderboardSafeName::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cstrike15_5fgcmessages_2eproto_getter, &descriptor_table_cstrike15_5fgcmessages_2eproto_once,
      file_level_metadata_cstrike15_5fgcmessages_2eproto[168]);
}

// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::GameServerPing*
Arena::CreateMaybeMessage< ::GameServerPing >(Arena* arena) {
  return Arena::CreateMessageInternal< ::GameServerPing >(arena);
}
template<> PROTOBUF_NOINLINE ::DataCenterPing*
Arena::CreateMaybeMessage< ::DataCenterPing >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DataCenterPing >(arena);
}
template<> PROTOBUF_NOINLINE ::DetailedSearchStatistic*
Arena::CreateMaybeMessage< ::DetailedSearchStatistic >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DetailedSearchStatistic >(arena);
}
template<> PROTOBUF_NOINLINE ::TournamentPlayer*
Arena::CreateMaybeMessage< ::TournamentPlayer >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TournamentPlayer >(arena);
}
template<> PROTOBUF_NOINLINE ::TournamentTeam*
Arena::CreateMaybeMessage< ::TournamentTeam >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TournamentTeam >(arena);
}
template<> PROTOBUF_NOINLINE ::TournamentEvent*
Arena::CreateMaybeMessage< ::TournamentEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TournamentEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::GlobalStatistics*
Arena::CreateMaybeMessage< ::GlobalStatistics >(Arena* arena) {
  return Arena::CreateMessageInternal< ::GlobalStatistics >(arena);
}
template<> PROTOBUF_NOINLINE ::OperationalStatisticDescription*
Arena::CreateMaybeMessage< ::OperationalStatisticDescription >(Arena* arena) {
  return Arena::CreateMessageInternal< ::OperationalStatisticDescription >(arena);
}
template<> PROTOBUF_NOINLINE ::OperationalStatisticElement*
Arena::CreateMaybeMessage< ::OperationalStatisticElement >(Arena* arena) {
  return Arena::CreateMessageInternal< ::OperationalStatisticElement >(arena);
}
template<> PROTOBUF_NOINLINE ::OperationalStatisticsPacket*
Arena::CreateMaybeMessage< ::OperationalStatisticsPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::OperationalStatisticsPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::OperationalVarValue*
Arena::CreateMaybeMessage< ::OperationalVarValue >(Arena* arena) {
  return Arena::CreateMessageInternal< ::OperationalVarValue >(arena);
}
template<> PROTOBUF_NOINLINE ::PlayerRankingInfo_PerMapRank*
Arena::CreateMaybeMessage< ::PlayerRankingInfo_PerMapRank >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PlayerRankingInfo_PerMapRank >(arena);
}
template<> PROTOBUF_NOINLINE ::PlayerRankingInfo*
Arena::CreateMaybeMessage< ::PlayerRankingInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PlayerRankingInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::PlayerCommendationInfo*
Arena::CreateMaybeMessage< ::PlayerCommendationInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PlayerCommendationInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::PlayerMedalsInfo*
Arena::CreateMaybeMessage< ::PlayerMedalsInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PlayerMedalsInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::AccountActivity*
Arena::CreateMaybeMessage< ::AccountActivity >(Arena* arena) {
  return Arena::CreateMessageInternal< ::AccountActivity >(arena);
}
template<> PROTOBUF_NOINLINE ::TournamentMatchSetup*
Arena::CreateMaybeMessage< ::TournamentMatchSetup >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TournamentMatchSetup >(arena);
}
template<> PROTOBUF_NOINLINE ::ServerHltvInfo*
Arena::CreateMaybeMessage< ::ServerHltvInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ServerHltvInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::IpAddressMask*
Arena::CreateMaybeMessage< ::IpAddressMask >(Arena* arena) {
  return Arena::CreateMessageInternal< ::IpAddressMask >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgCsgoSteamUserStatChange*
Arena::CreateMaybeMessage< ::CMsgCsgoSteamUserStatChange >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgCsgoSteamUserStatChange >(arena);
}
template<> PROTOBUF_NOINLINE ::XpProgressData*
Arena::CreateMaybeMessage< ::XpProgressData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::XpProgressData >(arena);
}
template<> PROTOBUF_NOINLINE ::MatchEndItemUpdates*
Arena::CreateMaybeMessage< ::MatchEndItemUpdates >(Arena* arena) {
  return Arena::CreateMessageInternal< ::MatchEndItemUpdates >(arena);
}
template<> PROTOBUF_NOINLINE ::ScoreLeaderboardData_Entry*
Arena::CreateMaybeMessage< ::ScoreLeaderboardData_Entry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ScoreLeaderboardData_Entry >(arena);
}
template<> PROTOBUF_NOINLINE ::ScoreLeaderboardData_AccountEntries*
Arena::CreateMaybeMessage< ::ScoreLeaderboardData_AccountEntries >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ScoreLeaderboardData_AccountEntries >(arena);
}
template<> PROTOBUF_NOINLINE ::ScoreLeaderboardData*
Arena::CreateMaybeMessage< ::ScoreLeaderboardData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ScoreLeaderboardData >(arena);
}
template<> PROTOBUF_NOINLINE ::PlayerQuestData_QuestItemData*
Arena::CreateMaybeMessage< ::PlayerQuestData_QuestItemData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PlayerQuestData_QuestItemData >(arena);
}
template<> PROTOBUF_NOINLINE ::PlayerQuestData*
Arena::CreateMaybeMessage< ::PlayerQuestData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PlayerQuestData >(arena);
}
template<> PROTOBUF_NOINLINE ::DeepPlayerStatsEntry*
Arena::CreateMaybeMessage< ::DeepPlayerStatsEntry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DeepPlayerStatsEntry >(arena);
}
template<> PROTOBUF_NOINLINE ::DeepPlayerMatchEvent*
Arena::CreateMaybeMessage< ::DeepPlayerMatchEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DeepPlayerMatchEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGC_ServerQuestUpdateData*
Arena::CreateMaybeMessage< ::CMsgGC_ServerQuestUpdateData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGC_ServerQuestUpdateData >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm*
Arena::CreateMaybeMessage< ::CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCCStrike15_v2_GC2ServerReservationUpdate*
Arena::CreateMaybeMessage< ::CMsgGCCStrike15_v2_GC2ServerReservationUpdate >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCCStrike15_v2_GC2ServerReservationUpdate >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCCStrike15_v2_MatchmakingStart*
Arena::CreateMaybeMessage< ::CMsgGCCStrike15_v2_MatchmakingStart >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCCStrike15_v2_MatchmakingStart >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCCStrike15_v2_MatchmakingStop*
Arena::CreateMaybeMessage< ::CMsgGCCStrike15_v2_MatchmakingStop >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCCStrike15_v2_MatchmakingStop >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_Note*
Arena::CreateMaybeMessage< ::CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_Note >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate_Note >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCCStrike15_v2_MatchmakingClient2ServerPing*
Arena::CreateMaybeMessage< ::CMsgGCCStrike15_v2_MatchmakingClient2ServerPing >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCCStrike15_v2_MatchmakingClient2ServerPing >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate*
Arena::CreateMaybeMessage< ::CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate >(arena);
}
template<> PROTOBUF_NOINLINE ::CDataGCCStrike15_v2_TournamentMatchDraft_Entry*
Arena::CreateMaybeMessage< ::CDataGCCStrike15_v2_TournamentMatchDraft_Entry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDataGCCStrike15_v2_TournamentMatchDraft_Entry >(arena);
}
template<> PROTOBUF_NOINLINE ::CDataGCCStrike15_v2_TournamentMatchDraft*
Arena::CreateMaybeMessage< ::CDataGCCStrike15_v2_TournamentMatchDraft >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDataGCCStrike15_v2_TournamentMatchDraft >(arena);
}
template<> PROTOBUF_NOINLINE ::CPreMatchInfoData_TeamStats*
Arena::CreateMaybeMessage< ::CPreMatchInfoData_TeamStats >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CPreMatchInfoData_TeamStats >(arena);
}
template<> PROTOBUF_NOINLINE ::CPreMatchInfoData*
Arena::CreateMaybeMessage< ::CPreMatchInfoData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CPreMatchInfoData >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve*
Arena::CreateMaybeMessage< ::CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCCStrike15_v2_MatchmakingServerReservationResponse*
Arena::CreateMaybeMessage< ::CMsgGCCStrike15_v2_MatchmakingServerReservationResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCCStrike15_v2_MatchmakingServerReservationResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve*
Arena::CreateMaybeMessage< ::CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCCStrike15_v2_MatchmakingServerRoundStats_DropInfo*
Arena::CreateMaybeMessage< ::CMsgGCCStrike15_v2_MatchmakingServerRoundStats_DropInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCCStrike15_v2_MatchmakingServerRoundStats_DropInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCCStrike15_v2_MatchmakingServerRoundStats*
Arena::CreateMaybeMessage< ::CMsgGCCStrike15_v2_MatchmakingServerRoundStats >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCCStrike15_v2_MatchmakingServerRoundStats >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCCStrike15_v2_MatchmakingClient2GCHello*
Arena::CreateMaybeMessage< ::CMsgGCCStrike15_v2_MatchmakingClient2GCHello >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCCStrike15_v2_MatchmakingClient2GCHello >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCCStrike15_v2_MatchmakingGC2ClientHello*
Arena::CreateMaybeMessage< ::CMsgGCCStrike15_v2_MatchmakingGC2ClientHello >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCCStrike15_v2_MatchmakingGC2ClientHello >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCCStrike15_v2_AccountPrivacySettings_Setting*
Arena::CreateMaybeMessage< ::CMsgGCCStrike15_v2_AccountPrivacySettings_Setting >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCCStrike15_v2_AccountPrivacySettings_Setting >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCCStrike15_v2_AccountPrivacySettings*
Arena::CreateMaybeMessage< ::CMsgGCCStrike15_v2_AccountPrivacySettings >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCCStrike15_v2_AccountPrivacySettings >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon*
Arena::CreateMaybeMessage< ::CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCCStrike15_v2_ClientGCRankUpdate*
Arena::CreateMaybeMessage< ::CMsgGCCStrike15_v2_ClientGCRankUpdate >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCCStrike15_v2_ClientGCRankUpdate >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate*
Arena::CreateMaybeMessage< ::CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCCStrike15_v2_ServerNotificationForUserPenalty*
Arena::CreateMaybeMessage< ::CMsgGCCStrike15_v2_ServerNotificationForUserPenalty >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCCStrike15_v2_ServerNotificationForUserPenalty >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCCStrike15_v2_ClientReportPlayer*
Arena::CreateMaybeMessage< ::CMsgGCCStrike15_v2_ClientReportPlayer >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCCStrike15_v2_ClientReportPlayer >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCCStrike15_v2_ClientCommendPlayer*
Arena::CreateMaybeMessage< ::CMsgGCCStrike15_v2_ClientCommendPlayer >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCCStrike15_v2_ClientCommendPlayer >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCCStrike15_v2_ClientReportServer*
Arena::CreateMaybeMessage< ::CMsgGCCStrike15_v2_ClientReportServer >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCCStrike15_v2_ClientReportServer >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCCStrike15_v2_ClientReportResponse*
Arena::CreateMaybeMessage< ::CMsgGCCStrike15_v2_ClientReportResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCCStrike15_v2_ClientReportResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends*
Arena::CreateMaybeMessage< ::CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends >(arena);
}
template<> PROTOBUF_NOINLINE ::WatchableMatchInfo*
Arena::CreateMaybeMessage< ::WatchableMatchInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::WatchableMatchInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCCStrike15_v2_ClientRequestJoinFriendData*
Arena::CreateMaybeMessage< ::CMsgGCCStrike15_v2_ClientRequestJoinFriendData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCCStrike15_v2_ClientRequestJoinFriendData >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCCStrike15_v2_ClientRequestJoinServerData*
Arena::CreateMaybeMessage< ::CMsgGCCStrike15_v2_ClientRequestJoinServerData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCCStrike15_v2_ClientRequestJoinServerData >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCCstrike15_v2_ClientRequestNewMission*
Arena::CreateMaybeMessage< ::CMsgGCCstrike15_v2_ClientRequestNewMission >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCCstrike15_v2_ClientRequestNewMission >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCCstrike15_v2_ClientRedeemMissionReward*
Arena::CreateMaybeMessage< ::CMsgGCCstrike15_v2_ClientRedeemMissionReward >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCCstrike15_v2_ClientRedeemMissionReward >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCCstrike15_v2_ClientRedeemFreeReward*
Arena::CreateMaybeMessage< ::CMsgGCCstrike15_v2_ClientRedeemFreeReward >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCCstrike15_v2_ClientRedeemFreeReward >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded*
Arena::CreateMaybeMessage< ::CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCCStrike15_v2_ClientNetworkConfig*
Arena::CreateMaybeMessage< ::CMsgGCCStrike15_v2_ClientNetworkConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCCStrike15_v2_ClientNetworkConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCCStrike15_ClientDeepStats_DeepStatsRange*
Arena::CreateMaybeMessage< ::CMsgGCCStrike15_ClientDeepStats_DeepStatsRange >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCCStrike15_ClientDeepStats_DeepStatsRange >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCCStrike15_ClientDeepStats_DeepStatsMatch*
Arena::CreateMaybeMessage< ::CMsgGCCStrike15_ClientDeepStats_DeepStatsMatch >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCCStrike15_ClientDeepStats_DeepStatsMatch >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCCStrike15_ClientDeepStats*
Arena::CreateMaybeMessage< ::CMsgGCCStrike15_ClientDeepStats >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCCStrike15_ClientDeepStats >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCCStrike15_v2_WatchInfoUsers*
Arena::CreateMaybeMessage< ::CMsgGCCStrike15_v2_WatchInfoUsers >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCCStrike15_v2_WatchInfoUsers >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCCStrike15_v2_ClientRequestPlayersProfile*
Arena::CreateMaybeMessage< ::CMsgGCCStrike15_v2_ClientRequestPlayersProfile >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCCStrike15_v2_ClientRequestPlayersProfile >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCCStrike15_v2_PlayersProfile*
Arena::CreateMaybeMessage< ::CMsgGCCStrike15_v2_PlayersProfile >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCCStrike15_v2_PlayersProfile >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate*
Arena::CreateMaybeMessage< ::CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment*
Arena::CreateMaybeMessage< ::CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus*
Arena::CreateMaybeMessage< ::CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::CClientHeaderOverwatchEvidence*
Arena::CreateMaybeMessage< ::CClientHeaderOverwatchEvidence >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CClientHeaderOverwatchEvidence >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCCStrike15_v2_GC2ClientTextMsg*
Arena::CreateMaybeMessage< ::CMsgGCCStrike15_v2_GC2ClientTextMsg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCCStrike15_v2_GC2ClientTextMsg >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCCStrike15_v2_Client2GCTextMsg*
Arena::CreateMaybeMessage< ::CMsgGCCStrike15_v2_Client2GCTextMsg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCCStrike15_v2_Client2GCTextMsg >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCCStrike15_v2_MatchEndRunRewardDrops*
Arena::CreateMaybeMessage< ::CMsgGCCStrike15_v2_MatchEndRunRewardDrops >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCCStrike15_v2_MatchEndRunRewardDrops >(arena);
}
template<> PROTOBUF_NOINLINE ::CEconItemPreviewDataBlock_Sticker*
Arena::CreateMaybeMessage< ::CEconItemPreviewDataBlock_Sticker >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CEconItemPreviewDataBlock_Sticker >(arena);
}
template<> PROTOBUF_NOINLINE ::CEconItemPreviewDataBlock*
Arena::CreateMaybeMessage< ::CEconItemPreviewDataBlock >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CEconItemPreviewDataBlock >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCCStrike15_v2_MatchEndRewardDropsNotification*
Arena::CreateMaybeMessage< ::CMsgGCCStrike15_v2_MatchEndRewardDropsNotification >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCCStrike15_v2_MatchEndRewardDropsNotification >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgItemAcknowledged*
Arena::CreateMaybeMessage< ::CMsgItemAcknowledged >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgItemAcknowledged >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest*
Arena::CreateMaybeMessage< ::CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse*
Arena::CreateMaybeMessage< ::CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames*
Arena::CreateMaybeMessage< ::CMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser*
Arena::CreateMaybeMessage< ::CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCCStrike15_v2_MatchListRequestRecentUserGames*
Arena::CreateMaybeMessage< ::CMsgGCCStrike15_v2_MatchListRequestRecentUserGames >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCCStrike15_v2_MatchListRequestRecentUserGames >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCCStrike15_v2_MatchListRequestTournamentGames*
Arena::CreateMaybeMessage< ::CMsgGCCStrike15_v2_MatchListRequestTournamentGames >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCCStrike15_v2_MatchListRequestTournamentGames >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCCStrike15_v2_MatchListRequestFullGameInfo*
Arena::CreateMaybeMessage< ::CMsgGCCStrike15_v2_MatchListRequestFullGameInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCCStrike15_v2_MatchListRequestFullGameInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::CDataGCCStrike15_v2_MatchInfo*
Arena::CreateMaybeMessage< ::CDataGCCStrike15_v2_MatchInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDataGCCStrike15_v2_MatchInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::CDataGCCStrike15_v2_TournamentGroupTeam*
Arena::CreateMaybeMessage< ::CDataGCCStrike15_v2_TournamentGroupTeam >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDataGCCStrike15_v2_TournamentGroupTeam >(arena);
}
template<> PROTOBUF_NOINLINE ::CDataGCCStrike15_v2_TournamentGroup_Picks*
Arena::CreateMaybeMessage< ::CDataGCCStrike15_v2_TournamentGroup_Picks >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDataGCCStrike15_v2_TournamentGroup_Picks >(arena);
}
template<> PROTOBUF_NOINLINE ::CDataGCCStrike15_v2_TournamentGroup*
Arena::CreateMaybeMessage< ::CDataGCCStrike15_v2_TournamentGroup >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDataGCCStrike15_v2_TournamentGroup >(arena);
}
template<> PROTOBUF_NOINLINE ::CDataGCCStrike15_v2_TournamentSection*
Arena::CreateMaybeMessage< ::CDataGCCStrike15_v2_TournamentSection >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDataGCCStrike15_v2_TournamentSection >(arena);
}
template<> PROTOBUF_NOINLINE ::CDataGCCStrike15_v2_TournamentInfo*
Arena::CreateMaybeMessage< ::CDataGCCStrike15_v2_TournamentInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDataGCCStrike15_v2_TournamentInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCCStrike15_v2_MatchList*
Arena::CreateMaybeMessage< ::CMsgGCCStrike15_v2_MatchList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCCStrike15_v2_MatchList >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCCStrike15_v2_MatchListTournamentOperatorMgmt*
Arena::CreateMaybeMessage< ::CMsgGCCStrike15_v2_MatchListTournamentOperatorMgmt >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCCStrike15_v2_MatchListTournamentOperatorMgmt >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick*
Arena::CreateMaybeMessage< ::CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCCStrike15_v2_Predictions*
Arena::CreateMaybeMessage< ::CMsgGCCStrike15_v2_Predictions >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCCStrike15_v2_Predictions >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCCStrike15_v2_Fantasy_FantasySlot*
Arena::CreateMaybeMessage< ::CMsgGCCStrike15_v2_Fantasy_FantasySlot >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCCStrike15_v2_Fantasy_FantasySlot >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCCStrike15_v2_Fantasy_FantasyTeam*
Arena::CreateMaybeMessage< ::CMsgGCCStrike15_v2_Fantasy_FantasyTeam >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCCStrike15_v2_Fantasy_FantasyTeam >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCCStrike15_v2_Fantasy*
Arena::CreateMaybeMessage< ::CMsgGCCStrike15_v2_Fantasy >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCCStrike15_v2_Fantasy >(arena);
}
template<> PROTOBUF_NOINLINE ::CAttribute_String*
Arena::CreateMaybeMessage< ::CAttribute_String >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CAttribute_String >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgLegacySource1ClientWelcome_Location*
Arena::CreateMaybeMessage< ::CMsgLegacySource1ClientWelcome_Location >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgLegacySource1ClientWelcome_Location >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgLegacySource1ClientWelcome*
Arena::CreateMaybeMessage< ::CMsgLegacySource1ClientWelcome >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgLegacySource1ClientWelcome >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgCStrike15Welcome*
Arena::CreateMaybeMessage< ::CMsgCStrike15Welcome >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgCStrike15Welcome >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCCStrike15_v2_ClientVarValueNotificationInfo*
Arena::CreateMaybeMessage< ::CMsgGCCStrike15_v2_ClientVarValueNotificationInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCCStrike15_v2_ClientVarValueNotificationInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCCStrike15_v2_ServerVarValueNotificationInfo*
Arena::CreateMaybeMessage< ::CMsgGCCStrike15_v2_ServerVarValueNotificationInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCCStrike15_v2_ServerVarValueNotificationInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCCStrike15_v2_GiftsLeaderboardRequest*
Arena::CreateMaybeMessage< ::CMsgGCCStrike15_v2_GiftsLeaderboardRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCCStrike15_v2_GiftsLeaderboardRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCCStrike15_v2_GiftsLeaderboardResponse_GiftLeaderboardEntry*
Arena::CreateMaybeMessage< ::CMsgGCCStrike15_v2_GiftsLeaderboardResponse_GiftLeaderboardEntry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCCStrike15_v2_GiftsLeaderboardResponse_GiftLeaderboardEntry >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCCStrike15_v2_GiftsLeaderboardResponse*
Arena::CreateMaybeMessage< ::CMsgGCCStrike15_v2_GiftsLeaderboardResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCCStrike15_v2_GiftsLeaderboardResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCCStrike15_v2_ClientSubmitSurveyVote*
Arena::CreateMaybeMessage< ::CMsgGCCStrike15_v2_ClientSubmitSurveyVote >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCCStrike15_v2_ClientSubmitSurveyVote >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCCStrike15_v2_Server2GCClientValidate*
Arena::CreateMaybeMessage< ::CMsgGCCStrike15_v2_Server2GCClientValidate >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCCStrike15_v2_Server2GCClientValidate >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCCStrike15_v2_GC2ClientTournamentInfo*
Arena::CreateMaybeMessage< ::CMsgGCCStrike15_v2_GC2ClientTournamentInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCCStrike15_v2_GC2ClientTournamentInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::CSOEconCoupon*
Arena::CreateMaybeMessage< ::CSOEconCoupon >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CSOEconCoupon >(arena);
}
template<> PROTOBUF_NOINLINE ::CSOAccountItemPersonalStore*
Arena::CreateMaybeMessage< ::CSOAccountItemPersonalStore >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CSOAccountItemPersonalStore >(arena);
}
template<> PROTOBUF_NOINLINE ::CSOAccountXpShop*
Arena::CreateMaybeMessage< ::CSOAccountXpShop >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CSOAccountXpShop >(arena);
}
template<> PROTOBUF_NOINLINE ::CSOAccountKeychainRemoveToolCharges*
Arena::CreateMaybeMessage< ::CSOAccountKeychainRemoveToolCharges >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CSOAccountKeychainRemoveToolCharges >(arena);
}
template<> PROTOBUF_NOINLINE ::CSOQuestProgress*
Arena::CreateMaybeMessage< ::CSOQuestProgress >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CSOQuestProgress >(arena);
}
template<> PROTOBUF_NOINLINE ::CSOAccountSeasonalOperation*
Arena::CreateMaybeMessage< ::CSOAccountSeasonalOperation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CSOAccountSeasonalOperation >(arena);
}
template<> PROTOBUF_NOINLINE ::CSOAccountRecurringSubscription*
Arena::CreateMaybeMessage< ::CSOAccountRecurringSubscription >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CSOAccountRecurringSubscription >(arena);
}
template<> PROTOBUF_NOINLINE ::CSOPersonaDataPublic*
Arena::CreateMaybeMessage< ::CSOPersonaDataPublic >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CSOPersonaDataPublic >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCCStrike15_v2_GC2ClientNotifyXPShop*
Arena::CreateMaybeMessage< ::CMsgGCCStrike15_v2_GC2ClientNotifyXPShop >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCCStrike15_v2_GC2ClientNotifyXPShop >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCCStrike15_v2_Client2GcAckXPShopTracks*
Arena::CreateMaybeMessage< ::CMsgGCCStrike15_v2_Client2GcAckXPShopTracks >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCCStrike15_v2_Client2GcAckXPShopTracks >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGC_GlobalGame_Subscribe*
Arena::CreateMaybeMessage< ::CMsgGC_GlobalGame_Subscribe >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGC_GlobalGame_Subscribe >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGC_GlobalGame_Unsubscribe*
Arena::CreateMaybeMessage< ::CMsgGC_GlobalGame_Unsubscribe >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGC_GlobalGame_Unsubscribe >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGC_GlobalGame_Play*
Arena::CreateMaybeMessage< ::CMsgGC_GlobalGame_Play >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGC_GlobalGame_Play >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCCStrike15_v2_AcknowledgePenalty*
Arena::CreateMaybeMessage< ::CMsgGCCStrike15_v2_AcknowledgePenalty >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCCStrike15_v2_AcknowledgePenalty >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin*
Arena::CreateMaybeMessage< ::CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCCStrike15_v2_Client2GCStreamUnlock*
Arena::CreateMaybeMessage< ::CMsgGCCStrike15_v2_Client2GCStreamUnlock >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCCStrike15_v2_Client2GCStreamUnlock >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCCStrike15_v2_ClientToGCRequestElevate*
Arena::CreateMaybeMessage< ::CMsgGCCStrike15_v2_ClientToGCRequestElevate >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCCStrike15_v2_ClientToGCRequestElevate >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCCStrike15_v2_ClientToGCChat*
Arena::CreateMaybeMessage< ::CMsgGCCStrike15_v2_ClientToGCChat >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCCStrike15_v2_ClientToGCChat >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCCStrike15_v2_GCToClientChat*
Arena::CreateMaybeMessage< ::CMsgGCCStrike15_v2_GCToClientChat >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCCStrike15_v2_GCToClientChat >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCCStrike15_v2_ClientAuthKeyCode*
Arena::CreateMaybeMessage< ::CMsgGCCStrike15_v2_ClientAuthKeyCode >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCCStrike15_v2_ClientAuthKeyCode >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCCStrike15_GotvSyncPacket*
Arena::CreateMaybeMessage< ::CMsgGCCStrike15_GotvSyncPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCCStrike15_GotvSyncPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::PlayerDecalDigitalSignature*
Arena::CreateMaybeMessage< ::PlayerDecalDigitalSignature >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PlayerDecalDigitalSignature >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCCStrike15_v2_ClientPlayerDecalSign*
Arena::CreateMaybeMessage< ::CMsgGCCStrike15_v2_ClientPlayerDecalSign >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCCStrike15_v2_ClientPlayerDecalSign >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCCStrike15_v2_BetaEnrollment*
Arena::CreateMaybeMessage< ::CMsgGCCStrike15_v2_BetaEnrollment >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCCStrike15_v2_BetaEnrollment >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCCStrike15_v2_ClientLogonFatalError*
Arena::CreateMaybeMessage< ::CMsgGCCStrike15_v2_ClientLogonFatalError >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCCStrike15_v2_ClientLogonFatalError >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCCStrike15_v2_ClientPollState*
Arena::CreateMaybeMessage< ::CMsgGCCStrike15_v2_ClientPollState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCCStrike15_v2_ClientPollState >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCCStrike15_v2_Party_Register*
Arena::CreateMaybeMessage< ::CMsgGCCStrike15_v2_Party_Register >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCCStrike15_v2_Party_Register >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCCStrike15_v2_Party_Search*
Arena::CreateMaybeMessage< ::CMsgGCCStrike15_v2_Party_Search >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCCStrike15_v2_Party_Search >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCCStrike15_v2_Party_SearchResults_Entry*
Arena::CreateMaybeMessage< ::CMsgGCCStrike15_v2_Party_SearchResults_Entry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCCStrike15_v2_Party_SearchResults_Entry >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCCStrike15_v2_Party_SearchResults*
Arena::CreateMaybeMessage< ::CMsgGCCStrike15_v2_Party_SearchResults >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCCStrike15_v2_Party_SearchResults >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCCStrike15_v2_Party_Invite*
Arena::CreateMaybeMessage< ::CMsgGCCStrike15_v2_Party_Invite >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCCStrike15_v2_Party_Invite >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCCStrike15_v2_Account_RequestCoPlays_Player*
Arena::CreateMaybeMessage< ::CMsgGCCStrike15_v2_Account_RequestCoPlays_Player >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCCStrike15_v2_Account_RequestCoPlays_Player >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCCStrike15_v2_Account_RequestCoPlays*
Arena::CreateMaybeMessage< ::CMsgGCCStrike15_v2_Account_RequestCoPlays >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCCStrike15_v2_Account_RequestCoPlays >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCCStrike15_v2_ClientToGCRequestTicket*
Arena::CreateMaybeMessage< ::CMsgGCCStrike15_v2_ClientToGCRequestTicket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCCStrike15_v2_ClientToGCRequestTicket >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCToClientSteamDatagramTicket*
Arena::CreateMaybeMessage< ::CMsgGCToClientSteamDatagramTicket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCToClientSteamDatagramTicket >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCCStrike15_v2_ClientRequestOffers*
Arena::CreateMaybeMessage< ::CMsgGCCStrike15_v2_ClientRequestOffers >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCCStrike15_v2_ClientRequestOffers >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCCStrike15_v2_ClientRequestSouvenir*
Arena::CreateMaybeMessage< ::CMsgGCCStrike15_v2_ClientRequestSouvenir >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCCStrike15_v2_ClientRequestSouvenir >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCCStrike15_v2_ClientAccountBalance*
Arena::CreateMaybeMessage< ::CMsgGCCStrike15_v2_ClientAccountBalance >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCCStrike15_v2_ClientAccountBalance >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCCStrike15_v2_ClientPartyJoinRelay*
Arena::CreateMaybeMessage< ::CMsgGCCStrike15_v2_ClientPartyJoinRelay >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCCStrike15_v2_ClientPartyJoinRelay >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCCStrike15_v2_ClientPartyWarning_Entry*
Arena::CreateMaybeMessage< ::CMsgGCCStrike15_v2_ClientPartyWarning_Entry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCCStrike15_v2_ClientPartyWarning_Entry >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCCStrike15_v2_ClientPartyWarning*
Arena::CreateMaybeMessage< ::CMsgGCCStrike15_v2_ClientPartyWarning >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCCStrike15_v2_ClientPartyWarning >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCCStrike15_v2_SetEventFavorite*
Arena::CreateMaybeMessage< ::CMsgGCCStrike15_v2_SetEventFavorite >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCCStrike15_v2_SetEventFavorite >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCCStrike15_v2_GetEventFavorites_Request*
Arena::CreateMaybeMessage< ::CMsgGCCStrike15_v2_GetEventFavorites_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCCStrike15_v2_GetEventFavorites_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCCStrike15_v2_GetEventFavorites_Response*
Arena::CreateMaybeMessage< ::CMsgGCCStrike15_v2_GetEventFavorites_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCCStrike15_v2_GetEventFavorites_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCCStrike15_v2_ClientPerfReport_Entry*
Arena::CreateMaybeMessage< ::CMsgGCCStrike15_v2_ClientPerfReport_Entry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCCStrike15_v2_ClientPerfReport_Entry >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCCStrike15_v2_ClientPerfReport*
Arena::CreateMaybeMessage< ::CMsgGCCStrike15_v2_ClientPerfReport >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCCStrike15_v2_ClientPerfReport >(arena);
}
template<> PROTOBUF_NOINLINE ::CVDiagnostic*
Arena::CreateMaybeMessage< ::CVDiagnostic >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CVDiagnostic >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCCStrike15_v2_ClientReportValidation*
Arena::CreateMaybeMessage< ::CMsgGCCStrike15_v2_ClientReportValidation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCCStrike15_v2_ClientReportValidation >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCCStrike15_v2_GC2ClientRefuseSecureMode*
Arena::CreateMaybeMessage< ::CMsgGCCStrike15_v2_GC2ClientRefuseSecureMode >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCCStrike15_v2_GC2ClientRefuseSecureMode >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCCStrike15_v2_GC2ClientRequestValidation*
Arena::CreateMaybeMessage< ::CMsgGCCStrike15_v2_GC2ClientRequestValidation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCCStrike15_v2_GC2ClientRequestValidation >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCCStrike15_v2_GC2ClientInitSystem*
Arena::CreateMaybeMessage< ::CMsgGCCStrike15_v2_GC2ClientInitSystem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCCStrike15_v2_GC2ClientInitSystem >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCCStrike15_v2_GC2ClientInitSystem_Response*
Arena::CreateMaybeMessage< ::CMsgGCCStrike15_v2_GC2ClientInitSystem_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCCStrike15_v2_GC2ClientInitSystem_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCCStrike15_v2_SetPlayerLeaderboardSafeName*
Arena::CreateMaybeMessage< ::CMsgGCCStrike15_v2_SetPlayerLeaderboardSafeName >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCCStrike15_v2_SetPlayerLeaderboardSafeName >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
