// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: steamnetworkingsockets_messages_certs.proto

#include "steamnetworkingsockets_messages_certs.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

PROTOBUF_CONSTEXPR CMsgSteamNetworkingIdentityLegacyBinary::CMsgSteamNetworkingIdentityLegacyBinary(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.generic_bytes_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.generic_string_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.ipv6_and_port_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.steam_id_)*/uint64_t{0u}} {}
struct CMsgSteamNetworkingIdentityLegacyBinaryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgSteamNetworkingIdentityLegacyBinaryDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgSteamNetworkingIdentityLegacyBinaryDefaultTypeInternal() {}
  union {
    CMsgSteamNetworkingIdentityLegacyBinary _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgSteamNetworkingIdentityLegacyBinaryDefaultTypeInternal _CMsgSteamNetworkingIdentityLegacyBinary_default_instance_;
PROTOBUF_CONSTEXPR CMsgSteamDatagramCertificate::CMsgSteamDatagramCertificate(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.gameserver_datacenter_ids_)*/{}
  , /*decltype(_impl_.app_ids_)*/{}
  , /*decltype(_impl_.ip_addresses_)*/{}
  , /*decltype(_impl_.key_data_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.identity_string_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.legacy_identity_binary_)*/nullptr
  , /*decltype(_impl_.legacy_steam_id_)*/uint64_t{0u}
  , /*decltype(_impl_.key_type_)*/0
  , /*decltype(_impl_.time_created_)*/0u
  , /*decltype(_impl_.time_expiry_)*/0u} {}
struct CMsgSteamDatagramCertificateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgSteamDatagramCertificateDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgSteamDatagramCertificateDefaultTypeInternal() {}
  union {
    CMsgSteamDatagramCertificate _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgSteamDatagramCertificateDefaultTypeInternal _CMsgSteamDatagramCertificate_default_instance_;
PROTOBUF_CONSTEXPR CMsgSteamDatagramCertificateSigned::CMsgSteamDatagramCertificateSigned(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.private_key_data_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.cert_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.ca_signature_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.ca_key_id_)*/uint64_t{0u}} {}
struct CMsgSteamDatagramCertificateSignedDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgSteamDatagramCertificateSignedDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgSteamDatagramCertificateSignedDefaultTypeInternal() {}
  union {
    CMsgSteamDatagramCertificateSigned _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgSteamDatagramCertificateSignedDefaultTypeInternal _CMsgSteamDatagramCertificateSigned_default_instance_;
PROTOBUF_CONSTEXPR CMsgSteamDatagramCertificateRequest::CMsgSteamDatagramCertificateRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.cert_)*/nullptr} {}
struct CMsgSteamDatagramCertificateRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgSteamDatagramCertificateRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgSteamDatagramCertificateRequestDefaultTypeInternal() {}
  union {
    CMsgSteamDatagramCertificateRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgSteamDatagramCertificateRequestDefaultTypeInternal _CMsgSteamDatagramCertificateRequest_default_instance_;
static ::_pb::Metadata file_level_metadata_steamnetworkingsockets_5fmessages_5fcerts_2eproto[4];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_steamnetworkingsockets_5fmessages_5fcerts_2eproto[1];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_steamnetworkingsockets_5fmessages_5fcerts_2eproto = nullptr;

const uint32_t TableStruct_steamnetworkingsockets_5fmessages_5fcerts_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::CMsgSteamNetworkingIdentityLegacyBinary, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamNetworkingIdentityLegacyBinary, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgSteamNetworkingIdentityLegacyBinary, _impl_.steam_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamNetworkingIdentityLegacyBinary, _impl_.generic_bytes_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamNetworkingIdentityLegacyBinary, _impl_.generic_string_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamNetworkingIdentityLegacyBinary, _impl_.ipv6_and_port_),
  3,
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramCertificate, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramCertificate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramCertificate, _impl_.key_type_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramCertificate, _impl_.key_data_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramCertificate, _impl_.legacy_steam_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramCertificate, _impl_.legacy_identity_binary_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramCertificate, _impl_.identity_string_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramCertificate, _impl_.gameserver_datacenter_ids_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramCertificate, _impl_.time_created_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramCertificate, _impl_.time_expiry_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramCertificate, _impl_.app_ids_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramCertificate, _impl_.ip_addresses_),
  4,
  0,
  3,
  2,
  1,
  ~0u,
  5,
  6,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramCertificateSigned, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramCertificateSigned, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramCertificateSigned, _impl_.cert_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramCertificateSigned, _impl_.ca_key_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramCertificateSigned, _impl_.ca_signature_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramCertificateSigned, _impl_.private_key_data_),
  1,
  3,
  2,
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramCertificateRequest, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramCertificateRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramCertificateRequest, _impl_.cert_),
  0,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 10, -1, sizeof(::CMsgSteamNetworkingIdentityLegacyBinary)},
  { 14, 30, -1, sizeof(::CMsgSteamDatagramCertificate)},
  { 40, 50, -1, sizeof(::CMsgSteamDatagramCertificateSigned)},
  { 54, 61, -1, sizeof(::CMsgSteamDatagramCertificateRequest)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::_CMsgSteamNetworkingIdentityLegacyBinary_default_instance_._instance,
  &::_CMsgSteamDatagramCertificate_default_instance_._instance,
  &::_CMsgSteamDatagramCertificateSigned_default_instance_._instance,
  &::_CMsgSteamDatagramCertificateRequest_default_instance_._instance,
};

const char descriptor_table_protodef_steamnetworkingsockets_5fmessages_5fcerts_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n+steamnetworkingsockets_messages_certs."
  "proto\"\201\001\n\'CMsgSteamNetworkingIdentityLeg"
  "acyBinary\022\020\n\010steam_id\030\020 \001(\006\022\025\n\rgeneric_b"
  "ytes\030\002 \001(\014\022\026\n\016generic_string\030\003 \001(\t\022\025\n\rip"
  "v6_and_port\030\004 \001(\014\"\212\003\n\034CMsgSteamDatagramC"
  "ertificate\022A\n\010key_type\030\001 \001(\0162&.CMsgSteam"
  "DatagramCertificate.EKeyType:\007INVALID\022\020\n"
  "\010key_data\030\002 \001(\014\022\027\n\017legacy_steam_id\030\004 \001(\006"
  "\022H\n\026legacy_identity_binary\030\013 \001(\0132(.CMsgS"
  "teamNetworkingIdentityLegacyBinary\022\027\n\017id"
  "entity_string\030\014 \001(\t\022!\n\031gameserver_datace"
  "nter_ids\030\005 \003(\007\022\024\n\014time_created\030\010 \001(\007\022\023\n\013"
  "time_expiry\030\t \001(\007\022\017\n\007app_ids\030\n \003(\r\022\024\n\014ip"
  "_addresses\030\r \003(\t\"$\n\010EKeyType\022\013\n\007INVALID\020"
  "\000\022\013\n\007ED25519\020\001\"u\n\"CMsgSteamDatagramCerti"
  "ficateSigned\022\014\n\004cert\030\004 \001(\014\022\021\n\tca_key_id\030"
  "\005 \001(\006\022\024\n\014ca_signature\030\006 \001(\014\022\030\n\020private_k"
  "ey_data\030\001 \001(\014\"R\n#CMsgSteamDatagramCertif"
  "icateRequest\022+\n\004cert\030\001 \001(\0132\035.CMsgSteamDa"
  "tagramCertificateB\005H\001\200\001\000"
  ;
static ::_pbi::once_flag descriptor_table_steamnetworkingsockets_5fmessages_5fcerts_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_steamnetworkingsockets_5fmessages_5fcerts_2eproto = {
    false, false, 784, descriptor_table_protodef_steamnetworkingsockets_5fmessages_5fcerts_2eproto,
    "steamnetworkingsockets_messages_certs.proto",
    &descriptor_table_steamnetworkingsockets_5fmessages_5fcerts_2eproto_once, nullptr, 0, 4,
    schemas, file_default_instances, TableStruct_steamnetworkingsockets_5fmessages_5fcerts_2eproto::offsets,
    file_level_metadata_steamnetworkingsockets_5fmessages_5fcerts_2eproto, file_level_enum_descriptors_steamnetworkingsockets_5fmessages_5fcerts_2eproto,
    file_level_service_descriptors_steamnetworkingsockets_5fmessages_5fcerts_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_steamnetworkingsockets_5fmessages_5fcerts_2eproto_getter() {
  return &descriptor_table_steamnetworkingsockets_5fmessages_5fcerts_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_steamnetworkingsockets_5fmessages_5fcerts_2eproto(&descriptor_table_steamnetworkingsockets_5fmessages_5fcerts_2eproto);
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CMsgSteamDatagramCertificate_EKeyType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_steamnetworkingsockets_5fmessages_5fcerts_2eproto);
  return file_level_enum_descriptors_steamnetworkingsockets_5fmessages_5fcerts_2eproto[0];
}
bool CMsgSteamDatagramCertificate_EKeyType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr CMsgSteamDatagramCertificate_EKeyType CMsgSteamDatagramCertificate::INVALID;
constexpr CMsgSteamDatagramCertificate_EKeyType CMsgSteamDatagramCertificate::ED25519;
constexpr CMsgSteamDatagramCertificate_EKeyType CMsgSteamDatagramCertificate::EKeyType_MIN;
constexpr CMsgSteamDatagramCertificate_EKeyType CMsgSteamDatagramCertificate::EKeyType_MAX;
constexpr int CMsgSteamDatagramCertificate::EKeyType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class CMsgSteamNetworkingIdentityLegacyBinary::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgSteamNetworkingIdentityLegacyBinary>()._impl_._has_bits_);
  static void set_has_steam_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_generic_bytes(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_generic_string(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_ipv6_and_port(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CMsgSteamNetworkingIdentityLegacyBinary::CMsgSteamNetworkingIdentityLegacyBinary(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgSteamNetworkingIdentityLegacyBinary)
}
CMsgSteamNetworkingIdentityLegacyBinary::CMsgSteamNetworkingIdentityLegacyBinary(const CMsgSteamNetworkingIdentityLegacyBinary& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgSteamNetworkingIdentityLegacyBinary* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.generic_bytes_){}
    , decltype(_impl_.generic_string_){}
    , decltype(_impl_.ipv6_and_port_){}
    , decltype(_impl_.steam_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.generic_bytes_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.generic_bytes_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_generic_bytes()) {
    _this->_impl_.generic_bytes_.Set(from._internal_generic_bytes(), 
      _this->GetArenaForAllocation());
  }
  _impl_.generic_string_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.generic_string_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_generic_string()) {
    _this->_impl_.generic_string_.Set(from._internal_generic_string(), 
      _this->GetArenaForAllocation());
  }
  _impl_.ipv6_and_port_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ipv6_and_port_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_ipv6_and_port()) {
    _this->_impl_.ipv6_and_port_.Set(from._internal_ipv6_and_port(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.steam_id_ = from._impl_.steam_id_;
  // @@protoc_insertion_point(copy_constructor:CMsgSteamNetworkingIdentityLegacyBinary)
}

inline void CMsgSteamNetworkingIdentityLegacyBinary::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.generic_bytes_){}
    , decltype(_impl_.generic_string_){}
    , decltype(_impl_.ipv6_and_port_){}
    , decltype(_impl_.steam_id_){uint64_t{0u}}
  };
  _impl_.generic_bytes_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.generic_bytes_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.generic_string_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.generic_string_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.ipv6_and_port_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ipv6_and_port_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CMsgSteamNetworkingIdentityLegacyBinary::~CMsgSteamNetworkingIdentityLegacyBinary() {
  // @@protoc_insertion_point(destructor:CMsgSteamNetworkingIdentityLegacyBinary)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgSteamNetworkingIdentityLegacyBinary::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.generic_bytes_.Destroy();
  _impl_.generic_string_.Destroy();
  _impl_.ipv6_and_port_.Destroy();
}

void CMsgSteamNetworkingIdentityLegacyBinary::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgSteamNetworkingIdentityLegacyBinary::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSteamNetworkingIdentityLegacyBinary)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.generic_bytes_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.generic_string_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.ipv6_and_port_.ClearNonDefaultToEmpty();
    }
  }
  _impl_.steam_id_ = uint64_t{0u};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgSteamNetworkingIdentityLegacyBinary::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bytes generic_bytes = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_generic_bytes();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string generic_string = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_generic_string();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CMsgSteamNetworkingIdentityLegacyBinary.generic_string");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional bytes ipv6_and_port = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_ipv6_and_port();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional fixed64 steam_id = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 129)) {
          _Internal::set_has_steam_id(&has_bits);
          _impl_.steam_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgSteamNetworkingIdentityLegacyBinary::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSteamNetworkingIdentityLegacyBinary)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bytes generic_bytes = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_generic_bytes(), target);
  }

  // optional string generic_string = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_generic_string().data(), static_cast<int>(this->_internal_generic_string().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgSteamNetworkingIdentityLegacyBinary.generic_string");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_generic_string(), target);
  }

  // optional bytes ipv6_and_port = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_ipv6_and_port(), target);
  }

  // optional fixed64 steam_id = 16;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed64ToArray(16, this->_internal_steam_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSteamNetworkingIdentityLegacyBinary)
  return target;
}

size_t CMsgSteamNetworkingIdentityLegacyBinary::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgSteamNetworkingIdentityLegacyBinary)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional bytes generic_bytes = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_generic_bytes());
    }

    // optional string generic_string = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_generic_string());
    }

    // optional bytes ipv6_and_port = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_ipv6_and_port());
    }

    // optional fixed64 steam_id = 16;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 + 8;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgSteamNetworkingIdentityLegacyBinary::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgSteamNetworkingIdentityLegacyBinary::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgSteamNetworkingIdentityLegacyBinary::GetClassData() const { return &_class_data_; }


void CMsgSteamNetworkingIdentityLegacyBinary::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgSteamNetworkingIdentityLegacyBinary*>(&to_msg);
  auto& from = static_cast<const CMsgSteamNetworkingIdentityLegacyBinary&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgSteamNetworkingIdentityLegacyBinary)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_generic_bytes(from._internal_generic_bytes());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_generic_string(from._internal_generic_string());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_ipv6_and_port(from._internal_ipv6_and_port());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.steam_id_ = from._impl_.steam_id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgSteamNetworkingIdentityLegacyBinary::CopyFrom(const CMsgSteamNetworkingIdentityLegacyBinary& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSteamNetworkingIdentityLegacyBinary)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSteamNetworkingIdentityLegacyBinary::IsInitialized() const {
  return true;
}

void CMsgSteamNetworkingIdentityLegacyBinary::InternalSwap(CMsgSteamNetworkingIdentityLegacyBinary* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.generic_bytes_, lhs_arena,
      &other->_impl_.generic_bytes_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.generic_string_, lhs_arena,
      &other->_impl_.generic_string_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.ipv6_and_port_, lhs_arena,
      &other->_impl_.ipv6_and_port_, rhs_arena
  );
  swap(_impl_.steam_id_, other->_impl_.steam_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgSteamNetworkingIdentityLegacyBinary::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_steamnetworkingsockets_5fmessages_5fcerts_2eproto_getter, &descriptor_table_steamnetworkingsockets_5fmessages_5fcerts_2eproto_once,
      file_level_metadata_steamnetworkingsockets_5fmessages_5fcerts_2eproto[0]);
}

// ===================================================================

class CMsgSteamDatagramCertificate::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgSteamDatagramCertificate>()._impl_._has_bits_);
  static void set_has_key_type(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_key_data(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_legacy_steam_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::CMsgSteamNetworkingIdentityLegacyBinary& legacy_identity_binary(const CMsgSteamDatagramCertificate* msg);
  static void set_has_legacy_identity_binary(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_identity_string(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_time_created(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_time_expiry(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

const ::CMsgSteamNetworkingIdentityLegacyBinary&
CMsgSteamDatagramCertificate::_Internal::legacy_identity_binary(const CMsgSteamDatagramCertificate* msg) {
  return *msg->_impl_.legacy_identity_binary_;
}
CMsgSteamDatagramCertificate::CMsgSteamDatagramCertificate(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgSteamDatagramCertificate)
}
CMsgSteamDatagramCertificate::CMsgSteamDatagramCertificate(const CMsgSteamDatagramCertificate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgSteamDatagramCertificate* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.gameserver_datacenter_ids_){from._impl_.gameserver_datacenter_ids_}
    , decltype(_impl_.app_ids_){from._impl_.app_ids_}
    , decltype(_impl_.ip_addresses_){from._impl_.ip_addresses_}
    , decltype(_impl_.key_data_){}
    , decltype(_impl_.identity_string_){}
    , decltype(_impl_.legacy_identity_binary_){nullptr}
    , decltype(_impl_.legacy_steam_id_){}
    , decltype(_impl_.key_type_){}
    , decltype(_impl_.time_created_){}
    , decltype(_impl_.time_expiry_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.key_data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.key_data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_key_data()) {
    _this->_impl_.key_data_.Set(from._internal_key_data(), 
      _this->GetArenaForAllocation());
  }
  _impl_.identity_string_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.identity_string_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_identity_string()) {
    _this->_impl_.identity_string_.Set(from._internal_identity_string(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_legacy_identity_binary()) {
    _this->_impl_.legacy_identity_binary_ = new ::CMsgSteamNetworkingIdentityLegacyBinary(*from._impl_.legacy_identity_binary_);
  }
  ::memcpy(&_impl_.legacy_steam_id_, &from._impl_.legacy_steam_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.time_expiry_) -
    reinterpret_cast<char*>(&_impl_.legacy_steam_id_)) + sizeof(_impl_.time_expiry_));
  // @@protoc_insertion_point(copy_constructor:CMsgSteamDatagramCertificate)
}

inline void CMsgSteamDatagramCertificate::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.gameserver_datacenter_ids_){arena}
    , decltype(_impl_.app_ids_){arena}
    , decltype(_impl_.ip_addresses_){arena}
    , decltype(_impl_.key_data_){}
    , decltype(_impl_.identity_string_){}
    , decltype(_impl_.legacy_identity_binary_){nullptr}
    , decltype(_impl_.legacy_steam_id_){uint64_t{0u}}
    , decltype(_impl_.key_type_){0}
    , decltype(_impl_.time_created_){0u}
    , decltype(_impl_.time_expiry_){0u}
  };
  _impl_.key_data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.key_data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.identity_string_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.identity_string_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CMsgSteamDatagramCertificate::~CMsgSteamDatagramCertificate() {
  // @@protoc_insertion_point(destructor:CMsgSteamDatagramCertificate)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgSteamDatagramCertificate::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.gameserver_datacenter_ids_.~RepeatedField();
  _impl_.app_ids_.~RepeatedField();
  _impl_.ip_addresses_.~RepeatedPtrField();
  _impl_.key_data_.Destroy();
  _impl_.identity_string_.Destroy();
  if (this != internal_default_instance()) delete _impl_.legacy_identity_binary_;
}

void CMsgSteamDatagramCertificate::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgSteamDatagramCertificate::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSteamDatagramCertificate)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.gameserver_datacenter_ids_.Clear();
  _impl_.app_ids_.Clear();
  _impl_.ip_addresses_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.key_data_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.identity_string_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.legacy_identity_binary_ != nullptr);
      _impl_.legacy_identity_binary_->Clear();
    }
  }
  if (cached_has_bits & 0x00000078u) {
    ::memset(&_impl_.legacy_steam_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.time_expiry_) -
        reinterpret_cast<char*>(&_impl_.legacy_steam_id_)) + sizeof(_impl_.time_expiry_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgSteamDatagramCertificate::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .CMsgSteamDatagramCertificate.EKeyType key_type = 1 [default = INVALID];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::CMsgSteamDatagramCertificate_EKeyType_IsValid(val))) {
            _internal_set_key_type(static_cast<::CMsgSteamDatagramCertificate_EKeyType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional bytes key_data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_key_data();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional fixed64 legacy_steam_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33)) {
          _Internal::set_has_legacy_steam_id(&has_bits);
          _impl_.legacy_steam_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // repeated fixed32 gameserver_datacenter_ids = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 45)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_gameserver_datacenter_ids(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint32_t>(ptr));
            ptr += sizeof(uint32_t);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<45>(ptr));
        } else if (static_cast<uint8_t>(tag) == 42) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFixed32Parser(_internal_mutable_gameserver_datacenter_ids(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional fixed32 time_created = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 69)) {
          _Internal::set_has_time_created(&has_bits);
          _impl_.time_created_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint32_t>(ptr);
          ptr += sizeof(uint32_t);
        } else
          goto handle_unusual;
        continue;
      // optional fixed32 time_expiry = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 77)) {
          _Internal::set_has_time_expiry(&has_bits);
          _impl_.time_expiry_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint32_t>(ptr);
          ptr += sizeof(uint32_t);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 app_ids = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_app_ids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<80>(ptr));
        } else if (static_cast<uint8_t>(tag) == 82) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_app_ids(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .CMsgSteamNetworkingIdentityLegacyBinary legacy_identity_binary = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_legacy_identity_binary(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string identity_string = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          auto str = _internal_mutable_identity_string();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CMsgSteamDatagramCertificate.identity_string");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // repeated string ip_addresses = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_ip_addresses();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            #ifndef NDEBUG
            ::_pbi::VerifyUTF8(str, "CMsgSteamDatagramCertificate.ip_addresses");
            #endif  // !NDEBUG
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<106>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgSteamDatagramCertificate::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSteamDatagramCertificate)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .CMsgSteamDatagramCertificate.EKeyType key_type = 1 [default = INVALID];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_key_type(), target);
  }

  // optional bytes key_data = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_key_data(), target);
  }

  // optional fixed64 legacy_steam_id = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed64ToArray(4, this->_internal_legacy_steam_id(), target);
  }

  // repeated fixed32 gameserver_datacenter_ids = 5;
  for (int i = 0, n = this->_internal_gameserver_datacenter_ids_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed32ToArray(5, this->_internal_gameserver_datacenter_ids(i), target);
  }

  // optional fixed32 time_created = 8;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed32ToArray(8, this->_internal_time_created(), target);
  }

  // optional fixed32 time_expiry = 9;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed32ToArray(9, this->_internal_time_expiry(), target);
  }

  // repeated uint32 app_ids = 10;
  for (int i = 0, n = this->_internal_app_ids_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(10, this->_internal_app_ids(i), target);
  }

  // optional .CMsgSteamNetworkingIdentityLegacyBinary legacy_identity_binary = 11;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, _Internal::legacy_identity_binary(this),
        _Internal::legacy_identity_binary(this).GetCachedSize(), target, stream);
  }

  // optional string identity_string = 12;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_identity_string().data(), static_cast<int>(this->_internal_identity_string().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgSteamDatagramCertificate.identity_string");
    target = stream->WriteStringMaybeAliased(
        12, this->_internal_identity_string(), target);
  }

  // repeated string ip_addresses = 13;
  for (int i = 0, n = this->_internal_ip_addresses_size(); i < n; i++) {
    const auto& s = this->_internal_ip_addresses(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgSteamDatagramCertificate.ip_addresses");
    target = stream->WriteString(13, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSteamDatagramCertificate)
  return target;
}

size_t CMsgSteamDatagramCertificate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgSteamDatagramCertificate)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated fixed32 gameserver_datacenter_ids = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_gameserver_datacenter_ids_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_gameserver_datacenter_ids_size());
    total_size += data_size;
  }

  // repeated uint32 app_ids = 10;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.app_ids_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_app_ids_size());
    total_size += data_size;
  }

  // repeated string ip_addresses = 13;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.ip_addresses_.size());
  for (int i = 0, n = _impl_.ip_addresses_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.ip_addresses_.Get(i));
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional bytes key_data = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_key_data());
    }

    // optional string identity_string = 12;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_identity_string());
    }

    // optional .CMsgSteamNetworkingIdentityLegacyBinary legacy_identity_binary = 11;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.legacy_identity_binary_);
    }

    // optional fixed64 legacy_steam_id = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

    // optional .CMsgSteamDatagramCertificate.EKeyType key_type = 1 [default = INVALID];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_key_type());
    }

    // optional fixed32 time_created = 8;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 4;
    }

    // optional fixed32 time_expiry = 9;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 4;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgSteamDatagramCertificate::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgSteamDatagramCertificate::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgSteamDatagramCertificate::GetClassData() const { return &_class_data_; }


void CMsgSteamDatagramCertificate::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgSteamDatagramCertificate*>(&to_msg);
  auto& from = static_cast<const CMsgSteamDatagramCertificate&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgSteamDatagramCertificate)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.gameserver_datacenter_ids_.MergeFrom(from._impl_.gameserver_datacenter_ids_);
  _this->_impl_.app_ids_.MergeFrom(from._impl_.app_ids_);
  _this->_impl_.ip_addresses_.MergeFrom(from._impl_.ip_addresses_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_key_data(from._internal_key_data());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_identity_string(from._internal_identity_string());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_legacy_identity_binary()->::CMsgSteamNetworkingIdentityLegacyBinary::MergeFrom(
          from._internal_legacy_identity_binary());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.legacy_steam_id_ = from._impl_.legacy_steam_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.key_type_ = from._impl_.key_type_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.time_created_ = from._impl_.time_created_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.time_expiry_ = from._impl_.time_expiry_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgSteamDatagramCertificate::CopyFrom(const CMsgSteamDatagramCertificate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSteamDatagramCertificate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSteamDatagramCertificate::IsInitialized() const {
  return true;
}

void CMsgSteamDatagramCertificate::InternalSwap(CMsgSteamDatagramCertificate* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.gameserver_datacenter_ids_.InternalSwap(&other->_impl_.gameserver_datacenter_ids_);
  _impl_.app_ids_.InternalSwap(&other->_impl_.app_ids_);
  _impl_.ip_addresses_.InternalSwap(&other->_impl_.ip_addresses_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.key_data_, lhs_arena,
      &other->_impl_.key_data_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.identity_string_, lhs_arena,
      &other->_impl_.identity_string_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramCertificate, _impl_.time_expiry_)
      + sizeof(CMsgSteamDatagramCertificate::_impl_.time_expiry_)
      - PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramCertificate, _impl_.legacy_identity_binary_)>(
          reinterpret_cast<char*>(&_impl_.legacy_identity_binary_),
          reinterpret_cast<char*>(&other->_impl_.legacy_identity_binary_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgSteamDatagramCertificate::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_steamnetworkingsockets_5fmessages_5fcerts_2eproto_getter, &descriptor_table_steamnetworkingsockets_5fmessages_5fcerts_2eproto_once,
      file_level_metadata_steamnetworkingsockets_5fmessages_5fcerts_2eproto[1]);
}

// ===================================================================

class CMsgSteamDatagramCertificateSigned::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgSteamDatagramCertificateSigned>()._impl_._has_bits_);
  static void set_has_cert(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_ca_key_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_ca_signature(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_private_key_data(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgSteamDatagramCertificateSigned::CMsgSteamDatagramCertificateSigned(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgSteamDatagramCertificateSigned)
}
CMsgSteamDatagramCertificateSigned::CMsgSteamDatagramCertificateSigned(const CMsgSteamDatagramCertificateSigned& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgSteamDatagramCertificateSigned* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.private_key_data_){}
    , decltype(_impl_.cert_){}
    , decltype(_impl_.ca_signature_){}
    , decltype(_impl_.ca_key_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.private_key_data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.private_key_data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_private_key_data()) {
    _this->_impl_.private_key_data_.Set(from._internal_private_key_data(), 
      _this->GetArenaForAllocation());
  }
  _impl_.cert_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.cert_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_cert()) {
    _this->_impl_.cert_.Set(from._internal_cert(), 
      _this->GetArenaForAllocation());
  }
  _impl_.ca_signature_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ca_signature_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_ca_signature()) {
    _this->_impl_.ca_signature_.Set(from._internal_ca_signature(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.ca_key_id_ = from._impl_.ca_key_id_;
  // @@protoc_insertion_point(copy_constructor:CMsgSteamDatagramCertificateSigned)
}

inline void CMsgSteamDatagramCertificateSigned::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.private_key_data_){}
    , decltype(_impl_.cert_){}
    , decltype(_impl_.ca_signature_){}
    , decltype(_impl_.ca_key_id_){uint64_t{0u}}
  };
  _impl_.private_key_data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.private_key_data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.cert_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.cert_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.ca_signature_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ca_signature_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CMsgSteamDatagramCertificateSigned::~CMsgSteamDatagramCertificateSigned() {
  // @@protoc_insertion_point(destructor:CMsgSteamDatagramCertificateSigned)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgSteamDatagramCertificateSigned::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.private_key_data_.Destroy();
  _impl_.cert_.Destroy();
  _impl_.ca_signature_.Destroy();
}

void CMsgSteamDatagramCertificateSigned::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgSteamDatagramCertificateSigned::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSteamDatagramCertificateSigned)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.private_key_data_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.cert_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.ca_signature_.ClearNonDefaultToEmpty();
    }
  }
  _impl_.ca_key_id_ = uint64_t{0u};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgSteamDatagramCertificateSigned::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bytes private_key_data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_private_key_data();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes cert = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_cert();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional fixed64 ca_key_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 41)) {
          _Internal::set_has_ca_key_id(&has_bits);
          _impl_.ca_key_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional bytes ca_signature = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_ca_signature();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgSteamDatagramCertificateSigned::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSteamDatagramCertificateSigned)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bytes private_key_data = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_private_key_data(), target);
  }

  // optional bytes cert = 4;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_cert(), target);
  }

  // optional fixed64 ca_key_id = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed64ToArray(5, this->_internal_ca_key_id(), target);
  }

  // optional bytes ca_signature = 6;
  if (cached_has_bits & 0x00000004u) {
    target = stream->WriteBytesMaybeAliased(
        6, this->_internal_ca_signature(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSteamDatagramCertificateSigned)
  return target;
}

size_t CMsgSteamDatagramCertificateSigned::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgSteamDatagramCertificateSigned)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional bytes private_key_data = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_private_key_data());
    }

    // optional bytes cert = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_cert());
    }

    // optional bytes ca_signature = 6;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_ca_signature());
    }

    // optional fixed64 ca_key_id = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgSteamDatagramCertificateSigned::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgSteamDatagramCertificateSigned::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgSteamDatagramCertificateSigned::GetClassData() const { return &_class_data_; }


void CMsgSteamDatagramCertificateSigned::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgSteamDatagramCertificateSigned*>(&to_msg);
  auto& from = static_cast<const CMsgSteamDatagramCertificateSigned&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgSteamDatagramCertificateSigned)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_private_key_data(from._internal_private_key_data());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_cert(from._internal_cert());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_ca_signature(from._internal_ca_signature());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.ca_key_id_ = from._impl_.ca_key_id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgSteamDatagramCertificateSigned::CopyFrom(const CMsgSteamDatagramCertificateSigned& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSteamDatagramCertificateSigned)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSteamDatagramCertificateSigned::IsInitialized() const {
  return true;
}

void CMsgSteamDatagramCertificateSigned::InternalSwap(CMsgSteamDatagramCertificateSigned* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.private_key_data_, lhs_arena,
      &other->_impl_.private_key_data_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.cert_, lhs_arena,
      &other->_impl_.cert_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.ca_signature_, lhs_arena,
      &other->_impl_.ca_signature_, rhs_arena
  );
  swap(_impl_.ca_key_id_, other->_impl_.ca_key_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgSteamDatagramCertificateSigned::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_steamnetworkingsockets_5fmessages_5fcerts_2eproto_getter, &descriptor_table_steamnetworkingsockets_5fmessages_5fcerts_2eproto_once,
      file_level_metadata_steamnetworkingsockets_5fmessages_5fcerts_2eproto[2]);
}

// ===================================================================

class CMsgSteamDatagramCertificateRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgSteamDatagramCertificateRequest>()._impl_._has_bits_);
  static const ::CMsgSteamDatagramCertificate& cert(const CMsgSteamDatagramCertificateRequest* msg);
  static void set_has_cert(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::CMsgSteamDatagramCertificate&
CMsgSteamDatagramCertificateRequest::_Internal::cert(const CMsgSteamDatagramCertificateRequest* msg) {
  return *msg->_impl_.cert_;
}
CMsgSteamDatagramCertificateRequest::CMsgSteamDatagramCertificateRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgSteamDatagramCertificateRequest)
}
CMsgSteamDatagramCertificateRequest::CMsgSteamDatagramCertificateRequest(const CMsgSteamDatagramCertificateRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgSteamDatagramCertificateRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.cert_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_cert()) {
    _this->_impl_.cert_ = new ::CMsgSteamDatagramCertificate(*from._impl_.cert_);
  }
  // @@protoc_insertion_point(copy_constructor:CMsgSteamDatagramCertificateRequest)
}

inline void CMsgSteamDatagramCertificateRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.cert_){nullptr}
  };
}

CMsgSteamDatagramCertificateRequest::~CMsgSteamDatagramCertificateRequest() {
  // @@protoc_insertion_point(destructor:CMsgSteamDatagramCertificateRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgSteamDatagramCertificateRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.cert_;
}

void CMsgSteamDatagramCertificateRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgSteamDatagramCertificateRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSteamDatagramCertificateRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.cert_ != nullptr);
    _impl_.cert_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgSteamDatagramCertificateRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .CMsgSteamDatagramCertificate cert = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_cert(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgSteamDatagramCertificateRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSteamDatagramCertificateRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .CMsgSteamDatagramCertificate cert = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::cert(this),
        _Internal::cert(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSteamDatagramCertificateRequest)
  return target;
}

size_t CMsgSteamDatagramCertificateRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgSteamDatagramCertificateRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .CMsgSteamDatagramCertificate cert = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.cert_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgSteamDatagramCertificateRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgSteamDatagramCertificateRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgSteamDatagramCertificateRequest::GetClassData() const { return &_class_data_; }


void CMsgSteamDatagramCertificateRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgSteamDatagramCertificateRequest*>(&to_msg);
  auto& from = static_cast<const CMsgSteamDatagramCertificateRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgSteamDatagramCertificateRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_cert()) {
    _this->_internal_mutable_cert()->::CMsgSteamDatagramCertificate::MergeFrom(
        from._internal_cert());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgSteamDatagramCertificateRequest::CopyFrom(const CMsgSteamDatagramCertificateRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSteamDatagramCertificateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSteamDatagramCertificateRequest::IsInitialized() const {
  return true;
}

void CMsgSteamDatagramCertificateRequest::InternalSwap(CMsgSteamDatagramCertificateRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.cert_, other->_impl_.cert_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgSteamDatagramCertificateRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_steamnetworkingsockets_5fmessages_5fcerts_2eproto_getter, &descriptor_table_steamnetworkingsockets_5fmessages_5fcerts_2eproto_once,
      file_level_metadata_steamnetworkingsockets_5fmessages_5fcerts_2eproto[3]);
}

// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::CMsgSteamNetworkingIdentityLegacyBinary*
Arena::CreateMaybeMessage< ::CMsgSteamNetworkingIdentityLegacyBinary >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgSteamNetworkingIdentityLegacyBinary >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgSteamDatagramCertificate*
Arena::CreateMaybeMessage< ::CMsgSteamDatagramCertificate >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgSteamDatagramCertificate >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgSteamDatagramCertificateSigned*
Arena::CreateMaybeMessage< ::CMsgSteamDatagramCertificateSigned >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgSteamDatagramCertificateSigned >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgSteamDatagramCertificateRequest*
Arena::CreateMaybeMessage< ::CMsgSteamDatagramCertificateRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgSteamDatagramCertificateRequest >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
