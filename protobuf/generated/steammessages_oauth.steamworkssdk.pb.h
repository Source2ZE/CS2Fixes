// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: steammessages_oauth.steamworkssdk.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_steammessages_5foauth_2esteamworkssdk_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_steammessages_5foauth_2esteamworkssdk_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021008 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "steammessages_unified_base.steamworkssdk.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_steammessages_5foauth_2esteamworkssdk_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_steammessages_5foauth_2esteamworkssdk_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_steammessages_5foauth_2esteamworkssdk_2eproto;
class COAuthToken_ImplicitGrantNoPrompt_Request;
struct COAuthToken_ImplicitGrantNoPrompt_RequestDefaultTypeInternal;
extern COAuthToken_ImplicitGrantNoPrompt_RequestDefaultTypeInternal _COAuthToken_ImplicitGrantNoPrompt_Request_default_instance_;
class COAuthToken_ImplicitGrantNoPrompt_Response;
struct COAuthToken_ImplicitGrantNoPrompt_ResponseDefaultTypeInternal;
extern COAuthToken_ImplicitGrantNoPrompt_ResponseDefaultTypeInternal _COAuthToken_ImplicitGrantNoPrompt_Response_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::COAuthToken_ImplicitGrantNoPrompt_Request* Arena::CreateMaybeMessage<::COAuthToken_ImplicitGrantNoPrompt_Request>(Arena*);
template<> ::COAuthToken_ImplicitGrantNoPrompt_Response* Arena::CreateMaybeMessage<::COAuthToken_ImplicitGrantNoPrompt_Response>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class COAuthToken_ImplicitGrantNoPrompt_Request :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:COAuthToken_ImplicitGrantNoPrompt_Request) */ {
 public:
  inline COAuthToken_ImplicitGrantNoPrompt_Request() : COAuthToken_ImplicitGrantNoPrompt_Request(nullptr) {}
  ~COAuthToken_ImplicitGrantNoPrompt_Request() override;
  explicit PROTOBUF_CONSTEXPR COAuthToken_ImplicitGrantNoPrompt_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  COAuthToken_ImplicitGrantNoPrompt_Request(const COAuthToken_ImplicitGrantNoPrompt_Request& from);
  COAuthToken_ImplicitGrantNoPrompt_Request(COAuthToken_ImplicitGrantNoPrompt_Request&& from) noexcept
    : COAuthToken_ImplicitGrantNoPrompt_Request() {
    *this = ::std::move(from);
  }

  inline COAuthToken_ImplicitGrantNoPrompt_Request& operator=(const COAuthToken_ImplicitGrantNoPrompt_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline COAuthToken_ImplicitGrantNoPrompt_Request& operator=(COAuthToken_ImplicitGrantNoPrompt_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const COAuthToken_ImplicitGrantNoPrompt_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const COAuthToken_ImplicitGrantNoPrompt_Request* internal_default_instance() {
    return reinterpret_cast<const COAuthToken_ImplicitGrantNoPrompt_Request*>(
               &_COAuthToken_ImplicitGrantNoPrompt_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(COAuthToken_ImplicitGrantNoPrompt_Request& a, COAuthToken_ImplicitGrantNoPrompt_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(COAuthToken_ImplicitGrantNoPrompt_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(COAuthToken_ImplicitGrantNoPrompt_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  COAuthToken_ImplicitGrantNoPrompt_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<COAuthToken_ImplicitGrantNoPrompt_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const COAuthToken_ImplicitGrantNoPrompt_Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const COAuthToken_ImplicitGrantNoPrompt_Request& from) {
    COAuthToken_ImplicitGrantNoPrompt_Request::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(COAuthToken_ImplicitGrantNoPrompt_Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "COAuthToken_ImplicitGrantNoPrompt_Request";
  }
  protected:
  explicit COAuthToken_ImplicitGrantNoPrompt_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kClientidFieldNumber = 1,
  };
  // optional string clientid = 1 [(.description) = "Client ID for which to count the number of issued tokens"];
  bool has_clientid() const;
  private:
  bool _internal_has_clientid() const;
  public:
  void clear_clientid();
  const std::string& clientid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_clientid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_clientid();
  PROTOBUF_NODISCARD std::string* release_clientid();
  void set_allocated_clientid(std::string* clientid);
  private:
  const std::string& _internal_clientid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_clientid(const std::string& value);
  std::string* _internal_mutable_clientid();
  public:

  // @@protoc_insertion_point(class_scope:COAuthToken_ImplicitGrantNoPrompt_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr clientid_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_steammessages_5foauth_2esteamworkssdk_2eproto;
};
// -------------------------------------------------------------------

class COAuthToken_ImplicitGrantNoPrompt_Response :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:COAuthToken_ImplicitGrantNoPrompt_Response) */ {
 public:
  inline COAuthToken_ImplicitGrantNoPrompt_Response() : COAuthToken_ImplicitGrantNoPrompt_Response(nullptr) {}
  ~COAuthToken_ImplicitGrantNoPrompt_Response() override;
  explicit PROTOBUF_CONSTEXPR COAuthToken_ImplicitGrantNoPrompt_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  COAuthToken_ImplicitGrantNoPrompt_Response(const COAuthToken_ImplicitGrantNoPrompt_Response& from);
  COAuthToken_ImplicitGrantNoPrompt_Response(COAuthToken_ImplicitGrantNoPrompt_Response&& from) noexcept
    : COAuthToken_ImplicitGrantNoPrompt_Response() {
    *this = ::std::move(from);
  }

  inline COAuthToken_ImplicitGrantNoPrompt_Response& operator=(const COAuthToken_ImplicitGrantNoPrompt_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline COAuthToken_ImplicitGrantNoPrompt_Response& operator=(COAuthToken_ImplicitGrantNoPrompt_Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const COAuthToken_ImplicitGrantNoPrompt_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const COAuthToken_ImplicitGrantNoPrompt_Response* internal_default_instance() {
    return reinterpret_cast<const COAuthToken_ImplicitGrantNoPrompt_Response*>(
               &_COAuthToken_ImplicitGrantNoPrompt_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(COAuthToken_ImplicitGrantNoPrompt_Response& a, COAuthToken_ImplicitGrantNoPrompt_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(COAuthToken_ImplicitGrantNoPrompt_Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(COAuthToken_ImplicitGrantNoPrompt_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  COAuthToken_ImplicitGrantNoPrompt_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<COAuthToken_ImplicitGrantNoPrompt_Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const COAuthToken_ImplicitGrantNoPrompt_Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const COAuthToken_ImplicitGrantNoPrompt_Response& from) {
    COAuthToken_ImplicitGrantNoPrompt_Response::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(COAuthToken_ImplicitGrantNoPrompt_Response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "COAuthToken_ImplicitGrantNoPrompt_Response";
  }
  protected:
  explicit COAuthToken_ImplicitGrantNoPrompt_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccessTokenFieldNumber = 1,
    kRedirectUriFieldNumber = 2,
  };
  // optional string access_token = 1 [(.description) = "OAuth Token, granted on success"];
  bool has_access_token() const;
  private:
  bool _internal_has_access_token() const;
  public:
  void clear_access_token();
  const std::string& access_token() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_access_token(ArgT0&& arg0, ArgT... args);
  std::string* mutable_access_token();
  PROTOBUF_NODISCARD std::string* release_access_token();
  void set_allocated_access_token(std::string* access_token);
  private:
  const std::string& _internal_access_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_access_token(const std::string& value);
  std::string* _internal_mutable_access_token();
  public:

  // optional string redirect_uri = 2 [(.description) = "Redirection URI provided during client registration."];
  bool has_redirect_uri() const;
  private:
  bool _internal_has_redirect_uri() const;
  public:
  void clear_redirect_uri();
  const std::string& redirect_uri() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_redirect_uri(ArgT0&& arg0, ArgT... args);
  std::string* mutable_redirect_uri();
  PROTOBUF_NODISCARD std::string* release_redirect_uri();
  void set_allocated_redirect_uri(std::string* redirect_uri);
  private:
  const std::string& _internal_redirect_uri() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_redirect_uri(const std::string& value);
  std::string* _internal_mutable_redirect_uri();
  public:

  // @@protoc_insertion_point(class_scope:COAuthToken_ImplicitGrantNoPrompt_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr access_token_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr redirect_uri_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_steammessages_5foauth_2esteamworkssdk_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// COAuthToken_ImplicitGrantNoPrompt_Request

// optional string clientid = 1 [(.description) = "Client ID for which to count the number of issued tokens"];
inline bool COAuthToken_ImplicitGrantNoPrompt_Request::_internal_has_clientid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool COAuthToken_ImplicitGrantNoPrompt_Request::has_clientid() const {
  return _internal_has_clientid();
}
inline void COAuthToken_ImplicitGrantNoPrompt_Request::clear_clientid() {
  _impl_.clientid_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& COAuthToken_ImplicitGrantNoPrompt_Request::clientid() const {
  // @@protoc_insertion_point(field_get:COAuthToken_ImplicitGrantNoPrompt_Request.clientid)
  return _internal_clientid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void COAuthToken_ImplicitGrantNoPrompt_Request::set_clientid(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.clientid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:COAuthToken_ImplicitGrantNoPrompt_Request.clientid)
}
inline std::string* COAuthToken_ImplicitGrantNoPrompt_Request::mutable_clientid() {
  std::string* _s = _internal_mutable_clientid();
  // @@protoc_insertion_point(field_mutable:COAuthToken_ImplicitGrantNoPrompt_Request.clientid)
  return _s;
}
inline const std::string& COAuthToken_ImplicitGrantNoPrompt_Request::_internal_clientid() const {
  return _impl_.clientid_.Get();
}
inline void COAuthToken_ImplicitGrantNoPrompt_Request::_internal_set_clientid(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.clientid_.Set(value, GetArenaForAllocation());
}
inline std::string* COAuthToken_ImplicitGrantNoPrompt_Request::_internal_mutable_clientid() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.clientid_.Mutable(GetArenaForAllocation());
}
inline std::string* COAuthToken_ImplicitGrantNoPrompt_Request::release_clientid() {
  // @@protoc_insertion_point(field_release:COAuthToken_ImplicitGrantNoPrompt_Request.clientid)
  if (!_internal_has_clientid()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.clientid_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.clientid_.IsDefault()) {
    _impl_.clientid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void COAuthToken_ImplicitGrantNoPrompt_Request::set_allocated_clientid(std::string* clientid) {
  if (clientid != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.clientid_.SetAllocated(clientid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.clientid_.IsDefault()) {
    _impl_.clientid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:COAuthToken_ImplicitGrantNoPrompt_Request.clientid)
}

// -------------------------------------------------------------------

// COAuthToken_ImplicitGrantNoPrompt_Response

// optional string access_token = 1 [(.description) = "OAuth Token, granted on success"];
inline bool COAuthToken_ImplicitGrantNoPrompt_Response::_internal_has_access_token() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool COAuthToken_ImplicitGrantNoPrompt_Response::has_access_token() const {
  return _internal_has_access_token();
}
inline void COAuthToken_ImplicitGrantNoPrompt_Response::clear_access_token() {
  _impl_.access_token_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& COAuthToken_ImplicitGrantNoPrompt_Response::access_token() const {
  // @@protoc_insertion_point(field_get:COAuthToken_ImplicitGrantNoPrompt_Response.access_token)
  return _internal_access_token();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void COAuthToken_ImplicitGrantNoPrompt_Response::set_access_token(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.access_token_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:COAuthToken_ImplicitGrantNoPrompt_Response.access_token)
}
inline std::string* COAuthToken_ImplicitGrantNoPrompt_Response::mutable_access_token() {
  std::string* _s = _internal_mutable_access_token();
  // @@protoc_insertion_point(field_mutable:COAuthToken_ImplicitGrantNoPrompt_Response.access_token)
  return _s;
}
inline const std::string& COAuthToken_ImplicitGrantNoPrompt_Response::_internal_access_token() const {
  return _impl_.access_token_.Get();
}
inline void COAuthToken_ImplicitGrantNoPrompt_Response::_internal_set_access_token(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.access_token_.Set(value, GetArenaForAllocation());
}
inline std::string* COAuthToken_ImplicitGrantNoPrompt_Response::_internal_mutable_access_token() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.access_token_.Mutable(GetArenaForAllocation());
}
inline std::string* COAuthToken_ImplicitGrantNoPrompt_Response::release_access_token() {
  // @@protoc_insertion_point(field_release:COAuthToken_ImplicitGrantNoPrompt_Response.access_token)
  if (!_internal_has_access_token()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.access_token_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.access_token_.IsDefault()) {
    _impl_.access_token_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void COAuthToken_ImplicitGrantNoPrompt_Response::set_allocated_access_token(std::string* access_token) {
  if (access_token != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.access_token_.SetAllocated(access_token, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.access_token_.IsDefault()) {
    _impl_.access_token_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:COAuthToken_ImplicitGrantNoPrompt_Response.access_token)
}

// optional string redirect_uri = 2 [(.description) = "Redirection URI provided during client registration."];
inline bool COAuthToken_ImplicitGrantNoPrompt_Response::_internal_has_redirect_uri() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool COAuthToken_ImplicitGrantNoPrompt_Response::has_redirect_uri() const {
  return _internal_has_redirect_uri();
}
inline void COAuthToken_ImplicitGrantNoPrompt_Response::clear_redirect_uri() {
  _impl_.redirect_uri_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& COAuthToken_ImplicitGrantNoPrompt_Response::redirect_uri() const {
  // @@protoc_insertion_point(field_get:COAuthToken_ImplicitGrantNoPrompt_Response.redirect_uri)
  return _internal_redirect_uri();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void COAuthToken_ImplicitGrantNoPrompt_Response::set_redirect_uri(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.redirect_uri_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:COAuthToken_ImplicitGrantNoPrompt_Response.redirect_uri)
}
inline std::string* COAuthToken_ImplicitGrantNoPrompt_Response::mutable_redirect_uri() {
  std::string* _s = _internal_mutable_redirect_uri();
  // @@protoc_insertion_point(field_mutable:COAuthToken_ImplicitGrantNoPrompt_Response.redirect_uri)
  return _s;
}
inline const std::string& COAuthToken_ImplicitGrantNoPrompt_Response::_internal_redirect_uri() const {
  return _impl_.redirect_uri_.Get();
}
inline void COAuthToken_ImplicitGrantNoPrompt_Response::_internal_set_redirect_uri(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.redirect_uri_.Set(value, GetArenaForAllocation());
}
inline std::string* COAuthToken_ImplicitGrantNoPrompt_Response::_internal_mutable_redirect_uri() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.redirect_uri_.Mutable(GetArenaForAllocation());
}
inline std::string* COAuthToken_ImplicitGrantNoPrompt_Response::release_redirect_uri() {
  // @@protoc_insertion_point(field_release:COAuthToken_ImplicitGrantNoPrompt_Response.redirect_uri)
  if (!_internal_has_redirect_uri()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.redirect_uri_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.redirect_uri_.IsDefault()) {
    _impl_.redirect_uri_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void COAuthToken_ImplicitGrantNoPrompt_Response::set_allocated_redirect_uri(std::string* redirect_uri) {
  if (redirect_uri != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.redirect_uri_.SetAllocated(redirect_uri, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.redirect_uri_.IsDefault()) {
    _impl_.redirect_uri_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:COAuthToken_ImplicitGrantNoPrompt_Response.redirect_uri)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_steammessages_5foauth_2esteamworkssdk_2eproto
