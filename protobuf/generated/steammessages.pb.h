// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: steammessages.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_steammessages_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_steammessages_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021008 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/descriptor.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_steammessages_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_steammessages_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_steammessages_2eproto;
class CChinaAgreementSessions_StartAgreementSessionInGame_Request;
struct CChinaAgreementSessions_StartAgreementSessionInGame_RequestDefaultTypeInternal;
extern CChinaAgreementSessions_StartAgreementSessionInGame_RequestDefaultTypeInternal _CChinaAgreementSessions_StartAgreementSessionInGame_Request_default_instance_;
class CChinaAgreementSessions_StartAgreementSessionInGame_Response;
struct CChinaAgreementSessions_StartAgreementSessionInGame_ResponseDefaultTypeInternal;
extern CChinaAgreementSessions_StartAgreementSessionInGame_ResponseDefaultTypeInternal _CChinaAgreementSessions_StartAgreementSessionInGame_Response_default_instance_;
class CMsgProtoBufHeader;
struct CMsgProtoBufHeaderDefaultTypeInternal;
extern CMsgProtoBufHeaderDefaultTypeInternal _CMsgProtoBufHeader_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::CChinaAgreementSessions_StartAgreementSessionInGame_Request* Arena::CreateMaybeMessage<::CChinaAgreementSessions_StartAgreementSessionInGame_Request>(Arena*);
template<> ::CChinaAgreementSessions_StartAgreementSessionInGame_Response* Arena::CreateMaybeMessage<::CChinaAgreementSessions_StartAgreementSessionInGame_Response>(Arena*);
template<> ::CMsgProtoBufHeader* Arena::CreateMaybeMessage<::CMsgProtoBufHeader>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

enum GCProtoBufMsgSrc : int {
  GCProtoBufMsgSrc_Unspecified = 0,
  GCProtoBufMsgSrc_FromSystem = 1,
  GCProtoBufMsgSrc_FromSteamID = 2,
  GCProtoBufMsgSrc_FromGC = 3,
  GCProtoBufMsgSrc_ReplySystem = 4
};
bool GCProtoBufMsgSrc_IsValid(int value);
constexpr GCProtoBufMsgSrc GCProtoBufMsgSrc_MIN = GCProtoBufMsgSrc_Unspecified;
constexpr GCProtoBufMsgSrc GCProtoBufMsgSrc_MAX = GCProtoBufMsgSrc_ReplySystem;
constexpr int GCProtoBufMsgSrc_ARRAYSIZE = GCProtoBufMsgSrc_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* GCProtoBufMsgSrc_descriptor();
template<typename T>
inline const std::string& GCProtoBufMsgSrc_Name(T enum_t_value) {
  static_assert(::std::is_same<T, GCProtoBufMsgSrc>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function GCProtoBufMsgSrc_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    GCProtoBufMsgSrc_descriptor(), enum_t_value);
}
inline bool GCProtoBufMsgSrc_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, GCProtoBufMsgSrc* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<GCProtoBufMsgSrc>(
    GCProtoBufMsgSrc_descriptor(), name, value);
}
// ===================================================================

class CMsgProtoBufHeader :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgProtoBufHeader) */ {
 public:
  inline CMsgProtoBufHeader() : CMsgProtoBufHeader(nullptr) {}
  ~CMsgProtoBufHeader() override;
  explicit PROTOBUF_CONSTEXPR CMsgProtoBufHeader(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgProtoBufHeader(const CMsgProtoBufHeader& from);
  CMsgProtoBufHeader(CMsgProtoBufHeader&& from) noexcept
    : CMsgProtoBufHeader() {
    *this = ::std::move(from);
  }

  inline CMsgProtoBufHeader& operator=(const CMsgProtoBufHeader& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgProtoBufHeader& operator=(CMsgProtoBufHeader&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgProtoBufHeader& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgProtoBufHeader* internal_default_instance() {
    return reinterpret_cast<const CMsgProtoBufHeader*>(
               &_CMsgProtoBufHeader_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CMsgProtoBufHeader& a, CMsgProtoBufHeader& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgProtoBufHeader* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgProtoBufHeader* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgProtoBufHeader* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgProtoBufHeader>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgProtoBufHeader& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgProtoBufHeader& from) {
    CMsgProtoBufHeader::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgProtoBufHeader* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgProtoBufHeader";
  }
  protected:
  explicit CMsgProtoBufHeader(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTargetJobNameFieldNumber = 12,
    kErrorMessageFieldNumber = 14,
    kClientSteamIdFieldNumber = 1,
    kClientSessionIdFieldNumber = 2,
    kSourceAppIdFieldNumber = 3,
    kIpFieldNumber = 15,
    kGcMsgSrcFieldNumber = 200,
    kGcDirIndexSourceFieldNumber = 201,
    kEresultFieldNumber = 13,
    kJobIdSourceFieldNumber = 10,
    kJobIdTargetFieldNumber = 11,
  };
  // optional string target_job_name = 12;
  bool has_target_job_name() const;
  private:
  bool _internal_has_target_job_name() const;
  public:
  void clear_target_job_name();
  const std::string& target_job_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_target_job_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_target_job_name();
  PROTOBUF_NODISCARD std::string* release_target_job_name();
  void set_allocated_target_job_name(std::string* target_job_name);
  private:
  const std::string& _internal_target_job_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_target_job_name(const std::string& value);
  std::string* _internal_mutable_target_job_name();
  public:

  // optional string error_message = 14;
  bool has_error_message() const;
  private:
  bool _internal_has_error_message() const;
  public:
  void clear_error_message();
  const std::string& error_message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_error_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_error_message();
  PROTOBUF_NODISCARD std::string* release_error_message();
  void set_allocated_error_message(std::string* error_message);
  private:
  const std::string& _internal_error_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_error_message(const std::string& value);
  std::string* _internal_mutable_error_message();
  public:

  // optional fixed64 client_steam_id = 1;
  bool has_client_steam_id() const;
  private:
  bool _internal_has_client_steam_id() const;
  public:
  void clear_client_steam_id();
  uint64_t client_steam_id() const;
  void set_client_steam_id(uint64_t value);
  private:
  uint64_t _internal_client_steam_id() const;
  void _internal_set_client_steam_id(uint64_t value);
  public:

  // optional int32 client_session_id = 2;
  bool has_client_session_id() const;
  private:
  bool _internal_has_client_session_id() const;
  public:
  void clear_client_session_id();
  int32_t client_session_id() const;
  void set_client_session_id(int32_t value);
  private:
  int32_t _internal_client_session_id() const;
  void _internal_set_client_session_id(int32_t value);
  public:

  // optional uint32 source_app_id = 3;
  bool has_source_app_id() const;
  private:
  bool _internal_has_source_app_id() const;
  public:
  void clear_source_app_id();
  uint32_t source_app_id() const;
  void set_source_app_id(uint32_t value);
  private:
  uint32_t _internal_source_app_id() const;
  void _internal_set_source_app_id(uint32_t value);
  public:

  // optional uint32 ip = 15;
  bool has_ip() const;
  private:
  bool _internal_has_ip() const;
  public:
  void clear_ip();
  uint32_t ip() const;
  void set_ip(uint32_t value);
  private:
  uint32_t _internal_ip() const;
  void _internal_set_ip(uint32_t value);
  public:

  // optional .GCProtoBufMsgSrc gc_msg_src = 200 [default = GCProtoBufMsgSrc_Unspecified];
  bool has_gc_msg_src() const;
  private:
  bool _internal_has_gc_msg_src() const;
  public:
  void clear_gc_msg_src();
  ::GCProtoBufMsgSrc gc_msg_src() const;
  void set_gc_msg_src(::GCProtoBufMsgSrc value);
  private:
  ::GCProtoBufMsgSrc _internal_gc_msg_src() const;
  void _internal_set_gc_msg_src(::GCProtoBufMsgSrc value);
  public:

  // optional uint32 gc_dir_index_source = 201;
  bool has_gc_dir_index_source() const;
  private:
  bool _internal_has_gc_dir_index_source() const;
  public:
  void clear_gc_dir_index_source();
  uint32_t gc_dir_index_source() const;
  void set_gc_dir_index_source(uint32_t value);
  private:
  uint32_t _internal_gc_dir_index_source() const;
  void _internal_set_gc_dir_index_source(uint32_t value);
  public:

  // optional int32 eresult = 13 [default = 2];
  bool has_eresult() const;
  private:
  bool _internal_has_eresult() const;
  public:
  void clear_eresult();
  int32_t eresult() const;
  void set_eresult(int32_t value);
  private:
  int32_t _internal_eresult() const;
  void _internal_set_eresult(int32_t value);
  public:

  // optional fixed64 job_id_source = 10 [default = 18446744073709551615];
  bool has_job_id_source() const;
  private:
  bool _internal_has_job_id_source() const;
  public:
  void clear_job_id_source();
  uint64_t job_id_source() const;
  void set_job_id_source(uint64_t value);
  private:
  uint64_t _internal_job_id_source() const;
  void _internal_set_job_id_source(uint64_t value);
  public:

  // optional fixed64 job_id_target = 11 [default = 18446744073709551615];
  bool has_job_id_target() const;
  private:
  bool _internal_has_job_id_target() const;
  public:
  void clear_job_id_target();
  uint64_t job_id_target() const;
  void set_job_id_target(uint64_t value);
  private:
  uint64_t _internal_job_id_target() const;
  void _internal_set_job_id_target(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgProtoBufHeader)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr target_job_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr error_message_;
    uint64_t client_steam_id_;
    int32_t client_session_id_;
    uint32_t source_app_id_;
    uint32_t ip_;
    int gc_msg_src_;
    uint32_t gc_dir_index_source_;
    int32_t eresult_;
    uint64_t job_id_source_;
    uint64_t job_id_target_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_steammessages_2eproto;
};
// -------------------------------------------------------------------

class CChinaAgreementSessions_StartAgreementSessionInGame_Request :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CChinaAgreementSessions_StartAgreementSessionInGame_Request) */ {
 public:
  inline CChinaAgreementSessions_StartAgreementSessionInGame_Request() : CChinaAgreementSessions_StartAgreementSessionInGame_Request(nullptr) {}
  ~CChinaAgreementSessions_StartAgreementSessionInGame_Request() override;
  explicit PROTOBUF_CONSTEXPR CChinaAgreementSessions_StartAgreementSessionInGame_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CChinaAgreementSessions_StartAgreementSessionInGame_Request(const CChinaAgreementSessions_StartAgreementSessionInGame_Request& from);
  CChinaAgreementSessions_StartAgreementSessionInGame_Request(CChinaAgreementSessions_StartAgreementSessionInGame_Request&& from) noexcept
    : CChinaAgreementSessions_StartAgreementSessionInGame_Request() {
    *this = ::std::move(from);
  }

  inline CChinaAgreementSessions_StartAgreementSessionInGame_Request& operator=(const CChinaAgreementSessions_StartAgreementSessionInGame_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CChinaAgreementSessions_StartAgreementSessionInGame_Request& operator=(CChinaAgreementSessions_StartAgreementSessionInGame_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CChinaAgreementSessions_StartAgreementSessionInGame_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CChinaAgreementSessions_StartAgreementSessionInGame_Request* internal_default_instance() {
    return reinterpret_cast<const CChinaAgreementSessions_StartAgreementSessionInGame_Request*>(
               &_CChinaAgreementSessions_StartAgreementSessionInGame_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CChinaAgreementSessions_StartAgreementSessionInGame_Request& a, CChinaAgreementSessions_StartAgreementSessionInGame_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CChinaAgreementSessions_StartAgreementSessionInGame_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CChinaAgreementSessions_StartAgreementSessionInGame_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CChinaAgreementSessions_StartAgreementSessionInGame_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CChinaAgreementSessions_StartAgreementSessionInGame_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CChinaAgreementSessions_StartAgreementSessionInGame_Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CChinaAgreementSessions_StartAgreementSessionInGame_Request& from) {
    CChinaAgreementSessions_StartAgreementSessionInGame_Request::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CChinaAgreementSessions_StartAgreementSessionInGame_Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CChinaAgreementSessions_StartAgreementSessionInGame_Request";
  }
  protected:
  explicit CChinaAgreementSessions_StartAgreementSessionInGame_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kClientIpaddressFieldNumber = 3,
    kSteamidFieldNumber = 2,
    kAppidFieldNumber = 1,
  };
  // optional string client_ipaddress = 3;
  bool has_client_ipaddress() const;
  private:
  bool _internal_has_client_ipaddress() const;
  public:
  void clear_client_ipaddress();
  const std::string& client_ipaddress() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_client_ipaddress(ArgT0&& arg0, ArgT... args);
  std::string* mutable_client_ipaddress();
  PROTOBUF_NODISCARD std::string* release_client_ipaddress();
  void set_allocated_client_ipaddress(std::string* client_ipaddress);
  private:
  const std::string& _internal_client_ipaddress() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_client_ipaddress(const std::string& value);
  std::string* _internal_mutable_client_ipaddress();
  public:

  // optional fixed64 steamid = 2;
  bool has_steamid() const;
  private:
  bool _internal_has_steamid() const;
  public:
  void clear_steamid();
  uint64_t steamid() const;
  void set_steamid(uint64_t value);
  private:
  uint64_t _internal_steamid() const;
  void _internal_set_steamid(uint64_t value);
  public:

  // optional uint32 appid = 1;
  bool has_appid() const;
  private:
  bool _internal_has_appid() const;
  public:
  void clear_appid();
  uint32_t appid() const;
  void set_appid(uint32_t value);
  private:
  uint32_t _internal_appid() const;
  void _internal_set_appid(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CChinaAgreementSessions_StartAgreementSessionInGame_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr client_ipaddress_;
    uint64_t steamid_;
    uint32_t appid_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_steammessages_2eproto;
};
// -------------------------------------------------------------------

class CChinaAgreementSessions_StartAgreementSessionInGame_Response :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CChinaAgreementSessions_StartAgreementSessionInGame_Response) */ {
 public:
  inline CChinaAgreementSessions_StartAgreementSessionInGame_Response() : CChinaAgreementSessions_StartAgreementSessionInGame_Response(nullptr) {}
  ~CChinaAgreementSessions_StartAgreementSessionInGame_Response() override;
  explicit PROTOBUF_CONSTEXPR CChinaAgreementSessions_StartAgreementSessionInGame_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CChinaAgreementSessions_StartAgreementSessionInGame_Response(const CChinaAgreementSessions_StartAgreementSessionInGame_Response& from);
  CChinaAgreementSessions_StartAgreementSessionInGame_Response(CChinaAgreementSessions_StartAgreementSessionInGame_Response&& from) noexcept
    : CChinaAgreementSessions_StartAgreementSessionInGame_Response() {
    *this = ::std::move(from);
  }

  inline CChinaAgreementSessions_StartAgreementSessionInGame_Response& operator=(const CChinaAgreementSessions_StartAgreementSessionInGame_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CChinaAgreementSessions_StartAgreementSessionInGame_Response& operator=(CChinaAgreementSessions_StartAgreementSessionInGame_Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CChinaAgreementSessions_StartAgreementSessionInGame_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CChinaAgreementSessions_StartAgreementSessionInGame_Response* internal_default_instance() {
    return reinterpret_cast<const CChinaAgreementSessions_StartAgreementSessionInGame_Response*>(
               &_CChinaAgreementSessions_StartAgreementSessionInGame_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(CChinaAgreementSessions_StartAgreementSessionInGame_Response& a, CChinaAgreementSessions_StartAgreementSessionInGame_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CChinaAgreementSessions_StartAgreementSessionInGame_Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CChinaAgreementSessions_StartAgreementSessionInGame_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CChinaAgreementSessions_StartAgreementSessionInGame_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CChinaAgreementSessions_StartAgreementSessionInGame_Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CChinaAgreementSessions_StartAgreementSessionInGame_Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CChinaAgreementSessions_StartAgreementSessionInGame_Response& from) {
    CChinaAgreementSessions_StartAgreementSessionInGame_Response::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CChinaAgreementSessions_StartAgreementSessionInGame_Response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CChinaAgreementSessions_StartAgreementSessionInGame_Response";
  }
  protected:
  explicit CChinaAgreementSessions_StartAgreementSessionInGame_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAgreementUrlFieldNumber = 1,
  };
  // optional string agreement_url = 1;
  bool has_agreement_url() const;
  private:
  bool _internal_has_agreement_url() const;
  public:
  void clear_agreement_url();
  const std::string& agreement_url() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_agreement_url(ArgT0&& arg0, ArgT... args);
  std::string* mutable_agreement_url();
  PROTOBUF_NODISCARD std::string* release_agreement_url();
  void set_allocated_agreement_url(std::string* agreement_url);
  private:
  const std::string& _internal_agreement_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_agreement_url(const std::string& value);
  std::string* _internal_mutable_agreement_url();
  public:

  // @@protoc_insertion_point(class_scope:CChinaAgreementSessions_StartAgreementSessionInGame_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr agreement_url_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_steammessages_2eproto;
};
// ===================================================================

static const int kKeyFieldFieldNumber = 60000;
extern ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::PROTOBUF_NAMESPACE_ID::FieldOptions,
    ::PROTOBUF_NAMESPACE_ID::internal::PrimitiveTypeTraits< bool >, 8, false >
  key_field;
static const int kMsgpoolSoftLimitFieldNumber = 60000;
extern ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::PROTOBUF_NAMESPACE_ID::MessageOptions,
    ::PROTOBUF_NAMESPACE_ID::internal::PrimitiveTypeTraits< int32_t >, 5, false >
  msgpool_soft_limit;
static const int kMsgpoolHardLimitFieldNumber = 60001;
extern ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::PROTOBUF_NAMESPACE_ID::MessageOptions,
    ::PROTOBUF_NAMESPACE_ID::internal::PrimitiveTypeTraits< int32_t >, 5, false >
  msgpool_hard_limit;

// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CMsgProtoBufHeader

// optional fixed64 client_steam_id = 1;
inline bool CMsgProtoBufHeader::_internal_has_client_steam_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgProtoBufHeader::has_client_steam_id() const {
  return _internal_has_client_steam_id();
}
inline void CMsgProtoBufHeader::clear_client_steam_id() {
  _impl_.client_steam_id_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint64_t CMsgProtoBufHeader::_internal_client_steam_id() const {
  return _impl_.client_steam_id_;
}
inline uint64_t CMsgProtoBufHeader::client_steam_id() const {
  // @@protoc_insertion_point(field_get:CMsgProtoBufHeader.client_steam_id)
  return _internal_client_steam_id();
}
inline void CMsgProtoBufHeader::_internal_set_client_steam_id(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.client_steam_id_ = value;
}
inline void CMsgProtoBufHeader::set_client_steam_id(uint64_t value) {
  _internal_set_client_steam_id(value);
  // @@protoc_insertion_point(field_set:CMsgProtoBufHeader.client_steam_id)
}

// optional int32 client_session_id = 2;
inline bool CMsgProtoBufHeader::_internal_has_client_session_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgProtoBufHeader::has_client_session_id() const {
  return _internal_has_client_session_id();
}
inline void CMsgProtoBufHeader::clear_client_session_id() {
  _impl_.client_session_id_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline int32_t CMsgProtoBufHeader::_internal_client_session_id() const {
  return _impl_.client_session_id_;
}
inline int32_t CMsgProtoBufHeader::client_session_id() const {
  // @@protoc_insertion_point(field_get:CMsgProtoBufHeader.client_session_id)
  return _internal_client_session_id();
}
inline void CMsgProtoBufHeader::_internal_set_client_session_id(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.client_session_id_ = value;
}
inline void CMsgProtoBufHeader::set_client_session_id(int32_t value) {
  _internal_set_client_session_id(value);
  // @@protoc_insertion_point(field_set:CMsgProtoBufHeader.client_session_id)
}

// optional uint32 source_app_id = 3;
inline bool CMsgProtoBufHeader::_internal_has_source_app_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CMsgProtoBufHeader::has_source_app_id() const {
  return _internal_has_source_app_id();
}
inline void CMsgProtoBufHeader::clear_source_app_id() {
  _impl_.source_app_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline uint32_t CMsgProtoBufHeader::_internal_source_app_id() const {
  return _impl_.source_app_id_;
}
inline uint32_t CMsgProtoBufHeader::source_app_id() const {
  // @@protoc_insertion_point(field_get:CMsgProtoBufHeader.source_app_id)
  return _internal_source_app_id();
}
inline void CMsgProtoBufHeader::_internal_set_source_app_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.source_app_id_ = value;
}
inline void CMsgProtoBufHeader::set_source_app_id(uint32_t value) {
  _internal_set_source_app_id(value);
  // @@protoc_insertion_point(field_set:CMsgProtoBufHeader.source_app_id)
}

// optional fixed64 job_id_source = 10 [default = 18446744073709551615];
inline bool CMsgProtoBufHeader::_internal_has_job_id_source() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool CMsgProtoBufHeader::has_job_id_source() const {
  return _internal_has_job_id_source();
}
inline void CMsgProtoBufHeader::clear_job_id_source() {
  _impl_.job_id_source_ = uint64_t{18446744073709551615u};
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline uint64_t CMsgProtoBufHeader::_internal_job_id_source() const {
  return _impl_.job_id_source_;
}
inline uint64_t CMsgProtoBufHeader::job_id_source() const {
  // @@protoc_insertion_point(field_get:CMsgProtoBufHeader.job_id_source)
  return _internal_job_id_source();
}
inline void CMsgProtoBufHeader::_internal_set_job_id_source(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000200u;
  _impl_.job_id_source_ = value;
}
inline void CMsgProtoBufHeader::set_job_id_source(uint64_t value) {
  _internal_set_job_id_source(value);
  // @@protoc_insertion_point(field_set:CMsgProtoBufHeader.job_id_source)
}

// optional fixed64 job_id_target = 11 [default = 18446744073709551615];
inline bool CMsgProtoBufHeader::_internal_has_job_id_target() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool CMsgProtoBufHeader::has_job_id_target() const {
  return _internal_has_job_id_target();
}
inline void CMsgProtoBufHeader::clear_job_id_target() {
  _impl_.job_id_target_ = uint64_t{18446744073709551615u};
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline uint64_t CMsgProtoBufHeader::_internal_job_id_target() const {
  return _impl_.job_id_target_;
}
inline uint64_t CMsgProtoBufHeader::job_id_target() const {
  // @@protoc_insertion_point(field_get:CMsgProtoBufHeader.job_id_target)
  return _internal_job_id_target();
}
inline void CMsgProtoBufHeader::_internal_set_job_id_target(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000400u;
  _impl_.job_id_target_ = value;
}
inline void CMsgProtoBufHeader::set_job_id_target(uint64_t value) {
  _internal_set_job_id_target(value);
  // @@protoc_insertion_point(field_set:CMsgProtoBufHeader.job_id_target)
}

// optional string target_job_name = 12;
inline bool CMsgProtoBufHeader::_internal_has_target_job_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgProtoBufHeader::has_target_job_name() const {
  return _internal_has_target_job_name();
}
inline void CMsgProtoBufHeader::clear_target_job_name() {
  _impl_.target_job_name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgProtoBufHeader::target_job_name() const {
  // @@protoc_insertion_point(field_get:CMsgProtoBufHeader.target_job_name)
  return _internal_target_job_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgProtoBufHeader::set_target_job_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.target_job_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgProtoBufHeader.target_job_name)
}
inline std::string* CMsgProtoBufHeader::mutable_target_job_name() {
  std::string* _s = _internal_mutable_target_job_name();
  // @@protoc_insertion_point(field_mutable:CMsgProtoBufHeader.target_job_name)
  return _s;
}
inline const std::string& CMsgProtoBufHeader::_internal_target_job_name() const {
  return _impl_.target_job_name_.Get();
}
inline void CMsgProtoBufHeader::_internal_set_target_job_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.target_job_name_.Set(value, GetArenaForAllocation());
}
inline std::string* CMsgProtoBufHeader::_internal_mutable_target_job_name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.target_job_name_.Mutable(GetArenaForAllocation());
}
inline std::string* CMsgProtoBufHeader::release_target_job_name() {
  // @@protoc_insertion_point(field_release:CMsgProtoBufHeader.target_job_name)
  if (!_internal_has_target_job_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.target_job_name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.target_job_name_.IsDefault()) {
    _impl_.target_job_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgProtoBufHeader::set_allocated_target_job_name(std::string* target_job_name) {
  if (target_job_name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.target_job_name_.SetAllocated(target_job_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.target_job_name_.IsDefault()) {
    _impl_.target_job_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgProtoBufHeader.target_job_name)
}

// optional int32 eresult = 13 [default = 2];
inline bool CMsgProtoBufHeader::_internal_has_eresult() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool CMsgProtoBufHeader::has_eresult() const {
  return _internal_has_eresult();
}
inline void CMsgProtoBufHeader::clear_eresult() {
  _impl_.eresult_ = 2;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline int32_t CMsgProtoBufHeader::_internal_eresult() const {
  return _impl_.eresult_;
}
inline int32_t CMsgProtoBufHeader::eresult() const {
  // @@protoc_insertion_point(field_get:CMsgProtoBufHeader.eresult)
  return _internal_eresult();
}
inline void CMsgProtoBufHeader::_internal_set_eresult(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.eresult_ = value;
}
inline void CMsgProtoBufHeader::set_eresult(int32_t value) {
  _internal_set_eresult(value);
  // @@protoc_insertion_point(field_set:CMsgProtoBufHeader.eresult)
}

// optional string error_message = 14;
inline bool CMsgProtoBufHeader::_internal_has_error_message() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgProtoBufHeader::has_error_message() const {
  return _internal_has_error_message();
}
inline void CMsgProtoBufHeader::clear_error_message() {
  _impl_.error_message_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CMsgProtoBufHeader::error_message() const {
  // @@protoc_insertion_point(field_get:CMsgProtoBufHeader.error_message)
  return _internal_error_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgProtoBufHeader::set_error_message(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.error_message_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgProtoBufHeader.error_message)
}
inline std::string* CMsgProtoBufHeader::mutable_error_message() {
  std::string* _s = _internal_mutable_error_message();
  // @@protoc_insertion_point(field_mutable:CMsgProtoBufHeader.error_message)
  return _s;
}
inline const std::string& CMsgProtoBufHeader::_internal_error_message() const {
  return _impl_.error_message_.Get();
}
inline void CMsgProtoBufHeader::_internal_set_error_message(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.error_message_.Set(value, GetArenaForAllocation());
}
inline std::string* CMsgProtoBufHeader::_internal_mutable_error_message() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.error_message_.Mutable(GetArenaForAllocation());
}
inline std::string* CMsgProtoBufHeader::release_error_message() {
  // @@protoc_insertion_point(field_release:CMsgProtoBufHeader.error_message)
  if (!_internal_has_error_message()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.error_message_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.error_message_.IsDefault()) {
    _impl_.error_message_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgProtoBufHeader::set_allocated_error_message(std::string* error_message) {
  if (error_message != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.error_message_.SetAllocated(error_message, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.error_message_.IsDefault()) {
    _impl_.error_message_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgProtoBufHeader.error_message)
}

// optional uint32 ip = 15;
inline bool CMsgProtoBufHeader::_internal_has_ip() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CMsgProtoBufHeader::has_ip() const {
  return _internal_has_ip();
}
inline void CMsgProtoBufHeader::clear_ip() {
  _impl_.ip_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline uint32_t CMsgProtoBufHeader::_internal_ip() const {
  return _impl_.ip_;
}
inline uint32_t CMsgProtoBufHeader::ip() const {
  // @@protoc_insertion_point(field_get:CMsgProtoBufHeader.ip)
  return _internal_ip();
}
inline void CMsgProtoBufHeader::_internal_set_ip(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.ip_ = value;
}
inline void CMsgProtoBufHeader::set_ip(uint32_t value) {
  _internal_set_ip(value);
  // @@protoc_insertion_point(field_set:CMsgProtoBufHeader.ip)
}

// optional .GCProtoBufMsgSrc gc_msg_src = 200 [default = GCProtoBufMsgSrc_Unspecified];
inline bool CMsgProtoBufHeader::_internal_has_gc_msg_src() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CMsgProtoBufHeader::has_gc_msg_src() const {
  return _internal_has_gc_msg_src();
}
inline void CMsgProtoBufHeader::clear_gc_msg_src() {
  _impl_.gc_msg_src_ = 0;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline ::GCProtoBufMsgSrc CMsgProtoBufHeader::_internal_gc_msg_src() const {
  return static_cast< ::GCProtoBufMsgSrc >(_impl_.gc_msg_src_);
}
inline ::GCProtoBufMsgSrc CMsgProtoBufHeader::gc_msg_src() const {
  // @@protoc_insertion_point(field_get:CMsgProtoBufHeader.gc_msg_src)
  return _internal_gc_msg_src();
}
inline void CMsgProtoBufHeader::_internal_set_gc_msg_src(::GCProtoBufMsgSrc value) {
  assert(::GCProtoBufMsgSrc_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.gc_msg_src_ = value;
}
inline void CMsgProtoBufHeader::set_gc_msg_src(::GCProtoBufMsgSrc value) {
  _internal_set_gc_msg_src(value);
  // @@protoc_insertion_point(field_set:CMsgProtoBufHeader.gc_msg_src)
}

// optional uint32 gc_dir_index_source = 201;
inline bool CMsgProtoBufHeader::_internal_has_gc_dir_index_source() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool CMsgProtoBufHeader::has_gc_dir_index_source() const {
  return _internal_has_gc_dir_index_source();
}
inline void CMsgProtoBufHeader::clear_gc_dir_index_source() {
  _impl_.gc_dir_index_source_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline uint32_t CMsgProtoBufHeader::_internal_gc_dir_index_source() const {
  return _impl_.gc_dir_index_source_;
}
inline uint32_t CMsgProtoBufHeader::gc_dir_index_source() const {
  // @@protoc_insertion_point(field_get:CMsgProtoBufHeader.gc_dir_index_source)
  return _internal_gc_dir_index_source();
}
inline void CMsgProtoBufHeader::_internal_set_gc_dir_index_source(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.gc_dir_index_source_ = value;
}
inline void CMsgProtoBufHeader::set_gc_dir_index_source(uint32_t value) {
  _internal_set_gc_dir_index_source(value);
  // @@protoc_insertion_point(field_set:CMsgProtoBufHeader.gc_dir_index_source)
}

// -------------------------------------------------------------------

// CChinaAgreementSessions_StartAgreementSessionInGame_Request

// optional uint32 appid = 1;
inline bool CChinaAgreementSessions_StartAgreementSessionInGame_Request::_internal_has_appid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CChinaAgreementSessions_StartAgreementSessionInGame_Request::has_appid() const {
  return _internal_has_appid();
}
inline void CChinaAgreementSessions_StartAgreementSessionInGame_Request::clear_appid() {
  _impl_.appid_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CChinaAgreementSessions_StartAgreementSessionInGame_Request::_internal_appid() const {
  return _impl_.appid_;
}
inline uint32_t CChinaAgreementSessions_StartAgreementSessionInGame_Request::appid() const {
  // @@protoc_insertion_point(field_get:CChinaAgreementSessions_StartAgreementSessionInGame_Request.appid)
  return _internal_appid();
}
inline void CChinaAgreementSessions_StartAgreementSessionInGame_Request::_internal_set_appid(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.appid_ = value;
}
inline void CChinaAgreementSessions_StartAgreementSessionInGame_Request::set_appid(uint32_t value) {
  _internal_set_appid(value);
  // @@protoc_insertion_point(field_set:CChinaAgreementSessions_StartAgreementSessionInGame_Request.appid)
}

// optional fixed64 steamid = 2;
inline bool CChinaAgreementSessions_StartAgreementSessionInGame_Request::_internal_has_steamid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CChinaAgreementSessions_StartAgreementSessionInGame_Request::has_steamid() const {
  return _internal_has_steamid();
}
inline void CChinaAgreementSessions_StartAgreementSessionInGame_Request::clear_steamid() {
  _impl_.steamid_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint64_t CChinaAgreementSessions_StartAgreementSessionInGame_Request::_internal_steamid() const {
  return _impl_.steamid_;
}
inline uint64_t CChinaAgreementSessions_StartAgreementSessionInGame_Request::steamid() const {
  // @@protoc_insertion_point(field_get:CChinaAgreementSessions_StartAgreementSessionInGame_Request.steamid)
  return _internal_steamid();
}
inline void CChinaAgreementSessions_StartAgreementSessionInGame_Request::_internal_set_steamid(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.steamid_ = value;
}
inline void CChinaAgreementSessions_StartAgreementSessionInGame_Request::set_steamid(uint64_t value) {
  _internal_set_steamid(value);
  // @@protoc_insertion_point(field_set:CChinaAgreementSessions_StartAgreementSessionInGame_Request.steamid)
}

// optional string client_ipaddress = 3;
inline bool CChinaAgreementSessions_StartAgreementSessionInGame_Request::_internal_has_client_ipaddress() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CChinaAgreementSessions_StartAgreementSessionInGame_Request::has_client_ipaddress() const {
  return _internal_has_client_ipaddress();
}
inline void CChinaAgreementSessions_StartAgreementSessionInGame_Request::clear_client_ipaddress() {
  _impl_.client_ipaddress_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CChinaAgreementSessions_StartAgreementSessionInGame_Request::client_ipaddress() const {
  // @@protoc_insertion_point(field_get:CChinaAgreementSessions_StartAgreementSessionInGame_Request.client_ipaddress)
  return _internal_client_ipaddress();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CChinaAgreementSessions_StartAgreementSessionInGame_Request::set_client_ipaddress(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.client_ipaddress_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CChinaAgreementSessions_StartAgreementSessionInGame_Request.client_ipaddress)
}
inline std::string* CChinaAgreementSessions_StartAgreementSessionInGame_Request::mutable_client_ipaddress() {
  std::string* _s = _internal_mutable_client_ipaddress();
  // @@protoc_insertion_point(field_mutable:CChinaAgreementSessions_StartAgreementSessionInGame_Request.client_ipaddress)
  return _s;
}
inline const std::string& CChinaAgreementSessions_StartAgreementSessionInGame_Request::_internal_client_ipaddress() const {
  return _impl_.client_ipaddress_.Get();
}
inline void CChinaAgreementSessions_StartAgreementSessionInGame_Request::_internal_set_client_ipaddress(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.client_ipaddress_.Set(value, GetArenaForAllocation());
}
inline std::string* CChinaAgreementSessions_StartAgreementSessionInGame_Request::_internal_mutable_client_ipaddress() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.client_ipaddress_.Mutable(GetArenaForAllocation());
}
inline std::string* CChinaAgreementSessions_StartAgreementSessionInGame_Request::release_client_ipaddress() {
  // @@protoc_insertion_point(field_release:CChinaAgreementSessions_StartAgreementSessionInGame_Request.client_ipaddress)
  if (!_internal_has_client_ipaddress()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.client_ipaddress_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.client_ipaddress_.IsDefault()) {
    _impl_.client_ipaddress_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CChinaAgreementSessions_StartAgreementSessionInGame_Request::set_allocated_client_ipaddress(std::string* client_ipaddress) {
  if (client_ipaddress != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.client_ipaddress_.SetAllocated(client_ipaddress, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.client_ipaddress_.IsDefault()) {
    _impl_.client_ipaddress_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CChinaAgreementSessions_StartAgreementSessionInGame_Request.client_ipaddress)
}

// -------------------------------------------------------------------

// CChinaAgreementSessions_StartAgreementSessionInGame_Response

// optional string agreement_url = 1;
inline bool CChinaAgreementSessions_StartAgreementSessionInGame_Response::_internal_has_agreement_url() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CChinaAgreementSessions_StartAgreementSessionInGame_Response::has_agreement_url() const {
  return _internal_has_agreement_url();
}
inline void CChinaAgreementSessions_StartAgreementSessionInGame_Response::clear_agreement_url() {
  _impl_.agreement_url_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CChinaAgreementSessions_StartAgreementSessionInGame_Response::agreement_url() const {
  // @@protoc_insertion_point(field_get:CChinaAgreementSessions_StartAgreementSessionInGame_Response.agreement_url)
  return _internal_agreement_url();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CChinaAgreementSessions_StartAgreementSessionInGame_Response::set_agreement_url(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.agreement_url_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CChinaAgreementSessions_StartAgreementSessionInGame_Response.agreement_url)
}
inline std::string* CChinaAgreementSessions_StartAgreementSessionInGame_Response::mutable_agreement_url() {
  std::string* _s = _internal_mutable_agreement_url();
  // @@protoc_insertion_point(field_mutable:CChinaAgreementSessions_StartAgreementSessionInGame_Response.agreement_url)
  return _s;
}
inline const std::string& CChinaAgreementSessions_StartAgreementSessionInGame_Response::_internal_agreement_url() const {
  return _impl_.agreement_url_.Get();
}
inline void CChinaAgreementSessions_StartAgreementSessionInGame_Response::_internal_set_agreement_url(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.agreement_url_.Set(value, GetArenaForAllocation());
}
inline std::string* CChinaAgreementSessions_StartAgreementSessionInGame_Response::_internal_mutable_agreement_url() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.agreement_url_.Mutable(GetArenaForAllocation());
}
inline std::string* CChinaAgreementSessions_StartAgreementSessionInGame_Response::release_agreement_url() {
  // @@protoc_insertion_point(field_release:CChinaAgreementSessions_StartAgreementSessionInGame_Response.agreement_url)
  if (!_internal_has_agreement_url()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.agreement_url_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.agreement_url_.IsDefault()) {
    _impl_.agreement_url_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CChinaAgreementSessions_StartAgreementSessionInGame_Response::set_allocated_agreement_url(std::string* agreement_url) {
  if (agreement_url != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.agreement_url_.SetAllocated(agreement_url, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.agreement_url_.IsDefault()) {
    _impl_.agreement_url_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CChinaAgreementSessions_StartAgreementSessionInGame_Response.agreement_url)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::GCProtoBufMsgSrc> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::GCProtoBufMsgSrc>() {
  return ::GCProtoBufMsgSrc_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_steammessages_2eproto
