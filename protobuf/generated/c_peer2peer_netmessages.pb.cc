// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: c_peer2peer_netmessages.proto

#include "c_peer2peer_netmessages.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

PROTOBUF_CONSTEXPR CP2P_TextMessage::CP2P_TextMessage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.text_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct CP2P_TextMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CP2P_TextMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CP2P_TextMessageDefaultTypeInternal() {}
  union {
    CP2P_TextMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CP2P_TextMessageDefaultTypeInternal _CP2P_TextMessage_default_instance_;
PROTOBUF_CONSTEXPR CSteam_Voice_Encoding::CSteam_Voice_Encoding(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.voice_data_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct CSteam_Voice_EncodingDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CSteam_Voice_EncodingDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CSteam_Voice_EncodingDefaultTypeInternal() {}
  union {
    CSteam_Voice_Encoding _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CSteam_Voice_EncodingDefaultTypeInternal _CSteam_Voice_Encoding_default_instance_;
PROTOBUF_CONSTEXPR CP2P_Voice::CP2P_Voice(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.audio_)*/nullptr
  , /*decltype(_impl_.broadcast_group_)*/0u} {}
struct CP2P_VoiceDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CP2P_VoiceDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CP2P_VoiceDefaultTypeInternal() {}
  union {
    CP2P_Voice _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CP2P_VoiceDefaultTypeInternal _CP2P_Voice_default_instance_;
PROTOBUF_CONSTEXPR CP2P_Ping::CP2P_Ping(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.send_time_)*/uint64_t{0u}
  , /*decltype(_impl_.is_reply_)*/false} {}
struct CP2P_PingDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CP2P_PingDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CP2P_PingDefaultTypeInternal() {}
  union {
    CP2P_Ping _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CP2P_PingDefaultTypeInternal _CP2P_Ping_default_instance_;
PROTOBUF_CONSTEXPR CP2P_VRAvatarPosition_COrientation::CP2P_VRAvatarPosition_COrientation(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.pos_)*/nullptr
  , /*decltype(_impl_.ang_)*/nullptr} {}
struct CP2P_VRAvatarPosition_COrientationDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CP2P_VRAvatarPosition_COrientationDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CP2P_VRAvatarPosition_COrientationDefaultTypeInternal() {}
  union {
    CP2P_VRAvatarPosition_COrientation _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CP2P_VRAvatarPosition_COrientationDefaultTypeInternal _CP2P_VRAvatarPosition_COrientation_default_instance_;
PROTOBUF_CONSTEXPR CP2P_VRAvatarPosition::CP2P_VRAvatarPosition(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.body_parts_)*/{}
  , /*decltype(_impl_.hat_id_)*/0
  , /*decltype(_impl_.scene_id_)*/0
  , /*decltype(_impl_.world_scale_)*/0} {}
struct CP2P_VRAvatarPositionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CP2P_VRAvatarPositionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CP2P_VRAvatarPositionDefaultTypeInternal() {}
  union {
    CP2P_VRAvatarPosition _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CP2P_VRAvatarPositionDefaultTypeInternal _CP2P_VRAvatarPosition_default_instance_;
PROTOBUF_CONSTEXPR CP2P_WatchSynchronization::CP2P_WatchSynchronization(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.demo_tick_)*/0
  , /*decltype(_impl_.paused_)*/false
  , /*decltype(_impl_.dota_spectator_watching_broadcaster_)*/false
  , /*decltype(_impl_.tv_listen_voice_indices_)*/uint64_t{0u}
  , /*decltype(_impl_.dota_spectator_mode_)*/0
  , /*decltype(_impl_.dota_spectator_hero_index_)*/0
  , /*decltype(_impl_.dota_spectator_autospeed_)*/0
  , /*decltype(_impl_.dota_replay_speed_)*/0} {}
struct CP2P_WatchSynchronizationDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CP2P_WatchSynchronizationDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CP2P_WatchSynchronizationDefaultTypeInternal() {}
  union {
    CP2P_WatchSynchronization _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CP2P_WatchSynchronizationDefaultTypeInternal _CP2P_WatchSynchronization_default_instance_;
static ::_pb::Metadata file_level_metadata_c_5fpeer2peer_5fnetmessages_2eproto[7];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_c_5fpeer2peer_5fnetmessages_2eproto[2];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_c_5fpeer2peer_5fnetmessages_2eproto = nullptr;

const uint32_t TableStruct_c_5fpeer2peer_5fnetmessages_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::CP2P_TextMessage, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CP2P_TextMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CP2P_TextMessage, _impl_.text_),
  0,
  PROTOBUF_FIELD_OFFSET(::CSteam_Voice_Encoding, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CSteam_Voice_Encoding, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CSteam_Voice_Encoding, _impl_.voice_data_),
  0,
  PROTOBUF_FIELD_OFFSET(::CP2P_Voice, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CP2P_Voice, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CP2P_Voice, _impl_.audio_),
  PROTOBUF_FIELD_OFFSET(::CP2P_Voice, _impl_.broadcast_group_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CP2P_Ping, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CP2P_Ping, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CP2P_Ping, _impl_.send_time_),
  PROTOBUF_FIELD_OFFSET(::CP2P_Ping, _impl_.is_reply_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CP2P_VRAvatarPosition_COrientation, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CP2P_VRAvatarPosition_COrientation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CP2P_VRAvatarPosition_COrientation, _impl_.pos_),
  PROTOBUF_FIELD_OFFSET(::CP2P_VRAvatarPosition_COrientation, _impl_.ang_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CP2P_VRAvatarPosition, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CP2P_VRAvatarPosition, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CP2P_VRAvatarPosition, _impl_.body_parts_),
  PROTOBUF_FIELD_OFFSET(::CP2P_VRAvatarPosition, _impl_.hat_id_),
  PROTOBUF_FIELD_OFFSET(::CP2P_VRAvatarPosition, _impl_.scene_id_),
  PROTOBUF_FIELD_OFFSET(::CP2P_VRAvatarPosition, _impl_.world_scale_),
  ~0u,
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CP2P_WatchSynchronization, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CP2P_WatchSynchronization, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CP2P_WatchSynchronization, _impl_.demo_tick_),
  PROTOBUF_FIELD_OFFSET(::CP2P_WatchSynchronization, _impl_.paused_),
  PROTOBUF_FIELD_OFFSET(::CP2P_WatchSynchronization, _impl_.tv_listen_voice_indices_),
  PROTOBUF_FIELD_OFFSET(::CP2P_WatchSynchronization, _impl_.dota_spectator_mode_),
  PROTOBUF_FIELD_OFFSET(::CP2P_WatchSynchronization, _impl_.dota_spectator_watching_broadcaster_),
  PROTOBUF_FIELD_OFFSET(::CP2P_WatchSynchronization, _impl_.dota_spectator_hero_index_),
  PROTOBUF_FIELD_OFFSET(::CP2P_WatchSynchronization, _impl_.dota_spectator_autospeed_),
  PROTOBUF_FIELD_OFFSET(::CP2P_WatchSynchronization, _impl_.dota_replay_speed_),
  0,
  1,
  3,
  4,
  2,
  5,
  6,
  7,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, -1, sizeof(::CP2P_TextMessage)},
  { 8, 15, -1, sizeof(::CSteam_Voice_Encoding)},
  { 16, 24, -1, sizeof(::CP2P_Voice)},
  { 26, 34, -1, sizeof(::CP2P_Ping)},
  { 36, 44, -1, sizeof(::CP2P_VRAvatarPosition_COrientation)},
  { 46, 56, -1, sizeof(::CP2P_VRAvatarPosition)},
  { 60, 74, -1, sizeof(::CP2P_WatchSynchronization)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::_CP2P_TextMessage_default_instance_._instance,
  &::_CSteam_Voice_Encoding_default_instance_._instance,
  &::_CP2P_Voice_default_instance_._instance,
  &::_CP2P_Ping_default_instance_._instance,
  &::_CP2P_VRAvatarPosition_COrientation_default_instance_._instance,
  &::_CP2P_VRAvatarPosition_default_instance_._instance,
  &::_CP2P_WatchSynchronization_default_instance_._instance,
};

const char descriptor_table_protodef_c_5fpeer2peer_5fnetmessages_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\035c_peer2peer_netmessages.proto\032\021netmess"
  "ages.proto\032\026networkbasetypes.proto\" \n\020CP"
  "2P_TextMessage\022\014\n\004text\030\001 \001(\014\"+\n\025CSteam_V"
  "oice_Encoding\022\022\n\nvoice_data\030\001 \001(\014\"h\n\nCP2"
  "P_Voice\022\036\n\005audio\030\001 \001(\0132\017.CMsgVoiceAudio\022"
  "\027\n\017broadcast_group\030\002 \001(\r\"!\n\rHandler_Flag"
  "s\022\020\n\014Played_Audio\020\001\"0\n\tCP2P_Ping\022\021\n\tsend"
  "_time\030\001 \002(\004\022\020\n\010is_reply\030\002 \002(\010\"\313\001\n\025CP2P_V"
  "RAvatarPosition\0227\n\nbody_parts\030\001 \003(\0132#.CP"
  "2P_VRAvatarPosition.COrientation\022\016\n\006hat_"
  "id\030\002 \001(\005\022\020\n\010scene_id\030\003 \001(\005\022\023\n\013world_scal"
  "e\030\004 \001(\005\032B\n\014COrientation\022\030\n\003pos\030\001 \001(\0132\013.C"
  "MsgVector\022\030\n\003ang\030\002 \001(\0132\013.CMsgQAngle\"\211\002\n\031"
  "CP2P_WatchSynchronization\022\021\n\tdemo_tick\030\001"
  " \001(\005\022\016\n\006paused\030\002 \001(\010\022\037\n\027tv_listen_voice_"
  "indices\030\003 \001(\004\022\033\n\023dota_spectator_mode\030\004 \001"
  "(\005\022+\n#dota_spectator_watching_broadcaste"
  "r\030\005 \001(\010\022!\n\031dota_spectator_hero_index\030\006 \001"
  "(\005\022 \n\030dota_spectator_autospeed\030\007 \001(\005\022\031\n\021"
  "dota_replay_speed\030\010 \001(\005*\277\001\n\014P2P_Messages"
  "\022\024\n\017p2p_TextMessage\020\200\002\022\016\n\tp2p_Voice\020\201\002\022\r"
  "\n\010p2p_Ping\020\202\002\022\031\n\024p2p_VRAvatarPosition\020\203\002"
  "\022\035\n\030p2p_WatchSynchronization\020\204\002\022\036\n\031p2p_F"
  "ightingGame_GameData\020\205\002\022 \n\033p2p_FightingG"
  "ame_Connection\020\206\002"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_c_5fpeer2peer_5fnetmessages_2eproto_deps[2] = {
  &::descriptor_table_netmessages_2eproto,
  &::descriptor_table_networkbasetypes_2eproto,
};
static ::_pbi::once_flag descriptor_table_c_5fpeer2peer_5fnetmessages_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_c_5fpeer2peer_5fnetmessages_2eproto = {
    false, false, 977, descriptor_table_protodef_c_5fpeer2peer_5fnetmessages_2eproto,
    "c_peer2peer_netmessages.proto",
    &descriptor_table_c_5fpeer2peer_5fnetmessages_2eproto_once, descriptor_table_c_5fpeer2peer_5fnetmessages_2eproto_deps, 2, 7,
    schemas, file_default_instances, TableStruct_c_5fpeer2peer_5fnetmessages_2eproto::offsets,
    file_level_metadata_c_5fpeer2peer_5fnetmessages_2eproto, file_level_enum_descriptors_c_5fpeer2peer_5fnetmessages_2eproto,
    file_level_service_descriptors_c_5fpeer2peer_5fnetmessages_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_c_5fpeer2peer_5fnetmessages_2eproto_getter() {
  return &descriptor_table_c_5fpeer2peer_5fnetmessages_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_c_5fpeer2peer_5fnetmessages_2eproto(&descriptor_table_c_5fpeer2peer_5fnetmessages_2eproto);
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CP2P_Voice_Handler_Flags_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_c_5fpeer2peer_5fnetmessages_2eproto);
  return file_level_enum_descriptors_c_5fpeer2peer_5fnetmessages_2eproto[0];
}
bool CP2P_Voice_Handler_Flags_IsValid(int value) {
  switch (value) {
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr CP2P_Voice_Handler_Flags CP2P_Voice::Played_Audio;
constexpr CP2P_Voice_Handler_Flags CP2P_Voice::Handler_Flags_MIN;
constexpr CP2P_Voice_Handler_Flags CP2P_Voice::Handler_Flags_MAX;
constexpr int CP2P_Voice::Handler_Flags_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* P2P_Messages_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_c_5fpeer2peer_5fnetmessages_2eproto);
  return file_level_enum_descriptors_c_5fpeer2peer_5fnetmessages_2eproto[1];
}
bool P2P_Messages_IsValid(int value) {
  switch (value) {
    case 256:
    case 257:
    case 258:
    case 259:
    case 260:
    case 261:
    case 262:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class CP2P_TextMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<CP2P_TextMessage>()._impl_._has_bits_);
  static void set_has_text(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CP2P_TextMessage::CP2P_TextMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CP2P_TextMessage)
}
CP2P_TextMessage::CP2P_TextMessage(const CP2P_TextMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CP2P_TextMessage* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.text_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.text_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.text_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_text()) {
    _this->_impl_.text_.Set(from._internal_text(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:CP2P_TextMessage)
}

inline void CP2P_TextMessage::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.text_){}
  };
  _impl_.text_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.text_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CP2P_TextMessage::~CP2P_TextMessage() {
  // @@protoc_insertion_point(destructor:CP2P_TextMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CP2P_TextMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.text_.Destroy();
}

void CP2P_TextMessage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CP2P_TextMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:CP2P_TextMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.text_.ClearNonDefaultToEmpty();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CP2P_TextMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bytes text = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_text();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CP2P_TextMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CP2P_TextMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bytes text = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_text(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CP2P_TextMessage)
  return target;
}

size_t CP2P_TextMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CP2P_TextMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bytes text = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_text());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CP2P_TextMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CP2P_TextMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CP2P_TextMessage::GetClassData() const { return &_class_data_; }


void CP2P_TextMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CP2P_TextMessage*>(&to_msg);
  auto& from = static_cast<const CP2P_TextMessage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CP2P_TextMessage)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_text()) {
    _this->_internal_set_text(from._internal_text());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CP2P_TextMessage::CopyFrom(const CP2P_TextMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CP2P_TextMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CP2P_TextMessage::IsInitialized() const {
  return true;
}

void CP2P_TextMessage::InternalSwap(CP2P_TextMessage* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.text_, lhs_arena,
      &other->_impl_.text_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata CP2P_TextMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_c_5fpeer2peer_5fnetmessages_2eproto_getter, &descriptor_table_c_5fpeer2peer_5fnetmessages_2eproto_once,
      file_level_metadata_c_5fpeer2peer_5fnetmessages_2eproto[0]);
}

// ===================================================================

class CSteam_Voice_Encoding::_Internal {
 public:
  using HasBits = decltype(std::declval<CSteam_Voice_Encoding>()._impl_._has_bits_);
  static void set_has_voice_data(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CSteam_Voice_Encoding::CSteam_Voice_Encoding(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CSteam_Voice_Encoding)
}
CSteam_Voice_Encoding::CSteam_Voice_Encoding(const CSteam_Voice_Encoding& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CSteam_Voice_Encoding* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.voice_data_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.voice_data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.voice_data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_voice_data()) {
    _this->_impl_.voice_data_.Set(from._internal_voice_data(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:CSteam_Voice_Encoding)
}

inline void CSteam_Voice_Encoding::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.voice_data_){}
  };
  _impl_.voice_data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.voice_data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CSteam_Voice_Encoding::~CSteam_Voice_Encoding() {
  // @@protoc_insertion_point(destructor:CSteam_Voice_Encoding)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CSteam_Voice_Encoding::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.voice_data_.Destroy();
}

void CSteam_Voice_Encoding::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CSteam_Voice_Encoding::Clear() {
// @@protoc_insertion_point(message_clear_start:CSteam_Voice_Encoding)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.voice_data_.ClearNonDefaultToEmpty();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSteam_Voice_Encoding::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bytes voice_data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_voice_data();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CSteam_Voice_Encoding::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSteam_Voice_Encoding)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bytes voice_data = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_voice_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSteam_Voice_Encoding)
  return target;
}

size_t CSteam_Voice_Encoding::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSteam_Voice_Encoding)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bytes voice_data = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_voice_data());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CSteam_Voice_Encoding::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CSteam_Voice_Encoding::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CSteam_Voice_Encoding::GetClassData() const { return &_class_data_; }


void CSteam_Voice_Encoding::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CSteam_Voice_Encoding*>(&to_msg);
  auto& from = static_cast<const CSteam_Voice_Encoding&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CSteam_Voice_Encoding)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_voice_data()) {
    _this->_internal_set_voice_data(from._internal_voice_data());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CSteam_Voice_Encoding::CopyFrom(const CSteam_Voice_Encoding& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSteam_Voice_Encoding)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSteam_Voice_Encoding::IsInitialized() const {
  return true;
}

void CSteam_Voice_Encoding::InternalSwap(CSteam_Voice_Encoding* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.voice_data_, lhs_arena,
      &other->_impl_.voice_data_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata CSteam_Voice_Encoding::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_c_5fpeer2peer_5fnetmessages_2eproto_getter, &descriptor_table_c_5fpeer2peer_5fnetmessages_2eproto_once,
      file_level_metadata_c_5fpeer2peer_5fnetmessages_2eproto[1]);
}

// ===================================================================

class CP2P_Voice::_Internal {
 public:
  using HasBits = decltype(std::declval<CP2P_Voice>()._impl_._has_bits_);
  static const ::CMsgVoiceAudio& audio(const CP2P_Voice* msg);
  static void set_has_audio(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_broadcast_group(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::CMsgVoiceAudio&
CP2P_Voice::_Internal::audio(const CP2P_Voice* msg) {
  return *msg->_impl_.audio_;
}
void CP2P_Voice::clear_audio() {
  if (_impl_.audio_ != nullptr) _impl_.audio_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
CP2P_Voice::CP2P_Voice(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CP2P_Voice)
}
CP2P_Voice::CP2P_Voice(const CP2P_Voice& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CP2P_Voice* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.audio_){nullptr}
    , decltype(_impl_.broadcast_group_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_audio()) {
    _this->_impl_.audio_ = new ::CMsgVoiceAudio(*from._impl_.audio_);
  }
  _this->_impl_.broadcast_group_ = from._impl_.broadcast_group_;
  // @@protoc_insertion_point(copy_constructor:CP2P_Voice)
}

inline void CP2P_Voice::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.audio_){nullptr}
    , decltype(_impl_.broadcast_group_){0u}
  };
}

CP2P_Voice::~CP2P_Voice() {
  // @@protoc_insertion_point(destructor:CP2P_Voice)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CP2P_Voice::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.audio_;
}

void CP2P_Voice::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CP2P_Voice::Clear() {
// @@protoc_insertion_point(message_clear_start:CP2P_Voice)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.audio_ != nullptr);
    _impl_.audio_->Clear();
  }
  _impl_.broadcast_group_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CP2P_Voice::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .CMsgVoiceAudio audio = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_audio(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 broadcast_group = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_broadcast_group(&has_bits);
          _impl_.broadcast_group_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CP2P_Voice::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CP2P_Voice)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .CMsgVoiceAudio audio = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::audio(this),
        _Internal::audio(this).GetCachedSize(), target, stream);
  }

  // optional uint32 broadcast_group = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_broadcast_group(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CP2P_Voice)
  return target;
}

size_t CP2P_Voice::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CP2P_Voice)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .CMsgVoiceAudio audio = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.audio_);
    }

    // optional uint32 broadcast_group = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_broadcast_group());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CP2P_Voice::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CP2P_Voice::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CP2P_Voice::GetClassData() const { return &_class_data_; }


void CP2P_Voice::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CP2P_Voice*>(&to_msg);
  auto& from = static_cast<const CP2P_Voice&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CP2P_Voice)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_audio()->::CMsgVoiceAudio::MergeFrom(
          from._internal_audio());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.broadcast_group_ = from._impl_.broadcast_group_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CP2P_Voice::CopyFrom(const CP2P_Voice& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CP2P_Voice)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CP2P_Voice::IsInitialized() const {
  return true;
}

void CP2P_Voice::InternalSwap(CP2P_Voice* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CP2P_Voice, _impl_.broadcast_group_)
      + sizeof(CP2P_Voice::_impl_.broadcast_group_)
      - PROTOBUF_FIELD_OFFSET(CP2P_Voice, _impl_.audio_)>(
          reinterpret_cast<char*>(&_impl_.audio_),
          reinterpret_cast<char*>(&other->_impl_.audio_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CP2P_Voice::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_c_5fpeer2peer_5fnetmessages_2eproto_getter, &descriptor_table_c_5fpeer2peer_5fnetmessages_2eproto_once,
      file_level_metadata_c_5fpeer2peer_5fnetmessages_2eproto[2]);
}

// ===================================================================

class CP2P_Ping::_Internal {
 public:
  using HasBits = decltype(std::declval<CP2P_Ping>()._impl_._has_bits_);
  static void set_has_send_time(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_is_reply(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

CP2P_Ping::CP2P_Ping(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CP2P_Ping)
}
CP2P_Ping::CP2P_Ping(const CP2P_Ping& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CP2P_Ping* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.send_time_){}
    , decltype(_impl_.is_reply_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.send_time_, &from._impl_.send_time_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.is_reply_) -
    reinterpret_cast<char*>(&_impl_.send_time_)) + sizeof(_impl_.is_reply_));
  // @@protoc_insertion_point(copy_constructor:CP2P_Ping)
}

inline void CP2P_Ping::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.send_time_){uint64_t{0u}}
    , decltype(_impl_.is_reply_){false}
  };
}

CP2P_Ping::~CP2P_Ping() {
  // @@protoc_insertion_point(destructor:CP2P_Ping)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CP2P_Ping::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CP2P_Ping::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CP2P_Ping::Clear() {
// @@protoc_insertion_point(message_clear_start:CP2P_Ping)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.send_time_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.is_reply_) -
        reinterpret_cast<char*>(&_impl_.send_time_)) + sizeof(_impl_.is_reply_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CP2P_Ping::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint64 send_time = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_send_time(&has_bits);
          _impl_.send_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required bool is_reply = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_is_reply(&has_bits);
          _impl_.is_reply_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CP2P_Ping::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CP2P_Ping)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required uint64 send_time = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_send_time(), target);
  }

  // required bool is_reply = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_is_reply(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CP2P_Ping)
  return target;
}

size_t CP2P_Ping::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:CP2P_Ping)
  size_t total_size = 0;

  if (_internal_has_send_time()) {
    // required uint64 send_time = 1;
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_send_time());
  }

  if (_internal_has_is_reply()) {
    // required bool is_reply = 2;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t CP2P_Ping::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CP2P_Ping)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint64 send_time = 1;
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_send_time());

    // required bool is_reply = 2;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CP2P_Ping::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CP2P_Ping::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CP2P_Ping::GetClassData() const { return &_class_data_; }


void CP2P_Ping::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CP2P_Ping*>(&to_msg);
  auto& from = static_cast<const CP2P_Ping&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CP2P_Ping)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.send_time_ = from._impl_.send_time_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.is_reply_ = from._impl_.is_reply_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CP2P_Ping::CopyFrom(const CP2P_Ping& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CP2P_Ping)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CP2P_Ping::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void CP2P_Ping::InternalSwap(CP2P_Ping* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CP2P_Ping, _impl_.is_reply_)
      + sizeof(CP2P_Ping::_impl_.is_reply_)
      - PROTOBUF_FIELD_OFFSET(CP2P_Ping, _impl_.send_time_)>(
          reinterpret_cast<char*>(&_impl_.send_time_),
          reinterpret_cast<char*>(&other->_impl_.send_time_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CP2P_Ping::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_c_5fpeer2peer_5fnetmessages_2eproto_getter, &descriptor_table_c_5fpeer2peer_5fnetmessages_2eproto_once,
      file_level_metadata_c_5fpeer2peer_5fnetmessages_2eproto[3]);
}

// ===================================================================

class CP2P_VRAvatarPosition_COrientation::_Internal {
 public:
  using HasBits = decltype(std::declval<CP2P_VRAvatarPosition_COrientation>()._impl_._has_bits_);
  static const ::CMsgVector& pos(const CP2P_VRAvatarPosition_COrientation* msg);
  static void set_has_pos(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::CMsgQAngle& ang(const CP2P_VRAvatarPosition_COrientation* msg);
  static void set_has_ang(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::CMsgVector&
CP2P_VRAvatarPosition_COrientation::_Internal::pos(const CP2P_VRAvatarPosition_COrientation* msg) {
  return *msg->_impl_.pos_;
}
const ::CMsgQAngle&
CP2P_VRAvatarPosition_COrientation::_Internal::ang(const CP2P_VRAvatarPosition_COrientation* msg) {
  return *msg->_impl_.ang_;
}
void CP2P_VRAvatarPosition_COrientation::clear_pos() {
  if (_impl_.pos_ != nullptr) _impl_.pos_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void CP2P_VRAvatarPosition_COrientation::clear_ang() {
  if (_impl_.ang_ != nullptr) _impl_.ang_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
CP2P_VRAvatarPosition_COrientation::CP2P_VRAvatarPosition_COrientation(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CP2P_VRAvatarPosition.COrientation)
}
CP2P_VRAvatarPosition_COrientation::CP2P_VRAvatarPosition_COrientation(const CP2P_VRAvatarPosition_COrientation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CP2P_VRAvatarPosition_COrientation* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.pos_){nullptr}
    , decltype(_impl_.ang_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_pos()) {
    _this->_impl_.pos_ = new ::CMsgVector(*from._impl_.pos_);
  }
  if (from._internal_has_ang()) {
    _this->_impl_.ang_ = new ::CMsgQAngle(*from._impl_.ang_);
  }
  // @@protoc_insertion_point(copy_constructor:CP2P_VRAvatarPosition.COrientation)
}

inline void CP2P_VRAvatarPosition_COrientation::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.pos_){nullptr}
    , decltype(_impl_.ang_){nullptr}
  };
}

CP2P_VRAvatarPosition_COrientation::~CP2P_VRAvatarPosition_COrientation() {
  // @@protoc_insertion_point(destructor:CP2P_VRAvatarPosition.COrientation)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CP2P_VRAvatarPosition_COrientation::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.pos_;
  if (this != internal_default_instance()) delete _impl_.ang_;
}

void CP2P_VRAvatarPosition_COrientation::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CP2P_VRAvatarPosition_COrientation::Clear() {
// @@protoc_insertion_point(message_clear_start:CP2P_VRAvatarPosition.COrientation)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.pos_ != nullptr);
      _impl_.pos_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.ang_ != nullptr);
      _impl_.ang_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CP2P_VRAvatarPosition_COrientation::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .CMsgVector pos = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_pos(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .CMsgQAngle ang = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_ang(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CP2P_VRAvatarPosition_COrientation::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CP2P_VRAvatarPosition.COrientation)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .CMsgVector pos = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::pos(this),
        _Internal::pos(this).GetCachedSize(), target, stream);
  }

  // optional .CMsgQAngle ang = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::ang(this),
        _Internal::ang(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CP2P_VRAvatarPosition.COrientation)
  return target;
}

size_t CP2P_VRAvatarPosition_COrientation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CP2P_VRAvatarPosition.COrientation)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .CMsgVector pos = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.pos_);
    }

    // optional .CMsgQAngle ang = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.ang_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CP2P_VRAvatarPosition_COrientation::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CP2P_VRAvatarPosition_COrientation::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CP2P_VRAvatarPosition_COrientation::GetClassData() const { return &_class_data_; }


void CP2P_VRAvatarPosition_COrientation::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CP2P_VRAvatarPosition_COrientation*>(&to_msg);
  auto& from = static_cast<const CP2P_VRAvatarPosition_COrientation&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CP2P_VRAvatarPosition.COrientation)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_pos()->::CMsgVector::MergeFrom(
          from._internal_pos());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_ang()->::CMsgQAngle::MergeFrom(
          from._internal_ang());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CP2P_VRAvatarPosition_COrientation::CopyFrom(const CP2P_VRAvatarPosition_COrientation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CP2P_VRAvatarPosition.COrientation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CP2P_VRAvatarPosition_COrientation::IsInitialized() const {
  return true;
}

void CP2P_VRAvatarPosition_COrientation::InternalSwap(CP2P_VRAvatarPosition_COrientation* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CP2P_VRAvatarPosition_COrientation, _impl_.ang_)
      + sizeof(CP2P_VRAvatarPosition_COrientation::_impl_.ang_)
      - PROTOBUF_FIELD_OFFSET(CP2P_VRAvatarPosition_COrientation, _impl_.pos_)>(
          reinterpret_cast<char*>(&_impl_.pos_),
          reinterpret_cast<char*>(&other->_impl_.pos_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CP2P_VRAvatarPosition_COrientation::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_c_5fpeer2peer_5fnetmessages_2eproto_getter, &descriptor_table_c_5fpeer2peer_5fnetmessages_2eproto_once,
      file_level_metadata_c_5fpeer2peer_5fnetmessages_2eproto[4]);
}

// ===================================================================

class CP2P_VRAvatarPosition::_Internal {
 public:
  using HasBits = decltype(std::declval<CP2P_VRAvatarPosition>()._impl_._has_bits_);
  static void set_has_hat_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_scene_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_world_scale(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CP2P_VRAvatarPosition::CP2P_VRAvatarPosition(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CP2P_VRAvatarPosition)
}
CP2P_VRAvatarPosition::CP2P_VRAvatarPosition(const CP2P_VRAvatarPosition& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CP2P_VRAvatarPosition* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.body_parts_){from._impl_.body_parts_}
    , decltype(_impl_.hat_id_){}
    , decltype(_impl_.scene_id_){}
    , decltype(_impl_.world_scale_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.hat_id_, &from._impl_.hat_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.world_scale_) -
    reinterpret_cast<char*>(&_impl_.hat_id_)) + sizeof(_impl_.world_scale_));
  // @@protoc_insertion_point(copy_constructor:CP2P_VRAvatarPosition)
}

inline void CP2P_VRAvatarPosition::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.body_parts_){arena}
    , decltype(_impl_.hat_id_){0}
    , decltype(_impl_.scene_id_){0}
    , decltype(_impl_.world_scale_){0}
  };
}

CP2P_VRAvatarPosition::~CP2P_VRAvatarPosition() {
  // @@protoc_insertion_point(destructor:CP2P_VRAvatarPosition)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CP2P_VRAvatarPosition::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.body_parts_.~RepeatedPtrField();
}

void CP2P_VRAvatarPosition::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CP2P_VRAvatarPosition::Clear() {
// @@protoc_insertion_point(message_clear_start:CP2P_VRAvatarPosition)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.body_parts_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.hat_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.world_scale_) -
        reinterpret_cast<char*>(&_impl_.hat_id_)) + sizeof(_impl_.world_scale_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CP2P_VRAvatarPosition::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .CP2P_VRAvatarPosition.COrientation body_parts = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_body_parts(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional int32 hat_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_hat_id(&has_bits);
          _impl_.hat_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 scene_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_scene_id(&has_bits);
          _impl_.scene_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 world_scale = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_world_scale(&has_bits);
          _impl_.world_scale_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CP2P_VRAvatarPosition::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CP2P_VRAvatarPosition)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CP2P_VRAvatarPosition.COrientation body_parts = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_body_parts_size()); i < n; i++) {
    const auto& repfield = this->_internal_body_parts(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 hat_id = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_hat_id(), target);
  }

  // optional int32 scene_id = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_scene_id(), target);
  }

  // optional int32 world_scale = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_world_scale(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CP2P_VRAvatarPosition)
  return target;
}

size_t CP2P_VRAvatarPosition::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CP2P_VRAvatarPosition)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CP2P_VRAvatarPosition.COrientation body_parts = 1;
  total_size += 1UL * this->_internal_body_parts_size();
  for (const auto& msg : this->_impl_.body_parts_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional int32 hat_id = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_hat_id());
    }

    // optional int32 scene_id = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_scene_id());
    }

    // optional int32 world_scale = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_world_scale());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CP2P_VRAvatarPosition::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CP2P_VRAvatarPosition::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CP2P_VRAvatarPosition::GetClassData() const { return &_class_data_; }


void CP2P_VRAvatarPosition::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CP2P_VRAvatarPosition*>(&to_msg);
  auto& from = static_cast<const CP2P_VRAvatarPosition&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CP2P_VRAvatarPosition)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.body_parts_.MergeFrom(from._impl_.body_parts_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.hat_id_ = from._impl_.hat_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.scene_id_ = from._impl_.scene_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.world_scale_ = from._impl_.world_scale_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CP2P_VRAvatarPosition::CopyFrom(const CP2P_VRAvatarPosition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CP2P_VRAvatarPosition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CP2P_VRAvatarPosition::IsInitialized() const {
  return true;
}

void CP2P_VRAvatarPosition::InternalSwap(CP2P_VRAvatarPosition* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.body_parts_.InternalSwap(&other->_impl_.body_parts_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CP2P_VRAvatarPosition, _impl_.world_scale_)
      + sizeof(CP2P_VRAvatarPosition::_impl_.world_scale_)
      - PROTOBUF_FIELD_OFFSET(CP2P_VRAvatarPosition, _impl_.hat_id_)>(
          reinterpret_cast<char*>(&_impl_.hat_id_),
          reinterpret_cast<char*>(&other->_impl_.hat_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CP2P_VRAvatarPosition::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_c_5fpeer2peer_5fnetmessages_2eproto_getter, &descriptor_table_c_5fpeer2peer_5fnetmessages_2eproto_once,
      file_level_metadata_c_5fpeer2peer_5fnetmessages_2eproto[5]);
}

// ===================================================================

class CP2P_WatchSynchronization::_Internal {
 public:
  using HasBits = decltype(std::declval<CP2P_WatchSynchronization>()._impl_._has_bits_);
  static void set_has_demo_tick(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_paused(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_tv_listen_voice_indices(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_dota_spectator_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_dota_spectator_watching_broadcaster(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_dota_spectator_hero_index(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_dota_spectator_autospeed(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_dota_replay_speed(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
};

CP2P_WatchSynchronization::CP2P_WatchSynchronization(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CP2P_WatchSynchronization)
}
CP2P_WatchSynchronization::CP2P_WatchSynchronization(const CP2P_WatchSynchronization& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CP2P_WatchSynchronization* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.demo_tick_){}
    , decltype(_impl_.paused_){}
    , decltype(_impl_.dota_spectator_watching_broadcaster_){}
    , decltype(_impl_.tv_listen_voice_indices_){}
    , decltype(_impl_.dota_spectator_mode_){}
    , decltype(_impl_.dota_spectator_hero_index_){}
    , decltype(_impl_.dota_spectator_autospeed_){}
    , decltype(_impl_.dota_replay_speed_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.demo_tick_, &from._impl_.demo_tick_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.dota_replay_speed_) -
    reinterpret_cast<char*>(&_impl_.demo_tick_)) + sizeof(_impl_.dota_replay_speed_));
  // @@protoc_insertion_point(copy_constructor:CP2P_WatchSynchronization)
}

inline void CP2P_WatchSynchronization::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.demo_tick_){0}
    , decltype(_impl_.paused_){false}
    , decltype(_impl_.dota_spectator_watching_broadcaster_){false}
    , decltype(_impl_.tv_listen_voice_indices_){uint64_t{0u}}
    , decltype(_impl_.dota_spectator_mode_){0}
    , decltype(_impl_.dota_spectator_hero_index_){0}
    , decltype(_impl_.dota_spectator_autospeed_){0}
    , decltype(_impl_.dota_replay_speed_){0}
  };
}

CP2P_WatchSynchronization::~CP2P_WatchSynchronization() {
  // @@protoc_insertion_point(destructor:CP2P_WatchSynchronization)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CP2P_WatchSynchronization::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CP2P_WatchSynchronization::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CP2P_WatchSynchronization::Clear() {
// @@protoc_insertion_point(message_clear_start:CP2P_WatchSynchronization)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&_impl_.demo_tick_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.dota_replay_speed_) -
        reinterpret_cast<char*>(&_impl_.demo_tick_)) + sizeof(_impl_.dota_replay_speed_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CP2P_WatchSynchronization::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 demo_tick = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_demo_tick(&has_bits);
          _impl_.demo_tick_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool paused = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_paused(&has_bits);
          _impl_.paused_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 tv_listen_voice_indices = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_tv_listen_voice_indices(&has_bits);
          _impl_.tv_listen_voice_indices_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 dota_spectator_mode = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_dota_spectator_mode(&has_bits);
          _impl_.dota_spectator_mode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool dota_spectator_watching_broadcaster = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_dota_spectator_watching_broadcaster(&has_bits);
          _impl_.dota_spectator_watching_broadcaster_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 dota_spectator_hero_index = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_dota_spectator_hero_index(&has_bits);
          _impl_.dota_spectator_hero_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 dota_spectator_autospeed = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_dota_spectator_autospeed(&has_bits);
          _impl_.dota_spectator_autospeed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 dota_replay_speed = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_dota_replay_speed(&has_bits);
          _impl_.dota_replay_speed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CP2P_WatchSynchronization::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CP2P_WatchSynchronization)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 demo_tick = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_demo_tick(), target);
  }

  // optional bool paused = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_paused(), target);
  }

  // optional uint64 tv_listen_voice_indices = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal_tv_listen_voice_indices(), target);
  }

  // optional int32 dota_spectator_mode = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_dota_spectator_mode(), target);
  }

  // optional bool dota_spectator_watching_broadcaster = 5;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_dota_spectator_watching_broadcaster(), target);
  }

  // optional int32 dota_spectator_hero_index = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(6, this->_internal_dota_spectator_hero_index(), target);
  }

  // optional int32 dota_spectator_autospeed = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(7, this->_internal_dota_spectator_autospeed(), target);
  }

  // optional int32 dota_replay_speed = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(8, this->_internal_dota_replay_speed(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CP2P_WatchSynchronization)
  return target;
}

size_t CP2P_WatchSynchronization::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CP2P_WatchSynchronization)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional int32 demo_tick = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_demo_tick());
    }

    // optional bool paused = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional bool dota_spectator_watching_broadcaster = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional uint64 tv_listen_voice_indices = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_tv_listen_voice_indices());
    }

    // optional int32 dota_spectator_mode = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_dota_spectator_mode());
    }

    // optional int32 dota_spectator_hero_index = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_dota_spectator_hero_index());
    }

    // optional int32 dota_spectator_autospeed = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_dota_spectator_autospeed());
    }

    // optional int32 dota_replay_speed = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_dota_replay_speed());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CP2P_WatchSynchronization::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CP2P_WatchSynchronization::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CP2P_WatchSynchronization::GetClassData() const { return &_class_data_; }


void CP2P_WatchSynchronization::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CP2P_WatchSynchronization*>(&to_msg);
  auto& from = static_cast<const CP2P_WatchSynchronization&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CP2P_WatchSynchronization)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.demo_tick_ = from._impl_.demo_tick_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.paused_ = from._impl_.paused_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.dota_spectator_watching_broadcaster_ = from._impl_.dota_spectator_watching_broadcaster_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.tv_listen_voice_indices_ = from._impl_.tv_listen_voice_indices_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.dota_spectator_mode_ = from._impl_.dota_spectator_mode_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.dota_spectator_hero_index_ = from._impl_.dota_spectator_hero_index_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.dota_spectator_autospeed_ = from._impl_.dota_spectator_autospeed_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.dota_replay_speed_ = from._impl_.dota_replay_speed_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CP2P_WatchSynchronization::CopyFrom(const CP2P_WatchSynchronization& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CP2P_WatchSynchronization)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CP2P_WatchSynchronization::IsInitialized() const {
  return true;
}

void CP2P_WatchSynchronization::InternalSwap(CP2P_WatchSynchronization* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CP2P_WatchSynchronization, _impl_.dota_replay_speed_)
      + sizeof(CP2P_WatchSynchronization::_impl_.dota_replay_speed_)
      - PROTOBUF_FIELD_OFFSET(CP2P_WatchSynchronization, _impl_.demo_tick_)>(
          reinterpret_cast<char*>(&_impl_.demo_tick_),
          reinterpret_cast<char*>(&other->_impl_.demo_tick_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CP2P_WatchSynchronization::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_c_5fpeer2peer_5fnetmessages_2eproto_getter, &descriptor_table_c_5fpeer2peer_5fnetmessages_2eproto_once,
      file_level_metadata_c_5fpeer2peer_5fnetmessages_2eproto[6]);
}

// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::CP2P_TextMessage*
Arena::CreateMaybeMessage< ::CP2P_TextMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CP2P_TextMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::CSteam_Voice_Encoding*
Arena::CreateMaybeMessage< ::CSteam_Voice_Encoding >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CSteam_Voice_Encoding >(arena);
}
template<> PROTOBUF_NOINLINE ::CP2P_Voice*
Arena::CreateMaybeMessage< ::CP2P_Voice >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CP2P_Voice >(arena);
}
template<> PROTOBUF_NOINLINE ::CP2P_Ping*
Arena::CreateMaybeMessage< ::CP2P_Ping >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CP2P_Ping >(arena);
}
template<> PROTOBUF_NOINLINE ::CP2P_VRAvatarPosition_COrientation*
Arena::CreateMaybeMessage< ::CP2P_VRAvatarPosition_COrientation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CP2P_VRAvatarPosition_COrientation >(arena);
}
template<> PROTOBUF_NOINLINE ::CP2P_VRAvatarPosition*
Arena::CreateMaybeMessage< ::CP2P_VRAvatarPosition >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CP2P_VRAvatarPosition >(arena);
}
template<> PROTOBUF_NOINLINE ::CP2P_WatchSynchronization*
Arena::CreateMaybeMessage< ::CP2P_WatchSynchronization >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CP2P_WatchSynchronization >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
