// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cs_prediction_events.proto

#include "cs_prediction_events.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

PROTOBUF_CONSTEXPR CCSPredictionEvent_DamageTag::CCSPredictionEvent_DamageTag(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.flinch_mod_small_)*/0
  , /*decltype(_impl_.flinch_mod_large_)*/0
  , /*decltype(_impl_.friendly_fire_damage_reduction_ratio_)*/0} {}
struct CCSPredictionEvent_DamageTagDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CCSPredictionEvent_DamageTagDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CCSPredictionEvent_DamageTagDefaultTypeInternal() {}
  union {
    CCSPredictionEvent_DamageTag _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CCSPredictionEvent_DamageTagDefaultTypeInternal _CCSPredictionEvent_DamageTag_default_instance_;
PROTOBUF_CONSTEXPR CCSPredictionEvent_AddAimPunch::CCSPredictionEvent_AddAimPunch(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.punch_angle_)*/nullptr
  , /*decltype(_impl_.when_tick_)*/0u
  , /*decltype(_impl_.when_tick_frac_)*/0} {}
struct CCSPredictionEvent_AddAimPunchDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CCSPredictionEvent_AddAimPunchDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CCSPredictionEvent_AddAimPunchDefaultTypeInternal() {}
  union {
    CCSPredictionEvent_AddAimPunch _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CCSPredictionEvent_AddAimPunchDefaultTypeInternal _CCSPredictionEvent_AddAimPunch_default_instance_;
static ::_pb::Metadata file_level_metadata_cs_5fprediction_5fevents_2eproto[2];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_cs_5fprediction_5fevents_2eproto[1];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_cs_5fprediction_5fevents_2eproto = nullptr;

const uint32_t TableStruct_cs_5fprediction_5fevents_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::CCSPredictionEvent_DamageTag, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CCSPredictionEvent_DamageTag, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CCSPredictionEvent_DamageTag, _impl_.flinch_mod_small_),
  PROTOBUF_FIELD_OFFSET(::CCSPredictionEvent_DamageTag, _impl_.flinch_mod_large_),
  PROTOBUF_FIELD_OFFSET(::CCSPredictionEvent_DamageTag, _impl_.friendly_fire_damage_reduction_ratio_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CCSPredictionEvent_AddAimPunch, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CCSPredictionEvent_AddAimPunch, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CCSPredictionEvent_AddAimPunch, _impl_.punch_angle_),
  PROTOBUF_FIELD_OFFSET(::CCSPredictionEvent_AddAimPunch, _impl_.when_tick_),
  PROTOBUF_FIELD_OFFSET(::CCSPredictionEvent_AddAimPunch, _impl_.when_tick_frac_),
  0,
  1,
  2,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 9, -1, sizeof(::CCSPredictionEvent_DamageTag)},
  { 12, 21, -1, sizeof(::CCSPredictionEvent_AddAimPunch)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::_CCSPredictionEvent_DamageTag_default_instance_._instance,
  &::_CCSPredictionEvent_AddAimPunch_default_instance_._instance,
};

const char descriptor_table_protodef_cs_5fprediction_5fevents_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\032cs_prediction_events.proto\032\026networkbas"
  "etypes.proto\032\027prediction_events.proto\"\200\001"
  "\n\034CCSPredictionEvent_DamageTag\022\030\n\020flinch"
  "_mod_small\030\001 \001(\002\022\030\n\020flinch_mod_large\030\002 \001"
  "(\002\022,\n$friendly_fire_damage_reduction_rat"
  "io\030\003 \001(\002\"m\n\036CCSPredictionEvent_AddAimPun"
  "ch\022 \n\013punch_angle\030\001 \001(\0132\013.CMsgQAngle\022\021\n\t"
  "when_tick\030\002 \001(\r\022\026\n\016when_tick_frac\030\003 \001(\002*"
  "\?\n\023ECSPredictionEvents\022\022\n\016CSPE_DamageTag"
  "\020\001\022\024\n\020CSPE_AddAimPunch\020\003"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_cs_5fprediction_5fevents_2eproto_deps[2] = {
  &::descriptor_table_networkbasetypes_2eproto,
  &::descriptor_table_prediction_5fevents_2eproto,
};
static ::_pbi::once_flag descriptor_table_cs_5fprediction_5fevents_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_cs_5fprediction_5fevents_2eproto = {
    false, false, 384, descriptor_table_protodef_cs_5fprediction_5fevents_2eproto,
    "cs_prediction_events.proto",
    &descriptor_table_cs_5fprediction_5fevents_2eproto_once, descriptor_table_cs_5fprediction_5fevents_2eproto_deps, 2, 2,
    schemas, file_default_instances, TableStruct_cs_5fprediction_5fevents_2eproto::offsets,
    file_level_metadata_cs_5fprediction_5fevents_2eproto, file_level_enum_descriptors_cs_5fprediction_5fevents_2eproto,
    file_level_service_descriptors_cs_5fprediction_5fevents_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_cs_5fprediction_5fevents_2eproto_getter() {
  return &descriptor_table_cs_5fprediction_5fevents_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_cs_5fprediction_5fevents_2eproto(&descriptor_table_cs_5fprediction_5fevents_2eproto);
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ECSPredictionEvents_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_cs_5fprediction_5fevents_2eproto);
  return file_level_enum_descriptors_cs_5fprediction_5fevents_2eproto[0];
}
bool ECSPredictionEvents_IsValid(int value) {
  switch (value) {
    case 1:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class CCSPredictionEvent_DamageTag::_Internal {
 public:
  using HasBits = decltype(std::declval<CCSPredictionEvent_DamageTag>()._impl_._has_bits_);
  static void set_has_flinch_mod_small(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_flinch_mod_large(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_friendly_fire_damage_reduction_ratio(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CCSPredictionEvent_DamageTag::CCSPredictionEvent_DamageTag(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CCSPredictionEvent_DamageTag)
}
CCSPredictionEvent_DamageTag::CCSPredictionEvent_DamageTag(const CCSPredictionEvent_DamageTag& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CCSPredictionEvent_DamageTag* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.flinch_mod_small_){}
    , decltype(_impl_.flinch_mod_large_){}
    , decltype(_impl_.friendly_fire_damage_reduction_ratio_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.flinch_mod_small_, &from._impl_.flinch_mod_small_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.friendly_fire_damage_reduction_ratio_) -
    reinterpret_cast<char*>(&_impl_.flinch_mod_small_)) + sizeof(_impl_.friendly_fire_damage_reduction_ratio_));
  // @@protoc_insertion_point(copy_constructor:CCSPredictionEvent_DamageTag)
}

inline void CCSPredictionEvent_DamageTag::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.flinch_mod_small_){0}
    , decltype(_impl_.flinch_mod_large_){0}
    , decltype(_impl_.friendly_fire_damage_reduction_ratio_){0}
  };
}

CCSPredictionEvent_DamageTag::~CCSPredictionEvent_DamageTag() {
  // @@protoc_insertion_point(destructor:CCSPredictionEvent_DamageTag)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CCSPredictionEvent_DamageTag::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CCSPredictionEvent_DamageTag::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CCSPredictionEvent_DamageTag::Clear() {
// @@protoc_insertion_point(message_clear_start:CCSPredictionEvent_DamageTag)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.flinch_mod_small_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.friendly_fire_damage_reduction_ratio_) -
        reinterpret_cast<char*>(&_impl_.flinch_mod_small_)) + sizeof(_impl_.friendly_fire_damage_reduction_ratio_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CCSPredictionEvent_DamageTag::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional float flinch_mod_small = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          _Internal::set_has_flinch_mod_small(&has_bits);
          _impl_.flinch_mod_small_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float flinch_mod_large = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _Internal::set_has_flinch_mod_large(&has_bits);
          _impl_.flinch_mod_large_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float friendly_fire_damage_reduction_ratio = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _Internal::set_has_friendly_fire_damage_reduction_ratio(&has_bits);
          _impl_.friendly_fire_damage_reduction_ratio_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CCSPredictionEvent_DamageTag::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCSPredictionEvent_DamageTag)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional float flinch_mod_small = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(1, this->_internal_flinch_mod_small(), target);
  }

  // optional float flinch_mod_large = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_flinch_mod_large(), target);
  }

  // optional float friendly_fire_damage_reduction_ratio = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_friendly_fire_damage_reduction_ratio(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCSPredictionEvent_DamageTag)
  return target;
}

size_t CCSPredictionEvent_DamageTag::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCSPredictionEvent_DamageTag)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional float flinch_mod_small = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 4;
    }

    // optional float flinch_mod_large = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional float friendly_fire_damage_reduction_ratio = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CCSPredictionEvent_DamageTag::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CCSPredictionEvent_DamageTag::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CCSPredictionEvent_DamageTag::GetClassData() const { return &_class_data_; }


void CCSPredictionEvent_DamageTag::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CCSPredictionEvent_DamageTag*>(&to_msg);
  auto& from = static_cast<const CCSPredictionEvent_DamageTag&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CCSPredictionEvent_DamageTag)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.flinch_mod_small_ = from._impl_.flinch_mod_small_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.flinch_mod_large_ = from._impl_.flinch_mod_large_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.friendly_fire_damage_reduction_ratio_ = from._impl_.friendly_fire_damage_reduction_ratio_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CCSPredictionEvent_DamageTag::CopyFrom(const CCSPredictionEvent_DamageTag& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCSPredictionEvent_DamageTag)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCSPredictionEvent_DamageTag::IsInitialized() const {
  return true;
}

void CCSPredictionEvent_DamageTag::InternalSwap(CCSPredictionEvent_DamageTag* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CCSPredictionEvent_DamageTag, _impl_.friendly_fire_damage_reduction_ratio_)
      + sizeof(CCSPredictionEvent_DamageTag::_impl_.friendly_fire_damage_reduction_ratio_)
      - PROTOBUF_FIELD_OFFSET(CCSPredictionEvent_DamageTag, _impl_.flinch_mod_small_)>(
          reinterpret_cast<char*>(&_impl_.flinch_mod_small_),
          reinterpret_cast<char*>(&other->_impl_.flinch_mod_small_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CCSPredictionEvent_DamageTag::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cs_5fprediction_5fevents_2eproto_getter, &descriptor_table_cs_5fprediction_5fevents_2eproto_once,
      file_level_metadata_cs_5fprediction_5fevents_2eproto[0]);
}

// ===================================================================

class CCSPredictionEvent_AddAimPunch::_Internal {
 public:
  using HasBits = decltype(std::declval<CCSPredictionEvent_AddAimPunch>()._impl_._has_bits_);
  static const ::CMsgQAngle& punch_angle(const CCSPredictionEvent_AddAimPunch* msg);
  static void set_has_punch_angle(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_when_tick(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_when_tick_frac(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::CMsgQAngle&
CCSPredictionEvent_AddAimPunch::_Internal::punch_angle(const CCSPredictionEvent_AddAimPunch* msg) {
  return *msg->_impl_.punch_angle_;
}
void CCSPredictionEvent_AddAimPunch::clear_punch_angle() {
  if (_impl_.punch_angle_ != nullptr) _impl_.punch_angle_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
CCSPredictionEvent_AddAimPunch::CCSPredictionEvent_AddAimPunch(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CCSPredictionEvent_AddAimPunch)
}
CCSPredictionEvent_AddAimPunch::CCSPredictionEvent_AddAimPunch(const CCSPredictionEvent_AddAimPunch& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CCSPredictionEvent_AddAimPunch* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.punch_angle_){nullptr}
    , decltype(_impl_.when_tick_){}
    , decltype(_impl_.when_tick_frac_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_punch_angle()) {
    _this->_impl_.punch_angle_ = new ::CMsgQAngle(*from._impl_.punch_angle_);
  }
  ::memcpy(&_impl_.when_tick_, &from._impl_.when_tick_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.when_tick_frac_) -
    reinterpret_cast<char*>(&_impl_.when_tick_)) + sizeof(_impl_.when_tick_frac_));
  // @@protoc_insertion_point(copy_constructor:CCSPredictionEvent_AddAimPunch)
}

inline void CCSPredictionEvent_AddAimPunch::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.punch_angle_){nullptr}
    , decltype(_impl_.when_tick_){0u}
    , decltype(_impl_.when_tick_frac_){0}
  };
}

CCSPredictionEvent_AddAimPunch::~CCSPredictionEvent_AddAimPunch() {
  // @@protoc_insertion_point(destructor:CCSPredictionEvent_AddAimPunch)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CCSPredictionEvent_AddAimPunch::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.punch_angle_;
}

void CCSPredictionEvent_AddAimPunch::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CCSPredictionEvent_AddAimPunch::Clear() {
// @@protoc_insertion_point(message_clear_start:CCSPredictionEvent_AddAimPunch)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.punch_angle_ != nullptr);
    _impl_.punch_angle_->Clear();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&_impl_.when_tick_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.when_tick_frac_) -
        reinterpret_cast<char*>(&_impl_.when_tick_)) + sizeof(_impl_.when_tick_frac_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CCSPredictionEvent_AddAimPunch::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .CMsgQAngle punch_angle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_punch_angle(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 when_tick = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_when_tick(&has_bits);
          _impl_.when_tick_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float when_tick_frac = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _Internal::set_has_when_tick_frac(&has_bits);
          _impl_.when_tick_frac_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CCSPredictionEvent_AddAimPunch::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCSPredictionEvent_AddAimPunch)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .CMsgQAngle punch_angle = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::punch_angle(this),
        _Internal::punch_angle(this).GetCachedSize(), target, stream);
  }

  // optional uint32 when_tick = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_when_tick(), target);
  }

  // optional float when_tick_frac = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_when_tick_frac(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCSPredictionEvent_AddAimPunch)
  return target;
}

size_t CCSPredictionEvent_AddAimPunch::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCSPredictionEvent_AddAimPunch)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .CMsgQAngle punch_angle = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.punch_angle_);
    }

    // optional uint32 when_tick = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_when_tick());
    }

    // optional float when_tick_frac = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CCSPredictionEvent_AddAimPunch::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CCSPredictionEvent_AddAimPunch::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CCSPredictionEvent_AddAimPunch::GetClassData() const { return &_class_data_; }


void CCSPredictionEvent_AddAimPunch::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CCSPredictionEvent_AddAimPunch*>(&to_msg);
  auto& from = static_cast<const CCSPredictionEvent_AddAimPunch&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CCSPredictionEvent_AddAimPunch)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_punch_angle()->::CMsgQAngle::MergeFrom(
          from._internal_punch_angle());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.when_tick_ = from._impl_.when_tick_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.when_tick_frac_ = from._impl_.when_tick_frac_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CCSPredictionEvent_AddAimPunch::CopyFrom(const CCSPredictionEvent_AddAimPunch& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCSPredictionEvent_AddAimPunch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCSPredictionEvent_AddAimPunch::IsInitialized() const {
  return true;
}

void CCSPredictionEvent_AddAimPunch::InternalSwap(CCSPredictionEvent_AddAimPunch* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CCSPredictionEvent_AddAimPunch, _impl_.when_tick_frac_)
      + sizeof(CCSPredictionEvent_AddAimPunch::_impl_.when_tick_frac_)
      - PROTOBUF_FIELD_OFFSET(CCSPredictionEvent_AddAimPunch, _impl_.punch_angle_)>(
          reinterpret_cast<char*>(&_impl_.punch_angle_),
          reinterpret_cast<char*>(&other->_impl_.punch_angle_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CCSPredictionEvent_AddAimPunch::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cs_5fprediction_5fevents_2eproto_getter, &descriptor_table_cs_5fprediction_5fevents_2eproto_once,
      file_level_metadata_cs_5fprediction_5fevents_2eproto[1]);
}

// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::CCSPredictionEvent_DamageTag*
Arena::CreateMaybeMessage< ::CCSPredictionEvent_DamageTag >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CCSPredictionEvent_DamageTag >(arena);
}
template<> PROTOBUF_NOINLINE ::CCSPredictionEvent_AddAimPunch*
Arena::CreateMaybeMessage< ::CCSPredictionEvent_AddAimPunch >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CCSPredictionEvent_AddAimPunch >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
